
hubmotor_odometry_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7b0  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0810ba48  0810ba48  0001ba48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810bc40  0810bc40  0001bc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0810bc48  0810bc48  0001bc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0810bc50  0810bc50  0001bc50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  10000000  0810bc58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000300  10000078  0810bccc  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  10000378  0810bccc  00020378  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025fef  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036d9  00000000  00000000  00046093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e28  00000000  00000000  00049770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d38  00000000  00000000  0004a598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e9c9  00000000  00000000  0004b2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000164de  00000000  00000000  00089c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018dc85  00000000  00000000  000a0177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022ddfc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005350  00000000  00000000  0022de4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000078 	.word	0x10000078
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810ba30 	.word	0x0810ba30

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	1000007c 	.word	0x1000007c
 81002d4:	0810ba30 	.word	0x0810ba30

081002d8 <strlen>:
 81002d8:	4603      	mov	r3, r0
 81002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002de:	2a00      	cmp	r2, #0
 81002e0:	d1fb      	bne.n	81002da <strlen+0x2>
 81002e2:	1a18      	subs	r0, r3, r0
 81002e4:	3801      	subs	r0, #1
 81002e6:	4770      	bx	lr

081002e8 <__aeabi_drsub>:
 81002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002ec:	e002      	b.n	81002f4 <__adddf3>
 81002ee:	bf00      	nop

081002f0 <__aeabi_dsub>:
 81002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002f4 <__adddf3>:
 81002f4:	b530      	push	{r4, r5, lr}
 81002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002fe:	ea94 0f05 	teq	r4, r5
 8100302:	bf08      	it	eq
 8100304:	ea90 0f02 	teqeq	r0, r2
 8100308:	bf1f      	itttt	ne
 810030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 810030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810031a:	f000 80e2 	beq.w	81004e2 <__adddf3+0x1ee>
 810031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100326:	bfb8      	it	lt
 8100328:	426d      	neglt	r5, r5
 810032a:	dd0c      	ble.n	8100346 <__adddf3+0x52>
 810032c:	442c      	add	r4, r5
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	ea82 0000 	eor.w	r0, r2, r0
 810033a:	ea83 0101 	eor.w	r1, r3, r1
 810033e:	ea80 0202 	eor.w	r2, r0, r2
 8100342:	ea81 0303 	eor.w	r3, r1, r3
 8100346:	2d36      	cmp	r5, #54	; 0x36
 8100348:	bf88      	it	hi
 810034a:	bd30      	pophi	{r4, r5, pc}
 810034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810035c:	d002      	beq.n	8100364 <__adddf3+0x70>
 810035e:	4240      	negs	r0, r0
 8100360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100370:	d002      	beq.n	8100378 <__adddf3+0x84>
 8100372:	4252      	negs	r2, r2
 8100374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100378:	ea94 0f05 	teq	r4, r5
 810037c:	f000 80a7 	beq.w	81004ce <__adddf3+0x1da>
 8100380:	f1a4 0401 	sub.w	r4, r4, #1
 8100384:	f1d5 0e20 	rsbs	lr, r5, #32
 8100388:	db0d      	blt.n	81003a6 <__adddf3+0xb2>
 810038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810038e:	fa22 f205 	lsr.w	r2, r2, r5
 8100392:	1880      	adds	r0, r0, r2
 8100394:	f141 0100 	adc.w	r1, r1, #0
 8100398:	fa03 f20e 	lsl.w	r2, r3, lr
 810039c:	1880      	adds	r0, r0, r2
 810039e:	fa43 f305 	asr.w	r3, r3, r5
 81003a2:	4159      	adcs	r1, r3
 81003a4:	e00e      	b.n	81003c4 <__adddf3+0xd0>
 81003a6:	f1a5 0520 	sub.w	r5, r5, #32
 81003aa:	f10e 0e20 	add.w	lr, lr, #32
 81003ae:	2a01      	cmp	r2, #1
 81003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003b4:	bf28      	it	cs
 81003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003ba:	fa43 f305 	asr.w	r3, r3, r5
 81003be:	18c0      	adds	r0, r0, r3
 81003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003c8:	d507      	bpl.n	81003da <__adddf3+0xe6>
 81003ca:	f04f 0e00 	mov.w	lr, #0
 81003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 81003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003de:	d31b      	bcc.n	8100418 <__adddf3+0x124>
 81003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003e4:	d30c      	bcc.n	8100400 <__adddf3+0x10c>
 81003e6:	0849      	lsrs	r1, r1, #1
 81003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003f0:	f104 0401 	add.w	r4, r4, #1
 81003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003fc:	f080 809a 	bcs.w	8100534 <__adddf3+0x240>
 8100400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8100404:	bf08      	it	eq
 8100406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 810040a:	f150 0000 	adcs.w	r0, r0, #0
 810040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100412:	ea41 0105 	orr.w	r1, r1, r5
 8100416:	bd30      	pop	{r4, r5, pc}
 8100418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810041c:	4140      	adcs	r0, r0
 810041e:	eb41 0101 	adc.w	r1, r1, r1
 8100422:	3c01      	subs	r4, #1
 8100424:	bf28      	it	cs
 8100426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810042a:	d2e9      	bcs.n	8100400 <__adddf3+0x10c>
 810042c:	f091 0f00 	teq	r1, #0
 8100430:	bf04      	itt	eq
 8100432:	4601      	moveq	r1, r0
 8100434:	2000      	moveq	r0, #0
 8100436:	fab1 f381 	clz	r3, r1
 810043a:	bf08      	it	eq
 810043c:	3320      	addeq	r3, #32
 810043e:	f1a3 030b 	sub.w	r3, r3, #11
 8100442:	f1b3 0220 	subs.w	r2, r3, #32
 8100446:	da0c      	bge.n	8100462 <__adddf3+0x16e>
 8100448:	320c      	adds	r2, #12
 810044a:	dd08      	ble.n	810045e <__adddf3+0x16a>
 810044c:	f102 0c14 	add.w	ip, r2, #20
 8100450:	f1c2 020c 	rsb	r2, r2, #12
 8100454:	fa01 f00c 	lsl.w	r0, r1, ip
 8100458:	fa21 f102 	lsr.w	r1, r1, r2
 810045c:	e00c      	b.n	8100478 <__adddf3+0x184>
 810045e:	f102 0214 	add.w	r2, r2, #20
 8100462:	bfd8      	it	le
 8100464:	f1c2 0c20 	rsble	ip, r2, #32
 8100468:	fa01 f102 	lsl.w	r1, r1, r2
 810046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100470:	bfdc      	itt	le
 8100472:	ea41 010c 	orrle.w	r1, r1, ip
 8100476:	4090      	lslle	r0, r2
 8100478:	1ae4      	subs	r4, r4, r3
 810047a:	bfa2      	ittt	ge
 810047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100480:	4329      	orrge	r1, r5
 8100482:	bd30      	popge	{r4, r5, pc}
 8100484:	ea6f 0404 	mvn.w	r4, r4
 8100488:	3c1f      	subs	r4, #31
 810048a:	da1c      	bge.n	81004c6 <__adddf3+0x1d2>
 810048c:	340c      	adds	r4, #12
 810048e:	dc0e      	bgt.n	81004ae <__adddf3+0x1ba>
 8100490:	f104 0414 	add.w	r4, r4, #20
 8100494:	f1c4 0220 	rsb	r2, r4, #32
 8100498:	fa20 f004 	lsr.w	r0, r0, r4
 810049c:	fa01 f302 	lsl.w	r3, r1, r2
 81004a0:	ea40 0003 	orr.w	r0, r0, r3
 81004a4:	fa21 f304 	lsr.w	r3, r1, r4
 81004a8:	ea45 0103 	orr.w	r1, r5, r3
 81004ac:	bd30      	pop	{r4, r5, pc}
 81004ae:	f1c4 040c 	rsb	r4, r4, #12
 81004b2:	f1c4 0220 	rsb	r2, r4, #32
 81004b6:	fa20 f002 	lsr.w	r0, r0, r2
 81004ba:	fa01 f304 	lsl.w	r3, r1, r4
 81004be:	ea40 0003 	orr.w	r0, r0, r3
 81004c2:	4629      	mov	r1, r5
 81004c4:	bd30      	pop	{r4, r5, pc}
 81004c6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ca:	4629      	mov	r1, r5
 81004cc:	bd30      	pop	{r4, r5, pc}
 81004ce:	f094 0f00 	teq	r4, #0
 81004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004d6:	bf06      	itte	eq
 81004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004dc:	3401      	addeq	r4, #1
 81004de:	3d01      	subne	r5, #1
 81004e0:	e74e      	b.n	8100380 <__adddf3+0x8c>
 81004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004e6:	bf18      	it	ne
 81004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004ec:	d029      	beq.n	8100542 <__adddf3+0x24e>
 81004ee:	ea94 0f05 	teq	r4, r5
 81004f2:	bf08      	it	eq
 81004f4:	ea90 0f02 	teqeq	r0, r2
 81004f8:	d005      	beq.n	8100506 <__adddf3+0x212>
 81004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 81004fe:	bf04      	itt	eq
 8100500:	4619      	moveq	r1, r3
 8100502:	4610      	moveq	r0, r2
 8100504:	bd30      	pop	{r4, r5, pc}
 8100506:	ea91 0f03 	teq	r1, r3
 810050a:	bf1e      	ittt	ne
 810050c:	2100      	movne	r1, #0
 810050e:	2000      	movne	r0, #0
 8100510:	bd30      	popne	{r4, r5, pc}
 8100512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100516:	d105      	bne.n	8100524 <__adddf3+0x230>
 8100518:	0040      	lsls	r0, r0, #1
 810051a:	4149      	adcs	r1, r1
 810051c:	bf28      	it	cs
 810051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100522:	bd30      	pop	{r4, r5, pc}
 8100524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100528:	bf3c      	itt	cc
 810052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810052e:	bd30      	popcc	{r4, r5, pc}
 8100530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810053c:	f04f 0000 	mov.w	r0, #0
 8100540:	bd30      	pop	{r4, r5, pc}
 8100542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100546:	bf1a      	itte	ne
 8100548:	4619      	movne	r1, r3
 810054a:	4610      	movne	r0, r2
 810054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100550:	bf1c      	itt	ne
 8100552:	460b      	movne	r3, r1
 8100554:	4602      	movne	r2, r0
 8100556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810055a:	bf06      	itte	eq
 810055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100560:	ea91 0f03 	teqeq	r1, r3
 8100564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100568:	bd30      	pop	{r4, r5, pc}
 810056a:	bf00      	nop

0810056c <__aeabi_ui2d>:
 810056c:	f090 0f00 	teq	r0, #0
 8100570:	bf04      	itt	eq
 8100572:	2100      	moveq	r1, #0
 8100574:	4770      	bxeq	lr
 8100576:	b530      	push	{r4, r5, lr}
 8100578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100580:	f04f 0500 	mov.w	r5, #0
 8100584:	f04f 0100 	mov.w	r1, #0
 8100588:	e750      	b.n	810042c <__adddf3+0x138>
 810058a:	bf00      	nop

0810058c <__aeabi_i2d>:
 810058c:	f090 0f00 	teq	r0, #0
 8100590:	bf04      	itt	eq
 8100592:	2100      	moveq	r1, #0
 8100594:	4770      	bxeq	lr
 8100596:	b530      	push	{r4, r5, lr}
 8100598:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 81005a4:	bf48      	it	mi
 81005a6:	4240      	negmi	r0, r0
 81005a8:	f04f 0100 	mov.w	r1, #0
 81005ac:	e73e      	b.n	810042c <__adddf3+0x138>
 81005ae:	bf00      	nop

081005b0 <__aeabi_f2d>:
 81005b0:	0042      	lsls	r2, r0, #1
 81005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005be:	bf1f      	itttt	ne
 81005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005cc:	4770      	bxne	lr
 81005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005d2:	bf08      	it	eq
 81005d4:	4770      	bxeq	lr
 81005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005da:	bf04      	itt	eq
 81005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005e0:	4770      	bxeq	lr
 81005e2:	b530      	push	{r4, r5, lr}
 81005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005f0:	e71c      	b.n	810042c <__adddf3+0x138>
 81005f2:	bf00      	nop

081005f4 <__aeabi_ul2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f04f 0500 	mov.w	r5, #0
 8100602:	e00a      	b.n	810061a <__aeabi_l2d+0x16>

08100604 <__aeabi_l2d>:
 8100604:	ea50 0201 	orrs.w	r2, r0, r1
 8100608:	bf08      	it	eq
 810060a:	4770      	bxeq	lr
 810060c:	b530      	push	{r4, r5, lr}
 810060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100612:	d502      	bpl.n	810061a <__aeabi_l2d+0x16>
 8100614:	4240      	negs	r0, r0
 8100616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100626:	f43f aed8 	beq.w	81003da <__adddf3+0xe6>
 810062a:	f04f 0203 	mov.w	r2, #3
 810062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100632:	bf18      	it	ne
 8100634:	3203      	addne	r2, #3
 8100636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810063a:	bf18      	it	ne
 810063c:	3203      	addne	r2, #3
 810063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100642:	f1c2 0320 	rsb	r3, r2, #32
 8100646:	fa00 fc03 	lsl.w	ip, r0, r3
 810064a:	fa20 f002 	lsr.w	r0, r0, r2
 810064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100652:	ea40 000e 	orr.w	r0, r0, lr
 8100656:	fa21 f102 	lsr.w	r1, r1, r2
 810065a:	4414      	add	r4, r2
 810065c:	e6bd      	b.n	81003da <__adddf3+0xe6>
 810065e:	bf00      	nop

08100660 <__aeabi_dmul>:
 8100660:	b570      	push	{r4, r5, r6, lr}
 8100662:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100666:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810066a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810066e:	bf1d      	ittte	ne
 8100670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100674:	ea94 0f0c 	teqne	r4, ip
 8100678:	ea95 0f0c 	teqne	r5, ip
 810067c:	f000 f8de 	bleq	810083c <__aeabi_dmul+0x1dc>
 8100680:	442c      	add	r4, r5
 8100682:	ea81 0603 	eor.w	r6, r1, r3
 8100686:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810068a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810068e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100692:	bf18      	it	ne
 8100694:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810069c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81006a0:	d038      	beq.n	8100714 <__aeabi_dmul+0xb4>
 81006a2:	fba0 ce02 	umull	ip, lr, r0, r2
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 81006ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006b6:	f04f 0600 	mov.w	r6, #0
 81006ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006be:	f09c 0f00 	teq	ip, #0
 81006c2:	bf18      	it	ne
 81006c4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006d4:	d204      	bcs.n	81006e0 <__aeabi_dmul+0x80>
 81006d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006da:	416d      	adcs	r5, r5
 81006dc:	eb46 0606 	adc.w	r6, r6, r6
 81006e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006f8:	bf88      	it	hi
 81006fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006fe:	d81e      	bhi.n	810073e <__aeabi_dmul+0xde>
 8100700:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8100704:	bf08      	it	eq
 8100706:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 810070a:	f150 0000 	adcs.w	r0, r0, #0
 810070e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100712:	bd70      	pop	{r4, r5, r6, pc}
 8100714:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100718:	ea46 0101 	orr.w	r1, r6, r1
 810071c:	ea40 0002 	orr.w	r0, r0, r2
 8100720:	ea81 0103 	eor.w	r1, r1, r3
 8100724:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100728:	bfc2      	ittt	gt
 810072a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810072e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100732:	bd70      	popgt	{r4, r5, r6, pc}
 8100734:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100738:	f04f 0e00 	mov.w	lr, #0
 810073c:	3c01      	subs	r4, #1
 810073e:	f300 80ab 	bgt.w	8100898 <__aeabi_dmul+0x238>
 8100742:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100746:	bfde      	ittt	le
 8100748:	2000      	movle	r0, #0
 810074a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810074e:	bd70      	pople	{r4, r5, r6, pc}
 8100750:	f1c4 0400 	rsb	r4, r4, #0
 8100754:	3c20      	subs	r4, #32
 8100756:	da35      	bge.n	81007c4 <__aeabi_dmul+0x164>
 8100758:	340c      	adds	r4, #12
 810075a:	dc1b      	bgt.n	8100794 <__aeabi_dmul+0x134>
 810075c:	f104 0414 	add.w	r4, r4, #20
 8100760:	f1c4 0520 	rsb	r5, r4, #32
 8100764:	fa00 f305 	lsl.w	r3, r0, r5
 8100768:	fa20 f004 	lsr.w	r0, r0, r4
 810076c:	fa01 f205 	lsl.w	r2, r1, r5
 8100770:	ea40 0002 	orr.w	r0, r0, r2
 8100774:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100780:	fa21 f604 	lsr.w	r6, r1, r4
 8100784:	eb42 0106 	adc.w	r1, r2, r6
 8100788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810078c:	bf08      	it	eq
 810078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100792:	bd70      	pop	{r4, r5, r6, pc}
 8100794:	f1c4 040c 	rsb	r4, r4, #12
 8100798:	f1c4 0520 	rsb	r5, r4, #32
 810079c:	fa00 f304 	lsl.w	r3, r0, r4
 81007a0:	fa20 f005 	lsr.w	r0, r0, r5
 81007a4:	fa01 f204 	lsl.w	r2, r1, r4
 81007a8:	ea40 0002 	orr.w	r0, r0, r2
 81007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007b4:	f141 0100 	adc.w	r1, r1, #0
 81007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007bc:	bf08      	it	eq
 81007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007c2:	bd70      	pop	{r4, r5, r6, pc}
 81007c4:	f1c4 0520 	rsb	r5, r4, #32
 81007c8:	fa00 f205 	lsl.w	r2, r0, r5
 81007cc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007d0:	fa20 f304 	lsr.w	r3, r0, r4
 81007d4:	fa01 f205 	lsl.w	r2, r1, r5
 81007d8:	ea43 0302 	orr.w	r3, r3, r2
 81007dc:	fa21 f004 	lsr.w	r0, r1, r4
 81007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007e4:	fa21 f204 	lsr.w	r2, r1, r4
 81007e8:	ea20 0002 	bic.w	r0, r0, r2
 81007ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007f4:	bf08      	it	eq
 81007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007fa:	bd70      	pop	{r4, r5, r6, pc}
 81007fc:	f094 0f00 	teq	r4, #0
 8100800:	d10f      	bne.n	8100822 <__aeabi_dmul+0x1c2>
 8100802:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8100806:	0040      	lsls	r0, r0, #1
 8100808:	eb41 0101 	adc.w	r1, r1, r1
 810080c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100810:	bf08      	it	eq
 8100812:	3c01      	subeq	r4, #1
 8100814:	d0f7      	beq.n	8100806 <__aeabi_dmul+0x1a6>
 8100816:	ea41 0106 	orr.w	r1, r1, r6
 810081a:	f095 0f00 	teq	r5, #0
 810081e:	bf18      	it	ne
 8100820:	4770      	bxne	lr
 8100822:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100826:	0052      	lsls	r2, r2, #1
 8100828:	eb43 0303 	adc.w	r3, r3, r3
 810082c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100830:	bf08      	it	eq
 8100832:	3d01      	subeq	r5, #1
 8100834:	d0f7      	beq.n	8100826 <__aeabi_dmul+0x1c6>
 8100836:	ea43 0306 	orr.w	r3, r3, r6
 810083a:	4770      	bx	lr
 810083c:	ea94 0f0c 	teq	r4, ip
 8100840:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100844:	bf18      	it	ne
 8100846:	ea95 0f0c 	teqne	r5, ip
 810084a:	d00c      	beq.n	8100866 <__aeabi_dmul+0x206>
 810084c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100850:	bf18      	it	ne
 8100852:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100856:	d1d1      	bne.n	81007fc <__aeabi_dmul+0x19c>
 8100858:	ea81 0103 	eor.w	r1, r1, r3
 810085c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100860:	f04f 0000 	mov.w	r0, #0
 8100864:	bd70      	pop	{r4, r5, r6, pc}
 8100866:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810086a:	bf06      	itte	eq
 810086c:	4610      	moveq	r0, r2
 810086e:	4619      	moveq	r1, r3
 8100870:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100874:	d019      	beq.n	81008aa <__aeabi_dmul+0x24a>
 8100876:	ea94 0f0c 	teq	r4, ip
 810087a:	d102      	bne.n	8100882 <__aeabi_dmul+0x222>
 810087c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100880:	d113      	bne.n	81008aa <__aeabi_dmul+0x24a>
 8100882:	ea95 0f0c 	teq	r5, ip
 8100886:	d105      	bne.n	8100894 <__aeabi_dmul+0x234>
 8100888:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810088c:	bf1c      	itt	ne
 810088e:	4610      	movne	r0, r2
 8100890:	4619      	movne	r1, r3
 8100892:	d10a      	bne.n	81008aa <__aeabi_dmul+0x24a>
 8100894:	ea81 0103 	eor.w	r1, r1, r3
 8100898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810089c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 81008a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81008a4:	f04f 0000 	mov.w	r0, #0
 81008a8:	bd70      	pop	{r4, r5, r6, pc}
 81008aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 81008ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008b2:	bd70      	pop	{r4, r5, r6, pc}

081008b4 <__aeabi_ddiv>:
 81008b4:	b570      	push	{r4, r5, r6, lr}
 81008b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008c2:	bf1d      	ittte	ne
 81008c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008c8:	ea94 0f0c 	teqne	r4, ip
 81008cc:	ea95 0f0c 	teqne	r5, ip
 81008d0:	f000 f8a7 	bleq	8100a22 <__aeabi_ddiv+0x16e>
 81008d4:	eba4 0405 	sub.w	r4, r4, r5
 81008d8:	ea81 0e03 	eor.w	lr, r1, r3
 81008dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008e4:	f000 8088 	beq.w	81009f8 <__aeabi_ddiv+0x144>
 81008e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8100900:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8100904:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8100908:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 810090c:	429d      	cmp	r5, r3
 810090e:	bf08      	it	eq
 8100910:	4296      	cmpeq	r6, r2
 8100912:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100916:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810091a:	d202      	bcs.n	8100922 <__aeabi_ddiv+0x6e>
 810091c:	085b      	lsrs	r3, r3, #1
 810091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100922:	1ab6      	subs	r6, r6, r2
 8100924:	eb65 0503 	sbc.w	r5, r5, r3
 8100928:	085b      	lsrs	r3, r3, #1
 810092a:	ea4f 0232 	mov.w	r2, r2, rrx
 810092e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100932:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100936:	ebb6 0e02 	subs.w	lr, r6, r2
 810093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810093e:	bf22      	ittt	cs
 8100940:	1ab6      	subcs	r6, r6, r2
 8100942:	4675      	movcs	r5, lr
 8100944:	ea40 000c 	orrcs.w	r0, r0, ip
 8100948:	085b      	lsrs	r3, r3, #1
 810094a:	ea4f 0232 	mov.w	r2, r2, rrx
 810094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100956:	bf22      	ittt	cs
 8100958:	1ab6      	subcs	r6, r6, r2
 810095a:	4675      	movcs	r5, lr
 810095c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100960:	085b      	lsrs	r3, r3, #1
 8100962:	ea4f 0232 	mov.w	r2, r2, rrx
 8100966:	ebb6 0e02 	subs.w	lr, r6, r2
 810096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810096e:	bf22      	ittt	cs
 8100970:	1ab6      	subcs	r6, r6, r2
 8100972:	4675      	movcs	r5, lr
 8100974:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100978:	085b      	lsrs	r3, r3, #1
 810097a:	ea4f 0232 	mov.w	r2, r2, rrx
 810097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100986:	bf22      	ittt	cs
 8100988:	1ab6      	subcs	r6, r6, r2
 810098a:	4675      	movcs	r5, lr
 810098c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100990:	ea55 0e06 	orrs.w	lr, r5, r6
 8100994:	d018      	beq.n	81009c8 <__aeabi_ddiv+0x114>
 8100996:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810099a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810099e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 81009a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 81009a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 81009aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 81009ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009b2:	d1c0      	bne.n	8100936 <__aeabi_ddiv+0x82>
 81009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009b8:	d10b      	bne.n	81009d2 <__aeabi_ddiv+0x11e>
 81009ba:	ea41 0100 	orr.w	r1, r1, r0
 81009be:	f04f 0000 	mov.w	r0, #0
 81009c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009c6:	e7b6      	b.n	8100936 <__aeabi_ddiv+0x82>
 81009c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009cc:	bf04      	itt	eq
 81009ce:	4301      	orreq	r1, r0
 81009d0:	2000      	moveq	r0, #0
 81009d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009d6:	bf88      	it	hi
 81009d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009dc:	f63f aeaf 	bhi.w	810073e <__aeabi_dmul+0xde>
 81009e0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009e4:	bf04      	itt	eq
 81009e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009ee:	f150 0000 	adcs.w	r0, r0, #0
 81009f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009f6:	bd70      	pop	{r4, r5, r6, pc}
 81009f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100a00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100a04:	bfc2      	ittt	gt
 8100a06:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100a0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100a0e:	bd70      	popgt	{r4, r5, r6, pc}
 8100a10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a14:	f04f 0e00 	mov.w	lr, #0
 8100a18:	3c01      	subs	r4, #1
 8100a1a:	e690      	b.n	810073e <__aeabi_dmul+0xde>
 8100a1c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a20:	e68d      	b.n	810073e <__aeabi_dmul+0xde>
 8100a22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a26:	ea94 0f0c 	teq	r4, ip
 8100a2a:	bf08      	it	eq
 8100a2c:	ea95 0f0c 	teqeq	r5, ip
 8100a30:	f43f af3b 	beq.w	81008aa <__aeabi_dmul+0x24a>
 8100a34:	ea94 0f0c 	teq	r4, ip
 8100a38:	d10a      	bne.n	8100a50 <__aeabi_ddiv+0x19c>
 8100a3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a3e:	f47f af34 	bne.w	81008aa <__aeabi_dmul+0x24a>
 8100a42:	ea95 0f0c 	teq	r5, ip
 8100a46:	f47f af25 	bne.w	8100894 <__aeabi_dmul+0x234>
 8100a4a:	4610      	mov	r0, r2
 8100a4c:	4619      	mov	r1, r3
 8100a4e:	e72c      	b.n	81008aa <__aeabi_dmul+0x24a>
 8100a50:	ea95 0f0c 	teq	r5, ip
 8100a54:	d106      	bne.n	8100a64 <__aeabi_ddiv+0x1b0>
 8100a56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a5a:	f43f aefd 	beq.w	8100858 <__aeabi_dmul+0x1f8>
 8100a5e:	4610      	mov	r0, r2
 8100a60:	4619      	mov	r1, r3
 8100a62:	e722      	b.n	81008aa <__aeabi_dmul+0x24a>
 8100a64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a68:	bf18      	it	ne
 8100a6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a6e:	f47f aec5 	bne.w	81007fc <__aeabi_dmul+0x19c>
 8100a72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a76:	f47f af0d 	bne.w	8100894 <__aeabi_dmul+0x234>
 8100a7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a7e:	f47f aeeb 	bne.w	8100858 <__aeabi_dmul+0x1f8>
 8100a82:	e712      	b.n	81008aa <__aeabi_dmul+0x24a>

08100a84 <__gedf2>:
 8100a84:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8100a88:	e006      	b.n	8100a98 <__cmpdf2+0x4>
 8100a8a:	bf00      	nop

08100a8c <__ledf2>:
 8100a8c:	f04f 0c01 	mov.w	ip, #1
 8100a90:	e002      	b.n	8100a98 <__cmpdf2+0x4>
 8100a92:	bf00      	nop

08100a94 <__cmpdf2>:
 8100a94:	f04f 0c01 	mov.w	ip, #1
 8100a98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100aa8:	bf18      	it	ne
 8100aaa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100aae:	d01b      	beq.n	8100ae8 <__cmpdf2+0x54>
 8100ab0:	b001      	add	sp, #4
 8100ab2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100ab6:	bf0c      	ite	eq
 8100ab8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100abc:	ea91 0f03 	teqne	r1, r3
 8100ac0:	bf02      	ittt	eq
 8100ac2:	ea90 0f02 	teqeq	r0, r2
 8100ac6:	2000      	moveq	r0, #0
 8100ac8:	4770      	bxeq	lr
 8100aca:	f110 0f00 	cmn.w	r0, #0
 8100ace:	ea91 0f03 	teq	r1, r3
 8100ad2:	bf58      	it	pl
 8100ad4:	4299      	cmppl	r1, r3
 8100ad6:	bf08      	it	eq
 8100ad8:	4290      	cmpeq	r0, r2
 8100ada:	bf2c      	ite	cs
 8100adc:	17d8      	asrcs	r0, r3, #31
 8100ade:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100ae2:	f040 0001 	orr.w	r0, r0, #1
 8100ae6:	4770      	bx	lr
 8100ae8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af0:	d102      	bne.n	8100af8 <__cmpdf2+0x64>
 8100af2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100af6:	d107      	bne.n	8100b08 <__cmpdf2+0x74>
 8100af8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b00:	d1d6      	bne.n	8100ab0 <__cmpdf2+0x1c>
 8100b02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100b06:	d0d3      	beq.n	8100ab0 <__cmpdf2+0x1c>
 8100b08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100b0c:	4770      	bx	lr
 8100b0e:	bf00      	nop

08100b10 <__aeabi_cdrcmple>:
 8100b10:	4684      	mov	ip, r0
 8100b12:	4610      	mov	r0, r2
 8100b14:	4662      	mov	r2, ip
 8100b16:	468c      	mov	ip, r1
 8100b18:	4619      	mov	r1, r3
 8100b1a:	4663      	mov	r3, ip
 8100b1c:	e000      	b.n	8100b20 <__aeabi_cdcmpeq>
 8100b1e:	bf00      	nop

08100b20 <__aeabi_cdcmpeq>:
 8100b20:	b501      	push	{r0, lr}
 8100b22:	f7ff ffb7 	bl	8100a94 <__cmpdf2>
 8100b26:	2800      	cmp	r0, #0
 8100b28:	bf48      	it	mi
 8100b2a:	f110 0f00 	cmnmi.w	r0, #0
 8100b2e:	bd01      	pop	{r0, pc}

08100b30 <__aeabi_dcmpeq>:
 8100b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b34:	f7ff fff4 	bl	8100b20 <__aeabi_cdcmpeq>
 8100b38:	bf0c      	ite	eq
 8100b3a:	2001      	moveq	r0, #1
 8100b3c:	2000      	movne	r0, #0
 8100b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b42:	bf00      	nop

08100b44 <__aeabi_dcmplt>:
 8100b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b48:	f7ff ffea 	bl	8100b20 <__aeabi_cdcmpeq>
 8100b4c:	bf34      	ite	cc
 8100b4e:	2001      	movcc	r0, #1
 8100b50:	2000      	movcs	r0, #0
 8100b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b56:	bf00      	nop

08100b58 <__aeabi_dcmple>:
 8100b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b5c:	f7ff ffe0 	bl	8100b20 <__aeabi_cdcmpeq>
 8100b60:	bf94      	ite	ls
 8100b62:	2001      	movls	r0, #1
 8100b64:	2000      	movhi	r0, #0
 8100b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b6a:	bf00      	nop

08100b6c <__aeabi_dcmpge>:
 8100b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b70:	f7ff ffce 	bl	8100b10 <__aeabi_cdrcmple>
 8100b74:	bf94      	ite	ls
 8100b76:	2001      	movls	r0, #1
 8100b78:	2000      	movhi	r0, #0
 8100b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b7e:	bf00      	nop

08100b80 <__aeabi_dcmpgt>:
 8100b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b84:	f7ff ffc4 	bl	8100b10 <__aeabi_cdrcmple>
 8100b88:	bf34      	ite	cc
 8100b8a:	2001      	movcc	r0, #1
 8100b8c:	2000      	movcs	r0, #0
 8100b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b92:	bf00      	nop

08100b94 <__aeabi_d2uiz>:
 8100b94:	004a      	lsls	r2, r1, #1
 8100b96:	d211      	bcs.n	8100bbc <__aeabi_d2uiz+0x28>
 8100b98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100b9c:	d211      	bcs.n	8100bc2 <__aeabi_d2uiz+0x2e>
 8100b9e:	d50d      	bpl.n	8100bbc <__aeabi_d2uiz+0x28>
 8100ba0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100ba4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ba8:	d40e      	bmi.n	8100bc8 <__aeabi_d2uiz+0x34>
 8100baa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100bb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8100bba:	4770      	bx	lr
 8100bbc:	f04f 0000 	mov.w	r0, #0
 8100bc0:	4770      	bx	lr
 8100bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100bc6:	d102      	bne.n	8100bce <__aeabi_d2uiz+0x3a>
 8100bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100bcc:	4770      	bx	lr
 8100bce:	f04f 0000 	mov.w	r0, #0
 8100bd2:	4770      	bx	lr

08100bd4 <__aeabi_uldivmod>:
 8100bd4:	b953      	cbnz	r3, 8100bec <__aeabi_uldivmod+0x18>
 8100bd6:	b94a      	cbnz	r2, 8100bec <__aeabi_uldivmod+0x18>
 8100bd8:	2900      	cmp	r1, #0
 8100bda:	bf08      	it	eq
 8100bdc:	2800      	cmpeq	r0, #0
 8100bde:	bf1c      	itt	ne
 8100be0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8100be4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100be8:	f000 b974 	b.w	8100ed4 <__aeabi_idiv0>
 8100bec:	f1ad 0c08 	sub.w	ip, sp, #8
 8100bf0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100bf4:	f000 f806 	bl	8100c04 <__udivmoddi4>
 8100bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100c00:	b004      	add	sp, #16
 8100c02:	4770      	bx	lr

08100c04 <__udivmoddi4>:
 8100c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100c08:	9d08      	ldr	r5, [sp, #32]
 8100c0a:	4604      	mov	r4, r0
 8100c0c:	468e      	mov	lr, r1
 8100c0e:	2b00      	cmp	r3, #0
 8100c10:	d14d      	bne.n	8100cae <__udivmoddi4+0xaa>
 8100c12:	428a      	cmp	r2, r1
 8100c14:	4694      	mov	ip, r2
 8100c16:	d969      	bls.n	8100cec <__udivmoddi4+0xe8>
 8100c18:	fab2 f282 	clz	r2, r2
 8100c1c:	b152      	cbz	r2, 8100c34 <__udivmoddi4+0x30>
 8100c1e:	fa01 f302 	lsl.w	r3, r1, r2
 8100c22:	f1c2 0120 	rsb	r1, r2, #32
 8100c26:	fa20 f101 	lsr.w	r1, r0, r1
 8100c2a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100c2e:	ea41 0e03 	orr.w	lr, r1, r3
 8100c32:	4094      	lsls	r4, r2
 8100c34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100c38:	0c21      	lsrs	r1, r4, #16
 8100c3a:	fbbe f6f8 	udiv	r6, lr, r8
 8100c3e:	fa1f f78c 	uxth.w	r7, ip
 8100c42:	fb08 e316 	mls	r3, r8, r6, lr
 8100c46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100c4a:	fb06 f107 	mul.w	r1, r6, r7
 8100c4e:	4299      	cmp	r1, r3
 8100c50:	d90a      	bls.n	8100c68 <__udivmoddi4+0x64>
 8100c52:	eb1c 0303 	adds.w	r3, ip, r3
 8100c56:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8100c5a:	f080 811f 	bcs.w	8100e9c <__udivmoddi4+0x298>
 8100c5e:	4299      	cmp	r1, r3
 8100c60:	f240 811c 	bls.w	8100e9c <__udivmoddi4+0x298>
 8100c64:	3e02      	subs	r6, #2
 8100c66:	4463      	add	r3, ip
 8100c68:	1a5b      	subs	r3, r3, r1
 8100c6a:	b2a4      	uxth	r4, r4
 8100c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100c70:	fb08 3310 	mls	r3, r8, r0, r3
 8100c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100c78:	fb00 f707 	mul.w	r7, r0, r7
 8100c7c:	42a7      	cmp	r7, r4
 8100c7e:	d90a      	bls.n	8100c96 <__udivmoddi4+0x92>
 8100c80:	eb1c 0404 	adds.w	r4, ip, r4
 8100c84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100c88:	f080 810a 	bcs.w	8100ea0 <__udivmoddi4+0x29c>
 8100c8c:	42a7      	cmp	r7, r4
 8100c8e:	f240 8107 	bls.w	8100ea0 <__udivmoddi4+0x29c>
 8100c92:	4464      	add	r4, ip
 8100c94:	3802      	subs	r0, #2
 8100c96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100c9a:	1be4      	subs	r4, r4, r7
 8100c9c:	2600      	movs	r6, #0
 8100c9e:	b11d      	cbz	r5, 8100ca8 <__udivmoddi4+0xa4>
 8100ca0:	40d4      	lsrs	r4, r2
 8100ca2:	2300      	movs	r3, #0
 8100ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ca8:	4631      	mov	r1, r6
 8100caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100cae:	428b      	cmp	r3, r1
 8100cb0:	d909      	bls.n	8100cc6 <__udivmoddi4+0xc2>
 8100cb2:	2d00      	cmp	r5, #0
 8100cb4:	f000 80ef 	beq.w	8100e96 <__udivmoddi4+0x292>
 8100cb8:	2600      	movs	r6, #0
 8100cba:	e9c5 0100 	strd	r0, r1, [r5]
 8100cbe:	4630      	mov	r0, r6
 8100cc0:	4631      	mov	r1, r6
 8100cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100cc6:	fab3 f683 	clz	r6, r3
 8100cca:	2e00      	cmp	r6, #0
 8100ccc:	d14a      	bne.n	8100d64 <__udivmoddi4+0x160>
 8100cce:	428b      	cmp	r3, r1
 8100cd0:	d302      	bcc.n	8100cd8 <__udivmoddi4+0xd4>
 8100cd2:	4282      	cmp	r2, r0
 8100cd4:	f200 80f9 	bhi.w	8100eca <__udivmoddi4+0x2c6>
 8100cd8:	1a84      	subs	r4, r0, r2
 8100cda:	eb61 0303 	sbc.w	r3, r1, r3
 8100cde:	2001      	movs	r0, #1
 8100ce0:	469e      	mov	lr, r3
 8100ce2:	2d00      	cmp	r5, #0
 8100ce4:	d0e0      	beq.n	8100ca8 <__udivmoddi4+0xa4>
 8100ce6:	e9c5 4e00 	strd	r4, lr, [r5]
 8100cea:	e7dd      	b.n	8100ca8 <__udivmoddi4+0xa4>
 8100cec:	b902      	cbnz	r2, 8100cf0 <__udivmoddi4+0xec>
 8100cee:	deff      	udf	#255	; 0xff
 8100cf0:	fab2 f282 	clz	r2, r2
 8100cf4:	2a00      	cmp	r2, #0
 8100cf6:	f040 8092 	bne.w	8100e1e <__udivmoddi4+0x21a>
 8100cfa:	eba1 010c 	sub.w	r1, r1, ip
 8100cfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100d02:	fa1f fe8c 	uxth.w	lr, ip
 8100d06:	2601      	movs	r6, #1
 8100d08:	0c20      	lsrs	r0, r4, #16
 8100d0a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100d0e:	fb07 1113 	mls	r1, r7, r3, r1
 8100d12:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100d16:	fb0e f003 	mul.w	r0, lr, r3
 8100d1a:	4288      	cmp	r0, r1
 8100d1c:	d908      	bls.n	8100d30 <__udivmoddi4+0x12c>
 8100d1e:	eb1c 0101 	adds.w	r1, ip, r1
 8100d22:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8100d26:	d202      	bcs.n	8100d2e <__udivmoddi4+0x12a>
 8100d28:	4288      	cmp	r0, r1
 8100d2a:	f200 80cb 	bhi.w	8100ec4 <__udivmoddi4+0x2c0>
 8100d2e:	4643      	mov	r3, r8
 8100d30:	1a09      	subs	r1, r1, r0
 8100d32:	b2a4      	uxth	r4, r4
 8100d34:	fbb1 f0f7 	udiv	r0, r1, r7
 8100d38:	fb07 1110 	mls	r1, r7, r0, r1
 8100d3c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100d40:	fb0e fe00 	mul.w	lr, lr, r0
 8100d44:	45a6      	cmp	lr, r4
 8100d46:	d908      	bls.n	8100d5a <__udivmoddi4+0x156>
 8100d48:	eb1c 0404 	adds.w	r4, ip, r4
 8100d4c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8100d50:	d202      	bcs.n	8100d58 <__udivmoddi4+0x154>
 8100d52:	45a6      	cmp	lr, r4
 8100d54:	f200 80bb 	bhi.w	8100ece <__udivmoddi4+0x2ca>
 8100d58:	4608      	mov	r0, r1
 8100d5a:	eba4 040e 	sub.w	r4, r4, lr
 8100d5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100d62:	e79c      	b.n	8100c9e <__udivmoddi4+0x9a>
 8100d64:	f1c6 0720 	rsb	r7, r6, #32
 8100d68:	40b3      	lsls	r3, r6
 8100d6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100d6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100d72:	fa20 f407 	lsr.w	r4, r0, r7
 8100d76:	fa01 f306 	lsl.w	r3, r1, r6
 8100d7a:	431c      	orrs	r4, r3
 8100d7c:	40f9      	lsrs	r1, r7
 8100d7e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100d82:	fa00 f306 	lsl.w	r3, r0, r6
 8100d86:	fbb1 f8f9 	udiv	r8, r1, r9
 8100d8a:	0c20      	lsrs	r0, r4, #16
 8100d8c:	fa1f fe8c 	uxth.w	lr, ip
 8100d90:	fb09 1118 	mls	r1, r9, r8, r1
 8100d94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100d98:	fb08 f00e 	mul.w	r0, r8, lr
 8100d9c:	4288      	cmp	r0, r1
 8100d9e:	fa02 f206 	lsl.w	r2, r2, r6
 8100da2:	d90b      	bls.n	8100dbc <__udivmoddi4+0x1b8>
 8100da4:	eb1c 0101 	adds.w	r1, ip, r1
 8100da8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8100dac:	f080 8088 	bcs.w	8100ec0 <__udivmoddi4+0x2bc>
 8100db0:	4288      	cmp	r0, r1
 8100db2:	f240 8085 	bls.w	8100ec0 <__udivmoddi4+0x2bc>
 8100db6:	f1a8 0802 	sub.w	r8, r8, #2
 8100dba:	4461      	add	r1, ip
 8100dbc:	1a09      	subs	r1, r1, r0
 8100dbe:	b2a4      	uxth	r4, r4
 8100dc0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100dc4:	fb09 1110 	mls	r1, r9, r0, r1
 8100dc8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100dcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8100dd0:	458e      	cmp	lr, r1
 8100dd2:	d908      	bls.n	8100de6 <__udivmoddi4+0x1e2>
 8100dd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100dd8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8100ddc:	d26c      	bcs.n	8100eb8 <__udivmoddi4+0x2b4>
 8100dde:	458e      	cmp	lr, r1
 8100de0:	d96a      	bls.n	8100eb8 <__udivmoddi4+0x2b4>
 8100de2:	3802      	subs	r0, #2
 8100de4:	4461      	add	r1, ip
 8100de6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8100dea:	fba0 9402 	umull	r9, r4, r0, r2
 8100dee:	eba1 010e 	sub.w	r1, r1, lr
 8100df2:	42a1      	cmp	r1, r4
 8100df4:	46c8      	mov	r8, r9
 8100df6:	46a6      	mov	lr, r4
 8100df8:	d356      	bcc.n	8100ea8 <__udivmoddi4+0x2a4>
 8100dfa:	d053      	beq.n	8100ea4 <__udivmoddi4+0x2a0>
 8100dfc:	b15d      	cbz	r5, 8100e16 <__udivmoddi4+0x212>
 8100dfe:	ebb3 0208 	subs.w	r2, r3, r8
 8100e02:	eb61 010e 	sbc.w	r1, r1, lr
 8100e06:	fa01 f707 	lsl.w	r7, r1, r7
 8100e0a:	fa22 f306 	lsr.w	r3, r2, r6
 8100e0e:	40f1      	lsrs	r1, r6
 8100e10:	431f      	orrs	r7, r3
 8100e12:	e9c5 7100 	strd	r7, r1, [r5]
 8100e16:	2600      	movs	r6, #0
 8100e18:	4631      	mov	r1, r6
 8100e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100e1e:	f1c2 0320 	rsb	r3, r2, #32
 8100e22:	40d8      	lsrs	r0, r3
 8100e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e28:	fa21 f303 	lsr.w	r3, r1, r3
 8100e2c:	4091      	lsls	r1, r2
 8100e2e:	4301      	orrs	r1, r0
 8100e30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e34:	fa1f fe8c 	uxth.w	lr, ip
 8100e38:	fbb3 f0f7 	udiv	r0, r3, r7
 8100e3c:	fb07 3610 	mls	r6, r7, r0, r3
 8100e40:	0c0b      	lsrs	r3, r1, #16
 8100e42:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8100e46:	fb00 f60e 	mul.w	r6, r0, lr
 8100e4a:	429e      	cmp	r6, r3
 8100e4c:	fa04 f402 	lsl.w	r4, r4, r2
 8100e50:	d908      	bls.n	8100e64 <__udivmoddi4+0x260>
 8100e52:	eb1c 0303 	adds.w	r3, ip, r3
 8100e56:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8100e5a:	d22f      	bcs.n	8100ebc <__udivmoddi4+0x2b8>
 8100e5c:	429e      	cmp	r6, r3
 8100e5e:	d92d      	bls.n	8100ebc <__udivmoddi4+0x2b8>
 8100e60:	3802      	subs	r0, #2
 8100e62:	4463      	add	r3, ip
 8100e64:	1b9b      	subs	r3, r3, r6
 8100e66:	b289      	uxth	r1, r1
 8100e68:	fbb3 f6f7 	udiv	r6, r3, r7
 8100e6c:	fb07 3316 	mls	r3, r7, r6, r3
 8100e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100e74:	fb06 f30e 	mul.w	r3, r6, lr
 8100e78:	428b      	cmp	r3, r1
 8100e7a:	d908      	bls.n	8100e8e <__udivmoddi4+0x28a>
 8100e7c:	eb1c 0101 	adds.w	r1, ip, r1
 8100e80:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8100e84:	d216      	bcs.n	8100eb4 <__udivmoddi4+0x2b0>
 8100e86:	428b      	cmp	r3, r1
 8100e88:	d914      	bls.n	8100eb4 <__udivmoddi4+0x2b0>
 8100e8a:	3e02      	subs	r6, #2
 8100e8c:	4461      	add	r1, ip
 8100e8e:	1ac9      	subs	r1, r1, r3
 8100e90:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100e94:	e738      	b.n	8100d08 <__udivmoddi4+0x104>
 8100e96:	462e      	mov	r6, r5
 8100e98:	4628      	mov	r0, r5
 8100e9a:	e705      	b.n	8100ca8 <__udivmoddi4+0xa4>
 8100e9c:	4606      	mov	r6, r0
 8100e9e:	e6e3      	b.n	8100c68 <__udivmoddi4+0x64>
 8100ea0:	4618      	mov	r0, r3
 8100ea2:	e6f8      	b.n	8100c96 <__udivmoddi4+0x92>
 8100ea4:	454b      	cmp	r3, r9
 8100ea6:	d2a9      	bcs.n	8100dfc <__udivmoddi4+0x1f8>
 8100ea8:	ebb9 0802 	subs.w	r8, r9, r2
 8100eac:	eb64 0e0c 	sbc.w	lr, r4, ip
 8100eb0:	3801      	subs	r0, #1
 8100eb2:	e7a3      	b.n	8100dfc <__udivmoddi4+0x1f8>
 8100eb4:	4646      	mov	r6, r8
 8100eb6:	e7ea      	b.n	8100e8e <__udivmoddi4+0x28a>
 8100eb8:	4620      	mov	r0, r4
 8100eba:	e794      	b.n	8100de6 <__udivmoddi4+0x1e2>
 8100ebc:	4640      	mov	r0, r8
 8100ebe:	e7d1      	b.n	8100e64 <__udivmoddi4+0x260>
 8100ec0:	46d0      	mov	r8, sl
 8100ec2:	e77b      	b.n	8100dbc <__udivmoddi4+0x1b8>
 8100ec4:	3b02      	subs	r3, #2
 8100ec6:	4461      	add	r1, ip
 8100ec8:	e732      	b.n	8100d30 <__udivmoddi4+0x12c>
 8100eca:	4630      	mov	r0, r6
 8100ecc:	e709      	b.n	8100ce2 <__udivmoddi4+0xde>
 8100ece:	4464      	add	r4, ip
 8100ed0:	3802      	subs	r0, #2
 8100ed2:	e742      	b.n	8100d5a <__udivmoddi4+0x156>

08100ed4 <__aeabi_idiv0>:
 8100ed4:	4770      	bx	lr
 8100ed6:	bf00      	nop

08100ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100ed8:	b480      	push	{r7}
 8100eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100edc:	4b09      	ldr	r3, [pc, #36]	; (8100f04 <SystemInit+0x2c>)
 8100ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100ee2:	4a08      	ldr	r2, [pc, #32]	; (8100f04 <SystemInit+0x2c>)
 8100ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100eec:	4b05      	ldr	r3, [pc, #20]	; (8100f04 <SystemInit+0x2c>)
 8100eee:	691b      	ldr	r3, [r3, #16]
 8100ef0:	4a04      	ldr	r2, [pc, #16]	; (8100f04 <SystemInit+0x2c>)
 8100ef2:	f043 0310 	orr.w	r3, r3, #16
 8100ef6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100ef8:	bf00      	nop
 8100efa:	46bd      	mov	sp, r7
 8100efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f00:	4770      	bx	lr
 8100f02:	bf00      	nop
 8100f04:	e000ed00 	.word	0xe000ed00

08100f08 <UserXicroBegin>:
extern "C" void UserXicroSpin();
extern "C" float UserXicroGetLinVel();
extern "C" float UserXicroGetAngVel();

void UserXicroBegin(UART_HandleTypeDef* huart)
{
 8100f08:	b580      	push	{r7, lr}
 8100f0a:	b082      	sub	sp, #8
 8100f0c:	af00      	add	r7, sp, #0
 8100f0e:	6078      	str	r0, [r7, #4]
	xicro.begin(huart);
 8100f10:	6879      	ldr	r1, [r7, #4]
 8100f12:	4803      	ldr	r0, [pc, #12]	; (8100f20 <UserXicroBegin+0x18>)
 8100f14:	f000 f9c2 	bl	810129c <_ZN5Xicro5beginEP20__UART_HandleTypeDef>
}
 8100f18:	bf00      	nop
 8100f1a:	3708      	adds	r7, #8
 8100f1c:	46bd      	mov	sp, r7
 8100f1e:	bd80      	pop	{r7, pc}
 8100f20:	10000098 	.word	0x10000098

08100f24 <UserXicroPublishNAV>:

void UserXicroPublishNAV(float pose__of__position__of__x ,float pose__of__position__of__y ,float pose__of__position__of__z ,float pose__of__orientation__of__x ,float pose__of__orientation__of__y ,float pose__of__orientation__of__z ,float pose__of__orientation__of__w ,float twist__of__linear__of__x ,float twist__of__linear__of__y ,float twist__of__linear__of__z ,float twist__of__angular__of__x ,float twist__of__angular__of__y ,float twist__of__angular__of__z)
{
 8100f24:	b580      	push	{r7, lr}
 8100f26:	b08e      	sub	sp, #56	; 0x38
 8100f28:	af00      	add	r7, sp, #0
 8100f2a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
 8100f2e:	edc7 0a0c 	vstr	s1, [r7, #48]	; 0x30
 8100f32:	ed87 1a0b 	vstr	s2, [r7, #44]	; 0x2c
 8100f36:	edc7 1a0a 	vstr	s3, [r7, #40]	; 0x28
 8100f3a:	ed87 2a09 	vstr	s4, [r7, #36]	; 0x24
 8100f3e:	edc7 2a08 	vstr	s5, [r7, #32]
 8100f42:	ed87 3a07 	vstr	s6, [r7, #28]
 8100f46:	edc7 3a06 	vstr	s7, [r7, #24]
 8100f4a:	ed87 4a05 	vstr	s8, [r7, #20]
 8100f4e:	edc7 4a04 	vstr	s9, [r7, #16]
 8100f52:	ed87 5a03 	vstr	s10, [r7, #12]
 8100f56:	edc7 5a02 	vstr	s11, [r7, #8]
 8100f5a:	ed87 6a01 	vstr	s12, [r7, #4]
	xicro.publish_nav_stm32(pose__of__position__of__x, pose__of__position__of__y, pose__of__position__of__z, pose__of__orientation__of__x, pose__of__orientation__of__y, pose__of__orientation__of__z, pose__of__orientation__of__w, twist__of__linear__of__x, twist__of__linear__of__y, twist__of__linear__of__z, twist__of__angular__of__x, twist__of__angular__of__y, twist__of__angular__of__z);
 8100f5e:	ed97 6a01 	vldr	s12, [r7, #4]
 8100f62:	edd7 5a02 	vldr	s11, [r7, #8]
 8100f66:	ed97 5a03 	vldr	s10, [r7, #12]
 8100f6a:	edd7 4a04 	vldr	s9, [r7, #16]
 8100f6e:	ed97 4a05 	vldr	s8, [r7, #20]
 8100f72:	edd7 3a06 	vldr	s7, [r7, #24]
 8100f76:	ed97 3a07 	vldr	s6, [r7, #28]
 8100f7a:	edd7 2a08 	vldr	s5, [r7, #32]
 8100f7e:	ed97 2a09 	vldr	s4, [r7, #36]	; 0x24
 8100f82:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 8100f86:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8100f8a:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8100f8e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8100f92:	4803      	ldr	r0, [pc, #12]	; (8100fa0 <UserXicroPublishNAV+0x7c>)
 8100f94:	f000 fb10 	bl	81015b8 <_ZN5Xicro17publish_nav_stm32Efffffffffffff>
}
 8100f98:	bf00      	nop
 8100f9a:	3738      	adds	r7, #56	; 0x38
 8100f9c:	46bd      	mov	sp, r7
 8100f9e:	bd80      	pop	{r7, pc}
 8100fa0:	10000098 	.word	0x10000098

08100fa4 <UserXicroPublishIMU>:

void UserXicroPublishIMU(float orientation__of__x ,float orientation__of__y ,float orientation__of__z ,float orientation__of__w ,float angular_velocity__of__x ,float angular_velocity__of__y ,float angular_velocity__of__z ,float linear_acceleration__of__x ,float linear_acceleration__of__y ,float linear_acceleration__of__z )
{
 8100fa4:	b580      	push	{r7, lr}
 8100fa6:	b08a      	sub	sp, #40	; 0x28
 8100fa8:	af00      	add	r7, sp, #0
 8100faa:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8100fae:	edc7 0a08 	vstr	s1, [r7, #32]
 8100fb2:	ed87 1a07 	vstr	s2, [r7, #28]
 8100fb6:	edc7 1a06 	vstr	s3, [r7, #24]
 8100fba:	ed87 2a05 	vstr	s4, [r7, #20]
 8100fbe:	edc7 2a04 	vstr	s5, [r7, #16]
 8100fc2:	ed87 3a03 	vstr	s6, [r7, #12]
 8100fc6:	edc7 3a02 	vstr	s7, [r7, #8]
 8100fca:	ed87 4a01 	vstr	s8, [r7, #4]
 8100fce:	edc7 4a00 	vstr	s9, [r7]
	xicro.publish_imu_stm32(orientation__of__x, orientation__of__y, orientation__of__z, orientation__of__w, angular_velocity__of__x, angular_velocity__of__y, angular_velocity__of__z, linear_acceleration__of__x, linear_acceleration__of__y, linear_acceleration__of__z);
 8100fd2:	edd7 4a00 	vldr	s9, [r7]
 8100fd6:	ed97 4a01 	vldr	s8, [r7, #4]
 8100fda:	edd7 3a02 	vldr	s7, [r7, #8]
 8100fde:	ed97 3a03 	vldr	s6, [r7, #12]
 8100fe2:	edd7 2a04 	vldr	s5, [r7, #16]
 8100fe6:	ed97 2a05 	vldr	s4, [r7, #20]
 8100fea:	edd7 1a06 	vldr	s3, [r7, #24]
 8100fee:	ed97 1a07 	vldr	s2, [r7, #28]
 8100ff2:	edd7 0a08 	vldr	s1, [r7, #32]
 8100ff6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8100ffa:	4803      	ldr	r0, [pc, #12]	; (8101008 <UserXicroPublishIMU+0x64>)
 8100ffc:	f000 fb91 	bl	8101722 <_ZN5Xicro17publish_imu_stm32Effffffffff>
}
 8101000:	bf00      	nop
 8101002:	3728      	adds	r7, #40	; 0x28
 8101004:	46bd      	mov	sp, r7
 8101006:	bd80      	pop	{r7, pc}
 8101008:	10000098 	.word	0x10000098

0810100c <UserXicroSpin>:

void UserXicroSpin()
{
 810100c:	b580      	push	{r7, lr}
 810100e:	af00      	add	r7, sp, #0
	xicro.Spin_node();
 8101010:	4802      	ldr	r0, [pc, #8]	; (810101c <UserXicroSpin+0x10>)
 8101012:	f000 fc19 	bl	8101848 <_ZN5Xicro9Spin_nodeEv>
}
 8101016:	bf00      	nop
 8101018:	bd80      	pop	{r7, pc}
 810101a:	bf00      	nop
 810101c:	10000098 	.word	0x10000098

08101020 <UserXicroGetLinVel>:

float UserXicroGetLinVel()
{
 8101020:	b480      	push	{r7}
 8101022:	af00      	add	r7, sp, #0
	return xicro.Sub_cmd_vel_stm32.linear;
 8101024:	4b04      	ldr	r3, [pc, #16]	; (8101038 <UserXicroGetLinVel+0x18>)
 8101026:	681b      	ldr	r3, [r3, #0]
 8101028:	ee07 3a90 	vmov	s15, r3
}
 810102c:	eeb0 0a67 	vmov.f32	s0, s15
 8101030:	46bd      	mov	sp, r7
 8101032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101036:	4770      	bx	lr
 8101038:	10000098 	.word	0x10000098

0810103c <UserXicroGetAngVel>:

float UserXicroGetAngVel()
{
 810103c:	b480      	push	{r7}
 810103e:	af00      	add	r7, sp, #0
	return xicro.Sub_cmd_vel_stm32.angular;
 8101040:	4b04      	ldr	r3, [pc, #16]	; (8101054 <UserXicroGetAngVel+0x18>)
 8101042:	685b      	ldr	r3, [r3, #4]
 8101044:	ee07 3a90 	vmov	s15, r3
}
 8101048:	eeb0 0a67 	vmov.f32	s0, s15
 810104c:	46bd      	mov	sp, r7
 810104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101052:	4770      	bx	lr
 8101054:	10000098 	.word	0x10000098

08101058 <_ZN5XicroD1Ev>:
#define XICRO_SUB_N_PUB_ID_3_H
#include "stm32h7xx_hal.h"
#include "string"
#include "string.h"
#include "math.h"
class Xicro{
 8101058:	b580      	push	{r7, lr}
 810105a:	b082      	sub	sp, #8
 810105c:	af00      	add	r7, sp, #0
 810105e:	6078      	str	r0, [r7, #4]
 8101060:	687b      	ldr	r3, [r7, #4]
 8101062:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8101066:	4618      	mov	r0, r3
 8101068:	f00a f905 	bl	810b276 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 810106c:	687b      	ldr	r3, [r7, #4]
 810106e:	4618      	mov	r0, r3
 8101070:	3708      	adds	r7, #8
 8101072:	46bd      	mov	sp, r7
 8101074:	bd80      	pop	{r7, pc}
	...

08101078 <_Z41__static_initialization_and_destruction_0ii>:
 8101078:	b580      	push	{r7, lr}
 810107a:	b082      	sub	sp, #8
 810107c:	af00      	add	r7, sp, #0
 810107e:	6078      	str	r0, [r7, #4]
 8101080:	6039      	str	r1, [r7, #0]
 8101082:	687b      	ldr	r3, [r7, #4]
 8101084:	2b01      	cmp	r3, #1
 8101086:	d107      	bne.n	8101098 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8101088:	683b      	ldr	r3, [r7, #0]
 810108a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810108e:	4293      	cmp	r3, r2
 8101090:	d102      	bne.n	8101098 <_Z41__static_initialization_and_destruction_0ii+0x20>
Xicro xicro;
 8101092:	4809      	ldr	r0, [pc, #36]	; (81010b8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8101094:	f000 f848 	bl	8101128 <_ZN5XicroC1Ev>
 8101098:	687b      	ldr	r3, [r7, #4]
 810109a:	2b00      	cmp	r3, #0
 810109c:	d107      	bne.n	81010ae <_Z41__static_initialization_and_destruction_0ii+0x36>
 810109e:	683b      	ldr	r3, [r7, #0]
 81010a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81010a4:	4293      	cmp	r3, r2
 81010a6:	d102      	bne.n	81010ae <_Z41__static_initialization_and_destruction_0ii+0x36>
 81010a8:	4803      	ldr	r0, [pc, #12]	; (81010b8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 81010aa:	f7ff ffd5 	bl	8101058 <_ZN5XicroD1Ev>
}
 81010ae:	bf00      	nop
 81010b0:	3708      	adds	r7, #8
 81010b2:	46bd      	mov	sp, r7
 81010b4:	bd80      	pop	{r7, pc}
 81010b6:	bf00      	nop
 81010b8:	10000098 	.word	0x10000098

081010bc <_GLOBAL__sub_I_xicro>:
 81010bc:	b580      	push	{r7, lr}
 81010be:	af00      	add	r7, sp, #0
 81010c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 81010c4:	2001      	movs	r0, #1
 81010c6:	f7ff ffd7 	bl	8101078 <_Z41__static_initialization_and_destruction_0ii>
 81010ca:	bd80      	pop	{r7, pc}

081010cc <_GLOBAL__sub_D_xicro>:
 81010cc:	b580      	push	{r7, lr}
 81010ce:	af00      	add	r7, sp, #0
 81010d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 81010d4:	2000      	movs	r0, #0
 81010d6:	f7ff ffcf 	bl	8101078 <_Z41__static_initialization_and_destruction_0ii>
 81010da:	bd80      	pop	{r7, pc}

081010dc <_ZN5XicroUt_C1Ev>:


        // gen
        struct{
            float linear= 0;
            float angular= 0;
 81010dc:	b480      	push	{r7}
 81010de:	b083      	sub	sp, #12
 81010e0:	af00      	add	r7, sp, #0
 81010e2:	6078      	str	r0, [r7, #4]
 81010e4:	687b      	ldr	r3, [r7, #4]
 81010e6:	f04f 0200 	mov.w	r2, #0
 81010ea:	601a      	str	r2, [r3, #0]
 81010ec:	687b      	ldr	r3, [r7, #4]
 81010ee:	f04f 0200 	mov.w	r2, #0
 81010f2:	605a      	str	r2, [r3, #4]
 81010f4:	687b      	ldr	r3, [r7, #4]
 81010f6:	4618      	mov	r0, r3
 81010f8:	370c      	adds	r7, #12
 81010fa:	46bd      	mov	sp, r7
 81010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101100:	4770      	bx	lr

08101102 <_ZN5XicroUt1_C1Ev>:
        // gen
        struct{
            float linear= 0;
            float angular= 0;
        }_Sub_cmd_vel_stm32;

 8101102:	b480      	push	{r7}
 8101104:	b083      	sub	sp, #12
 8101106:	af00      	add	r7, sp, #0
 8101108:	6078      	str	r0, [r7, #4]
 810110a:	687b      	ldr	r3, [r7, #4]
 810110c:	f04f 0200 	mov.w	r2, #0
 8101110:	601a      	str	r2, [r3, #0]
 8101112:	687b      	ldr	r3, [r7, #4]
 8101114:	f04f 0200 	mov.w	r2, #0
 8101118:	605a      	str	r2, [r3, #4]
 810111a:	687b      	ldr	r3, [r7, #4]
 810111c:	4618      	mov	r0, r3
 810111e:	370c      	adds	r7, #12
 8101120:	46bd      	mov	sp, r7
 8101122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101126:	4770      	bx	lr

08101128 <_ZN5XicroC1Ev>:
// ***************************************************************************************************************************************************


#include "Xicro_sub_N_pub_ID_3.h"

Xicro::Xicro(){
 8101128:	b590      	push	{r4, r7, lr}
 810112a:	b085      	sub	sp, #20
 810112c:	af00      	add	r7, sp, #0
 810112e:	6078      	str	r0, [r7, #4]
 8101130:	687b      	ldr	r3, [r7, #4]
 8101132:	4618      	mov	r0, r3
 8101134:	f7ff ffd2 	bl	81010dc <_ZN5XicroUt_C1Ev>
 8101138:	687b      	ldr	r3, [r7, #4]
 810113a:	2203      	movs	r2, #3
 810113c:	725a      	strb	r2, [r3, #9]
 810113e:	687b      	ldr	r3, [r7, #4]
 8101140:	4a4f      	ldr	r2, [pc, #316]	; (8101280 <_ZN5XicroC1Ev+0x158>)
 8101142:	3310      	adds	r3, #16
 8101144:	4611      	mov	r1, r2
 8101146:	f44f 7280 	mov.w	r2, #256	; 0x100
 810114a:	4618      	mov	r0, r3
 810114c:	f00a fafe 	bl	810b74c <memcpy>
 8101150:	687b      	ldr	r3, [r7, #4]
 8101152:	4a4c      	ldr	r2, [pc, #304]	; (8101284 <_ZN5XicroC1Ev+0x15c>)
 8101154:	6812      	ldr	r2, [r2, #0]
 8101156:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 810115a:	687b      	ldr	r3, [r7, #4]
 810115c:	4a4a      	ldr	r2, [pc, #296]	; (8101288 <_ZN5XicroC1Ev+0x160>)
 810115e:	8812      	ldrh	r2, [r2, #0]
 8101160:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 8101164:	687b      	ldr	r3, [r7, #4]
 8101166:	4a49      	ldr	r2, [pc, #292]	; (810128c <_ZN5XicroC1Ev+0x164>)
 8101168:	8812      	ldrh	r2, [r2, #0]
 810116a:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
 810116e:	687b      	ldr	r3, [r7, #4]
 8101170:	2200      	movs	r2, #0
 8101172:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8101176:	687b      	ldr	r3, [r7, #4]
 8101178:	2200      	movs	r2, #0
 810117a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 810117e:	687b      	ldr	r3, [r7, #4]
 8101180:	2200      	movs	r2, #0
 8101182:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8101186:	6879      	ldr	r1, [r7, #4]
 8101188:	f04f 0200 	mov.w	r2, #0
 810118c:	f04f 0300 	mov.w	r3, #0
 8101190:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
 8101194:	687b      	ldr	r3, [r7, #4]
 8101196:	2200      	movs	r2, #0
 8101198:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 810119c:	687b      	ldr	r3, [r7, #4]
 810119e:	22ff      	movs	r2, #255	; 0xff
 81011a0:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 81011a4:	687b      	ldr	r3, [r7, #4]
 81011a6:	2200      	movs	r2, #0
 81011a8:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 81011ac:	687b      	ldr	r3, [r7, #4]
 81011ae:	2200      	movs	r2, #0
 81011b0:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
 81011b4:	687b      	ldr	r3, [r7, #4]
 81011b6:	2200      	movs	r2, #0
 81011b8:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 81011bc:	687b      	ldr	r3, [r7, #4]
 81011be:	f503 7498 	add.w	r4, r3, #304	; 0x130
 81011c2:	f107 030c 	add.w	r3, r7, #12
 81011c6:	4618      	mov	r0, r3
 81011c8:	f009 ff78 	bl	810b0bc <_ZNSaIcEC1Ev>
 81011cc:	f107 030c 	add.w	r3, r7, #12
 81011d0:	461a      	mov	r2, r3
 81011d2:	492f      	ldr	r1, [pc, #188]	; (8101290 <_ZN5XicroC1Ev+0x168>)
 81011d4:	4620      	mov	r0, r4
 81011d6:	f00a f9b7 	bl	810b548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 81011da:	f107 030c 	add.w	r3, r7, #12
 81011de:	4618      	mov	r0, r3
 81011e0:	f009 ff6d 	bl	810b0be <_ZNSaIcED1Ev>
 81011e4:	687b      	ldr	r3, [r7, #4]
 81011e6:	2200      	movs	r2, #0
 81011e8:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 81011ec:	687b      	ldr	r3, [r7, #4]
 81011ee:	2200      	movs	r2, #0
 81011f0:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 81011f4:	687b      	ldr	r3, [r7, #4]
 81011f6:	2200      	movs	r2, #0
 81011f8:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
 81011fc:	687b      	ldr	r3, [r7, #4]
 81011fe:	2200      	movs	r2, #0
 8101200:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 8101204:	687b      	ldr	r3, [r7, #4]
 8101206:	2201      	movs	r2, #1
 8101208:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
 810120c:	687b      	ldr	r3, [r7, #4]
 810120e:	4a21      	ldr	r2, [pc, #132]	; (8101294 <_ZN5XicroC1Ev+0x16c>)
 8101210:	f203 135d 	addw	r3, r3, #349	; 0x15d
 8101214:	8812      	ldrh	r2, [r2, #0]
 8101216:	801a      	strh	r2, [r3, #0]
 8101218:	687b      	ldr	r3, [r7, #4]
 810121a:	2202      	movs	r2, #2
 810121c:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
 8101220:	687b      	ldr	r3, [r7, #4]
 8101222:	4a1d      	ldr	r2, [pc, #116]	; (8101298 <_ZN5XicroC1Ev+0x170>)
 8101224:	8812      	ldrh	r2, [r2, #0]
 8101226:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
 810122a:	687b      	ldr	r3, [r7, #4]
 810122c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8101230:	4618      	mov	r0, r3
 8101232:	f7ff ff66 	bl	8101102 <_ZN5XicroUt1_C1Ev>
 8101236:	687b      	ldr	r3, [r7, #4]
 8101238:	2200      	movs	r2, #0
 810123a:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
 810123e:	687b      	ldr	r3, [r7, #4]
 8101240:	2200      	movs	r2, #0
 8101242:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
 8101246:	687b      	ldr	r3, [r7, #4]
 8101248:	2200      	movs	r2, #0
 810124a:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
 810124e:	687b      	ldr	r3, [r7, #4]
 8101250:	2200      	movs	r2, #0
 8101252:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
 8101256:	687b      	ldr	r3, [r7, #4]
 8101258:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 810125c:	2240      	movs	r2, #64	; 0x40
 810125e:	2100      	movs	r1, #0
 8101260:	4618      	mov	r0, r3
 8101262:	f00a fa9b 	bl	810b79c <memset>
 8101266:	687b      	ldr	r3, [r7, #4]
 8101268:	2200      	movs	r2, #0
 810126a:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 810126e:	687b      	ldr	r3, [r7, #4]
 8101270:	2200      	movs	r2, #0
 8101272:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
}
 8101276:	687b      	ldr	r3, [r7, #4]
 8101278:	4618      	mov	r0, r3
 810127a:	3714      	adds	r7, #20
 810127c:	46bd      	mov	sp, r7
 810127e:	bd90      	pop	{r4, r7, pc}
 8101280:	0810ba4c 	.word	0x0810ba4c
 8101284:	0810bb4c 	.word	0x0810bb4c
 8101288:	0810bb50 	.word	0x0810bb50
 810128c:	0810bb54 	.word	0x0810bb54
 8101290:	0810ba48 	.word	0x0810ba48
 8101294:	0810bb58 	.word	0x0810bb58
 8101298:	0810bb5c 	.word	0x0810bb5c

0810129c <_ZN5Xicro5beginEP20__UART_HandleTypeDef>:
void Xicro::begin(UART_HandleTypeDef* SerialObject){
 810129c:	b580      	push	{r7, lr}
 810129e:	b082      	sub	sp, #8
 81012a0:	af00      	add	r7, sp, #0
 81012a2:	6078      	str	r0, [r7, #4]
 81012a4:	6039      	str	r1, [r7, #0]
    _serial=SerialObject;
 81012a6:	687b      	ldr	r3, [r7, #4]
 81012a8:	683a      	ldr	r2, [r7, #0]
 81012aa:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(_serial, _UartBuff, 64);
 81012ac:	687b      	ldr	r3, [r7, #4]
 81012ae:	68d8      	ldr	r0, [r3, #12]
 81012b0:	687b      	ldr	r3, [r7, #4]
 81012b2:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 81012b6:	2240      	movs	r2, #64	; 0x40
 81012b8:	4619      	mov	r1, r3
 81012ba:	f008 fc21 	bl	8109b00 <HAL_UART_Receive_DMA>

  
    // gen
    _nonverify[0][0][0]=&_Sub_cmd_vel_stm32.linear;
    _nonverify[0][1][0]=&_Sub_cmd_vel_stm32.angular;
 81012be:	687b      	ldr	r3, [r7, #4]
 81012c0:	f503 72b2 	add.w	r2, r3, #356	; 0x164
 81012c4:	687b      	ldr	r3, [r7, #4]
 81012c6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

 81012ca:	687b      	ldr	r3, [r7, #4]
 81012cc:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 81012d0:	687b      	ldr	r3, [r7, #4]
 81012d2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

    _verify[0][0][0]=&Sub_cmd_vel_stm32.linear;
    _verify[0][1][0]=&Sub_cmd_vel_stm32.angular;
 81012d6:	687a      	ldr	r2, [r7, #4]
 81012d8:	687b      	ldr	r3, [r7, #4]
 81012da:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

 81012de:	687b      	ldr	r3, [r7, #4]
 81012e0:	1d1a      	adds	r2, r3, #4
 81012e2:	687b      	ldr	r3, [r7, #4]
 81012e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158


// get
}     
uint8_t Xicro::_getcrc(uint8_t crc,uint8_t *data,uint16_t len){
 81012e8:	bf00      	nop
 81012ea:	3708      	adds	r7, #8
 81012ec:	46bd      	mov	sp, r7
 81012ee:	bd80      	pop	{r7, pc}

081012f0 <_ZN5Xicro7_getcrcEhPht>:
    if(len>1){
 81012f0:	b480      	push	{r7}
 81012f2:	b087      	sub	sp, #28
 81012f4:	af00      	add	r7, sp, #0
 81012f6:	60f8      	str	r0, [r7, #12]
 81012f8:	607a      	str	r2, [r7, #4]
 81012fa:	461a      	mov	r2, r3
 81012fc:	460b      	mov	r3, r1
 81012fe:	72fb      	strb	r3, [r7, #11]
 8101300:	4613      	mov	r3, r2
 8101302:	813b      	strh	r3, [r7, #8]
        for (int i = 0; i < len; i++){
 8101304:	893b      	ldrh	r3, [r7, #8]
 8101306:	2b01      	cmp	r3, #1
 8101308:	d915      	bls.n	8101336 <_ZN5Xicro7_getcrcEhPht+0x46>
        crc = _CRC_8_TABLE[crc ^ data[i]];
 810130a:	2300      	movs	r3, #0
 810130c:	617b      	str	r3, [r7, #20]
 810130e:	893b      	ldrh	r3, [r7, #8]
 8101310:	697a      	ldr	r2, [r7, #20]
 8101312:	429a      	cmp	r2, r3
 8101314:	da19      	bge.n	810134a <_ZN5Xicro7_getcrcEhPht+0x5a>
        }
 8101316:	697b      	ldr	r3, [r7, #20]
 8101318:	687a      	ldr	r2, [r7, #4]
 810131a:	4413      	add	r3, r2
 810131c:	781a      	ldrb	r2, [r3, #0]
 810131e:	7afb      	ldrb	r3, [r7, #11]
 8101320:	4053      	eors	r3, r2
 8101322:	b2db      	uxtb	r3, r3
 8101324:	461a      	mov	r2, r3
 8101326:	68fb      	ldr	r3, [r7, #12]
 8101328:	4413      	add	r3, r2
 810132a:	7c1b      	ldrb	r3, [r3, #16]
 810132c:	72fb      	strb	r3, [r7, #11]
        crc = _CRC_8_TABLE[crc ^ data[i]];
 810132e:	697b      	ldr	r3, [r7, #20]
 8101330:	3301      	adds	r3, #1
 8101332:	617b      	str	r3, [r7, #20]
 8101334:	e7eb      	b.n	810130e <_ZN5Xicro7_getcrcEhPht+0x1e>
    }else{
        crc = _CRC_8_TABLE[crc ^ (uint8_t)*data];
    }
 8101336:	687b      	ldr	r3, [r7, #4]
 8101338:	781a      	ldrb	r2, [r3, #0]
 810133a:	7afb      	ldrb	r3, [r7, #11]
 810133c:	4053      	eors	r3, r2
 810133e:	b2db      	uxtb	r3, r3
 8101340:	461a      	mov	r2, r3
 8101342:	68fb      	ldr	r3, [r7, #12]
 8101344:	4413      	add	r3, r2
 8101346:	7c1b      	ldrb	r3, [r3, #16]
 8101348:	72fb      	strb	r3, [r7, #11]
    
    return crc;
}
 810134a:	7afb      	ldrb	r3, [r7, #11]

 810134c:	4618      	mov	r0, r3
 810134e:	371c      	adds	r7, #28
 8101350:	46bd      	mov	sp, r7
 8101352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101356:	4770      	bx	lr

08101358 <_ZN5Xicro10_SendstartEv>:
void Xicro::_Sendstart(){
    HAL_UART_Transmit(_serial, _start, 4, 10000);
 8101358:	b580      	push	{r7, lr}
 810135a:	b082      	sub	sp, #8
 810135c:	af00      	add	r7, sp, #0
 810135e:	6078      	str	r0, [r7, #4]
}
 8101360:	687b      	ldr	r3, [r7, #4]
 8101362:	68d8      	ldr	r0, [r3, #12]
 8101364:	687b      	ldr	r3, [r7, #4]
 8101366:	f503 7188 	add.w	r1, r3, #272	; 0x110
 810136a:	f242 7310 	movw	r3, #10000	; 0x2710
 810136e:	2204      	movs	r2, #4
 8101370:	f008 fb30 	bl	81099d4 <HAL_UART_Transmit>
void Xicro::_Sendstop(){
 8101374:	bf00      	nop
 8101376:	3708      	adds	r7, #8
 8101378:	46bd      	mov	sp, r7
 810137a:	bd80      	pop	{r7, pc}

0810137c <_ZN5Xicro9_SendstopEv>:
    _crc=_getcrc(_crc,_stop,2);
 810137c:	b580      	push	{r7, lr}
 810137e:	b082      	sub	sp, #8
 8101380:	af00      	add	r7, sp, #0
 8101382:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(_serial, _stop, 2, 1000);
 8101384:	687b      	ldr	r3, [r7, #4]
 8101386:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 810138a:	687b      	ldr	r3, [r7, #4]
 810138c:	f503 728a 	add.w	r2, r3, #276	; 0x114
 8101390:	2302      	movs	r3, #2
 8101392:	6878      	ldr	r0, [r7, #4]
 8101394:	f7ff ffac 	bl	81012f0 <_ZN5Xicro7_getcrcEhPht>
 8101398:	4603      	mov	r3, r0
 810139a:	461a      	mov	r2, r3
 810139c:	687b      	ldr	r3, [r7, #4]
 810139e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
 81013a2:	687b      	ldr	r3, [r7, #4]
 81013a4:	68d8      	ldr	r0, [r3, #12]
 81013a6:	687b      	ldr	r3, [r7, #4]
 81013a8:	f503 718a 	add.w	r1, r3, #276	; 0x114
 81013ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81013b0:	2202      	movs	r2, #2
 81013b2:	f008 fb0f 	bl	81099d4 <HAL_UART_Transmit>
void Xicro::_Sendcontinue(){
 81013b6:	bf00      	nop
 81013b8:	3708      	adds	r7, #8
 81013ba:	46bd      	mov	sp, r7
 81013bc:	bd80      	pop	{r7, pc}

081013be <_ZN5Xicro13_SendcontinueEv>:
    _crc=_getcrc(_crc,_continue,2);
 81013be:	b580      	push	{r7, lr}
 81013c0:	b082      	sub	sp, #8
 81013c2:	af00      	add	r7, sp, #0
 81013c4:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(_serial, _continue, 2, 1000);
 81013c6:	687b      	ldr	r3, [r7, #4]
 81013c8:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 81013cc:	687b      	ldr	r3, [r7, #4]
 81013ce:	f503 728b 	add.w	r2, r3, #278	; 0x116
 81013d2:	2302      	movs	r3, #2
 81013d4:	6878      	ldr	r0, [r7, #4]
 81013d6:	f7ff ff8b 	bl	81012f0 <_ZN5Xicro7_getcrcEhPht>
 81013da:	4603      	mov	r3, r0
 81013dc:	461a      	mov	r2, r3
 81013de:	687b      	ldr	r3, [r7, #4]
 81013e0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
 81013e4:	687b      	ldr	r3, [r7, #4]
 81013e6:	68d8      	ldr	r0, [r3, #12]
 81013e8:	687b      	ldr	r3, [r7, #4]
 81013ea:	f503 718b 	add.w	r1, r3, #278	; 0x116
 81013ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81013f2:	2202      	movs	r2, #2
 81013f4:	f008 faee 	bl	81099d4 <HAL_UART_Transmit>
void Xicro::_SendSignature(uint8_t Idmcu,uint8_t Mode){
 81013f8:	bf00      	nop
 81013fa:	3708      	adds	r7, #8
 81013fc:	46bd      	mov	sp, r7
 81013fe:	bd80      	pop	{r7, pc}

08101400 <_ZN5Xicro14_SendSignatureEhh>:
   uint8_t q[1]={0};
 8101400:	b580      	push	{r7, lr}
 8101402:	b084      	sub	sp, #16
 8101404:	af00      	add	r7, sp, #0
 8101406:	6078      	str	r0, [r7, #4]
 8101408:	460b      	mov	r3, r1
 810140a:	70fb      	strb	r3, [r7, #3]
 810140c:	4613      	mov	r3, r2
 810140e:	70bb      	strb	r3, [r7, #2]
   q[0]=Idmcu<<4;
 8101410:	2300      	movs	r3, #0
 8101412:	733b      	strb	r3, [r7, #12]
   q[0]=q[0]|Mode;
 8101414:	78fb      	ldrb	r3, [r7, #3]
 8101416:	011b      	lsls	r3, r3, #4
 8101418:	b2db      	uxtb	r3, r3
 810141a:	733b      	strb	r3, [r7, #12]
   _crc=_getcrc(_crc, &q[0],1);
 810141c:	7b3a      	ldrb	r2, [r7, #12]
 810141e:	78bb      	ldrb	r3, [r7, #2]
 8101420:	4313      	orrs	r3, r2
 8101422:	b2db      	uxtb	r3, r3
 8101424:	733b      	strb	r3, [r7, #12]
   HAL_UART_Transmit(_serial, q, 1, 1000);
 8101426:	687b      	ldr	r3, [r7, #4]
 8101428:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 810142c:	f107 020c 	add.w	r2, r7, #12
 8101430:	2301      	movs	r3, #1
 8101432:	6878      	ldr	r0, [r7, #4]
 8101434:	f7ff ff5c 	bl	81012f0 <_ZN5Xicro7_getcrcEhPht>
 8101438:	4603      	mov	r3, r0
 810143a:	461a      	mov	r2, r3
 810143c:	687b      	ldr	r3, [r7, #4]
 810143e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
 8101442:	687b      	ldr	r3, [r7, #4]
 8101444:	68d8      	ldr	r0, [r3, #12]
 8101446:	f107 010c 	add.w	r1, r7, #12
 810144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810144e:	2201      	movs	r2, #1
 8101450:	f008 fac0 	bl	81099d4 <HAL_UART_Transmit>
void Xicro::_SendUint8(uint8_t *data,uint8_t len){
 8101454:	bf00      	nop
 8101456:	3710      	adds	r7, #16
 8101458:	46bd      	mov	sp, r7
 810145a:	bd80      	pop	{r7, pc}

0810145c <_ZN5Xicro12_SendFloat32EPfh>:
        HAL_UART_Transmit(_serial, buff, 9, 1000);
        
    }
}
void Xicro::_SendFloat32(float *data,uint8_t len){
    if(len>1){
 810145c:	b580      	push	{r7, lr}
 810145e:	b08a      	sub	sp, #40	; 0x28
 8101460:	af00      	add	r7, sp, #0
 8101462:	60f8      	str	r0, [r7, #12]
 8101464:	60b9      	str	r1, [r7, #8]
 8101466:	4613      	mov	r3, r2
 8101468:	71fb      	strb	r3, [r7, #7]
        uint8_t buff[2]={112,0};
 810146a:	79fb      	ldrb	r3, [r7, #7]
 810146c:	2b01      	cmp	r3, #1
 810146e:	d93e      	bls.n	81014ee <_ZN5Xicro12_SendFloat32EPfh+0x92>
        buff[1]=len & 0xFF;
 8101470:	2370      	movs	r3, #112	; 0x70
 8101472:	833b      	strh	r3, [r7, #24]
        _crc=_getcrc(_crc,buff,2);
 8101474:	79fb      	ldrb	r3, [r7, #7]
 8101476:	767b      	strb	r3, [r7, #25]
        HAL_UART_Transmit(_serial, buff, 2, 1000);
 8101478:	68fb      	ldr	r3, [r7, #12]
 810147a:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 810147e:	f107 0218 	add.w	r2, r7, #24
 8101482:	2302      	movs	r3, #2
 8101484:	68f8      	ldr	r0, [r7, #12]
 8101486:	f7ff ff33 	bl	81012f0 <_ZN5Xicro7_getcrcEhPht>
 810148a:	4603      	mov	r3, r0
 810148c:	461a      	mov	r2, r3
 810148e:	68fb      	ldr	r3, [r7, #12]
 8101490:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
        for(int i=0;i<len;i++){
 8101494:	68fb      	ldr	r3, [r7, #12]
 8101496:	68d8      	ldr	r0, [r3, #12]
 8101498:	f107 0118 	add.w	r1, r7, #24
 810149c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81014a0:	2202      	movs	r2, #2
 81014a2:	f008 fa97 	bl	81099d4 <HAL_UART_Transmit>
            uint8_t * bb = (uint8_t *) &data[i];
 81014a6:	2300      	movs	r3, #0
 81014a8:	627b      	str	r3, [r7, #36]	; 0x24
 81014aa:	79fb      	ldrb	r3, [r7, #7]
 81014ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81014ae:	429a      	cmp	r2, r3
 81014b0:	da4d      	bge.n	810154e <_ZN5Xicro12_SendFloat32EPfh+0xf2>
            _crc=_getcrc(_crc,bb,4);
 81014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81014b4:	009b      	lsls	r3, r3, #2
 81014b6:	68ba      	ldr	r2, [r7, #8]
 81014b8:	4413      	add	r3, r2
 81014ba:	61fb      	str	r3, [r7, #28]
            HAL_UART_Transmit(_serial, bb, 4, 1000);
 81014bc:	68fb      	ldr	r3, [r7, #12]
 81014be:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 81014c2:	2304      	movs	r3, #4
 81014c4:	69fa      	ldr	r2, [r7, #28]
 81014c6:	68f8      	ldr	r0, [r7, #12]
 81014c8:	f7ff ff12 	bl	81012f0 <_ZN5Xicro7_getcrcEhPht>
 81014cc:	4603      	mov	r3, r0
 81014ce:	461a      	mov	r2, r3
 81014d0:	68fb      	ldr	r3, [r7, #12]
 81014d2:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
        }
 81014d6:	68fb      	ldr	r3, [r7, #12]
 81014d8:	68d8      	ldr	r0, [r3, #12]
 81014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81014de:	2204      	movs	r2, #4
 81014e0:	69f9      	ldr	r1, [r7, #28]
 81014e2:	f008 fa77 	bl	81099d4 <HAL_UART_Transmit>
            uint8_t * bb = (uint8_t *) &data[i];
 81014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81014e8:	3301      	adds	r3, #1
 81014ea:	627b      	str	r3, [r7, #36]	; 0x24
 81014ec:	e7dd      	b.n	81014aa <_ZN5Xicro12_SendFloat32EPfh+0x4e>

    }else{
        uint8_t * bb = (uint8_t *) &*data;
        uint8_t buff[1]={111};
 81014ee:	68bb      	ldr	r3, [r7, #8]
 81014f0:	623b      	str	r3, [r7, #32]
        _crc=_getcrc(_crc,&buff[0],1);
 81014f2:	236f      	movs	r3, #111	; 0x6f
 81014f4:	753b      	strb	r3, [r7, #20]
        _crc=_getcrc(_crc,bb,4);
 81014f6:	68fb      	ldr	r3, [r7, #12]
 81014f8:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 81014fc:	f107 0214 	add.w	r2, r7, #20
 8101500:	2301      	movs	r3, #1
 8101502:	68f8      	ldr	r0, [r7, #12]
 8101504:	f7ff fef4 	bl	81012f0 <_ZN5Xicro7_getcrcEhPht>
 8101508:	4603      	mov	r3, r0
 810150a:	461a      	mov	r2, r3
 810150c:	68fb      	ldr	r3, [r7, #12]
 810150e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
        HAL_UART_Transmit(_serial, buff, 1, 1000);
 8101512:	68fb      	ldr	r3, [r7, #12]
 8101514:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 8101518:	2304      	movs	r3, #4
 810151a:	6a3a      	ldr	r2, [r7, #32]
 810151c:	68f8      	ldr	r0, [r7, #12]
 810151e:	f7ff fee7 	bl	81012f0 <_ZN5Xicro7_getcrcEhPht>
 8101522:	4603      	mov	r3, r0
 8101524:	461a      	mov	r2, r3
 8101526:	68fb      	ldr	r3, [r7, #12]
 8101528:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
        HAL_UART_Transmit(_serial, bb, 4, 1000);
 810152c:	68fb      	ldr	r3, [r7, #12]
 810152e:	68d8      	ldr	r0, [r3, #12]
 8101530:	f107 0114 	add.w	r1, r7, #20
 8101534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101538:	2201      	movs	r2, #1
 810153a:	f008 fa4b 	bl	81099d4 <HAL_UART_Transmit>
    }
 810153e:	68fb      	ldr	r3, [r7, #12]
 8101540:	68d8      	ldr	r0, [r3, #12]
 8101542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101546:	2204      	movs	r2, #4
 8101548:	6a39      	ldr	r1, [r7, #32]
 810154a:	f008 fa43 	bl	81099d4 <HAL_UART_Transmit>
    
}
void Xicro::_SendDouble(double *data,uint8_t len){
 810154e:	bf00      	nop
 8101550:	3728      	adds	r7, #40	; 0x28
 8101552:	46bd      	mov	sp, r7
 8101554:	bd80      	pop	{r7, pc}

08101556 <_ZN5Xicro8_SendcrcEv>:
        _crc=_getcrc(_crc,buff,3);
        HAL_UART_Transmit(_serial, buff, 3, 1000);
    }
}
void Xicro::_Sendcrc(){
    HAL_UART_Transmit(_serial, &_crc, 1, 1000);
 8101556:	b580      	push	{r7, lr}
 8101558:	b082      	sub	sp, #8
 810155a:	af00      	add	r7, sp, #0
 810155c:	6078      	str	r0, [r7, #4]
}
 810155e:	687b      	ldr	r3, [r7, #4]
 8101560:	68d8      	ldr	r0, [r3, #12]
 8101562:	687b      	ldr	r3, [r7, #4]
 8101564:	f503 718c 	add.w	r1, r3, #280	; 0x118
 8101568:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810156c:	2201      	movs	r2, #1
 810156e:	f008 fa31 	bl	81099d4 <HAL_UART_Transmit>
void Xicro::_SendIdTopic(uint8_t IdTopic){
 8101572:	bf00      	nop
 8101574:	3708      	adds	r7, #8
 8101576:	46bd      	mov	sp, r7
 8101578:	bd80      	pop	{r7, pc}

0810157a <_ZN5Xicro12_SendIdTopicEh>:
    _crc=_getcrc(_crc,&IdTopic,1);
 810157a:	b580      	push	{r7, lr}
 810157c:	b082      	sub	sp, #8
 810157e:	af00      	add	r7, sp, #0
 8101580:	6078      	str	r0, [r7, #4]
 8101582:	460b      	mov	r3, r1
 8101584:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(_serial, &IdTopic, 1, 1000);
 8101586:	687b      	ldr	r3, [r7, #4]
 8101588:	f893 1118 	ldrb.w	r1, [r3, #280]	; 0x118
 810158c:	1cfa      	adds	r2, r7, #3
 810158e:	2301      	movs	r3, #1
 8101590:	6878      	ldr	r0, [r7, #4]
 8101592:	f7ff fead 	bl	81012f0 <_ZN5Xicro7_getcrcEhPht>
 8101596:	4603      	mov	r3, r0
 8101598:	461a      	mov	r2, r3
 810159a:	687b      	ldr	r3, [r7, #4]
 810159c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
 81015a0:	687b      	ldr	r3, [r7, #4]
 81015a2:	68d8      	ldr	r0, [r3, #12]
 81015a4:	1cf9      	adds	r1, r7, #3
 81015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81015aa:	2201      	movs	r2, #1
 81015ac:	f008 fa12 	bl	81099d4 <HAL_UART_Transmit>
void Xicro::Test(){
 81015b0:	bf00      	nop
 81015b2:	3708      	adds	r7, #8
 81015b4:	46bd      	mov	sp, r7
 81015b6:	bd80      	pop	{r7, pc}

081015b8 <_ZN5Xicro17publish_nav_stm32Efffffffffffff>:


// gen publish void
void Xicro::publish_nav_stm32(float pose__of__position__of__x ,float pose__of__position__of__y ,float pose__of__position__of__z ,float pose__of__orientation__of__x ,float pose__of__orientation__of__y ,float pose__of__orientation__of__z ,float pose__of__orientation__of__w ,float twist__of__linear__of__x ,float twist__of__linear__of__y ,float twist__of__linear__of__z ,float twist__of__angular__of__x ,float twist__of__angular__of__y ,float twist__of__angular__of__z ){
    _crc=0;
    _Sendstart();
 81015b8:	b580      	push	{r7, lr}
 81015ba:	b08e      	sub	sp, #56	; 0x38
 81015bc:	af00      	add	r7, sp, #0
 81015be:	6378      	str	r0, [r7, #52]	; 0x34
 81015c0:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 81015c4:	edc7 0a0b 	vstr	s1, [r7, #44]	; 0x2c
 81015c8:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 81015cc:	edc7 1a09 	vstr	s3, [r7, #36]	; 0x24
 81015d0:	ed87 2a08 	vstr	s4, [r7, #32]
 81015d4:	edc7 2a07 	vstr	s5, [r7, #28]
 81015d8:	ed87 3a06 	vstr	s6, [r7, #24]
 81015dc:	edc7 3a05 	vstr	s7, [r7, #20]
 81015e0:	ed87 4a04 	vstr	s8, [r7, #16]
 81015e4:	edc7 4a03 	vstr	s9, [r7, #12]
 81015e8:	ed87 5a02 	vstr	s10, [r7, #8]
 81015ec:	edc7 5a01 	vstr	s11, [r7, #4]
 81015f0:	ed87 6a00 	vstr	s12, [r7]
    _SendSignature(3,4);
 81015f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81015f6:	2200      	movs	r2, #0
 81015f8:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    _SendIdTopic(1);
 81015fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81015fe:	f7ff feab 	bl	8101358 <_ZN5Xicro10_SendstartEv>
    _SendFloat32((float*)&pose__of__position__of__x,1);
 8101602:	2204      	movs	r2, #4
 8101604:	2103      	movs	r1, #3
 8101606:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8101608:	f7ff fefa 	bl	8101400 <_ZN5Xicro14_SendSignatureEhh>
    _Sendcontinue();
 810160c:	2101      	movs	r1, #1
 810160e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8101610:	f7ff ffb3 	bl	810157a <_ZN5Xicro12_SendIdTopicEh>
    _SendFloat32((float*)&pose__of__position__of__y,1);
 8101614:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101618:	2201      	movs	r2, #1
 810161a:	4619      	mov	r1, r3
 810161c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810161e:	f7ff ff1d 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 8101622:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8101624:	f7ff fecb 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&pose__of__position__of__z,1);
 8101628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 810162c:	2201      	movs	r2, #1
 810162e:	4619      	mov	r1, r3
 8101630:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8101632:	f7ff ff13 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 8101636:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8101638:	f7ff fec1 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&pose__of__orientation__of__x,1);
 810163c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8101640:	2201      	movs	r2, #1
 8101642:	4619      	mov	r1, r3
 8101644:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8101646:	f7ff ff09 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 810164a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810164c:	f7ff feb7 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&pose__of__orientation__of__y,1);
 8101650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101654:	2201      	movs	r2, #1
 8101656:	4619      	mov	r1, r3
 8101658:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810165a:	f7ff feff 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 810165e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8101660:	f7ff fead 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&pose__of__orientation__of__z,1);
 8101664:	f107 0320 	add.w	r3, r7, #32
 8101668:	2201      	movs	r2, #1
 810166a:	4619      	mov	r1, r3
 810166c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810166e:	f7ff fef5 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 8101672:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8101674:	f7ff fea3 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&pose__of__orientation__of__w,1);
 8101678:	f107 031c 	add.w	r3, r7, #28
 810167c:	2201      	movs	r2, #1
 810167e:	4619      	mov	r1, r3
 8101680:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8101682:	f7ff feeb 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 8101686:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8101688:	f7ff fe99 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&twist__of__linear__of__x,1);
 810168c:	f107 0318 	add.w	r3, r7, #24
 8101690:	2201      	movs	r2, #1
 8101692:	4619      	mov	r1, r3
 8101694:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8101696:	f7ff fee1 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 810169a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810169c:	f7ff fe8f 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&twist__of__linear__of__y,1);
 81016a0:	f107 0314 	add.w	r3, r7, #20
 81016a4:	2201      	movs	r2, #1
 81016a6:	4619      	mov	r1, r3
 81016a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81016aa:	f7ff fed7 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 81016ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81016b0:	f7ff fe85 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&twist__of__linear__of__z,1);
 81016b4:	f107 0310 	add.w	r3, r7, #16
 81016b8:	2201      	movs	r2, #1
 81016ba:	4619      	mov	r1, r3
 81016bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81016be:	f7ff fecd 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 81016c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81016c4:	f7ff fe7b 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&twist__of__angular__of__x,1);
 81016c8:	f107 030c 	add.w	r3, r7, #12
 81016cc:	2201      	movs	r2, #1
 81016ce:	4619      	mov	r1, r3
 81016d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81016d2:	f7ff fec3 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 81016d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81016d8:	f7ff fe71 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&twist__of__angular__of__y,1);
 81016dc:	f107 0308 	add.w	r3, r7, #8
 81016e0:	2201      	movs	r2, #1
 81016e2:	4619      	mov	r1, r3
 81016e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81016e6:	f7ff feb9 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 81016ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81016ec:	f7ff fe67 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&twist__of__angular__of__z,1);
 81016f0:	1d3b      	adds	r3, r7, #4
 81016f2:	2201      	movs	r2, #1
 81016f4:	4619      	mov	r1, r3
 81016f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81016f8:	f7ff feb0 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendstop();
 81016fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81016fe:	f7ff fe5e 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _Sendcrc();
 8101702:	463b      	mov	r3, r7
 8101704:	2201      	movs	r2, #1
 8101706:	4619      	mov	r1, r3
 8101708:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810170a:	f7ff fea7 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
}
 810170e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8101710:	f7ff fe34 	bl	810137c <_ZN5Xicro9_SendstopEv>
void Xicro::publish_imu_stm32(float orientation__of__x ,float orientation__of__y ,float orientation__of__z ,float orientation__of__w ,float angular_velocity__of__x ,float angular_velocity__of__y ,float angular_velocity__of__z ,float linear_acceleration__of__x ,float linear_acceleration__of__y ,float linear_acceleration__of__z ){
 8101714:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8101716:	f7ff ff1e 	bl	8101556 <_ZN5Xicro8_SendcrcEv>
    _crc=0;
 810171a:	bf00      	nop
 810171c:	3738      	adds	r7, #56	; 0x38
 810171e:	46bd      	mov	sp, r7
 8101720:	bd80      	pop	{r7, pc}

08101722 <_ZN5Xicro17publish_imu_stm32Effffffffff>:
    _Sendstart();
 8101722:	b580      	push	{r7, lr}
 8101724:	b08c      	sub	sp, #48	; 0x30
 8101726:	af00      	add	r7, sp, #0
 8101728:	62f8      	str	r0, [r7, #44]	; 0x2c
 810172a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
 810172e:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8101732:	ed87 1a08 	vstr	s2, [r7, #32]
 8101736:	edc7 1a07 	vstr	s3, [r7, #28]
 810173a:	ed87 2a06 	vstr	s4, [r7, #24]
 810173e:	edc7 2a05 	vstr	s5, [r7, #20]
 8101742:	ed87 3a04 	vstr	s6, [r7, #16]
 8101746:	edc7 3a03 	vstr	s7, [r7, #12]
 810174a:	ed87 4a02 	vstr	s8, [r7, #8]
 810174e:	edc7 4a01 	vstr	s9, [r7, #4]
    _SendSignature(3,4);
 8101752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101754:	2200      	movs	r2, #0
 8101756:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    _SendIdTopic(2);
 810175a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810175c:	f7ff fdfc 	bl	8101358 <_ZN5Xicro10_SendstartEv>
    _SendFloat32((float*)&orientation__of__x,1);
 8101760:	2204      	movs	r2, #4
 8101762:	2103      	movs	r1, #3
 8101764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8101766:	f7ff fe4b 	bl	8101400 <_ZN5Xicro14_SendSignatureEhh>
    _Sendcontinue();
 810176a:	2102      	movs	r1, #2
 810176c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810176e:	f7ff ff04 	bl	810157a <_ZN5Xicro12_SendIdTopicEh>
    _SendFloat32((float*)&orientation__of__y,1);
 8101772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8101776:	2201      	movs	r2, #1
 8101778:	4619      	mov	r1, r3
 810177a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810177c:	f7ff fe6e 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 8101780:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8101782:	f7ff fe1c 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&orientation__of__z,1);
 8101786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810178a:	2201      	movs	r2, #1
 810178c:	4619      	mov	r1, r3
 810178e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8101790:	f7ff fe64 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 8101794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8101796:	f7ff fe12 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&orientation__of__w,1);
 810179a:	f107 0320 	add.w	r3, r7, #32
 810179e:	2201      	movs	r2, #1
 81017a0:	4619      	mov	r1, r3
 81017a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81017a4:	f7ff fe5a 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 81017a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81017aa:	f7ff fe08 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&angular_velocity__of__x,1);
 81017ae:	f107 031c 	add.w	r3, r7, #28
 81017b2:	2201      	movs	r2, #1
 81017b4:	4619      	mov	r1, r3
 81017b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81017b8:	f7ff fe50 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 81017bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81017be:	f7ff fdfe 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&angular_velocity__of__y,1);
 81017c2:	f107 0318 	add.w	r3, r7, #24
 81017c6:	2201      	movs	r2, #1
 81017c8:	4619      	mov	r1, r3
 81017ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81017cc:	f7ff fe46 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 81017d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81017d2:	f7ff fdf4 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&angular_velocity__of__z,1);
 81017d6:	f107 0314 	add.w	r3, r7, #20
 81017da:	2201      	movs	r2, #1
 81017dc:	4619      	mov	r1, r3
 81017de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81017e0:	f7ff fe3c 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 81017e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81017e6:	f7ff fdea 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&linear_acceleration__of__x,1);
 81017ea:	f107 0310 	add.w	r3, r7, #16
 81017ee:	2201      	movs	r2, #1
 81017f0:	4619      	mov	r1, r3
 81017f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81017f4:	f7ff fe32 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 81017f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81017fa:	f7ff fde0 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&linear_acceleration__of__y,1);
 81017fe:	f107 030c 	add.w	r3, r7, #12
 8101802:	2201      	movs	r2, #1
 8101804:	4619      	mov	r1, r3
 8101806:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8101808:	f7ff fe28 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendcontinue();
 810180c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810180e:	f7ff fdd6 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _SendFloat32((float*)&linear_acceleration__of__z,1);
 8101812:	f107 0308 	add.w	r3, r7, #8
 8101816:	2201      	movs	r2, #1
 8101818:	4619      	mov	r1, r3
 810181a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810181c:	f7ff fe1e 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
    _Sendstop();
 8101820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8101822:	f7ff fdcc 	bl	81013be <_ZN5Xicro13_SendcontinueEv>
    _Sendcrc();
 8101826:	1d3b      	adds	r3, r7, #4
 8101828:	2201      	movs	r2, #1
 810182a:	4619      	mov	r1, r3
 810182c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810182e:	f7ff fe15 	bl	810145c <_ZN5Xicro12_SendFloat32EPfh>
}
 8101832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8101834:	f7ff fda2 	bl	810137c <_ZN5Xicro9_SendstopEv>

 8101838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810183a:	f7ff fe8c 	bl	8101556 <_ZN5Xicro8_SendcrcEv>

 810183e:	bf00      	nop
 8101840:	3730      	adds	r7, #48	; 0x30
 8101842:	46bd      	mov	sp, r7
 8101844:	bd80      	pop	{r7, pc}
	...

08101848 <_ZN5Xicro9Spin_nodeEv>:

//get
void Xicro::Spin_node(){
    _Posdata=((UART_HandleTypeDef)*_serial).RxXferSize-__HAL_DMA_GET_COUNTER(((UART_HandleTypeDef)*_serial).hdmarx);
    if(_Posdata!=_Posdatapre ){
        _datain[0] = _UartBuff[_Posdatapre];
 8101848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810184c:	f6ad 3d0c 	subw	sp, sp, #2828	; 0xb0c
 8101850:	af00      	add	r7, sp, #0
 8101852:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101856:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810185a:	6018      	str	r0, [r3, #0]
        // _serial->write(_datain,1);
 810185c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101860:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101864:	681b      	ldr	r3, [r3, #0]
 8101866:	68da      	ldr	r2, [r3, #12]
 8101868:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810186c:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 8101870:	4618      	mov	r0, r3
 8101872:	4611      	mov	r1, r2
 8101874:	2390      	movs	r3, #144	; 0x90
 8101876:	461a      	mov	r2, r3
 8101878:	f009 ff68 	bl	810b74c <memcpy>
 810187c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101880:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 8101884:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8101888:	b2de      	uxtb	r6, r3
 810188a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810188e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101892:	681b      	ldr	r3, [r3, #0]
 8101894:	68da      	ldr	r2, [r3, #12]
 8101896:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810189a:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 810189e:	4618      	mov	r0, r3
 81018a0:	4611      	mov	r1, r2
 81018a2:	2390      	movs	r3, #144	; 0x90
 81018a4:	461a      	mov	r2, r3
 81018a6:	f009 ff51 	bl	810b74c <memcpy>
 81018aa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81018ae:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 81018b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81018b4:	681b      	ldr	r3, [r3, #0]
 81018b6:	4ac3      	ldr	r2, [pc, #780]	; (8101bc4 <_ZN5Xicro9Spin_nodeEv+0x37c>)
 81018b8:	4293      	cmp	r3, r2
 81018ba:	f000 81a3 	beq.w	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 81018be:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81018c2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81018c6:	681b      	ldr	r3, [r3, #0]
 81018c8:	68da      	ldr	r2, [r3, #12]
 81018ca:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81018ce:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 81018d2:	4618      	mov	r0, r3
 81018d4:	4611      	mov	r1, r2
 81018d6:	2390      	movs	r3, #144	; 0x90
 81018d8:	461a      	mov	r2, r3
 81018da:	f009 ff37 	bl	810b74c <memcpy>
 81018de:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81018e2:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 81018e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81018e8:	681b      	ldr	r3, [r3, #0]
 81018ea:	4ab7      	ldr	r2, [pc, #732]	; (8101bc8 <_ZN5Xicro9Spin_nodeEv+0x380>)
 81018ec:	4293      	cmp	r3, r2
 81018ee:	f000 8189 	beq.w	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 81018f2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81018f6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81018fa:	681b      	ldr	r3, [r3, #0]
 81018fc:	68da      	ldr	r2, [r3, #12]
 81018fe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101902:	f5a3 6314 	sub.w	r3, r3, #2368	; 0x940
 8101906:	4618      	mov	r0, r3
 8101908:	4611      	mov	r1, r2
 810190a:	2390      	movs	r3, #144	; 0x90
 810190c:	461a      	mov	r2, r3
 810190e:	f009 ff1d 	bl	810b74c <memcpy>
 8101912:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101916:	f5a3 6314 	sub.w	r3, r3, #2368	; 0x940
 810191a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810191c:	681b      	ldr	r3, [r3, #0]
 810191e:	4aab      	ldr	r2, [pc, #684]	; (8101bcc <_ZN5Xicro9Spin_nodeEv+0x384>)
 8101920:	4293      	cmp	r3, r2
 8101922:	f000 816f 	beq.w	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 8101926:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810192a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810192e:	681b      	ldr	r3, [r3, #0]
 8101930:	68da      	ldr	r2, [r3, #12]
 8101932:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101936:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 810193a:	4618      	mov	r0, r3
 810193c:	4611      	mov	r1, r2
 810193e:	2390      	movs	r3, #144	; 0x90
 8101940:	461a      	mov	r2, r3
 8101942:	f009 ff03 	bl	810b74c <memcpy>
 8101946:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810194a:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 810194e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8101950:	681b      	ldr	r3, [r3, #0]
 8101952:	4a9f      	ldr	r2, [pc, #636]	; (8101bd0 <_ZN5Xicro9Spin_nodeEv+0x388>)
 8101954:	4293      	cmp	r3, r2
 8101956:	f000 8155 	beq.w	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 810195a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810195e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101962:	681b      	ldr	r3, [r3, #0]
 8101964:	68da      	ldr	r2, [r3, #12]
 8101966:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810196a:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 810196e:	4618      	mov	r0, r3
 8101970:	4611      	mov	r1, r2
 8101972:	2390      	movs	r3, #144	; 0x90
 8101974:	461a      	mov	r2, r3
 8101976:	f009 fee9 	bl	810b74c <memcpy>
 810197a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810197e:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8101982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8101984:	681b      	ldr	r3, [r3, #0]
 8101986:	4a93      	ldr	r2, [pc, #588]	; (8101bd4 <_ZN5Xicro9Spin_nodeEv+0x38c>)
 8101988:	4293      	cmp	r3, r2
 810198a:	f000 813b 	beq.w	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 810198e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101992:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101996:	681b      	ldr	r3, [r3, #0]
 8101998:	68da      	ldr	r2, [r3, #12]
 810199a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810199e:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 81019a2:	4618      	mov	r0, r3
 81019a4:	4611      	mov	r1, r2
 81019a6:	2390      	movs	r3, #144	; 0x90
 81019a8:	461a      	mov	r2, r3
 81019aa:	f009 fecf 	bl	810b74c <memcpy>
 81019ae:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81019b2:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 81019b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81019b8:	681b      	ldr	r3, [r3, #0]
 81019ba:	4a87      	ldr	r2, [pc, #540]	; (8101bd8 <_ZN5Xicro9Spin_nodeEv+0x390>)
 81019bc:	4293      	cmp	r3, r2
 81019be:	f000 8121 	beq.w	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 81019c2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81019c6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81019ca:	681b      	ldr	r3, [r3, #0]
 81019cc:	68da      	ldr	r2, [r3, #12]
 81019ce:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81019d2:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 81019d6:	4618      	mov	r0, r3
 81019d8:	4611      	mov	r1, r2
 81019da:	2390      	movs	r3, #144	; 0x90
 81019dc:	461a      	mov	r2, r3
 81019de:	f009 feb5 	bl	810b74c <memcpy>
 81019e2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81019e6:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 81019ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81019ec:	681b      	ldr	r3, [r3, #0]
 81019ee:	4a7b      	ldr	r2, [pc, #492]	; (8101bdc <_ZN5Xicro9Spin_nodeEv+0x394>)
 81019f0:	4293      	cmp	r3, r2
 81019f2:	f000 8107 	beq.w	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 81019f6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81019fa:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81019fe:	681b      	ldr	r3, [r3, #0]
 8101a00:	68da      	ldr	r2, [r3, #12]
 8101a02:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101a06:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 8101a0a:	4618      	mov	r0, r3
 8101a0c:	4611      	mov	r1, r2
 8101a0e:	2390      	movs	r3, #144	; 0x90
 8101a10:	461a      	mov	r2, r3
 8101a12:	f009 fe9b 	bl	810b74c <memcpy>
 8101a16:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101a1a:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 8101a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8101a20:	681b      	ldr	r3, [r3, #0]
 8101a22:	4a6f      	ldr	r2, [pc, #444]	; (8101be0 <_ZN5Xicro9Spin_nodeEv+0x398>)
 8101a24:	4293      	cmp	r3, r2
 8101a26:	f000 80ed 	beq.w	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 8101a2a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101a2e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101a32:	681b      	ldr	r3, [r3, #0]
 8101a34:	68da      	ldr	r2, [r3, #12]
 8101a36:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101a3a:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8101a3e:	4618      	mov	r0, r3
 8101a40:	4611      	mov	r1, r2
 8101a42:	2390      	movs	r3, #144	; 0x90
 8101a44:	461a      	mov	r2, r3
 8101a46:	f009 fe81 	bl	810b74c <memcpy>
 8101a4a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101a4e:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8101a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8101a54:	681b      	ldr	r3, [r3, #0]
 8101a56:	4a63      	ldr	r2, [pc, #396]	; (8101be4 <_ZN5Xicro9Spin_nodeEv+0x39c>)
 8101a58:	4293      	cmp	r3, r2
 8101a5a:	f000 80d3 	beq.w	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 8101a5e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101a62:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101a66:	681b      	ldr	r3, [r3, #0]
 8101a68:	68da      	ldr	r2, [r3, #12]
 8101a6a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101a6e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8101a72:	4618      	mov	r0, r3
 8101a74:	4611      	mov	r1, r2
 8101a76:	2390      	movs	r3, #144	; 0x90
 8101a78:	461a      	mov	r2, r3
 8101a7a:	f009 fe67 	bl	810b74c <memcpy>
 8101a7e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101a82:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8101a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8101a88:	681b      	ldr	r3, [r3, #0]
 8101a8a:	4a57      	ldr	r2, [pc, #348]	; (8101be8 <_ZN5Xicro9Spin_nodeEv+0x3a0>)
 8101a8c:	4293      	cmp	r3, r2
 8101a8e:	f000 80b9 	beq.w	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 8101a92:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101a96:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101a9a:	681b      	ldr	r3, [r3, #0]
 8101a9c:	68da      	ldr	r2, [r3, #12]
 8101a9e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101aa2:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8101aa6:	4618      	mov	r0, r3
 8101aa8:	4611      	mov	r1, r2
 8101aaa:	2390      	movs	r3, #144	; 0x90
 8101aac:	461a      	mov	r2, r3
 8101aae:	f009 fe4d 	bl	810b74c <memcpy>
 8101ab2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101ab6:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8101aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8101abc:	681b      	ldr	r3, [r3, #0]
 8101abe:	4a4b      	ldr	r2, [pc, #300]	; (8101bec <_ZN5Xicro9Spin_nodeEv+0x3a4>)
 8101ac0:	4293      	cmp	r3, r2
 8101ac2:	f000 809f 	beq.w	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 8101ac6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101aca:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101ace:	681b      	ldr	r3, [r3, #0]
 8101ad0:	68da      	ldr	r2, [r3, #12]
 8101ad2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101ad6:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8101ada:	4618      	mov	r0, r3
 8101adc:	4611      	mov	r1, r2
 8101ade:	2390      	movs	r3, #144	; 0x90
 8101ae0:	461a      	mov	r2, r3
 8101ae2:	f009 fe33 	bl	810b74c <memcpy>
 8101ae6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101aea:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8101aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8101af0:	681b      	ldr	r3, [r3, #0]
 8101af2:	4a3f      	ldr	r2, [pc, #252]	; (8101bf0 <_ZN5Xicro9Spin_nodeEv+0x3a8>)
 8101af4:	4293      	cmp	r3, r2
 8101af6:	f000 8085 	beq.w	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 8101afa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101afe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101b02:	681b      	ldr	r3, [r3, #0]
 8101b04:	68da      	ldr	r2, [r3, #12]
 8101b06:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101b0a:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8101b0e:	4618      	mov	r0, r3
 8101b10:	4611      	mov	r1, r2
 8101b12:	2390      	movs	r3, #144	; 0x90
 8101b14:	461a      	mov	r2, r3
 8101b16:	f009 fe19 	bl	810b74c <memcpy>
 8101b1a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101b1e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8101b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8101b24:	681b      	ldr	r3, [r3, #0]
 8101b26:	4a33      	ldr	r2, [pc, #204]	; (8101bf4 <_ZN5Xicro9Spin_nodeEv+0x3ac>)
 8101b28:	4293      	cmp	r3, r2
 8101b2a:	d06b      	beq.n	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 8101b2c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101b30:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101b34:	681b      	ldr	r3, [r3, #0]
 8101b36:	68da      	ldr	r2, [r3, #12]
 8101b38:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101b3c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8101b40:	4618      	mov	r0, r3
 8101b42:	4611      	mov	r1, r2
 8101b44:	2390      	movs	r3, #144	; 0x90
 8101b46:	461a      	mov	r2, r3
 8101b48:	f009 fe00 	bl	810b74c <memcpy>
 8101b4c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101b50:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8101b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8101b56:	681b      	ldr	r3, [r3, #0]
 8101b58:	4a27      	ldr	r2, [pc, #156]	; (8101bf8 <_ZN5Xicro9Spin_nodeEv+0x3b0>)
 8101b5a:	4293      	cmp	r3, r2
 8101b5c:	d052      	beq.n	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 8101b5e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101b62:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101b66:	681b      	ldr	r3, [r3, #0]
 8101b68:	68da      	ldr	r2, [r3, #12]
 8101b6a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101b6e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8101b72:	4618      	mov	r0, r3
 8101b74:	4611      	mov	r1, r2
 8101b76:	2390      	movs	r3, #144	; 0x90
 8101b78:	461a      	mov	r2, r3
 8101b7a:	f009 fde7 	bl	810b74c <memcpy>
 8101b7e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101b82:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8101b86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8101b88:	681b      	ldr	r3, [r3, #0]
 8101b8a:	4a1c      	ldr	r2, [pc, #112]	; (8101bfc <_ZN5Xicro9Spin_nodeEv+0x3b4>)
 8101b8c:	4293      	cmp	r3, r2
 8101b8e:	d039      	beq.n	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 8101b90:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101b94:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101b98:	681b      	ldr	r3, [r3, #0]
 8101b9a:	68da      	ldr	r2, [r3, #12]
 8101b9c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101ba0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8101ba4:	4618      	mov	r0, r3
 8101ba6:	4611      	mov	r1, r2
 8101ba8:	2390      	movs	r3, #144	; 0x90
 8101baa:	461a      	mov	r2, r3
 8101bac:	f009 fdce 	bl	810b74c <memcpy>
 8101bb0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101bb4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8101bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8101bba:	681b      	ldr	r3, [r3, #0]
 8101bbc:	4a10      	ldr	r2, [pc, #64]	; (8101c00 <_ZN5Xicro9Spin_nodeEv+0x3b8>)
 8101bbe:	4293      	cmp	r3, r2
 8101bc0:	d139      	bne.n	8101c36 <_ZN5Xicro9Spin_nodeEv+0x3ee>
 8101bc2:	e01f      	b.n	8101c04 <_ZN5Xicro9Spin_nodeEv+0x3bc>
 8101bc4:	40020010 	.word	0x40020010
 8101bc8:	40020028 	.word	0x40020028
 8101bcc:	40020040 	.word	0x40020040
 8101bd0:	40020058 	.word	0x40020058
 8101bd4:	40020070 	.word	0x40020070
 8101bd8:	40020088 	.word	0x40020088
 8101bdc:	400200a0 	.word	0x400200a0
 8101be0:	400200b8 	.word	0x400200b8
 8101be4:	40020410 	.word	0x40020410
 8101be8:	40020428 	.word	0x40020428
 8101bec:	40020440 	.word	0x40020440
 8101bf0:	40020458 	.word	0x40020458
 8101bf4:	40020470 	.word	0x40020470
 8101bf8:	40020488 	.word	0x40020488
 8101bfc:	400204a0 	.word	0x400204a0
 8101c00:	400204b8 	.word	0x400204b8
 8101c04:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101c08:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101c0c:	681b      	ldr	r3, [r3, #0]
 8101c0e:	68da      	ldr	r2, [r3, #12]
 8101c10:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101c14:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8101c18:	4618      	mov	r0, r3
 8101c1a:	4611      	mov	r1, r2
 8101c1c:	2390      	movs	r3, #144	; 0x90
 8101c1e:	461a      	mov	r2, r3
 8101c20:	f009 fd94 	bl	810b74c <memcpy>
 8101c24:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101c28:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8101c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8101c2e:	681b      	ldr	r3, [r3, #0]
 8101c30:	685b      	ldr	r3, [r3, #4]
 8101c32:	b2db      	uxtb	r3, r3
 8101c34:	e011      	b.n	8101c5a <_ZN5Xicro9Spin_nodeEv+0x412>
 8101c36:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101c3a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101c3e:	681b      	ldr	r3, [r3, #0]
 8101c40:	68da      	ldr	r2, [r3, #12]
 8101c42:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 8101c46:	4611      	mov	r1, r2
 8101c48:	2290      	movs	r2, #144	; 0x90
 8101c4a:	4618      	mov	r0, r3
 8101c4c:	f009 fd7e 	bl	810b74c <memcpy>
 8101c50:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8101c54:	681b      	ldr	r3, [r3, #0]
 8101c56:	685b      	ldr	r3, [r3, #4]
 8101c58:	b2db      	uxtb	r3, r3
 8101c5a:	1af3      	subs	r3, r6, r3
 8101c5c:	b2da      	uxtb	r2, r3
 8101c5e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101c62:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101c66:	681b      	ldr	r3, [r3, #0]
 8101c68:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
        
 8101c6c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101c70:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101c74:	681b      	ldr	r3, [r3, #0]
 8101c76:	f893 21b0 	ldrb.w	r2, [r3, #432]	; 0x1b0
 8101c7a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101c7e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101c82:	681b      	ldr	r3, [r3, #0]
 8101c84:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 8101c88:	429a      	cmp	r2, r3
 8101c8a:	f003 8012 	beq.w	8104cb2 <_ZN5Xicro9Spin_nodeEv+0x346a>
        switch (_state){
 8101c8e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101c92:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101c96:	681b      	ldr	r3, [r3, #0]
 8101c98:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 8101c9c:	461a      	mov	r2, r3
 8101c9e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101ca2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101ca6:	681b      	ldr	r3, [r3, #0]
 8101ca8:	4413      	add	r3, r2
 8101caa:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
 8101cae:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101cb2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101cb6:	681b      	ldr	r3, [r3, #0]
 8101cb8:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            case 0:
                if(_datain[0]==73){
                    _crcIn=0;
 8101cbc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101cc0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101cc4:	681b      	ldr	r3, [r3, #0]
 8101cc6:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8101cca:	2be1      	cmp	r3, #225	; 0xe1
 8101ccc:	f002 879d 	beq.w	8104c0a <_ZN5Xicro9Spin_nodeEv+0x33c2>
 8101cd0:	2be1      	cmp	r3, #225	; 0xe1
 8101cd2:	f302 87b8 	bgt.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
 8101cd6:	2bdf      	cmp	r3, #223	; 0xdf
 8101cd8:	f002 876c 	beq.w	8104bb4 <_ZN5Xicro9Spin_nodeEv+0x336c>
 8101cdc:	2bdf      	cmp	r3, #223	; 0xdf
 8101cde:	f302 87b2 	bgt.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
 8101ce2:	2b6f      	cmp	r3, #111	; 0x6f
 8101ce4:	f300 80ea 	bgt.w	8101ebc <_ZN5Xicro9Spin_nodeEv+0x674>
 8101ce8:	2b00      	cmp	r3, #0
 8101cea:	f2c2 87ac 	blt.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
 8101cee:	2b6f      	cmp	r3, #111	; 0x6f
 8101cf0:	f202 87a9 	bhi.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
 8101cf4:	a201      	add	r2, pc, #4	; (adr r2, 8101cfc <_ZN5Xicro9Spin_nodeEv+0x4b4>)
 8101cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101cfa:	bf00      	nop
 8101cfc:	08101ec7 	.word	0x08101ec7
 8101d00:	08101f11 	.word	0x08101f11
 8101d04:	08101f4b 	.word	0x08101f4b
 8101d08:	08101f85 	.word	0x08101f85
 8101d0c:	08101fbf 	.word	0x08101fbf
 8101d10:	081020b3 	.word	0x081020b3
 8101d14:	08102151 	.word	0x08102151
 8101d18:	08104c47 	.word	0x08104c47
 8101d1c:	08104c47 	.word	0x08104c47
 8101d20:	08103589 	.word	0x08103589
 8101d24:	081035dd 	.word	0x081035dd
 8101d28:	08103741 	.word	0x08103741
 8101d2c:	08104c47 	.word	0x08104c47
 8101d30:	08104c47 	.word	0x08104c47
 8101d34:	08104c47 	.word	0x08104c47
 8101d38:	08104c47 	.word	0x08104c47
 8101d3c:	08104c47 	.word	0x08104c47
 8101d40:	08104c47 	.word	0x08104c47
 8101d44:	08104c47 	.word	0x08104c47
 8101d48:	08104c47 	.word	0x08104c47
 8101d4c:	08104c47 	.word	0x08104c47
 8101d50:	08104c47 	.word	0x08104c47
 8101d54:	08104c47 	.word	0x08104c47
 8101d58:	08104c47 	.word	0x08104c47
 8101d5c:	08104c47 	.word	0x08104c47
 8101d60:	08104c47 	.word	0x08104c47
 8101d64:	08104c47 	.word	0x08104c47
 8101d68:	08104c47 	.word	0x08104c47
 8101d6c:	08104c47 	.word	0x08104c47
 8101d70:	08104c47 	.word	0x08104c47
 8101d74:	08104c47 	.word	0x08104c47
 8101d78:	08104c47 	.word	0x08104c47
 8101d7c:	08104c47 	.word	0x08104c47
 8101d80:	08104c47 	.word	0x08104c47
 8101d84:	08104c47 	.word	0x08104c47
 8101d88:	08104c47 	.word	0x08104c47
 8101d8c:	08104c47 	.word	0x08104c47
 8101d90:	08104c47 	.word	0x08104c47
 8101d94:	08104c47 	.word	0x08104c47
 8101d98:	08104c47 	.word	0x08104c47
 8101d9c:	08104c47 	.word	0x08104c47
 8101da0:	08104c47 	.word	0x08104c47
 8101da4:	08104c47 	.word	0x08104c47
 8101da8:	08104c47 	.word	0x08104c47
 8101dac:	08104c47 	.word	0x08104c47
 8101db0:	08104c47 	.word	0x08104c47
 8101db4:	08104c47 	.word	0x08104c47
 8101db8:	08104c47 	.word	0x08104c47
 8101dbc:	08104c47 	.word	0x08104c47
 8101dc0:	08104c47 	.word	0x08104c47
 8101dc4:	0810327f 	.word	0x0810327f
 8101dc8:	0810332b 	.word	0x0810332b
 8101dcc:	081033d1 	.word	0x081033d1
 8101dd0:	08103477 	.word	0x08103477
 8101dd4:	081034fd 	.word	0x081034fd
 8101dd8:	08104c47 	.word	0x08104c47
 8101ddc:	08104c47 	.word	0x08104c47
 8101de0:	08104c47 	.word	0x08104c47
 8101de4:	08104c47 	.word	0x08104c47
 8101de8:	08104c47 	.word	0x08104c47
 8101dec:	081030b3 	.word	0x081030b3
 8101df0:	08104c47 	.word	0x08104c47
 8101df4:	08104c47 	.word	0x08104c47
 8101df8:	08104c47 	.word	0x08104c47
 8101dfc:	08104c47 	.word	0x08104c47
 8101e00:	08104c47 	.word	0x08104c47
 8101e04:	08104c47 	.word	0x08104c47
 8101e08:	08104c47 	.word	0x08104c47
 8101e0c:	08104c47 	.word	0x08104c47
 8101e10:	08104c47 	.word	0x08104c47
 8101e14:	08104c47 	.word	0x08104c47
 8101e18:	08104c47 	.word	0x08104c47
 8101e1c:	08104c47 	.word	0x08104c47
 8101e20:	08104c47 	.word	0x08104c47
 8101e24:	08104c47 	.word	0x08104c47
 8101e28:	08104c47 	.word	0x08104c47
 8101e2c:	08104c47 	.word	0x08104c47
 8101e30:	08104c47 	.word	0x08104c47
 8101e34:	08104c47 	.word	0x08104c47
 8101e38:	08104c47 	.word	0x08104c47
 8101e3c:	08104c47 	.word	0x08104c47
 8101e40:	08104c47 	.word	0x08104c47
 8101e44:	08104c47 	.word	0x08104c47
 8101e48:	08104c47 	.word	0x08104c47
 8101e4c:	08104c47 	.word	0x08104c47
 8101e50:	08104c47 	.word	0x08104c47
 8101e54:	08104c47 	.word	0x08104c47
 8101e58:	08104c47 	.word	0x08104c47
 8101e5c:	08104c47 	.word	0x08104c47
 8101e60:	08104c47 	.word	0x08104c47
 8101e64:	08103fb9 	.word	0x08103fb9
 8101e68:	08104c47 	.word	0x08104c47
 8101e6c:	08104c47 	.word	0x08104c47
 8101e70:	08104c47 	.word	0x08104c47
 8101e74:	08104c47 	.word	0x08104c47
 8101e78:	08104c47 	.word	0x08104c47
 8101e7c:	08104c47 	.word	0x08104c47
 8101e80:	08104c47 	.word	0x08104c47
 8101e84:	08104c47 	.word	0x08104c47
 8101e88:	081049db 	.word	0x081049db
 8101e8c:	08104a5b 	.word	0x08104a5b
 8101e90:	08104c47 	.word	0x08104c47
 8101e94:	08104c47 	.word	0x08104c47
 8101e98:	08104c47 	.word	0x08104c47
 8101e9c:	08104c47 	.word	0x08104c47
 8101ea0:	08104c47 	.word	0x08104c47
 8101ea4:	08104c47 	.word	0x08104c47
 8101ea8:	08104c47 	.word	0x08104c47
 8101eac:	08104c47 	.word	0x08104c47
 8101eb0:	08104c47 	.word	0x08104c47
 8101eb4:	08104c47 	.word	0x08104c47
 8101eb8:	08103ff3 	.word	0x08103ff3
 8101ebc:	2bde      	cmp	r3, #222	; 0xde
 8101ebe:	f002 864c 	beq.w	8104b5a <_ZN5Xicro9Spin_nodeEv+0x3312>
 8101ec2:	f002 bec0 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _state=1;
                }else{
 8101ec6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101eca:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101ece:	681b      	ldr	r3, [r3, #0]
 8101ed0:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8101ed4:	2b49      	cmp	r3, #73	; 0x49
 8101ed6:	d111      	bne.n	8101efc <_ZN5Xicro9Spin_nodeEv+0x6b4>
                    _state=0;
 8101ed8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101edc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101ee0:	681b      	ldr	r3, [r3, #0]
 8101ee2:	2200      	movs	r2, #0
 8101ee4:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                }
 8101ee8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101eec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101ef0:	681b      	ldr	r3, [r3, #0]
 8101ef2:	2201      	movs	r2, #1
 8101ef4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                break;
            case 1:
                if(_datain[0]==109){
                    _state=2;
 8101ef8:	f002 bea5 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
            case 1:
 8101efc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101f00:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101f04:	681b      	ldr	r3, [r3, #0]
 8101f06:	2200      	movs	r2, #0
 8101f08:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=2;
 8101f0c:	f002 be9b 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                }else{
                    _state=0;
 8101f10:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101f14:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101f18:	681b      	ldr	r3, [r3, #0]
 8101f1a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8101f1e:	2b6d      	cmp	r3, #109	; 0x6d
 8101f20:	d109      	bne.n	8101f36 <_ZN5Xicro9Spin_nodeEv+0x6ee>
                }
 8101f22:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101f26:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101f2a:	681b      	ldr	r3, [r3, #0]
 8101f2c:	2202      	movs	r2, #2
 8101f2e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                break;
            case 2:
                if(_datain[0]==64){
                    _state=3;
 8101f32:	f002 be88 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
            case 2:
 8101f36:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101f3a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101f3e:	681b      	ldr	r3, [r3, #0]
 8101f40:	2200      	movs	r2, #0
 8101f42:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=3;
 8101f46:	f002 be7e 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                }else{
                    _state=0;
 8101f4a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101f4e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101f52:	681b      	ldr	r3, [r3, #0]
 8101f54:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8101f58:	2b40      	cmp	r3, #64	; 0x40
 8101f5a:	d109      	bne.n	8101f70 <_ZN5Xicro9Spin_nodeEv+0x728>
                }
 8101f5c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101f60:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101f64:	681b      	ldr	r3, [r3, #0]
 8101f66:	2203      	movs	r2, #3
 8101f68:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                break;
            case 3:
                if(_datain[0]==99){
                    _state=4;
 8101f6c:	f002 be6b 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
            case 3:
 8101f70:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101f74:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101f78:	681b      	ldr	r3, [r3, #0]
 8101f7a:	2200      	movs	r2, #0
 8101f7c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=4;
 8101f80:	f002 be61 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                }else{
                    _state=0;
 8101f84:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101f88:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101f8c:	681b      	ldr	r3, [r3, #0]
 8101f8e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8101f92:	2b63      	cmp	r3, #99	; 0x63
 8101f94:	d109      	bne.n	8101faa <_ZN5Xicro9Spin_nodeEv+0x762>
                }
 8101f96:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101f9a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101f9e:	681b      	ldr	r3, [r3, #0]
 8101fa0:	2204      	movs	r2, #4
 8101fa2:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                break;
            //strat protocol done
            case 4: // Signature
                q = _datain[0];
 8101fa6:	f002 be4e 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
            //strat protocol done
 8101faa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101fae:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101fb2:	681b      	ldr	r3, [r3, #0]
 8101fb4:	2200      	movs	r2, #0
 8101fb6:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                q = _datain[0];
 8101fba:	f002 be44 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                w = _datain[0];
                q=q&0b11110000;
                q=q>>4;
 8101fbe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101fc2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101fc6:	681b      	ldr	r3, [r3, #0]
 8101fc8:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8101fcc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101fd0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101fd4:	681b      	ldr	r3, [r3, #0]
 8101fd6:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
                w=w&0b1111;
 8101fda:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101fde:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101fe2:	681b      	ldr	r3, [r3, #0]
 8101fe4:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8101fe8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101fec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101ff0:	681b      	ldr	r3, [r3, #0]
 8101ff2:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
                if(q == _Idmcu && w==2){
 8101ff6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8101ffa:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8101ffe:	681b      	ldr	r3, [r3, #0]
 8102000:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8102004:	f023 030f 	bic.w	r3, r3, #15
 8102008:	b2da      	uxtb	r2, r3
 810200a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810200e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102012:	681b      	ldr	r3, [r3, #0]
 8102014:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
                   _state=5;  //check Idtopic
 8102018:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810201c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102020:	681b      	ldr	r3, [r3, #0]
 8102022:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8102026:	091b      	lsrs	r3, r3, #4
 8102028:	b2da      	uxtb	r2, r3
 810202a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810202e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102032:	681b      	ldr	r3, [r3, #0]
 8102034:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
                }else{
 8102038:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810203c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102040:	681b      	ldr	r3, [r3, #0]
 8102042:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8102046:	f003 030f 	and.w	r3, r3, #15
 810204a:	b2da      	uxtb	r2, r3
 810204c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102050:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102054:	681b      	ldr	r3, [r3, #0]
 8102056:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
                    _state=0;
 810205a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810205e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102062:	681b      	ldr	r3, [r3, #0]
 8102064:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 8102068:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810206c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102070:	681b      	ldr	r3, [r3, #0]
 8102072:	7a5b      	ldrb	r3, [r3, #9]
 8102074:	429a      	cmp	r2, r3
 8102076:	d112      	bne.n	810209e <_ZN5Xicro9Spin_nodeEv+0x856>
 8102078:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810207c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102080:	681b      	ldr	r3, [r3, #0]
 8102082:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8102086:	2b02      	cmp	r3, #2
 8102088:	d109      	bne.n	810209e <_ZN5Xicro9Spin_nodeEv+0x856>
                }
 810208a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810208e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102092:	681b      	ldr	r3, [r3, #0]
 8102094:	2205      	movs	r2, #5
 8102096:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                break;
            case 5:
                for (uint i=0;i<sizeof(_Idtopic_sub);i++){
                    if(_Idtopic_sub[i]== _datain[0]){
 810209a:	f002 bdd4 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
            case 5:
 810209e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81020a2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81020a6:	681b      	ldr	r3, [r3, #0]
 81020a8:	2200      	movs	r2, #0
 81020aa:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    if(_Idtopic_sub[i]== _datain[0]){
 81020ae:	f002 bdca 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                        _Indexdata=255;
                        _OnTopic=i;
 81020b2:	2300      	movs	r3, #0
 81020b4:	f8c7 3b04 	str.w	r3, [r7, #2820]	; 0xb04
 81020b8:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 81020bc:	2b00      	cmp	r3, #0
 81020be:	f042 85bf 	bne.w	8104c40 <_ZN5Xicro9Spin_nodeEv+0x33f8>
                        _Onindex=0;
 81020c2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81020c6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81020ca:	681a      	ldr	r2, [r3, #0]
 81020cc:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 81020d0:	4413      	add	r3, r2
 81020d2:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 81020d6:	781a      	ldrb	r2, [r3, #0]
 81020d8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81020dc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81020e0:	681b      	ldr	r3, [r3, #0]
 81020e2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 81020e6:	429a      	cmp	r2, r3
 81020e8:	d124      	bne.n	8102134 <_ZN5Xicro9Spin_nodeEv+0x8ec>
                        _state=6;
 81020ea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81020ee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81020f2:	681b      	ldr	r3, [r3, #0]
 81020f4:	22ff      	movs	r2, #255	; 0xff
 81020f6:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                      
 81020fa:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 81020fe:	b25a      	sxtb	r2, r3
 8102100:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102104:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102108:	681b      	ldr	r3, [r3, #0]
 810210a:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
                        break;
 810210e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102112:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102116:	681b      	ldr	r3, [r3, #0]
 8102118:	2200      	movs	r2, #0
 810211a:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
                    }else{
 810211e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102122:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102126:	681b      	ldr	r3, [r3, #0]
 8102128:	2206      	movs	r2, #6
 810212a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                        _state=0;
                    }
 810212e:	bf00      	nop
                }
                break;
            case 6:  //select type
                if(_datain[0]==_TopicType[_OnTopic][_Onindex]){
                    if(_datain[0]== 8  ||_datain[0]== 18 ){
 8102130:	f002 bd86 	b.w	8104c40 <_ZN5Xicro9Spin_nodeEv+0x33f8>
                break;
 8102134:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102138:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810213c:	681b      	ldr	r3, [r3, #0]
 810213e:	2200      	movs	r2, #0
 8102140:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                        _OnTopic=i;
 8102144:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8102148:	3301      	adds	r3, #1
 810214a:	f8c7 3b04 	str.w	r3, [r7, #2820]	; 0xb04
 810214e:	e7b3      	b.n	81020b8 <_ZN5Xicro9Spin_nodeEv+0x870>
                        _Indexdata=_Indexdata+1;
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8102150:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102154:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102158:	681b      	ldr	r3, [r3, #0]
 810215a:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 810215e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102162:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102166:	681b      	ldr	r3, [r3, #0]
 8102168:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 810216c:	461c      	mov	r4, r3
 810216e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102172:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102176:	681b      	ldr	r3, [r3, #0]
 8102178:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 810217c:	4618      	mov	r0, r3
 810217e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102182:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102186:	6819      	ldr	r1, [r3, #0]
 8102188:	0063      	lsls	r3, r4, #1
 810218a:	440b      	add	r3, r1
 810218c:	4403      	add	r3, r0
 810218e:	f203 135d 	addw	r3, r3, #349	; 0x15d
 8102192:	781b      	ldrb	r3, [r3, #0]
 8102194:	429a      	cmp	r2, r3
 8102196:	f040 8780 	bne.w	810309a <_ZN5Xicro9Spin_nodeEv+0x1852>
                        _Ontype=_datain[0];
 810219a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810219e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81021a2:	681b      	ldr	r3, [r3, #0]
 81021a4:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 81021a8:	2b08      	cmp	r3, #8
 81021aa:	d008      	beq.n	81021be <_ZN5Xicro9Spin_nodeEv+0x976>
 81021ac:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81021b0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81021b4:	681b      	ldr	r3, [r3, #0]
 81021b6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 81021ba:	2b12      	cmp	r3, #18
 81021bc:	d151      	bne.n	8102262 <_ZN5Xicro9Spin_nodeEv+0xa1a>
                        _Ongrab=0;
 81021be:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81021c2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81021c6:	681b      	ldr	r3, [r3, #0]
 81021c8:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 81021cc:	3301      	adds	r3, #1
 81021ce:	b2da      	uxtb	r2, r3
 81021d0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81021d4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81021d8:	681b      	ldr	r3, [r3, #0]
 81021da:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                        _state=10;
 81021de:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81021e2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81021e6:	681b      	ldr	r3, [r3, #0]
 81021e8:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81021ec:	4618      	mov	r0, r3
 81021ee:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81021f2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81021f6:	681b      	ldr	r3, [r3, #0]
 81021f8:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 81021fc:	4619      	mov	r1, r3
 81021fe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102202:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102206:	681a      	ldr	r2, [r3, #0]
 8102208:	0043      	lsls	r3, r0, #1
 810220a:	4413      	add	r3, r2
 810220c:	440b      	add	r3, r1
 810220e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8102212:	781a      	ldrb	r2, [r3, #0]
 8102214:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102218:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810221c:	681b      	ldr	r3, [r3, #0]
 810221e:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
                    }else if(_datain[0]== 9 ||_datain[0]== 19){
 8102222:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102226:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810222a:	681b      	ldr	r3, [r3, #0]
 810222c:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8102230:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102234:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102238:	681b      	ldr	r3, [r3, #0]
 810223a:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                        _Indexdata=_Indexdata+1;
 810223e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102242:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102246:	681b      	ldr	r3, [r3, #0]
 8102248:	2200      	movs	r2, #0
 810224a:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 810224e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102252:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102256:	681b      	ldr	r3, [r3, #0]
 8102258:	220a      	movs	r2, #10
 810225a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 810225e:	f000 bf26 	b.w	81030ae <_ZN5Xicro9Spin_nodeEv+0x1866>
                        _Ontype=_datain[0];
 8102262:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102266:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810226a:	681b      	ldr	r3, [r3, #0]
 810226c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102270:	2b09      	cmp	r3, #9
 8102272:	d008      	beq.n	8102286 <_ZN5Xicro9Spin_nodeEv+0xa3e>
 8102274:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102278:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810227c:	681b      	ldr	r3, [r3, #0]
 810227e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102282:	2b13      	cmp	r3, #19
 8102284:	d159      	bne.n	810233a <_ZN5Xicro9Spin_nodeEv+0xaf2>
                        _Ongrab=0;
 8102286:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810228a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810228e:	681b      	ldr	r3, [r3, #0]
 8102290:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102294:	3301      	adds	r3, #1
 8102296:	b2da      	uxtb	r2, r3
 8102298:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810229c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81022a0:	681b      	ldr	r3, [r3, #0]
 81022a2:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                        _statetogo=10;
 81022a6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81022aa:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81022ae:	681b      	ldr	r3, [r3, #0]
 81022b0:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81022b4:	4618      	mov	r0, r3
 81022b6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81022ba:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81022be:	681b      	ldr	r3, [r3, #0]
 81022c0:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 81022c4:	4619      	mov	r1, r3
 81022c6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81022ca:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81022ce:	681a      	ldr	r2, [r3, #0]
 81022d0:	0043      	lsls	r3, r0, #1
 81022d2:	4413      	add	r3, r2
 81022d4:	440b      	add	r3, r1
 81022d6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 81022da:	781a      	ldrb	r2, [r3, #0]
 81022dc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81022e0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81022e4:	681b      	ldr	r3, [r3, #0]
 81022e6:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
                        _state=9;
 81022ea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81022ee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81022f2:	681b      	ldr	r3, [r3, #0]
 81022f4:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 81022f8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81022fc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102300:	681b      	ldr	r3, [r3, #0]
 8102302:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                    }else if(_datain[0]==16 ||_datain[0]== 116){
 8102306:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810230a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810230e:	681b      	ldr	r3, [r3, #0]
 8102310:	2200      	movs	r2, #0
 8102312:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                        _loop=0;
 8102316:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810231a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810231e:	681b      	ldr	r3, [r3, #0]
 8102320:	220a      	movs	r2, #10
 8102322:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
                        _loopTo=2;
 8102326:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810232a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810232e:	681b      	ldr	r3, [r3, #0]
 8102330:	2209      	movs	r2, #9
 8102332:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8102336:	f000 beba 	b.w	81030ae <_ZN5Xicro9Spin_nodeEv+0x1866>
                        _Indexdata=_Indexdata+1;_Posdatapre=(_Posdatapre+1)%32;
 810233a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810233e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102342:	681b      	ldr	r3, [r3, #0]
 8102344:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102348:	2b10      	cmp	r3, #16
 810234a:	d009      	beq.n	8102360 <_ZN5Xicro9Spin_nodeEv+0xb18>
 810234c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102350:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102354:	681b      	ldr	r3, [r3, #0]
 8102356:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 810235a:	2b74      	cmp	r3, #116	; 0x74
 810235c:	f040 8084 	bne.w	8102468 <_ZN5Xicro9Spin_nodeEv+0xc20>
                        _Ontype=_datain[0];
 8102360:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102364:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102368:	681b      	ldr	r3, [r3, #0]
 810236a:	2200      	movs	r2, #0
 810236c:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8102370:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102374:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102378:	681b      	ldr	r3, [r3, #0]
 810237a:	2202      	movs	r2, #2
 810237c:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
                        _Ongrab=0;
 8102380:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102384:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102388:	681b      	ldr	r3, [r3, #0]
 810238a:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 810238e:	3301      	adds	r3, #1
 8102390:	b2da      	uxtb	r2, r3
 8102392:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102396:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810239a:	681b      	ldr	r3, [r3, #0]
 810239c:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
 81023a0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81023a4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81023a8:	681b      	ldr	r3, [r3, #0]
 81023aa:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 81023ae:	3301      	adds	r3, #1
 81023b0:	425a      	negs	r2, r3
 81023b2:	f003 031f 	and.w	r3, r3, #31
 81023b6:	f002 021f 	and.w	r2, r2, #31
 81023ba:	bf58      	it	pl
 81023bc:	4253      	negpl	r3, r2
 81023be:	b2da      	uxtb	r2, r3
 81023c0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81023c4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81023c8:	681b      	ldr	r3, [r3, #0]
 81023ca:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
                        _bb=0;
 81023ce:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81023d2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81023d6:	681b      	ldr	r3, [r3, #0]
 81023d8:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 81023dc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81023e0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81023e4:	681b      	ldr	r3, [r3, #0]
 81023e6:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                        _state=11;  
 81023ea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81023ee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81023f2:	681b      	ldr	r3, [r3, #0]
 81023f4:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81023f8:	4618      	mov	r0, r3
 81023fa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81023fe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102402:	681b      	ldr	r3, [r3, #0]
 8102404:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102408:	4619      	mov	r1, r3
 810240a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810240e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102412:	681a      	ldr	r2, [r3, #0]
 8102414:	0043      	lsls	r3, r0, #1
 8102416:	4413      	add	r3, r2
 8102418:	440b      	add	r3, r1
 810241a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 810241e:	781a      	ldrb	r2, [r3, #0]
 8102420:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102424:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e

 810242e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102432:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102436:	681b      	ldr	r3, [r3, #0]
 8102438:	2200      	movs	r2, #0
 810243a:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                    }else if(_datain[0]==17 ||_datain[0]== 117){
 810243e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102442:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102446:	6819      	ldr	r1, [r3, #0]
 8102448:	f04f 0200 	mov.w	r2, #0
 810244c:	f04f 0300 	mov.w	r3, #0
 8102450:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
                        _loop=0;
 8102454:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102458:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810245c:	681b      	ldr	r3, [r3, #0]
 810245e:	220b      	movs	r2, #11
 8102460:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8102464:	f000 be23 	b.w	81030ae <_ZN5Xicro9Spin_nodeEv+0x1866>
                        _loopTo=2;
                        _Indexdata=_Indexdata+1;
 8102468:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810246c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102470:	681b      	ldr	r3, [r3, #0]
 8102472:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102476:	2b11      	cmp	r3, #17
 8102478:	d008      	beq.n	810248c <_ZN5Xicro9Spin_nodeEv+0xc44>
 810247a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810247e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102482:	681b      	ldr	r3, [r3, #0]
 8102484:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102488:	2b75      	cmp	r3, #117	; 0x75
 810248a:	d174      	bne.n	8102576 <_ZN5Xicro9Spin_nodeEv+0xd2e>
                        _Ontype=_datain[0];
 810248c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102490:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102494:	681b      	ldr	r3, [r3, #0]
 8102496:	2200      	movs	r2, #0
 8102498:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 810249c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81024a0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81024a4:	681b      	ldr	r3, [r3, #0]
 81024a6:	2202      	movs	r2, #2
 81024a8:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
                        _Ongrab=0;
 81024ac:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81024b0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81024b4:	681b      	ldr	r3, [r3, #0]
 81024b6:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 81024ba:	3301      	adds	r3, #1
 81024bc:	b2da      	uxtb	r2, r3
 81024be:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81024c2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81024c6:	681b      	ldr	r3, [r3, #0]
 81024c8:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                        _bb=0;
 81024cc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81024d0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81024d4:	681b      	ldr	r3, [r3, #0]
 81024d6:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 81024da:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81024de:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81024e2:	681b      	ldr	r3, [r3, #0]
 81024e4:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                        _statetogo=11;
 81024e8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81024ec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81024f0:	681b      	ldr	r3, [r3, #0]
 81024f2:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81024f6:	4618      	mov	r0, r3
 81024f8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81024fc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102500:	681b      	ldr	r3, [r3, #0]
 8102502:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102506:	4619      	mov	r1, r3
 8102508:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810250c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102510:	681a      	ldr	r2, [r3, #0]
 8102512:	0043      	lsls	r3, r0, #1
 8102514:	4413      	add	r3, r2
 8102516:	440b      	add	r3, r1
 8102518:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 810251c:	781a      	ldrb	r2, [r3, #0]
 810251e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102522:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102526:	681b      	ldr	r3, [r3, #0]
 8102528:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
                        _state=9;  // verity N grab
 810252c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102530:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102534:	681b      	ldr	r3, [r3, #0]
 8102536:	2200      	movs	r2, #0
 8102538:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                    }else if(_datain[0]==32 ||_datain[0]== 132){
 810253c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102540:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102544:	6819      	ldr	r1, [r3, #0]
 8102546:	f04f 0200 	mov.w	r2, #0
 810254a:	f04f 0300 	mov.w	r3, #0
 810254e:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
                        _loop=0;
 8102552:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102556:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810255a:	681b      	ldr	r3, [r3, #0]
 810255c:	220b      	movs	r2, #11
 810255e:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
                        _loopTo=4;
 8102562:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102566:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810256a:	681b      	ldr	r3, [r3, #0]
 810256c:	2209      	movs	r2, #9
 810256e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8102572:	f000 bd9c 	b.w	81030ae <_ZN5Xicro9Spin_nodeEv+0x1866>
                        _Indexdata=_Indexdata+1;
 8102576:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810257a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810257e:	681b      	ldr	r3, [r3, #0]
 8102580:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102584:	2b20      	cmp	r3, #32
 8102586:	d008      	beq.n	810259a <_ZN5Xicro9Spin_nodeEv+0xd52>
 8102588:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810258c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102590:	681b      	ldr	r3, [r3, #0]
 8102592:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102596:	2b84      	cmp	r3, #132	; 0x84
 8102598:	d17a      	bne.n	8102690 <_ZN5Xicro9Spin_nodeEv+0xe48>
                        _Ontype=_datain[0];
 810259a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810259e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81025a2:	681b      	ldr	r3, [r3, #0]
 81025a4:	2200      	movs	r2, #0
 81025a6:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
                        _Ontype=_datain[0];
 81025aa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81025ae:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81025b2:	681b      	ldr	r3, [r3, #0]
 81025b4:	2204      	movs	r2, #4
 81025b6:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 81025ba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81025be:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81025c2:	681b      	ldr	r3, [r3, #0]
 81025c4:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 81025c8:	3301      	adds	r3, #1
 81025ca:	b2da      	uxtb	r2, r3
 81025cc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81025d0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81025d4:	681b      	ldr	r3, [r3, #0]
 81025d6:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                        _Ongrab=0;
 81025da:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81025de:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81025e2:	681b      	ldr	r3, [r3, #0]
 81025e4:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 81025e8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81025ec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81025f0:	681b      	ldr	r3, [r3, #0]
 81025f2:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                        _bb=0;
 81025f6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81025fa:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81025fe:	681b      	ldr	r3, [r3, #0]
 8102600:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8102604:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102608:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810260c:	681b      	ldr	r3, [r3, #0]
 810260e:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                        _state=11;
 8102612:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102616:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810261a:	681b      	ldr	r3, [r3, #0]
 810261c:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8102620:	4618      	mov	r0, r3
 8102622:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102626:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810262a:	681b      	ldr	r3, [r3, #0]
 810262c:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102630:	4619      	mov	r1, r3
 8102632:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102636:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810263a:	681a      	ldr	r2, [r3, #0]
 810263c:	0043      	lsls	r3, r0, #1
 810263e:	4413      	add	r3, r2
 8102640:	440b      	add	r3, r1
 8102642:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8102646:	781a      	ldrb	r2, [r3, #0]
 8102648:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810264c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102650:	681b      	ldr	r3, [r3, #0]
 8102652:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e

 8102656:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810265a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810265e:	681b      	ldr	r3, [r3, #0]
 8102660:	2200      	movs	r2, #0
 8102662:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                    }else if(_datain[0]==33 ||_datain[0]== 133){
 8102666:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810266a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810266e:	6819      	ldr	r1, [r3, #0]
 8102670:	f04f 0200 	mov.w	r2, #0
 8102674:	f04f 0300 	mov.w	r3, #0
 8102678:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
                        _loop=0;
 810267c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102680:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102684:	681b      	ldr	r3, [r3, #0]
 8102686:	220b      	movs	r2, #11
 8102688:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 810268c:	f000 bd0f 	b.w	81030ae <_ZN5Xicro9Spin_nodeEv+0x1866>
                        _loopTo=4;
                        _Indexdata=_Indexdata+1;
 8102690:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102694:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102698:	681b      	ldr	r3, [r3, #0]
 810269a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 810269e:	2b21      	cmp	r3, #33	; 0x21
 81026a0:	d009      	beq.n	81026b6 <_ZN5Xicro9Spin_nodeEv+0xe6e>
 81026a2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81026a6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81026aa:	681b      	ldr	r3, [r3, #0]
 81026ac:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 81026b0:	2b85      	cmp	r3, #133	; 0x85
 81026b2:	f040 80e0 	bne.w	8102876 <_ZN5Xicro9Spin_nodeEv+0x102e>
                        _Ontype=_datain[0];
 81026b6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81026ba:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81026be:	681b      	ldr	r3, [r3, #0]
 81026c0:	2200      	movs	r2, #0
 81026c2:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 81026c6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81026ca:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81026ce:	681b      	ldr	r3, [r3, #0]
 81026d0:	2204      	movs	r2, #4
 81026d2:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
                        _Ongrab=0;
 81026d6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81026da:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81026de:	681b      	ldr	r3, [r3, #0]
 81026e0:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 81026e4:	3301      	adds	r3, #1
 81026e6:	b2da      	uxtb	r2, r3
 81026e8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81026ec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81026f0:	681b      	ldr	r3, [r3, #0]
 81026f2:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                        _bb=0;
 81026f6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81026fa:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81026fe:	681b      	ldr	r3, [r3, #0]
 8102700:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8102704:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102708:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810270c:	681b      	ldr	r3, [r3, #0]
 810270e:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                        _statetogo=11;
 8102712:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102716:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810271a:	681b      	ldr	r3, [r3, #0]
 810271c:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8102720:	4618      	mov	r0, r3
 8102722:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102726:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810272a:	681b      	ldr	r3, [r3, #0]
 810272c:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102730:	4619      	mov	r1, r3
 8102732:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102736:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810273a:	681a      	ldr	r2, [r3, #0]
 810273c:	0043      	lsls	r3, r0, #1
 810273e:	4413      	add	r3, r2
 8102740:	440b      	add	r3, r1
 8102742:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8102746:	781a      	ldrb	r2, [r3, #0]
 8102748:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810274c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102750:	681b      	ldr	r3, [r3, #0]
 8102752:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
                        _state=9;  // verity N grab_Posdatapre=(_Posdatapre+1)%32;){
 8102756:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810275a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810275e:	681b      	ldr	r3, [r3, #0]
 8102760:	2200      	movs	r2, #0
 8102762:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                        _loop=0;
 8102766:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810276a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810276e:	6819      	ldr	r1, [r3, #0]
 8102770:	f04f 0200 	mov.w	r2, #0
 8102774:	f04f 0300 	mov.w	r3, #0
 8102778:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
                        _loopTo=8;
 810277c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102780:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102784:	681b      	ldr	r3, [r3, #0]
 8102786:	220b      	movs	r2, #11
 8102788:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
                        _Indexdata=_Indexdata+1;
 810278c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102790:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102794:	681b      	ldr	r3, [r3, #0]
 8102796:	2209      	movs	r2, #9
 8102798:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                        _Ontype=_datain[0];
 810279c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81027a0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81027a4:	681b      	ldr	r3, [r3, #0]
 81027a6:	2200      	movs	r2, #0
 81027a8:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 81027ac:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81027b0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81027b4:	681b      	ldr	r3, [r3, #0]
 81027b6:	2208      	movs	r2, #8
 81027b8:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
                        _Ongrab=0;
 81027bc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81027c0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81027c4:	681b      	ldr	r3, [r3, #0]
 81027c6:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 81027ca:	3301      	adds	r3, #1
 81027cc:	b2da      	uxtb	r2, r3
 81027ce:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81027d2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81027d6:	681b      	ldr	r3, [r3, #0]
 81027d8:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                        _bb=0;
 81027dc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81027e0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81027e4:	681b      	ldr	r3, [r3, #0]
 81027e6:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 81027ea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81027ee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81027f2:	681b      	ldr	r3, [r3, #0]
 81027f4:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                        _state=11;
 81027f8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81027fc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102800:	681b      	ldr	r3, [r3, #0]
 8102802:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8102806:	4618      	mov	r0, r3
 8102808:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810280c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102810:	681b      	ldr	r3, [r3, #0]
 8102812:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102816:	4619      	mov	r1, r3
 8102818:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810281c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102820:	681a      	ldr	r2, [r3, #0]
 8102822:	0043      	lsls	r3, r0, #1
 8102824:	4413      	add	r3, r2
 8102826:	440b      	add	r3, r1
 8102828:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 810282c:	781a      	ldrb	r2, [r3, #0]
 810282e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102832:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102836:	681b      	ldr	r3, [r3, #0]
 8102838:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
                    }else if(_datain[0]==65 || _datain[0]==165){
 810283c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102840:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102844:	681b      	ldr	r3, [r3, #0]
 8102846:	2200      	movs	r2, #0
 8102848:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                        _loop=0;
 810284c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102850:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102854:	6819      	ldr	r1, [r3, #0]
 8102856:	f04f 0200 	mov.w	r2, #0
 810285a:	f04f 0300 	mov.w	r3, #0
 810285e:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
                        _loopTo=8;
 8102862:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102866:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810286a:	681b      	ldr	r3, [r3, #0]
 810286c:	220b      	movs	r2, #11
 810286e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8102872:	f000 bc1c 	b.w	81030ae <_ZN5Xicro9Spin_nodeEv+0x1866>
                        _Indexdata=_Indexdata+1;
 8102876:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810287a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810287e:	681b      	ldr	r3, [r3, #0]
 8102880:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102884:	2b41      	cmp	r3, #65	; 0x41
 8102886:	d008      	beq.n	810289a <_ZN5Xicro9Spin_nodeEv+0x1052>
 8102888:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810288c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102890:	681b      	ldr	r3, [r3, #0]
 8102892:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102896:	2ba5      	cmp	r3, #165	; 0xa5
 8102898:	d173      	bne.n	8102982 <_ZN5Xicro9Spin_nodeEv+0x113a>
                        _Ontype=_datain[0];
 810289a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810289e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81028a2:	681b      	ldr	r3, [r3, #0]
 81028a4:	2200      	movs	r2, #0
 81028a6:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 81028aa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81028ae:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81028b2:	681b      	ldr	r3, [r3, #0]
 81028b4:	2208      	movs	r2, #8
 81028b6:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
                        _Ongrab=0;
 81028ba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81028be:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81028c2:	681b      	ldr	r3, [r3, #0]
 81028c4:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 81028c8:	3301      	adds	r3, #1
 81028ca:	b2da      	uxtb	r2, r3
 81028cc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81028d0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81028d4:	681b      	ldr	r3, [r3, #0]
 81028d6:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                        _bb=0;
 81028da:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81028de:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81028e2:	681b      	ldr	r3, [r3, #0]
 81028e4:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 81028e8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81028ec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81028f0:	681b      	ldr	r3, [r3, #0]
 81028f2:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                        _statetogo=11;
 81028f6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81028fa:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81028fe:	681b      	ldr	r3, [r3, #0]
 8102900:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8102904:	4618      	mov	r0, r3
 8102906:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810290a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810290e:	681b      	ldr	r3, [r3, #0]
 8102910:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102914:	4619      	mov	r1, r3
 8102916:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810291a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810291e:	681a      	ldr	r2, [r3, #0]
 8102920:	0043      	lsls	r3, r0, #1
 8102922:	4413      	add	r3, r2
 8102924:	440b      	add	r3, r1
 8102926:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 810292a:	781a      	ldrb	r2, [r3, #0]
 810292c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102930:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102934:	681b      	ldr	r3, [r3, #0]
 8102936:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
                        _state=9;  // verity N grab
 810293a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810293e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102942:	681b      	ldr	r3, [r3, #0]
 8102944:	2200      	movs	r2, #0
 8102946:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                    }else if(_datain[0]==111){
 810294a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810294e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102952:	6819      	ldr	r1, [r3, #0]
 8102954:	f04f 0200 	mov.w	r2, #0
 8102958:	f04f 0300 	mov.w	r3, #0
 810295c:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
                        _loop=0;
 8102960:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102964:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102968:	681b      	ldr	r3, [r3, #0]
 810296a:	220b      	movs	r2, #11
 810296c:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
                        _loopTo=4;
 8102970:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102974:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102978:	681b      	ldr	r3, [r3, #0]
 810297a:	2209      	movs	r2, #9
 810297c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8102980:	e395      	b.n	81030ae <_ZN5Xicro9Spin_nodeEv+0x1866>
                        _Indexdata=_Indexdata+1;
 8102982:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102986:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810298a:	681b      	ldr	r3, [r3, #0]
 810298c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102990:	2b6f      	cmp	r3, #111	; 0x6f
 8102992:	d16c      	bne.n	8102a6e <_ZN5Xicro9Spin_nodeEv+0x1226>
                        _Ontype=_datain[0];
 8102994:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102998:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810299c:	681b      	ldr	r3, [r3, #0]
 810299e:	2200      	movs	r2, #0
 81029a0:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 81029a4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81029a8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81029ac:	681b      	ldr	r3, [r3, #0]
 81029ae:	2204      	movs	r2, #4
 81029b0:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
                        _Ongrab=0;
 81029b4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81029b8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81029bc:	681b      	ldr	r3, [r3, #0]
 81029be:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 81029c2:	3301      	adds	r3, #1
 81029c4:	b2da      	uxtb	r2, r3
 81029c6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81029ca:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81029ce:	681b      	ldr	r3, [r3, #0]
 81029d0:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                        _bb=0;
 81029d4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81029d8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81029dc:	681b      	ldr	r3, [r3, #0]
 81029de:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 81029e2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81029e6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                        _state=11;  //get N byte
 81029f0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81029f4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81029f8:	681b      	ldr	r3, [r3, #0]
 81029fa:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81029fe:	4618      	mov	r0, r3
 8102a00:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102a04:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102a08:	681b      	ldr	r3, [r3, #0]
 8102a0a:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102a0e:	4619      	mov	r1, r3
 8102a10:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102a14:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102a18:	681a      	ldr	r2, [r3, #0]
 8102a1a:	0043      	lsls	r3, r0, #1
 8102a1c:	4413      	add	r3, r2
 8102a1e:	440b      	add	r3, r1
 8102a20:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8102a24:	781a      	ldrb	r2, [r3, #0]
 8102a26:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102a2a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102a2e:	681b      	ldr	r3, [r3, #0]
 8102a30:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
                    }else if(_datain[0]==112){
 8102a34:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102a38:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102a3c:	681b      	ldr	r3, [r3, #0]
 8102a3e:	2200      	movs	r2, #0
 8102a40:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                        _loop=0;
 8102a44:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102a48:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102a4c:	6819      	ldr	r1, [r3, #0]
 8102a4e:	f04f 0200 	mov.w	r2, #0
 8102a52:	f04f 0300 	mov.w	r3, #0
 8102a56:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
                        _loopTo=4;
 8102a5a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102a5e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102a62:	681b      	ldr	r3, [r3, #0]
 8102a64:	220b      	movs	r2, #11
 8102a66:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=0;
                }
                break;
            case 60:
                if(_datain[0]==_OngrabTo){
                    _state=61;
 8102a6a:	f002 b8ec 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                        _Indexdata=_Indexdata+1;
 8102a6e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102a72:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102a76:	681b      	ldr	r3, [r3, #0]
 8102a78:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102a7c:	2b70      	cmp	r3, #112	; 0x70
 8102a7e:	d174      	bne.n	8102b6a <_ZN5Xicro9Spin_nodeEv+0x1322>
                        _Ontype=_datain[0];
 8102a80:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102a84:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102a88:	681b      	ldr	r3, [r3, #0]
 8102a8a:	2200      	movs	r2, #0
 8102a8c:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
                        _bb=0;
 8102a90:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102a94:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102a98:	681b      	ldr	r3, [r3, #0]
 8102a9a:	2204      	movs	r2, #4
 8102a9c:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8102aa0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102aa4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102aa8:	681b      	ldr	r3, [r3, #0]
 8102aaa:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102aae:	3301      	adds	r3, #1
 8102ab0:	b2da      	uxtb	r2, r3
 8102ab2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102ab6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102aba:	681b      	ldr	r3, [r3, #0]
 8102abc:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                        _Ongrab=0;
 8102ac0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102ac4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102ac8:	681b      	ldr	r3, [r3, #0]
 8102aca:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8102ace:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102ad2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102ad6:	681b      	ldr	r3, [r3, #0]
 8102ad8:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                        _statetogo=11;
 8102adc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102ae0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102ae4:	6819      	ldr	r1, [r3, #0]
 8102ae6:	f04f 0200 	mov.w	r2, #0
 8102aea:	f04f 0300 	mov.w	r3, #0
 8102aee:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
                        _state=9; // verity N grab
 8102af2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102af6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102afa:	681b      	ldr	r3, [r3, #0]
 8102afc:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8102b00:	4618      	mov	r0, r3
 8102b02:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102b06:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102b0a:	681b      	ldr	r3, [r3, #0]
 8102b0c:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102b10:	4619      	mov	r1, r3
 8102b12:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102b16:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102b1a:	681a      	ldr	r2, [r3, #0]
 8102b1c:	0043      	lsls	r3, r0, #1
 8102b1e:	4413      	add	r3, r2
 8102b20:	440b      	add	r3, r1
 8102b22:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8102b26:	781a      	ldrb	r2, [r3, #0]
 8102b28:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102b2c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102b30:	681b      	ldr	r3, [r3, #0]
 8102b32:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
                    
 8102b36:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102b3a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102b3e:	681b      	ldr	r3, [r3, #0]
 8102b40:	2200      	movs	r2, #0
 8102b42:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                    }else if(_datain[0]==222){
 8102b46:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102b4a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102b4e:	681b      	ldr	r3, [r3, #0]
 8102b50:	220b      	movs	r2, #11
 8102b52:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
                        _loop=0;
 8102b56:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102b5a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102b5e:	681b      	ldr	r3, [r3, #0]
 8102b60:	2209      	movs	r2, #9
 8102b62:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=61;
 8102b66:	f002 b86e 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                        _Indexdata=_Indexdata+1;
 8102b6a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102b6e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102b72:	681b      	ldr	r3, [r3, #0]
 8102b74:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102b78:	2bde      	cmp	r3, #222	; 0xde
 8102b7a:	d16c      	bne.n	8102c56 <_ZN5Xicro9Spin_nodeEv+0x140e>
                        _Ontype=_datain[0];
 8102b7c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102b80:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102b84:	681b      	ldr	r3, [r3, #0]
 8102b86:	2200      	movs	r2, #0
 8102b88:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8102b8c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102b90:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102b94:	681b      	ldr	r3, [r3, #0]
 8102b96:	2208      	movs	r2, #8
 8102b98:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
                        _Ongrab=0;
 8102b9c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102ba0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102ba4:	681b      	ldr	r3, [r3, #0]
 8102ba6:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102baa:	3301      	adds	r3, #1
 8102bac:	b2da      	uxtb	r2, r3
 8102bae:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102bb2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102bb6:	681b      	ldr	r3, [r3, #0]
 8102bb8:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                        _bb=0;
 8102bbc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102bc0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102bc4:	681b      	ldr	r3, [r3, #0]
 8102bc6:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8102bca:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102bce:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102bd2:	681b      	ldr	r3, [r3, #0]
 8102bd4:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                        _state=11;  //get N byte
 8102bd8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102bdc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102be0:	681b      	ldr	r3, [r3, #0]
 8102be2:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8102be6:	4618      	mov	r0, r3
 8102be8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102bec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102bf0:	681b      	ldr	r3, [r3, #0]
 8102bf2:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102bf6:	4619      	mov	r1, r3
 8102bf8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102bfc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102c00:	681a      	ldr	r2, [r3, #0]
 8102c02:	0043      	lsls	r3, r0, #1
 8102c04:	4413      	add	r3, r2
 8102c06:	440b      	add	r3, r1
 8102c08:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8102c0c:	781a      	ldrb	r2, [r3, #0]
 8102c0e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102c12:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102c16:	681b      	ldr	r3, [r3, #0]
 8102c18:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
                    }else if(_datain[0]==223){
 8102c1c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102c20:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102c24:	681b      	ldr	r3, [r3, #0]
 8102c26:	2200      	movs	r2, #0
 8102c28:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                        _loop=0;
 8102c2c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102c30:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102c34:	6819      	ldr	r1, [r3, #0]
 8102c36:	f04f 0200 	mov.w	r2, #0
 8102c3a:	f04f 0300 	mov.w	r3, #0
 8102c3e:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
                        _loopTo=8;
 8102c42:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102c46:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102c4a:	681b      	ldr	r3, [r3, #0]
 8102c4c:	220b      	movs	r2, #11
 8102c4e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=61;
 8102c52:	f001 bff8 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                        _Indexdata=_Indexdata+1;
 8102c56:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102c5a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102c5e:	681b      	ldr	r3, [r3, #0]
 8102c60:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102c64:	2bdf      	cmp	r3, #223	; 0xdf
 8102c66:	d174      	bne.n	8102d52 <_ZN5Xicro9Spin_nodeEv+0x150a>
                        _Ontype=_datain[0];
 8102c68:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102c6c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102c70:	681b      	ldr	r3, [r3, #0]
 8102c72:	2200      	movs	r2, #0
 8102c74:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
                        _bb=0;
 8102c78:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102c7c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102c80:	681b      	ldr	r3, [r3, #0]
 8102c82:	2208      	movs	r2, #8
 8102c84:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8102c88:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102c8c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102c90:	681b      	ldr	r3, [r3, #0]
 8102c92:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102c96:	3301      	adds	r3, #1
 8102c98:	b2da      	uxtb	r2, r3
 8102c9a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102c9e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102ca2:	681b      	ldr	r3, [r3, #0]
 8102ca4:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                        _Ongrab=0;
 8102ca8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102cac:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102cb0:	681b      	ldr	r3, [r3, #0]
 8102cb2:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8102cb6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102cba:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102cbe:	681b      	ldr	r3, [r3, #0]
 8102cc0:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                        _statetogo=11;
 8102cc4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102cc8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102ccc:	6819      	ldr	r1, [r3, #0]
 8102cce:	f04f 0200 	mov.w	r2, #0
 8102cd2:	f04f 0300 	mov.w	r3, #0
 8102cd6:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
                        _state=9; // verity N grab
 8102cda:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102cde:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102ce2:	681b      	ldr	r3, [r3, #0]
 8102ce4:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8102ce8:	4618      	mov	r0, r3
 8102cea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102cee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102cf2:	681b      	ldr	r3, [r3, #0]
 8102cf4:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102cf8:	4619      	mov	r1, r3
 8102cfa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102cfe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102d02:	681a      	ldr	r2, [r3, #0]
 8102d04:	0043      	lsls	r3, r0, #1
 8102d06:	4413      	add	r3, r2
 8102d08:	440b      	add	r3, r1
 8102d0a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8102d0e:	781a      	ldrb	r2, [r3, #0]
 8102d10:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102d14:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102d18:	681b      	ldr	r3, [r3, #0]
 8102d1a:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
                    
 8102d1e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102d22:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102d26:	681b      	ldr	r3, [r3, #0]
 8102d28:	2200      	movs	r2, #0
 8102d2a:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                    }else if(_datain[0]==242 ){
 8102d2e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102d32:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102d36:	681b      	ldr	r3, [r3, #0]
 8102d38:	220b      	movs	r2, #11
 8102d3a:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
                        _Indexdata=_Indexdata+1;
 8102d3e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102d42:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102d46:	681b      	ldr	r3, [r3, #0]
 8102d48:	2209      	movs	r2, #9
 8102d4a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=61;
 8102d4e:	f001 bf7a 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                        _Ontype=_datain[0];
 8102d52:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102d56:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102d5a:	681b      	ldr	r3, [r3, #0]
 8102d5c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102d60:	2bf2      	cmp	r3, #242	; 0xf2
 8102d62:	d15c      	bne.n	8102e1e <_ZN5Xicro9Spin_nodeEv+0x15d6>
                        _Ongrab=0;
 8102d64:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102d68:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102d6c:	681b      	ldr	r3, [r3, #0]
 8102d6e:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102d72:	3301      	adds	r3, #1
 8102d74:	b2da      	uxtb	r2, r3
 8102d76:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102d7a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102d7e:	681b      	ldr	r3, [r3, #0]
 8102d80:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                        _bufff="";
 8102d84:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102d88:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102d8c:	681b      	ldr	r3, [r3, #0]
 8102d8e:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8102d92:	4618      	mov	r0, r3
 8102d94:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102d98:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102da2:	4619      	mov	r1, r3
 8102da4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102da8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102dac:	681a      	ldr	r2, [r3, #0]
 8102dae:	0043      	lsls	r3, r0, #1
 8102db0:	4413      	add	r3, r2
 8102db2:	440b      	add	r3, r1
 8102db4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8102db8:	781a      	ldrb	r2, [r3, #0]
 8102dba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102dbe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102dc2:	681b      	ldr	r3, [r3, #0]
 8102dc4:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
                        _state=99; // get 1 string
 8102dc8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102dcc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102dd0:	681b      	ldr	r3, [r3, #0]
 8102dd2:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8102dd6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102dda:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102dde:	681b      	ldr	r3, [r3, #0]
 8102de0:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                    }else if (_datain[0]==243){
 8102de4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102de8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102dec:	681b      	ldr	r3, [r3, #0]
 8102dee:	2200      	movs	r2, #0
 8102df0:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                        _Indexdata=_Indexdata+1;
 8102df4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102df8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102dfc:	681b      	ldr	r3, [r3, #0]
 8102dfe:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8102e02:	49b8      	ldr	r1, [pc, #736]	; (81030e4 <_ZN5Xicro9Spin_nodeEv+0x189c>)
 8102e04:	4618      	mov	r0, r3
 8102e06:	f008 fb42 	bl	810b48e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8102e0a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102e0e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102e12:	681b      	ldr	r3, [r3, #0]
 8102e14:	2263      	movs	r2, #99	; 0x63
 8102e16:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=61;
 8102e1a:	f001 bf14 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                        _Ontype=_datain[0];
 8102e1e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102e22:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102e26:	681b      	ldr	r3, [r3, #0]
 8102e28:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102e2c:	2bf3      	cmp	r3, #243	; 0xf3
 8102e2e:	d164      	bne.n	8102efa <_ZN5Xicro9Spin_nodeEv+0x16b2>
                        _Ongrab=0;
 8102e30:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102e34:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102e38:	681b      	ldr	r3, [r3, #0]
 8102e3a:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102e3e:	3301      	adds	r3, #1
 8102e40:	b2da      	uxtb	r2, r3
 8102e42:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102e46:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102e4a:	681b      	ldr	r3, [r3, #0]
 8102e4c:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                        _bufff="";
 8102e50:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102e54:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102e58:	681b      	ldr	r3, [r3, #0]
 8102e5a:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8102e5e:	4618      	mov	r0, r3
 8102e60:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102e64:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102e68:	681b      	ldr	r3, [r3, #0]
 8102e6a:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102e6e:	4619      	mov	r1, r3
 8102e70:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102e74:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102e78:	681a      	ldr	r2, [r3, #0]
 8102e7a:	0043      	lsls	r3, r0, #1
 8102e7c:	4413      	add	r3, r2
 8102e7e:	440b      	add	r3, r1
 8102e80:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8102e84:	781a      	ldrb	r2, [r3, #0]
 8102e86:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102e8a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102e8e:	681b      	ldr	r3, [r3, #0]
 8102e90:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
                        _statetogo=99;
 8102e94:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102e98:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102e9c:	681b      	ldr	r3, [r3, #0]
 8102e9e:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8102ea2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102ea6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102eaa:	681b      	ldr	r3, [r3, #0]
 8102eac:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                        _state=9; // vreity N grab_Posdatapre=(_Posdatapre+1)%32;
 8102eb0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102eb4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102eb8:	681b      	ldr	r3, [r3, #0]
 8102eba:	2200      	movs	r2, #0
 8102ebc:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                    }else if(_datain[0]==88){
 8102ec0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102ec4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102ec8:	681b      	ldr	r3, [r3, #0]
 8102eca:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8102ece:	4985      	ldr	r1, [pc, #532]	; (81030e4 <_ZN5Xicro9Spin_nodeEv+0x189c>)
 8102ed0:	4618      	mov	r0, r3
 8102ed2:	f008 fadc 	bl	810b48e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
                        _Indexdata=_Indexdata+1;
 8102ed6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102eda:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102ede:	681b      	ldr	r3, [r3, #0]
 8102ee0:	2263      	movs	r2, #99	; 0x63
 8102ee2:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
                        _bb=0;
 8102ee6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102eea:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102eee:	681b      	ldr	r3, [r3, #0]
 8102ef0:	2209      	movs	r2, #9
 8102ef2:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=61;
 8102ef6:	f001 bea6 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8102efa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102efe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102f02:	681b      	ldr	r3, [r3, #0]
 8102f04:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102f08:	2b58      	cmp	r3, #88	; 0x58
 8102f0a:	d14e      	bne.n	8102faa <_ZN5Xicro9Spin_nodeEv+0x1762>
                        _Ongrab=0;
 8102f0c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102f10:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102f14:	681b      	ldr	r3, [r3, #0]
 8102f16:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102f1a:	3301      	adds	r3, #1
 8102f1c:	b2da      	uxtb	r2, r3
 8102f1e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102f22:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102f26:	681b      	ldr	r3, [r3, #0]
 8102f28:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                        _state=50;  // 1 bool 
 8102f2c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102f30:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102f34:	6819      	ldr	r1, [r3, #0]
 8102f36:	f04f 0200 	mov.w	r2, #0
 8102f3a:	f04f 0300 	mov.w	r3, #0
 8102f3e:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
                    }else if(_datain[0]==89){
 8102f42:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102f46:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102f4a:	681b      	ldr	r3, [r3, #0]
 8102f4c:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8102f50:	4618      	mov	r0, r3
 8102f52:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102f56:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102f5a:	681b      	ldr	r3, [r3, #0]
 8102f5c:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102f60:	4619      	mov	r1, r3
 8102f62:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102f66:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102f6a:	681a      	ldr	r2, [r3, #0]
 8102f6c:	0043      	lsls	r3, r0, #1
 8102f6e:	4413      	add	r3, r2
 8102f70:	440b      	add	r3, r1
 8102f72:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8102f76:	781a      	ldrb	r2, [r3, #0]
 8102f78:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102f7c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102f80:	681b      	ldr	r3, [r3, #0]
 8102f82:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
                        _Indexdata=_Indexdata+1;
 8102f86:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102f8a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102f8e:	681b      	ldr	r3, [r3, #0]
 8102f90:	2200      	movs	r2, #0
 8102f92:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                        _Ontype=_datain[0];
 8102f96:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102f9a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	2232      	movs	r2, #50	; 0x32
 8102fa2:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=61;
 8102fa6:	f001 be4e 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8102faa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102fae:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8102fb8:	2b59      	cmp	r3, #89	; 0x59
 8102fba:	d151      	bne.n	8103060 <_ZN5Xicro9Spin_nodeEv+0x1818>
                        _Ongrab=0;
 8102fbc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102fc0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102fc4:	681b      	ldr	r3, [r3, #0]
 8102fc6:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8102fca:	3301      	adds	r3, #1
 8102fcc:	b2da      	uxtb	r2, r3
 8102fce:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102fd2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102fd6:	681b      	ldr	r3, [r3, #0]
 8102fd8:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                        _state=60;  // Check N bool _Posdatapre=(_Posdatapre+1)%32;
 8102fdc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102fe0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102fe4:	681b      	ldr	r3, [r3, #0]
 8102fe6:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8102fea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102fee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8102ff2:	681b      	ldr	r3, [r3, #0]
 8102ff4:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                    
 8102ff8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8102ffc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103000:	681b      	ldr	r3, [r3, #0]
 8103002:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8103006:	4618      	mov	r0, r3
 8103008:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810300c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103010:	681b      	ldr	r3, [r3, #0]
 8103012:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8103016:	4619      	mov	r1, r3
 8103018:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810301c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103020:	681a      	ldr	r2, [r3, #0]
 8103022:	0043      	lsls	r3, r0, #1
 8103024:	4413      	add	r3, r2
 8103026:	440b      	add	r3, r1
 8103028:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 810302c:	781a      	ldrb	r2, [r3, #0]
 810302e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103032:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103036:	681b      	ldr	r3, [r3, #0]
 8103038:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
                    
 810303c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103040:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103044:	681b      	ldr	r3, [r3, #0]
 8103046:	2200      	movs	r2, #0
 8103048:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                    }else if(_datain[0]==126){
 810304c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103050:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103054:	681b      	ldr	r3, [r3, #0]
 8103056:	223c      	movs	r2, #60	; 0x3c
 8103058:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=61;
 810305c:	f001 bdf3 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    else{
 8103060:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103064:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103068:	681b      	ldr	r3, [r3, #0]
 810306a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 810306e:	2b7e      	cmp	r3, #126	; 0x7e
 8103070:	d109      	bne.n	8103086 <_ZN5Xicro9Spin_nodeEv+0x183e>
                        _state=0;
 8103072:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103076:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810307a:	681b      	ldr	r3, [r3, #0]
 810307c:	225a      	movs	r2, #90	; 0x5a
 810307e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=61;
 8103082:	f001 bde0 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    
 8103086:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810308a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810308e:	681b      	ldr	r3, [r3, #0]
 8103090:	2200      	movs	r2, #0
 8103092:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=61;
 8103096:	f001 bdd6 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
            case 60:
 810309a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810309e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81030a2:	681b      	ldr	r3, [r3, #0]
 81030a4:	2200      	movs	r2, #0
 81030a6:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=61;
 81030aa:	f001 bdcc 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
 81030ae:	f001 bdca 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                }else{
                    _state=0;
 81030b2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81030b6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81030ba:	681b      	ldr	r3, [r3, #0]
 81030bc:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 81030c0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81030c4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81030c8:	681b      	ldr	r3, [r3, #0]
 81030ca:	f893 316e 	ldrb.w	r3, [r3, #366]	; 0x16e
 81030ce:	429a      	cmp	r2, r3
 81030d0:	d10a      	bne.n	81030e8 <_ZN5Xicro9Spin_nodeEv+0x18a0>
                }_Posdatapre=(_Posdatapre+1)%32;
 81030d2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81030d6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81030da:	681b      	ldr	r3, [r3, #0]
 81030dc:	223d      	movs	r2, #61	; 0x3d
 81030de:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 81030e2:	e009      	b.n	81030f8 <_ZN5Xicro9Spin_nodeEv+0x18b0>
 81030e4:	0810ba48 	.word	0x0810ba48
                for(uint i=0;i<(8);i++){
                    if(i+ (_Ongrab*8)<_OngrabTo){
 81030e8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81030ec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81030f0:	681b      	ldr	r3, [r3, #0]
 81030f2:	2200      	movs	r2, #0
 81030f4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                        *(bool*)_nonverify[_OnTopic][_Indexdata][i+ (_Ongrab*8)] = (bool)(((uint8_t)_datain[0] >>i)&0x01);
 81030f8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81030fc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 8103106:	3301      	adds	r3, #1
 8103108:	425a      	negs	r2, r3
 810310a:	f003 031f 	and.w	r3, r3, #31
 810310e:	f002 021f 	and.w	r2, r2, #31
 8103112:	bf58      	it	pl
 8103114:	4253      	negpl	r3, r2
 8103116:	b2da      	uxtb	r2, r3
 8103118:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810311c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103120:	681b      	ldr	r3, [r3, #0]
 8103122:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
                    }
 8103126:	2300      	movs	r3, #0
 8103128:	f8c7 3b00 	str.w	r3, [r7, #2816]	; 0xb00
 810312c:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8103130:	2b07      	cmp	r3, #7
 8103132:	d856      	bhi.n	81031e2 <_ZN5Xicro9Spin_nodeEv+0x199a>
                    
 8103134:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103138:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810313c:	681b      	ldr	r3, [r3, #0]
 810313e:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 8103142:	00db      	lsls	r3, r3, #3
 8103144:	461a      	mov	r2, r3
 8103146:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 810314a:	4413      	add	r3, r2
 810314c:	f607 3208 	addw	r2, r7, #2824	; 0xb08
 8103150:	f6a2 3204 	subw	r2, r2, #2820	; 0xb04
 8103154:	6812      	ldr	r2, [r2, #0]
 8103156:	f892 216e 	ldrb.w	r2, [r2, #366]	; 0x16e
 810315a:	4293      	cmp	r3, r2
 810315c:	d23b      	bcs.n	81031d6 <_ZN5Xicro9Spin_nodeEv+0x198e>
                }
 810315e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103162:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103166:	681b      	ldr	r3, [r3, #0]
 8103168:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 810316c:	461a      	mov	r2, r3
 810316e:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8103172:	fa42 f303 	asr.w	r3, r2, r3
 8103176:	f003 0201 	and.w	r2, r3, #1
 810317a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810317e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103182:	681b      	ldr	r3, [r3, #0]
 8103184:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8103188:	4618      	mov	r0, r3
 810318a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810318e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103192:	681b      	ldr	r3, [r3, #0]
 8103194:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8103198:	461c      	mov	r4, r3
 810319a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810319e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81031a2:	681b      	ldr	r3, [r3, #0]
 81031a4:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 81031a8:	00db      	lsls	r3, r3, #3
 81031aa:	4619      	mov	r1, r3
 81031ac:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 81031b0:	440b      	add	r3, r1
 81031b2:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 81031b6:	f6a1 3104 	subw	r1, r1, #2820	; 0xb04
 81031ba:	6809      	ldr	r1, [r1, #0]
 81031bc:	0040      	lsls	r0, r0, #1
 81031be:	4420      	add	r0, r4
 81031c0:	4403      	add	r3, r0
 81031c2:	3352      	adds	r3, #82	; 0x52
 81031c4:	009b      	lsls	r3, r3, #2
 81031c6:	440b      	add	r3, r1
 81031c8:	685b      	ldr	r3, [r3, #4]
 81031ca:	2a00      	cmp	r2, #0
 81031cc:	bf14      	ite	ne
 81031ce:	2201      	movne	r2, #1
 81031d0:	2200      	moveq	r2, #0
 81031d2:	b2d2      	uxtb	r2, r2
 81031d4:	701a      	strb	r2, [r3, #0]
                    }
 81031d6:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 81031da:	3301      	adds	r3, #1
 81031dc:	f8c7 3b00 	str.w	r3, [r7, #2816]	; 0xb00
 81031e0:	e7a4      	b.n	810312c <_ZN5Xicro9Spin_nodeEv+0x18e4>
                _Ongrab=_Ongrab+1;
                if(_Ongrab==(uint8_t)ceil(_OngrabTo/8.00)){
                    
                    _state=222; // check main continue or stop
 81031e2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81031e6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81031ea:	681b      	ldr	r3, [r3, #0]
 81031ec:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 81031f0:	3301      	adds	r3, #1
 81031f2:	b2da      	uxtb	r2, r3
 81031f4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81031f8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81031fc:	681b      	ldr	r3, [r3, #0]
 81031fe:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                }else{
 8103202:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103206:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810320a:	681b      	ldr	r3, [r3, #0]
 810320c:	f893 416d 	ldrb.w	r4, [r3, #365]	; 0x16d
 8103210:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103214:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103218:	681b      	ldr	r3, [r3, #0]
 810321a:	f893 316e 	ldrb.w	r3, [r3, #366]	; 0x16e
 810321e:	4618      	mov	r0, r3
 8103220:	f7fd f9b4 	bl	810058c <__aeabi_i2d>
 8103224:	f04f 0200 	mov.w	r2, #0
 8103228:	4bd6      	ldr	r3, [pc, #856]	; (8103584 <_ZN5Xicro9Spin_nodeEv+0x1d3c>)
 810322a:	f7fd fb43 	bl	81008b4 <__aeabi_ddiv>
 810322e:	4602      	mov	r2, r0
 8103230:	460b      	mov	r3, r1
 8103232:	ec43 2b17 	vmov	d7, r2, r3
 8103236:	eeb0 0a47 	vmov.f32	s0, s14
 810323a:	eef0 0a67 	vmov.f32	s1, s15
 810323e:	f008 f9bf 	bl	810b5c0 <ceil>
 8103242:	ec53 2b10 	vmov	r2, r3, d0
 8103246:	4610      	mov	r0, r2
 8103248:	4619      	mov	r1, r3
 810324a:	f7fd fca3 	bl	8100b94 <__aeabi_d2uiz>
 810324e:	4603      	mov	r3, r0
 8103250:	b2db      	uxtb	r3, r3
 8103252:	429c      	cmp	r4, r3
 8103254:	d109      	bne.n	810326a <_ZN5Xicro9Spin_nodeEv+0x1a22>

                    _state=61; // grab more data
 8103256:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810325a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	22de      	movs	r2, #222	; 0xde
 8103262:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                }

                break;
            case 50:
                if(_datain[0]==250){ // continu true
                    _state=51;
 8103266:	f001 bcee 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                break;
 810326a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810326e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103272:	681b      	ldr	r3, [r3, #0]
 8103274:	223d      	movs	r2, #61	; 0x3d
 8103276:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=51;
 810327a:	f001 bce4 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                }else if(_datain[0]==47){ // continue false
                    _state=52;
 810327e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103282:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103286:	681b      	ldr	r3, [r3, #0]
 8103288:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 810328c:	2bfa      	cmp	r3, #250	; 0xfa
 810328e:	d109      	bne.n	81032a4 <_ZN5Xicro9Spin_nodeEv+0x1a5c>
                }else if(_datain[0]==254){ // stop true
 8103290:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103294:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103298:	681b      	ldr	r3, [r3, #0]
 810329a:	2233      	movs	r2, #51	; 0x33
 810329c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=0;
                }
                break;
            case 51: //confiirm true and continue
                if(_datain[0]==250){
                    *(bool*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (bool)1;
 81032a0:	f001 bcd1 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _state=53;
 81032a4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81032a8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81032ac:	681b      	ldr	r3, [r3, #0]
 81032ae:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 81032b2:	2b2f      	cmp	r3, #47	; 0x2f
 81032b4:	d109      	bne.n	81032ca <_ZN5Xicro9Spin_nodeEv+0x1a82>
                }else if(_datain[0]==127){ //stop false
 81032b6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81032ba:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81032be:	681b      	ldr	r3, [r3, #0]
 81032c0:	2234      	movs	r2, #52	; 0x34
 81032c2:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    *(bool*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (bool)1;
 81032c6:	f001 bcbe 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _state=54;
 81032ca:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81032ce:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81032d2:	681b      	ldr	r3, [r3, #0]
 81032d4:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 81032d8:	2bfe      	cmp	r3, #254	; 0xfe
 81032da:	d109      	bne.n	81032f0 <_ZN5Xicro9Spin_nodeEv+0x1aa8>
                }else{
 81032dc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81032e0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81032e4:	681b      	ldr	r3, [r3, #0]
 81032e6:	2235      	movs	r2, #53	; 0x35
 81032e8:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    *(bool*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (bool)1;
 81032ec:	f001 bcab 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _state=0;
 81032f0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81032f4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81032f8:	681b      	ldr	r3, [r3, #0]
 81032fa:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 81032fe:	2b7f      	cmp	r3, #127	; 0x7f
 8103300:	d109      	bne.n	8103316 <_ZN5Xicro9Spin_nodeEv+0x1ace>
                }
 8103302:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103306:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810330a:	681b      	ldr	r3, [r3, #0]
 810330c:	2236      	movs	r2, #54	; 0x36
 810330e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    *(bool*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (bool)1;
 8103312:	f001 bc98 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
            case 51: //confiirm true and continue
 8103316:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810331a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810331e:	681b      	ldr	r3, [r3, #0]
 8103320:	2200      	movs	r2, #0
 8103322:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    *(bool*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (bool)1;
 8103326:	f001 bc8e 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _Onindex=_Onindex+1;
                    _state=6;
 810332a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810332e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103332:	681b      	ldr	r3, [r3, #0]
 8103334:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8103338:	2bfa      	cmp	r3, #250	; 0xfa
 810333a:	d13f      	bne.n	81033bc <_ZN5Xicro9Spin_nodeEv+0x1b74>
                }else{
 810333c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103340:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103344:	681b      	ldr	r3, [r3, #0]
 8103346:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 810334a:	461c      	mov	r4, r3
 810334c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103350:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103354:	681b      	ldr	r3, [r3, #0]
 8103356:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 810335a:	4618      	mov	r0, r3
 810335c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103360:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103364:	681b      	ldr	r3, [r3, #0]
 8103366:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 810336a:	4619      	mov	r1, r3
 810336c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103370:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103374:	681a      	ldr	r2, [r3, #0]
 8103376:	0063      	lsls	r3, r4, #1
 8103378:	4403      	add	r3, r0
 810337a:	440b      	add	r3, r1
 810337c:	3352      	adds	r3, #82	; 0x52
 810337e:	009b      	lsls	r3, r3, #2
 8103380:	4413      	add	r3, r2
 8103382:	685b      	ldr	r3, [r3, #4]
 8103384:	2201      	movs	r2, #1
 8103386:	701a      	strb	r2, [r3, #0]
                    _state=0;
 8103388:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810338c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103390:	681b      	ldr	r3, [r3, #0]
 8103392:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8103396:	3301      	adds	r3, #1
 8103398:	b2da      	uxtb	r2, r3
 810339a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810339e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81033a2:	681b      	ldr	r3, [r3, #0]
 81033a4:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
                }
 81033a8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81033ac:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81033b0:	681b      	ldr	r3, [r3, #0]
 81033b2:	2206      	movs	r2, #6
 81033b4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                break;
            case 52: //confiirm false and continue
                if(_datain[0]==47){
                    *(bool*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (bool)0;
 81033b8:	f001 bc45 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
            case 52: //confiirm false and continue
 81033bc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81033c0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81033c4:	681b      	ldr	r3, [r3, #0]
 81033c6:	2200      	movs	r2, #0
 81033c8:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    *(bool*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (bool)0;
 81033cc:	f001 bc3b 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _Onindex=_Onindex+1;
                    _state=6;
 81033d0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81033d4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 81033de:	2b2f      	cmp	r3, #47	; 0x2f
 81033e0:	d13f      	bne.n	8103462 <_ZN5Xicro9Spin_nodeEv+0x1c1a>
                }else{
 81033e2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81033e6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81033ea:	681b      	ldr	r3, [r3, #0]
 81033ec:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81033f0:	461c      	mov	r4, r3
 81033f2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81033f6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81033fa:	681b      	ldr	r3, [r3, #0]
 81033fc:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8103400:	4618      	mov	r0, r3
 8103402:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103406:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810340a:	681b      	ldr	r3, [r3, #0]
 810340c:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 8103410:	4619      	mov	r1, r3
 8103412:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103416:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810341a:	681a      	ldr	r2, [r3, #0]
 810341c:	0063      	lsls	r3, r4, #1
 810341e:	4403      	add	r3, r0
 8103420:	440b      	add	r3, r1
 8103422:	3352      	adds	r3, #82	; 0x52
 8103424:	009b      	lsls	r3, r3, #2
 8103426:	4413      	add	r3, r2
 8103428:	685b      	ldr	r3, [r3, #4]
 810342a:	2200      	movs	r2, #0
 810342c:	701a      	strb	r2, [r3, #0]
                    _state=0;
 810342e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103432:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 810343c:	3301      	adds	r3, #1
 810343e:	b2da      	uxtb	r2, r3
 8103440:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103444:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103448:	681b      	ldr	r3, [r3, #0]
 810344a:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
                }
 810344e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103452:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103456:	681b      	ldr	r3, [r3, #0]
 8103458:	2206      	movs	r2, #6
 810345a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                break;
            case 53: //confiirm true and stop
                if(_datain[0]==254){
                    *(bool*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (bool)1;
 810345e:	f001 bbf2 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
            case 53: //confiirm true and stop
 8103462:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103466:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810346a:	681b      	ldr	r3, [r3, #0]
 810346c:	2200      	movs	r2, #0
 810346e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    *(bool*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (bool)1;
 8103472:	f001 bbe8 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _state=111;
                }else{
 8103476:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810347a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810347e:	681b      	ldr	r3, [r3, #0]
 8103480:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8103484:	2bfe      	cmp	r3, #254	; 0xfe
 8103486:	d12f      	bne.n	81034e8 <_ZN5Xicro9Spin_nodeEv+0x1ca0>
                    _state=0;
 8103488:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810348c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103490:	681b      	ldr	r3, [r3, #0]
 8103492:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8103496:	461c      	mov	r4, r3
 8103498:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810349c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81034a0:	681b      	ldr	r3, [r3, #0]
 81034a2:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 81034a6:	4618      	mov	r0, r3
 81034a8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81034ac:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81034b0:	681b      	ldr	r3, [r3, #0]
 81034b2:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 81034b6:	4619      	mov	r1, r3
 81034b8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81034bc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81034c0:	681a      	ldr	r2, [r3, #0]
 81034c2:	0063      	lsls	r3, r4, #1
 81034c4:	4403      	add	r3, r0
 81034c6:	440b      	add	r3, r1
 81034c8:	3352      	adds	r3, #82	; 0x52
 81034ca:	009b      	lsls	r3, r3, #2
 81034cc:	4413      	add	r3, r2
 81034ce:	685b      	ldr	r3, [r3, #4]
 81034d0:	2201      	movs	r2, #1
 81034d2:	701a      	strb	r2, [r3, #0]
                }
 81034d4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81034d8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81034dc:	681b      	ldr	r3, [r3, #0]
 81034de:	226f      	movs	r2, #111	; 0x6f
 81034e0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                break;
            case 54: //confirm false and stop
                if(_datain[0]==127){
                    *(bool*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (bool)0;
 81034e4:	f001 bbaf 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
            case 54: //confirm false and stop
 81034e8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81034ec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81034f0:	681b      	ldr	r3, [r3, #0]
 81034f2:	2200      	movs	r2, #0
 81034f4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    *(bool*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (bool)0;
 81034f8:	f001 bba5 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _state=111;
                }else{
 81034fc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103500:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103504:	681b      	ldr	r3, [r3, #0]
 8103506:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 810350a:	2b7f      	cmp	r3, #127	; 0x7f
 810350c:	d12f      	bne.n	810356e <_ZN5Xicro9Spin_nodeEv+0x1d26>
                    _state=0;
 810350e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103512:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103516:	681b      	ldr	r3, [r3, #0]
 8103518:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 810351c:	461c      	mov	r4, r3
 810351e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103522:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103526:	681b      	ldr	r3, [r3, #0]
 8103528:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 810352c:	4618      	mov	r0, r3
 810352e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103532:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103536:	681b      	ldr	r3, [r3, #0]
 8103538:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 810353c:	4619      	mov	r1, r3
 810353e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103542:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103546:	681a      	ldr	r2, [r3, #0]
 8103548:	0063      	lsls	r3, r4, #1
 810354a:	4403      	add	r3, r0
 810354c:	440b      	add	r3, r1
 810354e:	3352      	adds	r3, #82	; 0x52
 8103550:	009b      	lsls	r3, r3, #2
 8103552:	4413      	add	r3, r2
 8103554:	685b      	ldr	r3, [r3, #4]
 8103556:	2200      	movs	r2, #0
 8103558:	701a      	strb	r2, [r3, #0]
                }
 810355a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810355e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103562:	681b      	ldr	r3, [r3, #0]
 8103564:	226f      	movs	r2, #111	; 0x6f
 8103566:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                break;



 810356a:	f001 bb6c 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>

 810356e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103572:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103576:	681b      	ldr	r3, [r3, #0]
 8103578:	2200      	movs	r2, #0
 810357a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

 810357e:	f001 bb62 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
 8103582:	bf00      	nop
 8103584:	40200000 	.word	0x40200000

            case 9: // check N grab 
                if(_datain[0]==_OngrabTo){
                    _state=_statetogo;
                }else{
                    _state=0;
 8103588:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810358c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103590:	681b      	ldr	r3, [r3, #0]
 8103592:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8103596:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810359a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810359e:	681b      	ldr	r3, [r3, #0]
 81035a0:	f893 316e 	ldrb.w	r3, [r3, #366]	; 0x16e
 81035a4:	429a      	cmp	r2, r3
 81035a6:	d10f      	bne.n	81035c8 <_ZN5Xicro9Spin_nodeEv+0x1d80>
                }
 81035a8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81035ac:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81035b0:	681b      	ldr	r3, [r3, #0]
 81035b2:	f893 216f 	ldrb.w	r2, [r3, #367]	; 0x16f
 81035b6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81035ba:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81035be:	681b      	ldr	r3, [r3, #0]
 81035c0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                break;
            case 10: //uint8 and  int 8 
                if(_Ontype==8 || _Ontype==9){
                    *(uint8_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (uint8_t)_datain[0];
 81035c4:	f001 bb3f 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
            case 10: //uint8 and  int 8 
 81035c8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81035cc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81035d0:	681b      	ldr	r3, [r3, #0]
 81035d2:	2200      	movs	r2, #0
 81035d4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    *(uint8_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (uint8_t)_datain[0];
 81035d8:	f001 bb35 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                }else if(_Ontype==18 || _Ontype==19){
                    *(int8_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (int8_t)_datain[0];
 81035dc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81035e0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81035e4:	681b      	ldr	r3, [r3, #0]
 81035e6:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 81035ea:	2b08      	cmp	r3, #8
 81035ec:	d008      	beq.n	8103600 <_ZN5Xicro9Spin_nodeEv+0x1db8>
 81035ee:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81035f2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81035f6:	681b      	ldr	r3, [r3, #0]
 81035f8:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 81035fc:	2b09      	cmp	r3, #9
 81035fe:	d12c      	bne.n	810365a <_ZN5Xicro9Spin_nodeEv+0x1e12>
                }
 8103600:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103604:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103608:	681b      	ldr	r3, [r3, #0]
 810360a:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 810360e:	461c      	mov	r4, r3
 8103610:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103614:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103618:	681b      	ldr	r3, [r3, #0]
 810361a:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 810361e:	4618      	mov	r0, r3
 8103620:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103624:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103628:	681b      	ldr	r3, [r3, #0]
 810362a:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 810362e:	4619      	mov	r1, r3
 8103630:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103634:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103638:	681a      	ldr	r2, [r3, #0]
 810363a:	0063      	lsls	r3, r4, #1
 810363c:	4403      	add	r3, r0
 810363e:	440b      	add	r3, r1
 8103640:	3352      	adds	r3, #82	; 0x52
 8103642:	009b      	lsls	r3, r3, #2
 8103644:	4413      	add	r3, r2
 8103646:	685b      	ldr	r3, [r3, #4]
 8103648:	f607 3208 	addw	r2, r7, #2824	; 0xb08
 810364c:	f6a2 3204 	subw	r2, r2, #2820	; 0xb04
 8103650:	6812      	ldr	r2, [r2, #0]
 8103652:	f892 211a 	ldrb.w	r2, [r2, #282]	; 0x11a
 8103656:	701a      	strb	r2, [r3, #0]
 8103658:	e03e      	b.n	81036d8 <_ZN5Xicro9Spin_nodeEv+0x1e90>

 810365a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810365e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103662:	681b      	ldr	r3, [r3, #0]
 8103664:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8103668:	2b12      	cmp	r3, #18
 810366a:	d008      	beq.n	810367e <_ZN5Xicro9Spin_nodeEv+0x1e36>
 810366c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103670:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103674:	681b      	ldr	r3, [r3, #0]
 8103676:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 810367a:	2b13      	cmp	r3, #19
 810367c:	d12c      	bne.n	81036d8 <_ZN5Xicro9Spin_nodeEv+0x1e90>
                _Ongrab=_Ongrab+1;
 810367e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103682:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103686:	681b      	ldr	r3, [r3, #0]
 8103688:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 810368c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103690:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103694:	681b      	ldr	r3, [r3, #0]
 8103696:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 810369a:	461d      	mov	r5, r3
 810369c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81036a0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81036a4:	681b      	ldr	r3, [r3, #0]
 81036a6:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 81036aa:	461c      	mov	r4, r3
 81036ac:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81036b0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81036b4:	681b      	ldr	r3, [r3, #0]
 81036b6:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 81036ba:	4618      	mov	r0, r3
 81036bc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81036c0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81036c4:	681a      	ldr	r2, [r3, #0]
 81036c6:	006b      	lsls	r3, r5, #1
 81036c8:	4423      	add	r3, r4
 81036ca:	4403      	add	r3, r0
 81036cc:	3352      	adds	r3, #82	; 0x52
 81036ce:	009b      	lsls	r3, r3, #2
 81036d0:	4413      	add	r3, r2
 81036d2:	685b      	ldr	r3, [r3, #4]
 81036d4:	b24a      	sxtb	r2, r1
 81036d6:	701a      	strb	r2, [r3, #0]
                if(_Ongrab==_OngrabTo){
                    _state=222; // check main continue or stop
                }else{
 81036d8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81036dc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81036e0:	681b      	ldr	r3, [r3, #0]
 81036e2:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 81036e6:	3301      	adds	r3, #1
 81036e8:	b2da      	uxtb	r2, r3
 81036ea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81036ee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81036f2:	681b      	ldr	r3, [r3, #0]
 81036f4:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                    _state=10; // grab more data
 81036f8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81036fc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103700:	681b      	ldr	r3, [r3, #0]
 8103702:	f893 216d 	ldrb.w	r2, [r3, #365]	; 0x16d
 8103706:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810370a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810370e:	681b      	ldr	r3, [r3, #0]
 8103710:	f893 316e 	ldrb.w	r3, [r3, #366]	; 0x16e
 8103714:	429a      	cmp	r2, r3
 8103716:	d109      	bne.n	810372c <_ZN5Xicro9Spin_nodeEv+0x1ee4>
                }
 8103718:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810371c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103720:	681b      	ldr	r3, [r3, #0]
 8103722:	22de      	movs	r2, #222	; 0xde
 8103724:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                break;
   
            case 11: //n byte
                _loop=_loop+1;
 8103728:	f001 ba8d 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
   
 810372c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103730:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103734:	681b      	ldr	r3, [r3, #0]
 8103736:	220a      	movs	r2, #10
 8103738:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                _loop=_loop+1;
 810373c:	f001 ba83 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                _bb= _bb<<8 ;
                _bb=_bb | _datain[0];
                if((_Ontype==16 || _Ontype==17 ) && _loop==_loopTo){
 8103740:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103744:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103748:	681b      	ldr	r3, [r3, #0]
 810374a:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 810374e:	3301      	adds	r3, #1
 8103750:	b2da      	uxtb	r2, r3
 8103752:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103756:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810375a:	681b      	ldr	r3, [r3, #0]
 810375c:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
                    *(uint16_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] =   (uint16_t)_bb;
 8103760:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103764:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103768:	681b      	ldr	r3, [r3, #0]
 810376a:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 810376e:	f04f 0200 	mov.w	r2, #0
 8103772:	f04f 0300 	mov.w	r3, #0
 8103776:	020b      	lsls	r3, r1, #8
 8103778:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810377c:	0202      	lsls	r2, r0, #8
 810377e:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8103782:	f6a1 3104 	subw	r1, r1, #2820	; 0xb04
 8103786:	6809      	ldr	r1, [r1, #0]
 8103788:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
                    _state=222;
 810378c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103790:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103794:	681b      	ldr	r3, [r3, #0]
 8103796:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 810379a:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 810379e:	f6a1 3104 	subw	r1, r1, #2820	; 0xb04
 81037a2:	6809      	ldr	r1, [r1, #0]
 81037a4:	f891 111a 	ldrb.w	r1, [r1, #282]	; 0x11a
 81037a8:	b2c9      	uxtb	r1, r1
 81037aa:	2000      	movs	r0, #0
 81037ac:	460c      	mov	r4, r1
 81037ae:	4605      	mov	r5, r0
 81037b0:	ea42 0804 	orr.w	r8, r2, r4
 81037b4:	ea43 0905 	orr.w	r9, r3, r5
 81037b8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81037bc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81037c0:	681b      	ldr	r3, [r3, #0]
 81037c2:	e9c3 8948 	strd	r8, r9, [r3, #288]	; 0x120
                }else if((_Ontype==116 || _Ontype==117 ) && _loop==_loopTo){
 81037c6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81037ca:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 81037d4:	2b10      	cmp	r3, #16
 81037d6:	d008      	beq.n	81037ea <_ZN5Xicro9Spin_nodeEv+0x1fa2>
 81037d8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81037dc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81037e0:	681b      	ldr	r3, [r3, #0]
 81037e2:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 81037e6:	2b11      	cmp	r3, #17
 81037e8:	d145      	bne.n	8103876 <_ZN5Xicro9Spin_nodeEv+0x202e>
 81037ea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81037ee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81037f2:	681b      	ldr	r3, [r3, #0]
 81037f4:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
 81037f8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81037fc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103800:	681b      	ldr	r3, [r3, #0]
 8103802:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8103806:	429a      	cmp	r2, r3
 8103808:	d135      	bne.n	8103876 <_ZN5Xicro9Spin_nodeEv+0x202e>
                    *(int16_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] =   (int16_t)_bb;
 810380a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810380e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103812:	681b      	ldr	r3, [r3, #0]
 8103814:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8103818:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810381c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103820:	681b      	ldr	r3, [r3, #0]
 8103822:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8103826:	461e      	mov	r6, r3
 8103828:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810382c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103830:	681b      	ldr	r3, [r3, #0]
 8103832:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8103836:	461d      	mov	r5, r3
 8103838:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810383c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103840:	681b      	ldr	r3, [r3, #0]
 8103842:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 8103846:	461c      	mov	r4, r3
 8103848:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810384c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103850:	681a      	ldr	r2, [r3, #0]
 8103852:	0073      	lsls	r3, r6, #1
 8103854:	442b      	add	r3, r5
 8103856:	4423      	add	r3, r4
 8103858:	3352      	adds	r3, #82	; 0x52
 810385a:	009b      	lsls	r3, r3, #2
 810385c:	4413      	add	r3, r2
 810385e:	685b      	ldr	r3, [r3, #4]
 8103860:	b282      	uxth	r2, r0
 8103862:	801a      	strh	r2, [r3, #0]
                    _state=222;
 8103864:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103868:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810386c:	681b      	ldr	r3, [r3, #0]
 810386e:	22de      	movs	r2, #222	; 0xde
 8103870:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8103874:	e34a      	b.n	8103f0c <_ZN5Xicro9Spin_nodeEv+0x26c4>
                }else if((_Ontype==32 || _Ontype==33 ) && _loop==_loopTo){
 8103876:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810387a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810387e:	681b      	ldr	r3, [r3, #0]
 8103880:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8103884:	2b74      	cmp	r3, #116	; 0x74
 8103886:	d008      	beq.n	810389a <_ZN5Xicro9Spin_nodeEv+0x2052>
 8103888:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810388c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103890:	681b      	ldr	r3, [r3, #0]
 8103892:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8103896:	2b75      	cmp	r3, #117	; 0x75
 8103898:	d145      	bne.n	8103926 <_ZN5Xicro9Spin_nodeEv+0x20de>
 810389a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810389e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81038a2:	681b      	ldr	r3, [r3, #0]
 81038a4:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
 81038a8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81038ac:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81038b0:	681b      	ldr	r3, [r3, #0]
 81038b2:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 81038b6:	429a      	cmp	r2, r3
 81038b8:	d135      	bne.n	8103926 <_ZN5Xicro9Spin_nodeEv+0x20de>
                    *(uint32_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] =   (uint32_t)_bb;
 81038ba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81038be:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 81038c8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81038cc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81038d0:	681b      	ldr	r3, [r3, #0]
 81038d2:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81038d6:	461e      	mov	r6, r3
 81038d8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81038dc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81038e0:	681b      	ldr	r3, [r3, #0]
 81038e2:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 81038e6:	461d      	mov	r5, r3
 81038e8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81038ec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81038f0:	681b      	ldr	r3, [r3, #0]
 81038f2:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 81038f6:	461c      	mov	r4, r3
 81038f8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81038fc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103900:	681a      	ldr	r2, [r3, #0]
 8103902:	0073      	lsls	r3, r6, #1
 8103904:	442b      	add	r3, r5
 8103906:	4423      	add	r3, r4
 8103908:	3352      	adds	r3, #82	; 0x52
 810390a:	009b      	lsls	r3, r3, #2
 810390c:	4413      	add	r3, r2
 810390e:	685b      	ldr	r3, [r3, #4]
 8103910:	b202      	sxth	r2, r0
 8103912:	801a      	strh	r2, [r3, #0]
                    _state=222;
 8103914:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103918:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810391c:	681b      	ldr	r3, [r3, #0]
 810391e:	22de      	movs	r2, #222	; 0xde
 8103920:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8103924:	e2f2      	b.n	8103f0c <_ZN5Xicro9Spin_nodeEv+0x26c4>
                }else if((_Ontype==132 || _Ontype==133 ) && _loop==_loopTo){
 8103926:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810392a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810392e:	681b      	ldr	r3, [r3, #0]
 8103930:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8103934:	2b20      	cmp	r3, #32
 8103936:	d008      	beq.n	810394a <_ZN5Xicro9Spin_nodeEv+0x2102>
 8103938:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810393c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103940:	681b      	ldr	r3, [r3, #0]
 8103942:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8103946:	2b21      	cmp	r3, #33	; 0x21
 8103948:	d145      	bne.n	81039d6 <_ZN5Xicro9Spin_nodeEv+0x218e>
 810394a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810394e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103952:	681b      	ldr	r3, [r3, #0]
 8103954:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
 8103958:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810395c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103960:	681b      	ldr	r3, [r3, #0]
 8103962:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8103966:	429a      	cmp	r2, r3
 8103968:	d135      	bne.n	81039d6 <_ZN5Xicro9Spin_nodeEv+0x218e>
                    *(int32_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] =   (int32_t)_bb;
 810396a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810396e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103972:	681b      	ldr	r3, [r3, #0]
 8103974:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8103978:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810397c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103980:	681b      	ldr	r3, [r3, #0]
 8103982:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8103986:	461e      	mov	r6, r3
 8103988:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810398c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103990:	681b      	ldr	r3, [r3, #0]
 8103992:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8103996:	461d      	mov	r5, r3
 8103998:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810399c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81039a0:	681b      	ldr	r3, [r3, #0]
 81039a2:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 81039a6:	461c      	mov	r4, r3
 81039a8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81039ac:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81039b0:	681a      	ldr	r2, [r3, #0]
 81039b2:	0073      	lsls	r3, r6, #1
 81039b4:	442b      	add	r3, r5
 81039b6:	4423      	add	r3, r4
 81039b8:	3352      	adds	r3, #82	; 0x52
 81039ba:	009b      	lsls	r3, r3, #2
 81039bc:	4413      	add	r3, r2
 81039be:	685b      	ldr	r3, [r3, #4]
 81039c0:	4602      	mov	r2, r0
 81039c2:	601a      	str	r2, [r3, #0]
                    _state=222;
 81039c4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81039c8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81039cc:	681b      	ldr	r3, [r3, #0]
 81039ce:	22de      	movs	r2, #222	; 0xde
 81039d0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 81039d4:	e29a      	b.n	8103f0c <_ZN5Xicro9Spin_nodeEv+0x26c4>
                }else if((_Ontype==64 || _Ontype==65 ) && _loop==_loopTo){
 81039d6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81039da:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81039de:	681b      	ldr	r3, [r3, #0]
 81039e0:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 81039e4:	2b84      	cmp	r3, #132	; 0x84
 81039e6:	d008      	beq.n	81039fa <_ZN5Xicro9Spin_nodeEv+0x21b2>
 81039e8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81039ec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81039f0:	681b      	ldr	r3, [r3, #0]
 81039f2:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 81039f6:	2b85      	cmp	r3, #133	; 0x85
 81039f8:	d145      	bne.n	8103a86 <_ZN5Xicro9Spin_nodeEv+0x223e>
 81039fa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81039fe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103a02:	681b      	ldr	r3, [r3, #0]
 8103a04:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
 8103a08:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103a0c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103a10:	681b      	ldr	r3, [r3, #0]
 8103a12:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8103a16:	429a      	cmp	r2, r3
 8103a18:	d135      	bne.n	8103a86 <_ZN5Xicro9Spin_nodeEv+0x223e>
                    *(uint64_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] =   (uint64_t)_bb;
 8103a1a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103a1e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103a22:	681b      	ldr	r3, [r3, #0]
 8103a24:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8103a28:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103a2c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103a30:	681b      	ldr	r3, [r3, #0]
 8103a32:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8103a36:	461e      	mov	r6, r3
 8103a38:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103a3c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103a40:	681b      	ldr	r3, [r3, #0]
 8103a42:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8103a46:	461d      	mov	r5, r3
 8103a48:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103a4c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103a50:	681b      	ldr	r3, [r3, #0]
 8103a52:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 8103a56:	461c      	mov	r4, r3
 8103a58:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103a5c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103a60:	681a      	ldr	r2, [r3, #0]
 8103a62:	0073      	lsls	r3, r6, #1
 8103a64:	442b      	add	r3, r5
 8103a66:	4423      	add	r3, r4
 8103a68:	3352      	adds	r3, #82	; 0x52
 8103a6a:	009b      	lsls	r3, r3, #2
 8103a6c:	4413      	add	r3, r2
 8103a6e:	685b      	ldr	r3, [r3, #4]
 8103a70:	4602      	mov	r2, r0
 8103a72:	601a      	str	r2, [r3, #0]
                    _state=222;
 8103a74:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103a78:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103a7c:	681b      	ldr	r3, [r3, #0]
 8103a7e:	22de      	movs	r2, #222	; 0xde
 8103a80:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8103a84:	e242      	b.n	8103f0c <_ZN5Xicro9Spin_nodeEv+0x26c4>
                }else if((_Ontype==164 || _Ontype==165 ) && _loop==_loopTo){
 8103a86:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103a8a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103a8e:	681b      	ldr	r3, [r3, #0]
 8103a90:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8103a94:	2b40      	cmp	r3, #64	; 0x40
 8103a96:	d008      	beq.n	8103aaa <_ZN5Xicro9Spin_nodeEv+0x2262>
 8103a98:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103a9c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103aa0:	681b      	ldr	r3, [r3, #0]
 8103aa2:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8103aa6:	2b41      	cmp	r3, #65	; 0x41
 8103aa8:	d145      	bne.n	8103b36 <_ZN5Xicro9Spin_nodeEv+0x22ee>
 8103aaa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103aae:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103ab2:	681b      	ldr	r3, [r3, #0]
 8103ab4:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
 8103ab8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103abc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8103ac6:	429a      	cmp	r2, r3
 8103ac8:	d135      	bne.n	8103b36 <_ZN5Xicro9Spin_nodeEv+0x22ee>
                    *(int64_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] =   (int64_t)_bb;
 8103aca:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103ace:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103ad2:	681b      	ldr	r3, [r3, #0]
 8103ad4:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8103ad8:	461c      	mov	r4, r3
 8103ada:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103ade:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103ae2:	681b      	ldr	r3, [r3, #0]
 8103ae4:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8103ae8:	4618      	mov	r0, r3
 8103aea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103aee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103af2:	681b      	ldr	r3, [r3, #0]
 8103af4:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 8103af8:	4619      	mov	r1, r3
 8103afa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103afe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103b02:	681a      	ldr	r2, [r3, #0]
 8103b04:	0063      	lsls	r3, r4, #1
 8103b06:	4403      	add	r3, r0
 8103b08:	440b      	add	r3, r1
 8103b0a:	3352      	adds	r3, #82	; 0x52
 8103b0c:	009b      	lsls	r3, r3, #2
 8103b0e:	4413      	add	r3, r2
 8103b10:	6859      	ldr	r1, [r3, #4]
 8103b12:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103b16:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103b1a:	681b      	ldr	r3, [r3, #0]
 8103b1c:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 8103b20:	e9c1 2300 	strd	r2, r3, [r1]
                    _state=222;
 8103b24:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103b28:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103b2c:	681b      	ldr	r3, [r3, #0]
 8103b2e:	22de      	movs	r2, #222	; 0xde
 8103b30:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8103b34:	e1ea      	b.n	8103f0c <_ZN5Xicro9Spin_nodeEv+0x26c4>
                }else if((_Ontype==111 || _Ontype==112 ) && _loop==_loopTo){
 8103b36:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103b3a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103b3e:	681b      	ldr	r3, [r3, #0]
 8103b40:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8103b44:	2ba4      	cmp	r3, #164	; 0xa4
 8103b46:	d008      	beq.n	8103b5a <_ZN5Xicro9Spin_nodeEv+0x2312>
 8103b48:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103b4c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103b50:	681b      	ldr	r3, [r3, #0]
 8103b52:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8103b56:	2ba5      	cmp	r3, #165	; 0xa5
 8103b58:	d147      	bne.n	8103bea <_ZN5Xicro9Spin_nodeEv+0x23a2>
 8103b5a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103b5e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103b62:	681b      	ldr	r3, [r3, #0]
 8103b64:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
 8103b68:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103b6c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103b70:	681b      	ldr	r3, [r3, #0]
 8103b72:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8103b76:	429a      	cmp	r2, r3
 8103b78:	d137      	bne.n	8103bea <_ZN5Xicro9Spin_nodeEv+0x23a2>
                    uint8_t bu[4];
 8103b7a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103b7e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103b82:	681b      	ldr	r3, [r3, #0]
 8103b84:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8103b88:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103b8c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103b90:	681b      	ldr	r3, [r3, #0]
 8103b92:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8103b96:	461e      	mov	r6, r3
 8103b98:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103b9c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103ba0:	681b      	ldr	r3, [r3, #0]
 8103ba2:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8103ba6:	461d      	mov	r5, r3
 8103ba8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103bac:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103bb0:	681b      	ldr	r3, [r3, #0]
 8103bb2:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 8103bb6:	461c      	mov	r4, r3
 8103bb8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103bbc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103bc0:	681a      	ldr	r2, [r3, #0]
 8103bc2:	0073      	lsls	r3, r6, #1
 8103bc4:	442b      	add	r3, r5
 8103bc6:	4423      	add	r3, r4
 8103bc8:	3352      	adds	r3, #82	; 0x52
 8103bca:	009b      	lsls	r3, r3, #2
 8103bcc:	4413      	add	r3, r2
 8103bce:	685c      	ldr	r4, [r3, #4]
 8103bd0:	4602      	mov	r2, r0
 8103bd2:	460b      	mov	r3, r1
 8103bd4:	e9c4 2300 	strd	r2, r3, [r4]
                    bu[0] = (_bb >> 0)  & 0xFF;
 8103bd8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103bdc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103be0:	681b      	ldr	r3, [r3, #0]
 8103be2:	22de      	movs	r2, #222	; 0xde
 8103be4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8103be8:	e190      	b.n	8103f0c <_ZN5Xicro9Spin_nodeEv+0x26c4>
                    bu[1] = (_bb >> 8)  & 0xFF;
 8103bea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103bee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103bf2:	681b      	ldr	r3, [r3, #0]
 8103bf4:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8103bf8:	2b6f      	cmp	r3, #111	; 0x6f
 8103bfa:	d009      	beq.n	8103c10 <_ZN5Xicro9Spin_nodeEv+0x23c8>
 8103bfc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103c00:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103c04:	681b      	ldr	r3, [r3, #0]
 8103c06:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8103c0a:	2b70      	cmp	r3, #112	; 0x70
 8103c0c:	f040 808f 	bne.w	8103d2e <_ZN5Xicro9Spin_nodeEv+0x24e6>
 8103c10:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103c14:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103c18:	681b      	ldr	r3, [r3, #0]
 8103c1a:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
 8103c1e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103c22:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103c26:	681b      	ldr	r3, [r3, #0]
 8103c28:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8103c2c:	429a      	cmp	r2, r3
 8103c2e:	d17e      	bne.n	8103d2e <_ZN5Xicro9Spin_nodeEv+0x24e6>
                    bu[2] = (_bb >> 16) & 0xFF;
                    bu[3] = (_bb >> 24) & 0xFF;
 8103c30:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103c34:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103c38:	681b      	ldr	r3, [r3, #0]
 8103c3a:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 8103c3e:	b2d2      	uxtb	r2, r2
 8103c40:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103c44:	f6a3 23f4 	subw	r3, r3, #2804	; 0xaf4
 8103c48:	701a      	strb	r2, [r3, #0]
                    memcpy (_nonverify[_OnTopic][_Indexdata][_Ongrab], bu, 4);
 8103c4a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103c4e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103c52:	681b      	ldr	r3, [r3, #0]
 8103c54:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8103c58:	f04f 0200 	mov.w	r2, #0
 8103c5c:	f04f 0300 	mov.w	r3, #0
 8103c60:	0a02      	lsrs	r2, r0, #8
 8103c62:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8103c66:	0a0b      	lsrs	r3, r1, #8
 8103c68:	b2d2      	uxtb	r2, r2
 8103c6a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103c6e:	f6a3 23f4 	subw	r3, r3, #2804	; 0xaf4
 8103c72:	705a      	strb	r2, [r3, #1]
                    _state=222;
 8103c74:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103c78:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103c7c:	681b      	ldr	r3, [r3, #0]
 8103c7e:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8103c82:	f04f 0200 	mov.w	r2, #0
 8103c86:	f04f 0300 	mov.w	r3, #0
 8103c8a:	0c02      	lsrs	r2, r0, #16
 8103c8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8103c90:	0c0b      	lsrs	r3, r1, #16
 8103c92:	b2d2      	uxtb	r2, r2
 8103c94:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103c98:	f6a3 23f4 	subw	r3, r3, #2804	; 0xaf4
 8103c9c:	709a      	strb	r2, [r3, #2]
                }else if((_Ontype==222 || _Ontype==223 ) && _loop==_loopTo){
 8103c9e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103ca2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8103cac:	f04f 0200 	mov.w	r2, #0
 8103cb0:	f04f 0300 	mov.w	r3, #0
 8103cb4:	0e02      	lsrs	r2, r0, #24
 8103cb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8103cba:	0e0b      	lsrs	r3, r1, #24
 8103cbc:	b2d2      	uxtb	r2, r2
 8103cbe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103cc2:	f6a3 23f4 	subw	r3, r3, #2804	; 0xaf4
 8103cc6:	70da      	strb	r2, [r3, #3]
                    uint8_t bu[8];
 8103cc8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103ccc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103cd0:	681b      	ldr	r3, [r3, #0]
 8103cd2:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8103cd6:	461c      	mov	r4, r3
 8103cd8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103cdc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103ce0:	681b      	ldr	r3, [r3, #0]
 8103ce2:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8103ce6:	4618      	mov	r0, r3
 8103ce8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103cec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103cf0:	681b      	ldr	r3, [r3, #0]
 8103cf2:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 8103cf6:	4619      	mov	r1, r3
 8103cf8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103cfc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103d00:	681a      	ldr	r2, [r3, #0]
 8103d02:	0063      	lsls	r3, r4, #1
 8103d04:	4403      	add	r3, r0
 8103d06:	440b      	add	r3, r1
 8103d08:	3352      	adds	r3, #82	; 0x52
 8103d0a:	009b      	lsls	r3, r3, #2
 8103d0c:	4413      	add	r3, r2
 8103d0e:	685b      	ldr	r3, [r3, #4]
 8103d10:	f607 3208 	addw	r2, r7, #2824	; 0xb08
 8103d14:	f6a2 22f4 	subw	r2, r2, #2804	; 0xaf4
 8103d18:	6812      	ldr	r2, [r2, #0]
 8103d1a:	601a      	str	r2, [r3, #0]
                    bu[0] = (_bb >> 0)  & 0xFF;
 8103d1c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103d20:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103d24:	681b      	ldr	r3, [r3, #0]
 8103d26:	22de      	movs	r2, #222	; 0xde
 8103d28:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8103d2c:	e0ee      	b.n	8103f0c <_ZN5Xicro9Spin_nodeEv+0x26c4>
                    bu[1] = (_bb >> 8)  & 0xFF;
 8103d2e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103d32:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8103d3c:	2bde      	cmp	r3, #222	; 0xde
 8103d3e:	d009      	beq.n	8103d54 <_ZN5Xicro9Spin_nodeEv+0x250c>
 8103d40:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103d44:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103d48:	681b      	ldr	r3, [r3, #0]
 8103d4a:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8103d4e:	2bdf      	cmp	r3, #223	; 0xdf
 8103d50:	f040 80dc 	bne.w	8103f0c <_ZN5Xicro9Spin_nodeEv+0x26c4>
 8103d54:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103d58:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103d5c:	681b      	ldr	r3, [r3, #0]
 8103d5e:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
 8103d62:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103d66:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103d6a:	681b      	ldr	r3, [r3, #0]
 8103d6c:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8103d70:	429a      	cmp	r2, r3
 8103d72:	f040 80cb 	bne.w	8103f0c <_ZN5Xicro9Spin_nodeEv+0x26c4>
                    bu[2] = (_bb >> 16) & 0xFF;
                    bu[3] = (_bb >> 24) & 0xFF;
 8103d76:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103d7a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103d7e:	681b      	ldr	r3, [r3, #0]
 8103d80:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 8103d84:	b2d2      	uxtb	r2, r2
 8103d86:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103d8a:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8103d8e:	701a      	strb	r2, [r3, #0]
                    bu[4] = (_bb >> 32)  & 0xFF;
 8103d90:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103d94:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103d98:	681b      	ldr	r3, [r3, #0]
 8103d9a:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8103d9e:	f04f 0200 	mov.w	r2, #0
 8103da2:	f04f 0300 	mov.w	r3, #0
 8103da6:	0a02      	lsrs	r2, r0, #8
 8103da8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8103dac:	0a0b      	lsrs	r3, r1, #8
 8103dae:	b2d2      	uxtb	r2, r2
 8103db0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103db4:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8103db8:	705a      	strb	r2, [r3, #1]
                    bu[5] = (_bb >> 40)  & 0xFF;
 8103dba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103dbe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103dc2:	681b      	ldr	r3, [r3, #0]
 8103dc4:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8103dc8:	f04f 0200 	mov.w	r2, #0
 8103dcc:	f04f 0300 	mov.w	r3, #0
 8103dd0:	0c02      	lsrs	r2, r0, #16
 8103dd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8103dd6:	0c0b      	lsrs	r3, r1, #16
 8103dd8:	b2d2      	uxtb	r2, r2
 8103dda:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103dde:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8103de2:	709a      	strb	r2, [r3, #2]
                    bu[6] = (_bb >> 48) & 0xFF;
 8103de4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103de8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103dec:	681b      	ldr	r3, [r3, #0]
 8103dee:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8103df2:	f04f 0200 	mov.w	r2, #0
 8103df6:	f04f 0300 	mov.w	r3, #0
 8103dfa:	0e02      	lsrs	r2, r0, #24
 8103dfc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8103e00:	0e0b      	lsrs	r3, r1, #24
 8103e02:	b2d2      	uxtb	r2, r2
 8103e04:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103e08:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8103e0c:	70da      	strb	r2, [r3, #3]
                    bu[7] = (_bb >> 56) & 0xFF;
 8103e0e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103e12:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103e16:	681b      	ldr	r3, [r3, #0]
 8103e18:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8103e1c:	f04f 0200 	mov.w	r2, #0
 8103e20:	f04f 0300 	mov.w	r3, #0
 8103e24:	000a      	movs	r2, r1
 8103e26:	2300      	movs	r3, #0
 8103e28:	b2d2      	uxtb	r2, r2
 8103e2a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103e2e:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8103e32:	711a      	strb	r2, [r3, #4]
                    memcpy (_nonverify[_OnTopic][_Indexdata][_Ongrab], bu, 8);
 8103e34:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103e38:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103e3c:	681b      	ldr	r3, [r3, #0]
 8103e3e:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8103e42:	f04f 0200 	mov.w	r2, #0
 8103e46:	f04f 0300 	mov.w	r3, #0
 8103e4a:	0a0a      	lsrs	r2, r1, #8
 8103e4c:	2300      	movs	r3, #0
 8103e4e:	b2d2      	uxtb	r2, r2
 8103e50:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103e54:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8103e58:	715a      	strb	r2, [r3, #5]
                    _state=222;
 8103e5a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103e5e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103e62:	681b      	ldr	r3, [r3, #0]
 8103e64:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8103e68:	f04f 0200 	mov.w	r2, #0
 8103e6c:	f04f 0300 	mov.w	r3, #0
 8103e70:	0c0a      	lsrs	r2, r1, #16
 8103e72:	2300      	movs	r3, #0
 8103e74:	b2d2      	uxtb	r2, r2
 8103e76:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103e7a:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8103e7e:	719a      	strb	r2, [r3, #6]
                }
 8103e80:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103e84:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103e88:	681b      	ldr	r3, [r3, #0]
 8103e8a:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8103e8e:	f04f 0200 	mov.w	r2, #0
 8103e92:	f04f 0300 	mov.w	r3, #0
 8103e96:	0e0a      	lsrs	r2, r1, #24
 8103e98:	2300      	movs	r3, #0
 8103e9a:	b2d2      	uxtb	r2, r2
 8103e9c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103ea0:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8103ea4:	71da      	strb	r2, [r3, #7]

 8103ea6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103eaa:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103eae:	681b      	ldr	r3, [r3, #0]
 8103eb0:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8103eb4:	461c      	mov	r4, r3
 8103eb6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103eba:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103ebe:	681b      	ldr	r3, [r3, #0]
 8103ec0:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8103ec4:	4618      	mov	r0, r3
 8103ec6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103eca:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103ece:	681b      	ldr	r3, [r3, #0]
 8103ed0:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 8103ed4:	4619      	mov	r1, r3
 8103ed6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103eda:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103ede:	681a      	ldr	r2, [r3, #0]
 8103ee0:	0063      	lsls	r3, r4, #1
 8103ee2:	4403      	add	r3, r0
 8103ee4:	440b      	add	r3, r1
 8103ee6:	3352      	adds	r3, #82	; 0x52
 8103ee8:	009b      	lsls	r3, r3, #2
 8103eea:	4413      	add	r3, r2
 8103eec:	685a      	ldr	r2, [r3, #4]
 8103eee:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103ef2:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8103ef6:	cb03      	ldmia	r3!, {r0, r1}
 8103ef8:	6010      	str	r0, [r2, #0]
 8103efa:	6051      	str	r1, [r2, #4]
                if( _loop==_loopTo){
 8103efc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103f00:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103f04:	681b      	ldr	r3, [r3, #0]
 8103f06:	22de      	movs	r2, #222	; 0xde
 8103f08:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _bb= 0;
                    _loop=0;
                    _state=11;  // get more N data
 8103f0c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103f10:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103f14:	681b      	ldr	r3, [r3, #0]
 8103f16:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
 8103f1a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103f1e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103f22:	681b      	ldr	r3, [r3, #0]
 8103f24:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8103f28:	429a      	cmp	r2, r3
 8103f2a:	d12a      	bne.n	8103f82 <_ZN5Xicro9Spin_nodeEv+0x273a>
                    _Ongrab=_Ongrab+1;
 8103f2c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103f30:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103f34:	6819      	ldr	r1, [r3, #0]
 8103f36:	f04f 0200 	mov.w	r2, #0
 8103f3a:	f04f 0300 	mov.w	r3, #0
 8103f3e:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
                }
 8103f42:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103f46:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103f4a:	681b      	ldr	r3, [r3, #0]
 8103f4c:	2200      	movs	r2, #0
 8103f4e:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
                if(_Ongrab==_OngrabTo ){
 8103f52:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103f56:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103f5a:	681b      	ldr	r3, [r3, #0]
 8103f5c:	220b      	movs	r2, #11
 8103f5e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=222; // check main continue or stop
 8103f62:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103f66:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103f6a:	681b      	ldr	r3, [r3, #0]
 8103f6c:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 8103f70:	3301      	adds	r3, #1
 8103f72:	b2da      	uxtb	r2, r3
 8103f74:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103f78:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103f7c:	681b      	ldr	r3, [r3, #0]
 8103f7e:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                }

 8103f82:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103f86:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103f8a:	681b      	ldr	r3, [r3, #0]
 8103f8c:	f893 216d 	ldrb.w	r2, [r3, #365]	; 0x16d
 8103f90:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103f94:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103f98:	681b      	ldr	r3, [r3, #0]
 8103f9a:	f893 316e 	ldrb.w	r3, [r3, #366]	; 0x16e
 8103f9e:	429a      	cmp	r2, r3
 8103fa0:	f040 8650 	bne.w	8104c44 <_ZN5Xicro9Spin_nodeEv+0x33fc>
                break;
 8103fa4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103fa8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103fac:	681b      	ldr	r3, [r3, #0]
 8103fae:	22de      	movs	r2, #222	; 0xde
 8103fb0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            case 90:
                if(_datain[0]==126){
                    _state=111;  //checksum
 8103fb4:	f000 be46 	b.w	8104c44 <_ZN5Xicro9Spin_nodeEv+0x33fc>
                        
                }else{
 8103fb8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103fbc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103fc0:	681b      	ldr	r3, [r3, #0]
 8103fc2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8103fc6:	2b7e      	cmp	r3, #126	; 0x7e
 8103fc8:	d109      	bne.n	8103fde <_ZN5Xicro9Spin_nodeEv+0x2796>
                    _state=0;
 8103fca:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103fce:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103fd2:	681b      	ldr	r3, [r3, #0]
 8103fd4:	226f      	movs	r2, #111	; 0x6f
 8103fd6:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                }
            
                break;
            case 111:
                // _serial->write(_crcIn);
                if(_crcIn==_datain[0]){
 8103fda:	f000 be34 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                break;
 8103fde:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103fe2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103fe6:	681b      	ldr	r3, [r3, #0]
 8103fe8:	2200      	movs	r2, #0
 8103fea:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                if(_crcIn==_datain[0]){
 8103fee:	f000 be2a 	b.w	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    for (int i=0;i<_Totalvar[_OnTopic];i++){
                        for(int k=0;k<_Nofdata[_OnTopic][i];k++){
                            if(_TopicType[_OnTopic][i]== 8 || _TopicType[_OnTopic][i]== 9 ){
 8103ff2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8103ff6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8104000:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104004:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104008:	681b      	ldr	r3, [r3, #0]
 810400a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 810400e:	429a      	cmp	r2, r3
 8104010:	f040 84da 	bne.w	81049c8 <_ZN5Xicro9Spin_nodeEv+0x3180>
                                *(uint8_t*)_verify[_OnTopic][i][k]=*(uint8_t*)_nonverify[_OnTopic][i][k];
 8104014:	2300      	movs	r3, #0
 8104016:	f8c7 3afc 	str.w	r3, [r7, #2812]	; 0xafc
 810401a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810401e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104022:	681b      	ldr	r3, [r3, #0]
 8104024:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104028:	461a      	mov	r2, r3
 810402a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810402e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104032:	681b      	ldr	r3, [r3, #0]
 8104034:	4413      	add	r3, r2
 8104036:	f893 315f 	ldrb.w	r3, [r3, #351]	; 0x15f
 810403a:	461a      	mov	r2, r3
 810403c:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104040:	4293      	cmp	r3, r2
 8104042:	f280 84c1 	bge.w	81049c8 <_ZN5Xicro9Spin_nodeEv+0x3180>
                            }else if ( _TopicType[_OnTopic][i]== 88 || _TopicType[_OnTopic][i]== 89){
 8104046:	2300      	movs	r3, #0
 8104048:	f8c7 3af8 	str.w	r3, [r7, #2808]	; 0xaf8
 810404c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104050:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104054:	681b      	ldr	r3, [r3, #0]
 8104056:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 810405a:	4619      	mov	r1, r3
 810405c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104060:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104064:	681a      	ldr	r2, [r3, #0]
 8104066:	004b      	lsls	r3, r1, #1
 8104068:	441a      	add	r2, r3
 810406a:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 810406e:	4413      	add	r3, r2
 8104070:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8104074:	781b      	ldrb	r3, [r3, #0]
 8104076:	461a      	mov	r2, r3
 8104078:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 810407c:	4293      	cmp	r3, r2
 810407e:	f280 849c 	bge.w	81049ba <_ZN5Xicro9Spin_nodeEv+0x3172>
                                *(bool*)_verify[_OnTopic][i][k]=*(bool*)_nonverify[_OnTopic][i][k];
 8104082:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104086:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810408a:	681b      	ldr	r3, [r3, #0]
 810408c:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104090:	4619      	mov	r1, r3
 8104092:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104096:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810409a:	681a      	ldr	r2, [r3, #0]
 810409c:	004b      	lsls	r3, r1, #1
 810409e:	441a      	add	r2, r3
 81040a0:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81040a4:	4413      	add	r3, r2
 81040a6:	f203 135d 	addw	r3, r3, #349	; 0x15d
 81040aa:	781b      	ldrb	r3, [r3, #0]
 81040ac:	2b08      	cmp	r3, #8
 81040ae:	d016      	beq.n	81040de <_ZN5Xicro9Spin_nodeEv+0x2896>
 81040b0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81040b4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81040b8:	681b      	ldr	r3, [r3, #0]
 81040ba:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81040be:	4619      	mov	r1, r3
 81040c0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81040c4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81040c8:	681a      	ldr	r2, [r3, #0]
 81040ca:	004b      	lsls	r3, r1, #1
 81040cc:	441a      	add	r2, r3
 81040ce:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81040d2:	4413      	add	r3, r2
 81040d4:	f203 135d 	addw	r3, r3, #349	; 0x15d
 81040d8:	781b      	ldrb	r3, [r3, #0]
 81040da:	2b09      	cmp	r3, #9
 81040dc:	d133      	bne.n	8104146 <_ZN5Xicro9Spin_nodeEv+0x28fe>
                            }else if (_TopicType[_OnTopic][i]== 18 || _TopicType[_OnTopic][i]== 19){
 81040de:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81040e2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81040e6:	681b      	ldr	r3, [r3, #0]
 81040e8:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81040ec:	4619      	mov	r1, r3
 81040ee:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81040f2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81040f6:	681a      	ldr	r2, [r3, #0]
 81040f8:	0049      	lsls	r1, r1, #1
 81040fa:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 81040fe:	4419      	add	r1, r3
 8104100:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104104:	440b      	add	r3, r1
 8104106:	3352      	adds	r3, #82	; 0x52
 8104108:	009b      	lsls	r3, r3, #2
 810410a:	4413      	add	r3, r2
 810410c:	685a      	ldr	r2, [r3, #4]
 810410e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104112:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104116:	681b      	ldr	r3, [r3, #0]
 8104118:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 810411c:	4618      	mov	r0, r3
 810411e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104122:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104126:	6819      	ldr	r1, [r3, #0]
 8104128:	0040      	lsls	r0, r0, #1
 810412a:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 810412e:	4418      	add	r0, r3
 8104130:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104134:	4403      	add	r3, r0
 8104136:	3354      	adds	r3, #84	; 0x54
 8104138:	009b      	lsls	r3, r3, #2
 810413a:	440b      	add	r3, r1
 810413c:	685b      	ldr	r3, [r3, #4]
 810413e:	7812      	ldrb	r2, [r2, #0]
 8104140:	701a      	strb	r2, [r3, #0]
 8104142:	f000 bc33 	b.w	81049ac <_ZN5Xicro9Spin_nodeEv+0x3164>
                                *(int8_t*)_verify[_OnTopic][i][k]=*(int8_t*)_nonverify[_OnTopic][i][k];
 8104146:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810414a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810414e:	681b      	ldr	r3, [r3, #0]
 8104150:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104154:	4619      	mov	r1, r3
 8104156:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810415a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810415e:	681a      	ldr	r2, [r3, #0]
 8104160:	004b      	lsls	r3, r1, #1
 8104162:	441a      	add	r2, r3
 8104164:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104168:	4413      	add	r3, r2
 810416a:	f203 135d 	addw	r3, r3, #349	; 0x15d
 810416e:	781b      	ldrb	r3, [r3, #0]
 8104170:	2b58      	cmp	r3, #88	; 0x58
 8104172:	d016      	beq.n	81041a2 <_ZN5Xicro9Spin_nodeEv+0x295a>
 8104174:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104178:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810417c:	681b      	ldr	r3, [r3, #0]
 810417e:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104182:	4619      	mov	r1, r3
 8104184:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104188:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810418c:	681a      	ldr	r2, [r3, #0]
 810418e:	004b      	lsls	r3, r1, #1
 8104190:	441a      	add	r2, r3
 8104192:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104196:	4413      	add	r3, r2
 8104198:	f203 135d 	addw	r3, r3, #349	; 0x15d
 810419c:	781b      	ldrb	r3, [r3, #0]
 810419e:	2b59      	cmp	r3, #89	; 0x59
 81041a0:	d132      	bne.n	8104208 <_ZN5Xicro9Spin_nodeEv+0x29c0>
                            }else if (_TopicType[_OnTopic][i]== 16 || _TopicType[_OnTopic][i]== 17){
 81041a2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81041a6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81041aa:	681b      	ldr	r3, [r3, #0]
 81041ac:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81041b0:	4619      	mov	r1, r3
 81041b2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81041b6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81041ba:	681a      	ldr	r2, [r3, #0]
 81041bc:	0049      	lsls	r1, r1, #1
 81041be:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 81041c2:	4419      	add	r1, r3
 81041c4:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81041c8:	440b      	add	r3, r1
 81041ca:	3352      	adds	r3, #82	; 0x52
 81041cc:	009b      	lsls	r3, r3, #2
 81041ce:	4413      	add	r3, r2
 81041d0:	685a      	ldr	r2, [r3, #4]
 81041d2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81041d6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81041da:	681b      	ldr	r3, [r3, #0]
 81041dc:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81041e0:	4618      	mov	r0, r3
 81041e2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81041e6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81041ea:	6819      	ldr	r1, [r3, #0]
 81041ec:	0040      	lsls	r0, r0, #1
 81041ee:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 81041f2:	4418      	add	r0, r3
 81041f4:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81041f8:	4403      	add	r3, r0
 81041fa:	3354      	adds	r3, #84	; 0x54
 81041fc:	009b      	lsls	r3, r3, #2
 81041fe:	440b      	add	r3, r1
 8104200:	685b      	ldr	r3, [r3, #4]
 8104202:	7812      	ldrb	r2, [r2, #0]
 8104204:	701a      	strb	r2, [r3, #0]
 8104206:	e3d1      	b.n	81049ac <_ZN5Xicro9Spin_nodeEv+0x3164>
                                *(uint16_t*)_verify[_OnTopic][i][k]=*(uint16_t*)_nonverify[_OnTopic][i][k];
 8104208:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810420c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104210:	681b      	ldr	r3, [r3, #0]
 8104212:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104216:	4619      	mov	r1, r3
 8104218:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810421c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104220:	681a      	ldr	r2, [r3, #0]
 8104222:	004b      	lsls	r3, r1, #1
 8104224:	441a      	add	r2, r3
 8104226:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 810422a:	4413      	add	r3, r2
 810422c:	f203 135d 	addw	r3, r3, #349	; 0x15d
 8104230:	781b      	ldrb	r3, [r3, #0]
 8104232:	2b12      	cmp	r3, #18
 8104234:	d016      	beq.n	8104264 <_ZN5Xicro9Spin_nodeEv+0x2a1c>
 8104236:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810423a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810423e:	681b      	ldr	r3, [r3, #0]
 8104240:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104244:	4619      	mov	r1, r3
 8104246:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810424a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810424e:	681a      	ldr	r2, [r3, #0]
 8104250:	004b      	lsls	r3, r1, #1
 8104252:	441a      	add	r2, r3
 8104254:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104258:	4413      	add	r3, r2
 810425a:	f203 135d 	addw	r3, r3, #349	; 0x15d
 810425e:	781b      	ldrb	r3, [r3, #0]
 8104260:	2b13      	cmp	r3, #19
 8104262:	d133      	bne.n	81042cc <_ZN5Xicro9Spin_nodeEv+0x2a84>
                            }else if (_TopicType[_OnTopic][i]== 116 || _TopicType[_OnTopic][i]== 117){
 8104264:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104268:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810426c:	681b      	ldr	r3, [r3, #0]
 810426e:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104272:	4619      	mov	r1, r3
 8104274:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104278:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810427c:	681a      	ldr	r2, [r3, #0]
 810427e:	0049      	lsls	r1, r1, #1
 8104280:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8104284:	4419      	add	r1, r3
 8104286:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 810428a:	440b      	add	r3, r1
 810428c:	3352      	adds	r3, #82	; 0x52
 810428e:	009b      	lsls	r3, r3, #2
 8104290:	4413      	add	r3, r2
 8104292:	685a      	ldr	r2, [r3, #4]
 8104294:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104298:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810429c:	681b      	ldr	r3, [r3, #0]
 810429e:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81042a2:	4618      	mov	r0, r3
 81042a4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81042a8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81042ac:	6819      	ldr	r1, [r3, #0]
 81042ae:	0040      	lsls	r0, r0, #1
 81042b0:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 81042b4:	4418      	add	r0, r3
 81042b6:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81042ba:	4403      	add	r3, r0
 81042bc:	3354      	adds	r3, #84	; 0x54
 81042be:	009b      	lsls	r3, r3, #2
 81042c0:	440b      	add	r3, r1
 81042c2:	685b      	ldr	r3, [r3, #4]
 81042c4:	f992 2000 	ldrsb.w	r2, [r2]
 81042c8:	701a      	strb	r2, [r3, #0]
 81042ca:	e36f      	b.n	81049ac <_ZN5Xicro9Spin_nodeEv+0x3164>
                                *(int16_t*)_verify[_OnTopic][i][k]=*(int16_t*)_nonverify[_OnTopic][i][k];
 81042cc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81042d0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81042d4:	681b      	ldr	r3, [r3, #0]
 81042d6:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81042da:	4619      	mov	r1, r3
 81042dc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81042e0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81042e4:	681a      	ldr	r2, [r3, #0]
 81042e6:	004b      	lsls	r3, r1, #1
 81042e8:	441a      	add	r2, r3
 81042ea:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81042ee:	4413      	add	r3, r2
 81042f0:	f203 135d 	addw	r3, r3, #349	; 0x15d
 81042f4:	781b      	ldrb	r3, [r3, #0]
 81042f6:	2b10      	cmp	r3, #16
 81042f8:	d016      	beq.n	8104328 <_ZN5Xicro9Spin_nodeEv+0x2ae0>
 81042fa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81042fe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104302:	681b      	ldr	r3, [r3, #0]
 8104304:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104308:	4619      	mov	r1, r3
 810430a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810430e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104312:	681a      	ldr	r2, [r3, #0]
 8104314:	004b      	lsls	r3, r1, #1
 8104316:	441a      	add	r2, r3
 8104318:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 810431c:	4413      	add	r3, r2
 810431e:	f203 135d 	addw	r3, r3, #349	; 0x15d
 8104322:	781b      	ldrb	r3, [r3, #0]
 8104324:	2b11      	cmp	r3, #17
 8104326:	d132      	bne.n	810438e <_ZN5Xicro9Spin_nodeEv+0x2b46>
                            }else if (_TopicType[_OnTopic][i]== 32 || _TopicType[_OnTopic][i]== 33 ){
 8104328:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810432c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104330:	681b      	ldr	r3, [r3, #0]
 8104332:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104336:	4619      	mov	r1, r3
 8104338:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810433c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104340:	681a      	ldr	r2, [r3, #0]
 8104342:	0049      	lsls	r1, r1, #1
 8104344:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8104348:	4419      	add	r1, r3
 810434a:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 810434e:	440b      	add	r3, r1
 8104350:	3352      	adds	r3, #82	; 0x52
 8104352:	009b      	lsls	r3, r3, #2
 8104354:	4413      	add	r3, r2
 8104356:	685a      	ldr	r2, [r3, #4]
 8104358:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810435c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104360:	681b      	ldr	r3, [r3, #0]
 8104362:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104366:	4618      	mov	r0, r3
 8104368:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810436c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104370:	6819      	ldr	r1, [r3, #0]
 8104372:	0040      	lsls	r0, r0, #1
 8104374:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8104378:	4418      	add	r0, r3
 810437a:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 810437e:	4403      	add	r3, r0
 8104380:	3354      	adds	r3, #84	; 0x54
 8104382:	009b      	lsls	r3, r3, #2
 8104384:	440b      	add	r3, r1
 8104386:	685b      	ldr	r3, [r3, #4]
 8104388:	8812      	ldrh	r2, [r2, #0]
 810438a:	801a      	strh	r2, [r3, #0]
 810438c:	e30e      	b.n	81049ac <_ZN5Xicro9Spin_nodeEv+0x3164>
                                *(uint32_t*)_verify[_OnTopic][i][k]=*(uint32_t*)_nonverify[_OnTopic][i][k];
 810438e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104392:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104396:	681b      	ldr	r3, [r3, #0]
 8104398:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 810439c:	4619      	mov	r1, r3
 810439e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81043a2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81043a6:	681a      	ldr	r2, [r3, #0]
 81043a8:	004b      	lsls	r3, r1, #1
 81043aa:	441a      	add	r2, r3
 81043ac:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81043b0:	4413      	add	r3, r2
 81043b2:	f203 135d 	addw	r3, r3, #349	; 0x15d
 81043b6:	781b      	ldrb	r3, [r3, #0]
 81043b8:	2b74      	cmp	r3, #116	; 0x74
 81043ba:	d016      	beq.n	81043ea <_ZN5Xicro9Spin_nodeEv+0x2ba2>
 81043bc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81043c0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81043c4:	681b      	ldr	r3, [r3, #0]
 81043c6:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81043ca:	4619      	mov	r1, r3
 81043cc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81043d0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81043d4:	681a      	ldr	r2, [r3, #0]
 81043d6:	004b      	lsls	r3, r1, #1
 81043d8:	441a      	add	r2, r3
 81043da:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81043de:	4413      	add	r3, r2
 81043e0:	f203 135d 	addw	r3, r3, #349	; 0x15d
 81043e4:	781b      	ldrb	r3, [r3, #0]
 81043e6:	2b75      	cmp	r3, #117	; 0x75
 81043e8:	d133      	bne.n	8104452 <_ZN5Xicro9Spin_nodeEv+0x2c0a>
                            }else if (_TopicType[_OnTopic][i]== 132 || _TopicType[_OnTopic][i]== 133 ){
 81043ea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81043ee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81043f2:	681b      	ldr	r3, [r3, #0]
 81043f4:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81043f8:	4619      	mov	r1, r3
 81043fa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81043fe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104402:	681a      	ldr	r2, [r3, #0]
 8104404:	0049      	lsls	r1, r1, #1
 8104406:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 810440a:	4419      	add	r1, r3
 810440c:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104410:	440b      	add	r3, r1
 8104412:	3352      	adds	r3, #82	; 0x52
 8104414:	009b      	lsls	r3, r3, #2
 8104416:	4413      	add	r3, r2
 8104418:	685a      	ldr	r2, [r3, #4]
 810441a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810441e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104422:	681b      	ldr	r3, [r3, #0]
 8104424:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104428:	4618      	mov	r0, r3
 810442a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810442e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104432:	6819      	ldr	r1, [r3, #0]
 8104434:	0040      	lsls	r0, r0, #1
 8104436:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 810443a:	4418      	add	r0, r3
 810443c:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104440:	4403      	add	r3, r0
 8104442:	3354      	adds	r3, #84	; 0x54
 8104444:	009b      	lsls	r3, r3, #2
 8104446:	440b      	add	r3, r1
 8104448:	685b      	ldr	r3, [r3, #4]
 810444a:	f9b2 2000 	ldrsh.w	r2, [r2]
 810444e:	801a      	strh	r2, [r3, #0]
 8104450:	e2ac      	b.n	81049ac <_ZN5Xicro9Spin_nodeEv+0x3164>
                                *(int32_t*)_verify[_OnTopic][i][k]=*(int32_t*)_nonverify[_OnTopic][i][k];
 8104452:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104456:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810445a:	681b      	ldr	r3, [r3, #0]
 810445c:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104460:	4619      	mov	r1, r3
 8104462:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104466:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810446a:	681a      	ldr	r2, [r3, #0]
 810446c:	004b      	lsls	r3, r1, #1
 810446e:	441a      	add	r2, r3
 8104470:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104474:	4413      	add	r3, r2
 8104476:	f203 135d 	addw	r3, r3, #349	; 0x15d
 810447a:	781b      	ldrb	r3, [r3, #0]
 810447c:	2b20      	cmp	r3, #32
 810447e:	d016      	beq.n	81044ae <_ZN5Xicro9Spin_nodeEv+0x2c66>
 8104480:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104484:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104488:	681b      	ldr	r3, [r3, #0]
 810448a:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 810448e:	4619      	mov	r1, r3
 8104490:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104494:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104498:	681a      	ldr	r2, [r3, #0]
 810449a:	004b      	lsls	r3, r1, #1
 810449c:	441a      	add	r2, r3
 810449e:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81044a2:	4413      	add	r3, r2
 81044a4:	f203 135d 	addw	r3, r3, #349	; 0x15d
 81044a8:	781b      	ldrb	r3, [r3, #0]
 81044aa:	2b21      	cmp	r3, #33	; 0x21
 81044ac:	d132      	bne.n	8104514 <_ZN5Xicro9Spin_nodeEv+0x2ccc>
                            }else if (_TopicType[_OnTopic][i]== 64 || _TopicType[_OnTopic][i]== 65 ){
 81044ae:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81044b2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81044b6:	681b      	ldr	r3, [r3, #0]
 81044b8:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81044bc:	4619      	mov	r1, r3
 81044be:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81044c2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81044c6:	681a      	ldr	r2, [r3, #0]
 81044c8:	0049      	lsls	r1, r1, #1
 81044ca:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 81044ce:	4419      	add	r1, r3
 81044d0:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81044d4:	440b      	add	r3, r1
 81044d6:	3352      	adds	r3, #82	; 0x52
 81044d8:	009b      	lsls	r3, r3, #2
 81044da:	4413      	add	r3, r2
 81044dc:	685a      	ldr	r2, [r3, #4]
 81044de:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81044e2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81044e6:	681b      	ldr	r3, [r3, #0]
 81044e8:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81044ec:	4618      	mov	r0, r3
 81044ee:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81044f2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81044f6:	6819      	ldr	r1, [r3, #0]
 81044f8:	0040      	lsls	r0, r0, #1
 81044fa:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 81044fe:	4418      	add	r0, r3
 8104500:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104504:	4403      	add	r3, r0
 8104506:	3354      	adds	r3, #84	; 0x54
 8104508:	009b      	lsls	r3, r3, #2
 810450a:	440b      	add	r3, r1
 810450c:	685b      	ldr	r3, [r3, #4]
 810450e:	6812      	ldr	r2, [r2, #0]
 8104510:	601a      	str	r2, [r3, #0]
 8104512:	e24b      	b.n	81049ac <_ZN5Xicro9Spin_nodeEv+0x3164>
                                *(uint64_t*)_verify[_OnTopic][i][k]=*(uint64_t*)_nonverify[_OnTopic][i][k];
 8104514:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104518:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810451c:	681b      	ldr	r3, [r3, #0]
 810451e:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104522:	4619      	mov	r1, r3
 8104524:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104528:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810452c:	681a      	ldr	r2, [r3, #0]
 810452e:	004b      	lsls	r3, r1, #1
 8104530:	441a      	add	r2, r3
 8104532:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104536:	4413      	add	r3, r2
 8104538:	f203 135d 	addw	r3, r3, #349	; 0x15d
 810453c:	781b      	ldrb	r3, [r3, #0]
 810453e:	2b84      	cmp	r3, #132	; 0x84
 8104540:	d016      	beq.n	8104570 <_ZN5Xicro9Spin_nodeEv+0x2d28>
 8104542:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104546:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810454a:	681b      	ldr	r3, [r3, #0]
 810454c:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104550:	4619      	mov	r1, r3
 8104552:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104556:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810455a:	681a      	ldr	r2, [r3, #0]
 810455c:	004b      	lsls	r3, r1, #1
 810455e:	441a      	add	r2, r3
 8104560:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104564:	4413      	add	r3, r2
 8104566:	f203 135d 	addw	r3, r3, #349	; 0x15d
 810456a:	781b      	ldrb	r3, [r3, #0]
 810456c:	2b85      	cmp	r3, #133	; 0x85
 810456e:	d132      	bne.n	81045d6 <_ZN5Xicro9Spin_nodeEv+0x2d8e>
                            }else if (_TopicType[_OnTopic][i]== 164 || _TopicType[_OnTopic][i]== 165 ){
 8104570:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104574:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104578:	681b      	ldr	r3, [r3, #0]
 810457a:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 810457e:	4619      	mov	r1, r3
 8104580:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104584:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104588:	681a      	ldr	r2, [r3, #0]
 810458a:	0049      	lsls	r1, r1, #1
 810458c:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8104590:	4419      	add	r1, r3
 8104592:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104596:	440b      	add	r3, r1
 8104598:	3352      	adds	r3, #82	; 0x52
 810459a:	009b      	lsls	r3, r3, #2
 810459c:	4413      	add	r3, r2
 810459e:	685a      	ldr	r2, [r3, #4]
 81045a0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81045a4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81045a8:	681b      	ldr	r3, [r3, #0]
 81045aa:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81045ae:	4618      	mov	r0, r3
 81045b0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81045b4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81045b8:	6819      	ldr	r1, [r3, #0]
 81045ba:	0040      	lsls	r0, r0, #1
 81045bc:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 81045c0:	4418      	add	r0, r3
 81045c2:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81045c6:	4403      	add	r3, r0
 81045c8:	3354      	adds	r3, #84	; 0x54
 81045ca:	009b      	lsls	r3, r3, #2
 81045cc:	440b      	add	r3, r1
 81045ce:	685b      	ldr	r3, [r3, #4]
 81045d0:	6812      	ldr	r2, [r2, #0]
 81045d2:	601a      	str	r2, [r3, #0]
 81045d4:	e1ea      	b.n	81049ac <_ZN5Xicro9Spin_nodeEv+0x3164>
                                *(int64_t*)_verify[_OnTopic][i][k]=*(int64_t*)_nonverify[_OnTopic][i][k];
 81045d6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81045da:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81045de:	681b      	ldr	r3, [r3, #0]
 81045e0:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81045e4:	4619      	mov	r1, r3
 81045e6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81045ea:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81045ee:	681a      	ldr	r2, [r3, #0]
 81045f0:	004b      	lsls	r3, r1, #1
 81045f2:	441a      	add	r2, r3
 81045f4:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81045f8:	4413      	add	r3, r2
 81045fa:	f203 135d 	addw	r3, r3, #349	; 0x15d
 81045fe:	781b      	ldrb	r3, [r3, #0]
 8104600:	2b40      	cmp	r3, #64	; 0x40
 8104602:	d016      	beq.n	8104632 <_ZN5Xicro9Spin_nodeEv+0x2dea>
 8104604:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104608:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810460c:	681b      	ldr	r3, [r3, #0]
 810460e:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104612:	4619      	mov	r1, r3
 8104614:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104618:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810461c:	681a      	ldr	r2, [r3, #0]
 810461e:	004b      	lsls	r3, r1, #1
 8104620:	441a      	add	r2, r3
 8104622:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104626:	4413      	add	r3, r2
 8104628:	f203 135d 	addw	r3, r3, #349	; 0x15d
 810462c:	781b      	ldrb	r3, [r3, #0]
 810462e:	2b41      	cmp	r3, #65	; 0x41
 8104630:	d134      	bne.n	810469c <_ZN5Xicro9Spin_nodeEv+0x2e54>
                            }else if (_TopicType[_OnTopic][i]== 111 || _TopicType[_OnTopic][i]== 112){
 8104632:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104636:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810463a:	681b      	ldr	r3, [r3, #0]
 810463c:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104640:	4619      	mov	r1, r3
 8104642:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104646:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810464a:	681a      	ldr	r2, [r3, #0]
 810464c:	0049      	lsls	r1, r1, #1
 810464e:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8104652:	4419      	add	r1, r3
 8104654:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104658:	440b      	add	r3, r1
 810465a:	3352      	adds	r3, #82	; 0x52
 810465c:	009b      	lsls	r3, r3, #2
 810465e:	4413      	add	r3, r2
 8104660:	685a      	ldr	r2, [r3, #4]
 8104662:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104666:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810466a:	681b      	ldr	r3, [r3, #0]
 810466c:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104670:	4618      	mov	r0, r3
 8104672:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104676:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810467a:	6819      	ldr	r1, [r3, #0]
 810467c:	0040      	lsls	r0, r0, #1
 810467e:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8104682:	4418      	add	r0, r3
 8104684:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104688:	4403      	add	r3, r0
 810468a:	3354      	adds	r3, #84	; 0x54
 810468c:	009b      	lsls	r3, r3, #2
 810468e:	440b      	add	r3, r1
 8104690:	6859      	ldr	r1, [r3, #4]
 8104692:	e9d2 2300 	ldrd	r2, r3, [r2]
 8104696:	e9c1 2300 	strd	r2, r3, [r1]
 810469a:	e187      	b.n	81049ac <_ZN5Xicro9Spin_nodeEv+0x3164>
                                *(float*)_verify[_OnTopic][i][k]=*(float*)_nonverify[_OnTopic][i][k];
 810469c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81046a0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81046a4:	681b      	ldr	r3, [r3, #0]
 81046a6:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81046aa:	4619      	mov	r1, r3
 81046ac:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81046b0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81046b4:	681a      	ldr	r2, [r3, #0]
 81046b6:	004b      	lsls	r3, r1, #1
 81046b8:	441a      	add	r2, r3
 81046ba:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81046be:	4413      	add	r3, r2
 81046c0:	f203 135d 	addw	r3, r3, #349	; 0x15d
 81046c4:	781b      	ldrb	r3, [r3, #0]
 81046c6:	2ba4      	cmp	r3, #164	; 0xa4
 81046c8:	d016      	beq.n	81046f8 <_ZN5Xicro9Spin_nodeEv+0x2eb0>
 81046ca:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81046ce:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81046d2:	681b      	ldr	r3, [r3, #0]
 81046d4:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81046d8:	4619      	mov	r1, r3
 81046da:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81046de:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81046e2:	681a      	ldr	r2, [r3, #0]
 81046e4:	004b      	lsls	r3, r1, #1
 81046e6:	441a      	add	r2, r3
 81046e8:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81046ec:	4413      	add	r3, r2
 81046ee:	f203 135d 	addw	r3, r3, #349	; 0x15d
 81046f2:	781b      	ldrb	r3, [r3, #0]
 81046f4:	2ba5      	cmp	r3, #165	; 0xa5
 81046f6:	d134      	bne.n	8104762 <_ZN5Xicro9Spin_nodeEv+0x2f1a>
                            }else if (_TopicType[_OnTopic][i]== 242 || _TopicType[_OnTopic][i]== 243){
 81046f8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81046fc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104700:	681b      	ldr	r3, [r3, #0]
 8104702:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104706:	4619      	mov	r1, r3
 8104708:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810470c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104710:	681a      	ldr	r2, [r3, #0]
 8104712:	0049      	lsls	r1, r1, #1
 8104714:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8104718:	4419      	add	r1, r3
 810471a:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 810471e:	440b      	add	r3, r1
 8104720:	3352      	adds	r3, #82	; 0x52
 8104722:	009b      	lsls	r3, r3, #2
 8104724:	4413      	add	r3, r2
 8104726:	685a      	ldr	r2, [r3, #4]
 8104728:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810472c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104736:	4618      	mov	r0, r3
 8104738:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810473c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104740:	6819      	ldr	r1, [r3, #0]
 8104742:	0040      	lsls	r0, r0, #1
 8104744:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8104748:	4418      	add	r0, r3
 810474a:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 810474e:	4403      	add	r3, r0
 8104750:	3354      	adds	r3, #84	; 0x54
 8104752:	009b      	lsls	r3, r3, #2
 8104754:	440b      	add	r3, r1
 8104756:	6859      	ldr	r1, [r3, #4]
 8104758:	e9d2 2300 	ldrd	r2, r3, [r2]
 810475c:	e9c1 2300 	strd	r2, r3, [r1]
 8104760:	e124      	b.n	81049ac <_ZN5Xicro9Spin_nodeEv+0x3164>
                                *(std::string*)_verify[_OnTopic][i][k]=*(std::string*)_nonverify[_OnTopic][i][k];
 8104762:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104766:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810476a:	681b      	ldr	r3, [r3, #0]
 810476c:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104770:	4619      	mov	r1, r3
 8104772:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104776:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810477a:	681a      	ldr	r2, [r3, #0]
 810477c:	004b      	lsls	r3, r1, #1
 810477e:	441a      	add	r2, r3
 8104780:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104784:	4413      	add	r3, r2
 8104786:	f203 135d 	addw	r3, r3, #349	; 0x15d
 810478a:	781b      	ldrb	r3, [r3, #0]
 810478c:	2b6f      	cmp	r3, #111	; 0x6f
 810478e:	d016      	beq.n	81047be <_ZN5Xicro9Spin_nodeEv+0x2f76>
 8104790:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104794:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104798:	681b      	ldr	r3, [r3, #0]
 810479a:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 810479e:	4619      	mov	r1, r3
 81047a0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81047a4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81047a8:	681a      	ldr	r2, [r3, #0]
 81047aa:	004b      	lsls	r3, r1, #1
 81047ac:	441a      	add	r2, r3
 81047ae:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81047b2:	4413      	add	r3, r2
 81047b4:	f203 135d 	addw	r3, r3, #349	; 0x15d
 81047b8:	781b      	ldrb	r3, [r3, #0]
 81047ba:	2b70      	cmp	r3, #112	; 0x70
 81047bc:	d132      	bne.n	8104824 <_ZN5Xicro9Spin_nodeEv+0x2fdc>
                            }else if (_TopicType[_OnTopic][i]== 222 || _TopicType[_OnTopic][i]== 223){
 81047be:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81047c2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81047c6:	681b      	ldr	r3, [r3, #0]
 81047c8:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81047cc:	4619      	mov	r1, r3
 81047ce:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81047d2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81047d6:	681a      	ldr	r2, [r3, #0]
 81047d8:	0049      	lsls	r1, r1, #1
 81047da:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 81047de:	4419      	add	r1, r3
 81047e0:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81047e4:	440b      	add	r3, r1
 81047e6:	3352      	adds	r3, #82	; 0x52
 81047e8:	009b      	lsls	r3, r3, #2
 81047ea:	4413      	add	r3, r2
 81047ec:	685a      	ldr	r2, [r3, #4]
 81047ee:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81047f2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81047f6:	681b      	ldr	r3, [r3, #0]
 81047f8:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81047fc:	4618      	mov	r0, r3
 81047fe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104802:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104806:	6819      	ldr	r1, [r3, #0]
 8104808:	0040      	lsls	r0, r0, #1
 810480a:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 810480e:	4418      	add	r0, r3
 8104810:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104814:	4403      	add	r3, r0
 8104816:	3354      	adds	r3, #84	; 0x54
 8104818:	009b      	lsls	r3, r3, #2
 810481a:	440b      	add	r3, r1
 810481c:	685b      	ldr	r3, [r3, #4]
 810481e:	6812      	ldr	r2, [r2, #0]
 8104820:	601a      	str	r2, [r3, #0]
 8104822:	e0c3      	b.n	81049ac <_ZN5Xicro9Spin_nodeEv+0x3164>
                                *(double*)_verify[_OnTopic][i][k]=*(double*)_nonverify[_OnTopic][i][k];
 8104824:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104828:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810482c:	681b      	ldr	r3, [r3, #0]
 810482e:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104832:	4619      	mov	r1, r3
 8104834:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104838:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810483c:	681a      	ldr	r2, [r3, #0]
 810483e:	004b      	lsls	r3, r1, #1
 8104840:	441a      	add	r2, r3
 8104842:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104846:	4413      	add	r3, r2
 8104848:	f203 135d 	addw	r3, r3, #349	; 0x15d
 810484c:	781b      	ldrb	r3, [r3, #0]
 810484e:	2bf2      	cmp	r3, #242	; 0xf2
 8104850:	d016      	beq.n	8104880 <_ZN5Xicro9Spin_nodeEv+0x3038>
 8104852:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104856:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810485a:	681b      	ldr	r3, [r3, #0]
 810485c:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104860:	4619      	mov	r1, r3
 8104862:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104866:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810486a:	681a      	ldr	r2, [r3, #0]
 810486c:	004b      	lsls	r3, r1, #1
 810486e:	441a      	add	r2, r3
 8104870:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104874:	4413      	add	r3, r2
 8104876:	f203 135d 	addw	r3, r3, #349	; 0x15d
 810487a:	781b      	ldrb	r3, [r3, #0]
 810487c:	2bf3      	cmp	r3, #243	; 0xf3
 810487e:	d133      	bne.n	81048e8 <_ZN5Xicro9Spin_nodeEv+0x30a0>
                            }
 8104880:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104884:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104888:	681b      	ldr	r3, [r3, #0]
 810488a:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 810488e:	4619      	mov	r1, r3
 8104890:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104894:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104898:	681a      	ldr	r2, [r3, #0]
 810489a:	0049      	lsls	r1, r1, #1
 810489c:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 81048a0:	4419      	add	r1, r3
 81048a2:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81048a6:	440b      	add	r3, r1
 81048a8:	3354      	adds	r3, #84	; 0x54
 81048aa:	009b      	lsls	r3, r3, #2
 81048ac:	4413      	add	r3, r2
 81048ae:	6858      	ldr	r0, [r3, #4]
 81048b0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81048b4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81048b8:	681b      	ldr	r3, [r3, #0]
 81048ba:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81048be:	4619      	mov	r1, r3
 81048c0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81048c4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81048c8:	681a      	ldr	r2, [r3, #0]
 81048ca:	0049      	lsls	r1, r1, #1
 81048cc:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 81048d0:	4419      	add	r1, r3
 81048d2:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81048d6:	440b      	add	r3, r1
 81048d8:	3352      	adds	r3, #82	; 0x52
 81048da:	009b      	lsls	r3, r3, #2
 81048dc:	4413      	add	r3, r2
 81048de:	685b      	ldr	r3, [r3, #4]
 81048e0:	4619      	mov	r1, r3
 81048e2:	f006 fcce 	bl	810b282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 81048e6:	e061      	b.n	81049ac <_ZN5Xicro9Spin_nodeEv+0x3164>

 81048e8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81048ec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81048f0:	681b      	ldr	r3, [r3, #0]
 81048f2:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 81048f6:	4619      	mov	r1, r3
 81048f8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81048fc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104900:	681a      	ldr	r2, [r3, #0]
 8104902:	004b      	lsls	r3, r1, #1
 8104904:	441a      	add	r2, r3
 8104906:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 810490a:	4413      	add	r3, r2
 810490c:	f203 135d 	addw	r3, r3, #349	; 0x15d
 8104910:	781b      	ldrb	r3, [r3, #0]
 8104912:	2bde      	cmp	r3, #222	; 0xde
 8104914:	d016      	beq.n	8104944 <_ZN5Xicro9Spin_nodeEv+0x30fc>
 8104916:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810491a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810491e:	681b      	ldr	r3, [r3, #0]
 8104920:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104924:	4619      	mov	r1, r3
 8104926:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 810492a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810492e:	681a      	ldr	r2, [r3, #0]
 8104930:	004b      	lsls	r3, r1, #1
 8104932:	441a      	add	r2, r3
 8104934:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8104938:	4413      	add	r3, r2
 810493a:	f203 135d 	addw	r3, r3, #349	; 0x15d
 810493e:	781b      	ldrb	r3, [r3, #0]
 8104940:	2bdf      	cmp	r3, #223	; 0xdf
 8104942:	d133      	bne.n	81049ac <_ZN5Xicro9Spin_nodeEv+0x3164>

 8104944:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104948:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810494c:	681b      	ldr	r3, [r3, #0]
 810494e:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104952:	4619      	mov	r1, r3
 8104954:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104958:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810495c:	681a      	ldr	r2, [r3, #0]
 810495e:	0049      	lsls	r1, r1, #1
 8104960:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8104964:	4419      	add	r1, r3
 8104966:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 810496a:	440b      	add	r3, r1
 810496c:	3352      	adds	r3, #82	; 0x52
 810496e:	009b      	lsls	r3, r3, #2
 8104970:	4413      	add	r3, r2
 8104972:	685a      	ldr	r2, [r3, #4]
 8104974:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104978:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810497c:	681b      	ldr	r3, [r3, #0]
 810497e:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104982:	4618      	mov	r0, r3
 8104984:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104988:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 810498c:	6819      	ldr	r1, [r3, #0]
 810498e:	0040      	lsls	r0, r0, #1
 8104990:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8104994:	4418      	add	r0, r3
 8104996:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 810499a:	4403      	add	r3, r0
 810499c:	3354      	adds	r3, #84	; 0x54
 810499e:	009b      	lsls	r3, r3, #2
 81049a0:	440b      	add	r3, r1
 81049a2:	6859      	ldr	r1, [r3, #4]
 81049a4:	e9d2 2300 	ldrd	r2, r3, [r2]
 81049a8:	e9c1 2300 	strd	r2, r3, [r1]
                            }else if ( _TopicType[_OnTopic][i]== 88 || _TopicType[_OnTopic][i]== 89){
 81049ac:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 81049b0:	3301      	adds	r3, #1
 81049b2:	f8c7 3af8 	str.w	r3, [r7, #2808]	; 0xaf8
 81049b6:	f7ff bb49 	b.w	810404c <_ZN5Xicro9Spin_nodeEv+0x2804>
                                *(uint8_t*)_verify[_OnTopic][i][k]=*(uint8_t*)_nonverify[_OnTopic][i][k];
 81049ba:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 81049be:	3301      	adds	r3, #1
 81049c0:	f8c7 3afc 	str.w	r3, [r7, #2812]	; 0xafc
 81049c4:	f7ff bb29 	b.w	810401a <_ZN5Xicro9Spin_nodeEv+0x27d2>
                    }
                }
                _state=0;
                break;
            case 99: //string

 81049c8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81049cc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81049d0:	681b      	ldr	r3, [r3, #0]
 81049d2:	2200      	movs	r2, #0
 81049d4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                if(_datain[0]==42){
 81049d8:	e135      	b.n	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _state=100;
                }else{
                    _bufff=_bufff+char(_datain[0]);
 81049da:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81049de:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 81049e8:	2b2a      	cmp	r3, #42	; 0x2a
 81049ea:	d108      	bne.n	81049fe <_ZN5Xicro9Spin_nodeEv+0x31b6>
                    _state=99;
 81049ec:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 81049f0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 81049f4:	681b      	ldr	r3, [r3, #0]
 81049f6:	2264      	movs	r2, #100	; 0x64
 81049f8:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                }
                break;
            case 100:
                if(_datain[0]==126){
                    *(std::string*)_nonverify[_OnTopic][_Indexdata][_Ongrab] =   (std::string)_bufff;
 81049fc:	e123      	b.n	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                break;
 81049fe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104a02:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104a06:	681b      	ldr	r3, [r3, #0]
 8104a08:	f503 7498 	add.w	r4, r3, #304	; 0x130
 8104a0c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104a10:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104a14:	681b      	ldr	r3, [r3, #0]
 8104a16:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8104a1a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104a1e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104a22:	681b      	ldr	r3, [r3, #0]
 8104a24:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8104a28:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8104a2c:	4618      	mov	r0, r3
 8104a2e:	f000 f947 	bl	8104cc0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 8104a32:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8104a36:	4619      	mov	r1, r3
 8104a38:	4620      	mov	r0, r4
 8104a3a:	f006 fc28 	bl	810b28e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8104a3e:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8104a42:	4618      	mov	r0, r3
 8104a44:	f006 fc17 	bl	810b276 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            case 100:
 8104a48:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104a4c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104a50:	681b      	ldr	r3, [r3, #0]
 8104a52:	2263      	movs	r2, #99	; 0x63
 8104a54:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    *(std::string*)_nonverify[_OnTopic][_Indexdata][_Ongrab] =   (std::string)_bufff;
 8104a58:	e0f5      	b.n	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _Ongrab=_Ongrab+1;
                    if(_Ongrab==_OngrabTo){
 8104a5a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104a5e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104a62:	681b      	ldr	r3, [r3, #0]
 8104a64:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8104a68:	2b7e      	cmp	r3, #126	; 0x7e
 8104a6a:	d16d      	bne.n	8104b48 <_ZN5Xicro9Spin_nodeEv+0x3300>
                        _state=222; // check main continue or stop
 8104a6c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104a70:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104a74:	681b      	ldr	r3, [r3, #0]
 8104a76:	f993 3129 	ldrsb.w	r3, [r3, #297]	; 0x129
 8104a7a:	461c      	mov	r4, r3
 8104a7c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104a80:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104a84:	681b      	ldr	r3, [r3, #0]
 8104a86:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8104a8a:	4618      	mov	r0, r3
 8104a8c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104a90:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104a94:	681b      	ldr	r3, [r3, #0]
 8104a96:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 8104a9a:	4619      	mov	r1, r3
 8104a9c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104aa0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104aa4:	681a      	ldr	r2, [r3, #0]
 8104aa6:	0063      	lsls	r3, r4, #1
 8104aa8:	4403      	add	r3, r0
 8104aaa:	440b      	add	r3, r1
 8104aac:	3352      	adds	r3, #82	; 0x52
 8104aae:	009b      	lsls	r3, r3, #2
 8104ab0:	4413      	add	r3, r2
 8104ab2:	685c      	ldr	r4, [r3, #4]
 8104ab4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104ab8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104abc:	681b      	ldr	r3, [r3, #0]
 8104abe:	f503 7298 	add.w	r2, r3, #304	; 0x130
 8104ac2:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8104ac6:	4611      	mov	r1, r2
 8104ac8:	4618      	mov	r0, r3
 8104aca:	f006 fd09 	bl	810b4e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8104ace:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8104ad2:	4619      	mov	r1, r3
 8104ad4:	4620      	mov	r0, r4
 8104ad6:	f006 fbda 	bl	810b28e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8104ada:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8104ade:	4618      	mov	r0, r3
 8104ae0:	f006 fbc9 	bl	810b276 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                    }else{
 8104ae4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104ae8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104aec:	681b      	ldr	r3, [r3, #0]
 8104aee:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 8104af2:	3301      	adds	r3, #1
 8104af4:	b2da      	uxtb	r2, r3
 8104af6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104afa:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104afe:	681b      	ldr	r3, [r3, #0]
 8104b00:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
                        _state=99;  // get more string
 8104b04:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104b08:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104b0c:	681b      	ldr	r3, [r3, #0]
 8104b0e:	f893 216d 	ldrb.w	r2, [r3, #365]	; 0x16d
 8104b12:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104b16:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104b1a:	681b      	ldr	r3, [r3, #0]
 8104b1c:	f893 316e 	ldrb.w	r3, [r3, #366]	; 0x16e
 8104b20:	429a      	cmp	r2, r3
 8104b22:	d108      	bne.n	8104b36 <_ZN5Xicro9Spin_nodeEv+0x32ee>
                    }
 8104b24:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104b28:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104b2c:	681b      	ldr	r3, [r3, #0]
 8104b2e:	22de      	movs	r2, #222	; 0xde
 8104b30:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                }

                break;

            case 222: // main check continue or stop
                if(_datain[0]==42){
 8104b34:	e087      	b.n	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _state=0;
 8104b36:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104b3a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104b3e:	681b      	ldr	r3, [r3, #0]
 8104b40:	2263      	movs	r2, #99	; 0x63
 8104b42:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                if(_datain[0]==42){
 8104b46:	e07e      	b.n	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                break;
 8104b48:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104b4c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104b50:	681b      	ldr	r3, [r3, #0]
 8104b52:	2200      	movs	r2, #0
 8104b54:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                if(_datain[0]==42){
 8104b58:	e075      	b.n	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _state=223; // to ckeck confirm continue
                }else if(_datain[0]==126){
                    _state=225; // to ckeck confirm stop
 8104b5a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104b5e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104b62:	681b      	ldr	r3, [r3, #0]
 8104b64:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8104b68:	2b2a      	cmp	r3, #42	; 0x2a
 8104b6a:	d108      	bne.n	8104b7e <_ZN5Xicro9Spin_nodeEv+0x3336>
                }else{
 8104b6c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104b70:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104b74:	681b      	ldr	r3, [r3, #0]
 8104b76:	22df      	movs	r2, #223	; 0xdf
 8104b78:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=0;
                }
                break;
            case 223:
                if(_datain[0]==42){ // continue done
                    _state=6; // check data type 
 8104b7c:	e063      	b.n	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _state=0;
 8104b7e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104b82:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104b86:	681b      	ldr	r3, [r3, #0]
 8104b88:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8104b8c:	2b7e      	cmp	r3, #126	; 0x7e
 8104b8e:	d108      	bne.n	8104ba2 <_ZN5Xicro9Spin_nodeEv+0x335a>
                }
 8104b90:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104b94:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104b98:	681b      	ldr	r3, [r3, #0]
 8104b9a:	22e1      	movs	r2, #225	; 0xe1
 8104b9c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=6; // check data type 
 8104ba0:	e051      	b.n	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
            case 223:
 8104ba2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104ba6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104baa:	681b      	ldr	r3, [r3, #0]
 8104bac:	2200      	movs	r2, #0
 8104bae:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                    _state=6; // check data type 
 8104bb2:	e048      	b.n	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _Onindex=_Onindex+1;
                }else{
 8104bb4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104bb8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104bbc:	681b      	ldr	r3, [r3, #0]
 8104bbe:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8104bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8104bc4:	d118      	bne.n	8104bf8 <_ZN5Xicro9Spin_nodeEv+0x33b0>
                    _state=0;
 8104bc6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104bca:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104bce:	681b      	ldr	r3, [r3, #0]
 8104bd0:	2206      	movs	r2, #6
 8104bd2:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                }
 8104bd6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104bda:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104bde:	681b      	ldr	r3, [r3, #0]
 8104be0:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8104be4:	3301      	adds	r3, #1
 8104be6:	b2da      	uxtb	r2, r3
 8104be8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104bec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104bf0:	681b      	ldr	r3, [r3, #0]
 8104bf2:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
                break;

            case 225:
                 if(_datain[0]==126){ // stop done
 8104bf6:	e026      	b.n	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>

 8104bf8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104bfc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104c00:	681b      	ldr	r3, [r3, #0]
 8104c02:	2200      	movs	r2, #0
 8104c04:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                 if(_datain[0]==126){ // stop done
 8104c08:	e01d      	b.n	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _state=111; //crc check to Verify data
                }else{
                    _state=0;
 8104c0a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104c0e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104c12:	681b      	ldr	r3, [r3, #0]
 8104c14:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8104c18:	2b7e      	cmp	r3, #126	; 0x7e
 8104c1a:	d108      	bne.n	8104c2e <_ZN5Xicro9Spin_nodeEv+0x33e6>
                }
 8104c1c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104c20:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104c24:	681b      	ldr	r3, [r3, #0]
 8104c26:	226f      	movs	r2, #111	; 0x6f
 8104c28:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                break;
        }
        _crcIn=_getcrc(_crcIn,&_datain[0],1); 
        _Posdatapre=(_Posdatapre+1)%64;
 8104c2c:	e00b      	b.n	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
        }
 8104c2e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104c32:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104c36:	681b      	ldr	r3, [r3, #0]
 8104c38:	2200      	movs	r2, #0
 8104c3a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
        _Posdatapre=(_Posdatapre+1)%64;
 8104c3e:	e002      	b.n	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    if(_datain[0]== 8  ||_datain[0]== 18 ){
 8104c40:	bf00      	nop
 8104c42:	e000      	b.n	8104c46 <_ZN5Xicro9Spin_nodeEv+0x33fe>
                    _state=111;  //checksum
 8104c44:	bf00      	nop
        // uint8_t tyu[3]={199,199,202};
        // tyu[1]=_state;
 8104c46:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104c4a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104c4e:	681b      	ldr	r3, [r3, #0]
 8104c50:	f893 112c 	ldrb.w	r1, [r3, #300]	; 0x12c
 8104c54:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104c58:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104c5c:	681b      	ldr	r3, [r3, #0]
 8104c5e:	f503 728d 	add.w	r2, r3, #282	; 0x11a
 8104c62:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104c66:	f6a3 3004 	subw	r0, r3, #2820	; 0xb04
 8104c6a:	2301      	movs	r3, #1
 8104c6c:	6800      	ldr	r0, [r0, #0]
 8104c6e:	f7fc fb3f 	bl	81012f0 <_ZN5Xicro7_getcrcEhPht>
 8104c72:	4603      	mov	r3, r0
 8104c74:	461a      	mov	r2, r3
 8104c76:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104c7a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104c7e:	681b      	ldr	r3, [r3, #0]
 8104c80:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
        // _serial->write(_crcIn);
 8104c84:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104c88:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104c8c:	681b      	ldr	r3, [r3, #0]
 8104c8e:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 8104c92:	3301      	adds	r3, #1
 8104c94:	425a      	negs	r2, r3
 8104c96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104c9a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8104c9e:	bf58      	it	pl
 8104ca0:	4253      	negpl	r3, r2
 8104ca2:	b2da      	uxtb	r2, r3
 8104ca4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8104ca8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8104cac:	681b      	ldr	r3, [r3, #0]
 8104cae:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1

    }
 8104cb2:	bf00      	nop
 8104cb4:	f607 370c 	addw	r7, r7, #2828	; 0xb0c
 8104cb8:	46bd      	mov	sp, r7
 8104cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8104cbe:	bf00      	nop

08104cc0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @param __rhs  Last string.
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8104cc0:	b580      	push	{r7, lr}
 8104cc2:	b084      	sub	sp, #16
 8104cc4:	af00      	add	r7, sp, #0
 8104cc6:	60f8      	str	r0, [r7, #12]
 8104cc8:	60b9      	str	r1, [r7, #8]
 8104cca:	4613      	mov	r3, r2
 8104ccc:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 8104cce:	68b9      	ldr	r1, [r7, #8]
 8104cd0:	68f8      	ldr	r0, [r7, #12]
 8104cd2:	f006 fc05 	bl	810b4e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8104cd6:	79fb      	ldrb	r3, [r7, #7]
 8104cd8:	461a      	mov	r2, r3
 8104cda:	2101      	movs	r1, #1
 8104cdc:	68f8      	ldr	r0, [r7, #12]
 8104cde:	f006 fb3f 	bl	810b360 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8104ce2:	bf00      	nop
    }
 8104ce4:	68f8      	ldr	r0, [r7, #12]
 8104ce6:	3710      	adds	r7, #16
 8104ce8:	46bd      	mov	sp, r7
 8104cea:	bd80      	pop	{r7, pc}

08104cec <xicro_begin>:
void UserXicroSpin();
float UserXicroGetLinVel();
float UserXicroGetAngVel();

void xicro_begin(UART_HandleTypeDef* huart)
{
 8104cec:	b580      	push	{r7, lr}
 8104cee:	b082      	sub	sp, #8
 8104cf0:	af00      	add	r7, sp, #0
 8104cf2:	6078      	str	r0, [r7, #4]
	UserXicroBegin(huart);
 8104cf4:	6878      	ldr	r0, [r7, #4]
 8104cf6:	f7fc f907 	bl	8100f08 <UserXicroBegin>
}
 8104cfa:	bf00      	nop
 8104cfc:	3708      	adds	r7, #8
 8104cfe:	46bd      	mov	sp, r7
 8104d00:	bd80      	pop	{r7, pc}

08104d02 <xicro_publish_nav>:

void xicro_publish_nav(float pose__of__position__of__x ,float pose__of__position__of__y ,float pose__of__position__of__z ,float pose__of__orientation__of__x ,float pose__of__orientation__of__y ,float pose__of__orientation__of__z ,float pose__of__orientation__of__w ,float twist__of__linear__of__x ,float twist__of__linear__of__y ,float twist__of__linear__of__z ,float twist__of__angular__of__x ,float twist__of__angular__of__y ,float twist__of__angular__of__z)
{
 8104d02:	b580      	push	{r7, lr}
 8104d04:	b08e      	sub	sp, #56	; 0x38
 8104d06:	af00      	add	r7, sp, #0
 8104d08:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
 8104d0c:	edc7 0a0c 	vstr	s1, [r7, #48]	; 0x30
 8104d10:	ed87 1a0b 	vstr	s2, [r7, #44]	; 0x2c
 8104d14:	edc7 1a0a 	vstr	s3, [r7, #40]	; 0x28
 8104d18:	ed87 2a09 	vstr	s4, [r7, #36]	; 0x24
 8104d1c:	edc7 2a08 	vstr	s5, [r7, #32]
 8104d20:	ed87 3a07 	vstr	s6, [r7, #28]
 8104d24:	edc7 3a06 	vstr	s7, [r7, #24]
 8104d28:	ed87 4a05 	vstr	s8, [r7, #20]
 8104d2c:	edc7 4a04 	vstr	s9, [r7, #16]
 8104d30:	ed87 5a03 	vstr	s10, [r7, #12]
 8104d34:	edc7 5a02 	vstr	s11, [r7, #8]
 8104d38:	ed87 6a01 	vstr	s12, [r7, #4]
	UserXicroPublishNAV(pose__of__position__of__x, pose__of__position__of__y, pose__of__position__of__z, pose__of__orientation__of__x, pose__of__orientation__of__y, pose__of__orientation__of__z, pose__of__orientation__of__w, twist__of__linear__of__x, twist__of__linear__of__y, twist__of__linear__of__z, twist__of__angular__of__x, twist__of__angular__of__y, twist__of__angular__of__z);
 8104d3c:	ed97 6a01 	vldr	s12, [r7, #4]
 8104d40:	edd7 5a02 	vldr	s11, [r7, #8]
 8104d44:	ed97 5a03 	vldr	s10, [r7, #12]
 8104d48:	edd7 4a04 	vldr	s9, [r7, #16]
 8104d4c:	ed97 4a05 	vldr	s8, [r7, #20]
 8104d50:	edd7 3a06 	vldr	s7, [r7, #24]
 8104d54:	ed97 3a07 	vldr	s6, [r7, #28]
 8104d58:	edd7 2a08 	vldr	s5, [r7, #32]
 8104d5c:	ed97 2a09 	vldr	s4, [r7, #36]	; 0x24
 8104d60:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 8104d64:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8104d68:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8104d6c:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8104d70:	f7fc f8d8 	bl	8100f24 <UserXicroPublishNAV>
}
 8104d74:	bf00      	nop
 8104d76:	3738      	adds	r7, #56	; 0x38
 8104d78:	46bd      	mov	sp, r7
 8104d7a:	bd80      	pop	{r7, pc}

08104d7c <xicro_publish_imu>:

void xicro_publish_imu(float orientation__of__x ,float orientation__of__y ,float orientation__of__z ,float orientation__of__w ,float angular_velocity__of__x ,float angular_velocity__of__y ,float angular_velocity__of__z ,float linear_acceleration__of__x ,float linear_acceleration__of__y ,float linear_acceleration__of__z )
{
 8104d7c:	b580      	push	{r7, lr}
 8104d7e:	b08a      	sub	sp, #40	; 0x28
 8104d80:	af00      	add	r7, sp, #0
 8104d82:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8104d86:	edc7 0a08 	vstr	s1, [r7, #32]
 8104d8a:	ed87 1a07 	vstr	s2, [r7, #28]
 8104d8e:	edc7 1a06 	vstr	s3, [r7, #24]
 8104d92:	ed87 2a05 	vstr	s4, [r7, #20]
 8104d96:	edc7 2a04 	vstr	s5, [r7, #16]
 8104d9a:	ed87 3a03 	vstr	s6, [r7, #12]
 8104d9e:	edc7 3a02 	vstr	s7, [r7, #8]
 8104da2:	ed87 4a01 	vstr	s8, [r7, #4]
 8104da6:	edc7 4a00 	vstr	s9, [r7]
	UserXicroPublishIMU(orientation__of__x, orientation__of__y, orientation__of__z, orientation__of__w, angular_velocity__of__x, angular_velocity__of__y, angular_velocity__of__z, linear_acceleration__of__x, linear_acceleration__of__y, linear_acceleration__of__z);
 8104daa:	edd7 4a00 	vldr	s9, [r7]
 8104dae:	ed97 4a01 	vldr	s8, [r7, #4]
 8104db2:	edd7 3a02 	vldr	s7, [r7, #8]
 8104db6:	ed97 3a03 	vldr	s6, [r7, #12]
 8104dba:	edd7 2a04 	vldr	s5, [r7, #16]
 8104dbe:	ed97 2a05 	vldr	s4, [r7, #20]
 8104dc2:	edd7 1a06 	vldr	s3, [r7, #24]
 8104dc6:	ed97 1a07 	vldr	s2, [r7, #28]
 8104dca:	edd7 0a08 	vldr	s1, [r7, #32]
 8104dce:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8104dd2:	f7fc f8e7 	bl	8100fa4 <UserXicroPublishIMU>
}
 8104dd6:	bf00      	nop
 8104dd8:	3728      	adds	r7, #40	; 0x28
 8104dda:	46bd      	mov	sp, r7
 8104ddc:	bd80      	pop	{r7, pc}

08104dde <xicro_spin_node>:

void xicro_spin_node()
{
 8104dde:	b580      	push	{r7, lr}
 8104de0:	af00      	add	r7, sp, #0
	UserXicroSpin();
 8104de2:	f7fc f913 	bl	810100c <UserXicroSpin>
}
 8104de6:	bf00      	nop
 8104de8:	bd80      	pop	{r7, pc}

08104dea <xicro_get_linvel>:

float xicro_get_linvel()
{
 8104dea:	b580      	push	{r7, lr}
 8104dec:	af00      	add	r7, sp, #0
	return UserXicroGetLinVel();
 8104dee:	f7fc f917 	bl	8101020 <UserXicroGetLinVel>
 8104df2:	eef0 7a40 	vmov.f32	s15, s0
}
 8104df6:	eeb0 0a67 	vmov.f32	s0, s15
 8104dfa:	bd80      	pop	{r7, pc}

08104dfc <xicro_get_angvel>:

float xicro_get_angvel()
{
 8104dfc:	b580      	push	{r7, lr}
 8104dfe:	af00      	add	r7, sp, #0
	return UserXicroGetAngVel();
 8104e00:	f7fc f91c 	bl	810103c <UserXicroGetAngVel>
 8104e04:	eef0 7a40 	vmov.f32	s15, s0
}
 8104e08:	eeb0 0a67 	vmov.f32	s0, s15
 8104e0c:	bd80      	pop	{r7, pc}
	...

08104e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8104e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104e14:	b085      	sub	sp, #20
 8104e16:	af00      	add	r7, sp, #0
	uint64_t dubugStamp;
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8104e18:	4b79      	ldr	r3, [pc, #484]	; (8105000 <main+0x1f0>)
 8104e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8104e1e:	4a78      	ldr	r2, [pc, #480]	; (8105000 <main+0x1f0>)
 8104e20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8104e28:	4b75      	ldr	r3, [pc, #468]	; (8105000 <main+0x1f0>)
 8104e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8104e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104e32:	607b      	str	r3, [r7, #4]
 8104e34:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8104e36:	2001      	movs	r0, #1
 8104e38:	f002 ffa2 	bl	8107d80 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8104e3c:	f003 f82c 	bl	8107e98 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8104e40:	2201      	movs	r2, #1
 8104e42:	2102      	movs	r1, #2
 8104e44:	2000      	movs	r0, #0
 8104e46:	f002 ffad 	bl	8107da4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8104e4a:	4b6e      	ldr	r3, [pc, #440]	; (8105004 <main+0x1f4>)
 8104e4c:	681b      	ldr	r3, [r3, #0]
 8104e4e:	091b      	lsrs	r3, r3, #4
 8104e50:	f003 030f 	and.w	r3, r3, #15
 8104e54:	2b07      	cmp	r3, #7
 8104e56:	d108      	bne.n	8104e6a <main+0x5a>
 8104e58:	4b6b      	ldr	r3, [pc, #428]	; (8105008 <main+0x1f8>)
 8104e5a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8104e5e:	4a6a      	ldr	r2, [pc, #424]	; (8105008 <main+0x1f8>)
 8104e60:	f043 0301 	orr.w	r3, r3, #1
 8104e64:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8104e68:	e007      	b.n	8104e7a <main+0x6a>
 8104e6a:	4b67      	ldr	r3, [pc, #412]	; (8105008 <main+0x1f8>)
 8104e6c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8104e70:	4a65      	ldr	r2, [pc, #404]	; (8105008 <main+0x1f8>)
 8104e72:	f043 0301 	orr.w	r3, r3, #1
 8104e76:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8104e7a:	f000 faef 	bl	810545c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8104e7e:	f000 f91b 	bl	81050b8 <MX_DMA_Init>
  MX_GPIO_Init();
 8104e82:	f000 f939 	bl	81050f8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8104e86:	f000 f8c9 	bl	810501c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  xicro_begin(&huart3);
 8104e8a:	4860      	ldr	r0, [pc, #384]	; (810500c <main+0x1fc>)
 8104e8c:	f7ff ff2e 	bl	8104cec <xicro_begin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  m4run++;
 8104e90:	4b5f      	ldr	r3, [pc, #380]	; (8105010 <main+0x200>)
 8104e92:	681b      	ldr	r3, [r3, #0]
 8104e94:	3301      	adds	r3, #1
 8104e96:	4a5e      	ldr	r2, [pc, #376]	; (8105010 <main+0x200>)
 8104e98:	6013      	str	r3, [r2, #0]
	  xicro_spin_node();
 8104e9a:	f7ff ffa0 	bl	8104dde <xicro_spin_node>
	  shared_ptr->cmd_vel_linear = xicro_get_linvel();
 8104e9e:	f04f 5660 	mov.w	r6, #939524096	; 0x38000000
 8104ea2:	f7ff ffa2 	bl	8104dea <xicro_get_linvel>
 8104ea6:	eef0 7a40 	vmov.f32	s15, s0
 8104eaa:	edc6 7a12 	vstr	s15, [r6, #72]	; 0x48
	  shared_ptr->cmd_vel_angular = xicro_get_angvel();
 8104eae:	f04f 5660 	mov.w	r6, #939524096	; 0x38000000
 8104eb2:	f7ff ffa3 	bl	8104dfc <xicro_get_angvel>
 8104eb6:	eef0 7a40 	vmov.f32	s15, s0
 8104eba:	edc6 7a13 	vstr	s15, [r6, #76]	; 0x4c
	  if (shared_ptr->nav_pub_flag)
 8104ebe:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8104ec6:	b2db      	uxtb	r3, r3
 8104ec8:	2b00      	cmp	r3, #0
 8104eca:	d036      	beq.n	8104f3a <main+0x12a>
	  {
		 xicro_publish_nav(shared_ptr->robot_x, shared_ptr->robot_y, 0, shared_ptr->robot_qx, shared_ptr->robot_qy, shared_ptr->robot_qz, shared_ptr->robot_qw, shared_ptr->robot_linvel, 0, 0, 0, 0, shared_ptr->robot_angvel);
 8104ecc:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104ed0:	edd3 7a00 	vldr	s15, [r3]
 8104ed4:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104ed8:	ed93 7a01 	vldr	s14, [r3, #4]
 8104edc:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104ee0:	edd3 6a02 	vldr	s13, [r3, #8]
 8104ee4:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104ee8:	ed93 2a03 	vldr	s4, [r3, #12]
 8104eec:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104ef0:	edd3 2a04 	vldr	s5, [r3, #16]
 8104ef4:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104ef8:	ed93 3a05 	vldr	s6, [r3, #20]
 8104efc:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104f00:	edd3 3a06 	vldr	s7, [r3, #24]
 8104f04:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104f08:	ed93 6a07 	vldr	s12, [r3, #28]
 8104f0c:	eddf 5a41 	vldr	s11, [pc, #260]	; 8105014 <main+0x204>
 8104f10:	ed9f 5a40 	vldr	s10, [pc, #256]	; 8105014 <main+0x204>
 8104f14:	eddf 4a3f 	vldr	s9, [pc, #252]	; 8105014 <main+0x204>
 8104f18:	ed9f 4a3e 	vldr	s8, [pc, #248]	; 8105014 <main+0x204>
 8104f1c:	eef0 1a66 	vmov.f32	s3, s13
 8104f20:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8105014 <main+0x204>
 8104f24:	eef0 0a47 	vmov.f32	s1, s14
 8104f28:	eeb0 0a67 	vmov.f32	s0, s15
 8104f2c:	f7ff fee9 	bl	8104d02 <xicro_publish_nav>
		 shared_ptr->nav_pub_flag = 0;
 8104f30:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104f34:	2200      	movs	r2, #0
 8104f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	  }
	  if (shared_ptr->imu_pub_flag)
 8104f3a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8104f42:	b2db      	uxtb	r3, r3
 8104f44:	2b00      	cmp	r3, #0
 8104f46:	d03a      	beq.n	8104fbe <main+0x1ae>
	  {
		 xicro_publish_imu(shared_ptr->imu_qx, shared_ptr->imu_qy, shared_ptr->imu_qz, shared_ptr->imu_qw, shared_ptr->imu_gx, shared_ptr->imu_gy, shared_ptr->imu_gz, shared_ptr->imu_ax, shared_ptr->imu_ay, shared_ptr->imu_az);
 8104f48:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104f4c:	edd3 7a08 	vldr	s15, [r3, #32]
 8104f50:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104f54:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8104f58:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104f5c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8104f60:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104f64:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8104f68:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104f6c:	edd3 5a0c 	vldr	s11, [r3, #48]	; 0x30
 8104f70:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104f74:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
 8104f78:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104f7c:	ed93 3a0e 	vldr	s6, [r3, #56]	; 0x38
 8104f80:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104f84:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
 8104f88:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104f8c:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 8104f90:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104f94:	edd3 4a11 	vldr	s9, [r3, #68]	; 0x44
 8104f98:	eef0 2a45 	vmov.f32	s5, s10
 8104f9c:	eeb0 2a65 	vmov.f32	s4, s11
 8104fa0:	eef0 1a46 	vmov.f32	s3, s12
 8104fa4:	eeb0 1a66 	vmov.f32	s2, s13
 8104fa8:	eef0 0a47 	vmov.f32	s1, s14
 8104fac:	eeb0 0a67 	vmov.f32	s0, s15
 8104fb0:	f7ff fee4 	bl	8104d7c <xicro_publish_imu>
		 shared_ptr->imu_pub_flag = 0;
 8104fb4:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8104fb8:	2200      	movs	r2, #0
 8104fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GetTick() - dubugStamp > 500)
 8104fbe:	f000 faf5 	bl	81055ac <HAL_GetTick>
 8104fc2:	4603      	mov	r3, r0
 8104fc4:	2200      	movs	r2, #0
 8104fc6:	4698      	mov	r8, r3
 8104fc8:	4691      	mov	r9, r2
 8104fca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8104fce:	ebb8 0402 	subs.w	r4, r8, r2
 8104fd2:	eb69 0503 	sbc.w	r5, r9, r3
 8104fd6:	f240 13f5 	movw	r3, #501	; 0x1f5
 8104fda:	429c      	cmp	r4, r3
 8104fdc:	f175 0300 	sbcs.w	r3, r5, #0
 8104fe0:	f4ff af56 	bcc.w	8104e90 <main+0x80>
	  {
		  dubugStamp = HAL_GetTick();
 8104fe4:	f000 fae2 	bl	81055ac <HAL_GetTick>
 8104fe8:	4603      	mov	r3, r0
 8104fea:	2200      	movs	r2, #0
 8104fec:	469a      	mov	sl, r3
 8104fee:	4693      	mov	fp, r2
 8104ff0:	e9c7 ab02 	strd	sl, fp, [r7, #8]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8104ff4:	2102      	movs	r1, #2
 8104ff6:	4808      	ldr	r0, [pc, #32]	; (8105018 <main+0x208>)
 8104ff8:	f002 fea7 	bl	8107d4a <HAL_GPIO_TogglePin>
	  m4run++;
 8104ffc:	e748      	b.n	8104e90 <main+0x80>
 8104ffe:	bf00      	nop
 8105000:	58024400 	.word	0x58024400
 8105004:	e000ed00 	.word	0xe000ed00
 8105008:	58026400 	.word	0x58026400
 810500c:	10000250 	.word	0x10000250
 8105010:	10000358 	.word	0x10000358
 8105014:	00000000 	.word	0x00000000
 8105018:	58021000 	.word	0x58021000

0810501c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 810501c:	b580      	push	{r7, lr}
 810501e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8105020:	4b22      	ldr	r3, [pc, #136]	; (81050ac <MX_USART3_UART_Init+0x90>)
 8105022:	4a23      	ldr	r2, [pc, #140]	; (81050b0 <MX_USART3_UART_Init+0x94>)
 8105024:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 576000;
 8105026:	4b21      	ldr	r3, [pc, #132]	; (81050ac <MX_USART3_UART_Init+0x90>)
 8105028:	4a22      	ldr	r2, [pc, #136]	; (81050b4 <MX_USART3_UART_Init+0x98>)
 810502a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810502c:	4b1f      	ldr	r3, [pc, #124]	; (81050ac <MX_USART3_UART_Init+0x90>)
 810502e:	2200      	movs	r2, #0
 8105030:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8105032:	4b1e      	ldr	r3, [pc, #120]	; (81050ac <MX_USART3_UART_Init+0x90>)
 8105034:	2200      	movs	r2, #0
 8105036:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8105038:	4b1c      	ldr	r3, [pc, #112]	; (81050ac <MX_USART3_UART_Init+0x90>)
 810503a:	2200      	movs	r2, #0
 810503c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 810503e:	4b1b      	ldr	r3, [pc, #108]	; (81050ac <MX_USART3_UART_Init+0x90>)
 8105040:	220c      	movs	r2, #12
 8105042:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8105044:	4b19      	ldr	r3, [pc, #100]	; (81050ac <MX_USART3_UART_Init+0x90>)
 8105046:	2200      	movs	r2, #0
 8105048:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 810504a:	4b18      	ldr	r3, [pc, #96]	; (81050ac <MX_USART3_UART_Init+0x90>)
 810504c:	2200      	movs	r2, #0
 810504e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8105050:	4b16      	ldr	r3, [pc, #88]	; (81050ac <MX_USART3_UART_Init+0x90>)
 8105052:	2200      	movs	r2, #0
 8105054:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8105056:	4b15      	ldr	r3, [pc, #84]	; (81050ac <MX_USART3_UART_Init+0x90>)
 8105058:	2200      	movs	r2, #0
 810505a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810505c:	4b13      	ldr	r3, [pc, #76]	; (81050ac <MX_USART3_UART_Init+0x90>)
 810505e:	2200      	movs	r2, #0
 8105060:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8105062:	4812      	ldr	r0, [pc, #72]	; (81050ac <MX_USART3_UART_Init+0x90>)
 8105064:	f004 fc66 	bl	8109934 <HAL_UART_Init>
 8105068:	4603      	mov	r3, r0
 810506a:	2b00      	cmp	r3, #0
 810506c:	d001      	beq.n	8105072 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 810506e:	f000 f887 	bl	8105180 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8105072:	2100      	movs	r1, #0
 8105074:	480d      	ldr	r0, [pc, #52]	; (81050ac <MX_USART3_UART_Init+0x90>)
 8105076:	f005 ff56 	bl	810af26 <HAL_UARTEx_SetTxFifoThreshold>
 810507a:	4603      	mov	r3, r0
 810507c:	2b00      	cmp	r3, #0
 810507e:	d001      	beq.n	8105084 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8105080:	f000 f87e 	bl	8105180 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8105084:	2100      	movs	r1, #0
 8105086:	4809      	ldr	r0, [pc, #36]	; (81050ac <MX_USART3_UART_Init+0x90>)
 8105088:	f005 ff8b 	bl	810afa2 <HAL_UARTEx_SetRxFifoThreshold>
 810508c:	4603      	mov	r3, r0
 810508e:	2b00      	cmp	r3, #0
 8105090:	d001      	beq.n	8105096 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8105092:	f000 f875 	bl	8105180 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8105096:	4805      	ldr	r0, [pc, #20]	; (81050ac <MX_USART3_UART_Init+0x90>)
 8105098:	f005 ff0c 	bl	810aeb4 <HAL_UARTEx_DisableFifoMode>
 810509c:	4603      	mov	r3, r0
 810509e:	2b00      	cmp	r3, #0
 81050a0:	d001      	beq.n	81050a6 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 81050a2:	f000 f86d 	bl	8105180 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81050a6:	bf00      	nop
 81050a8:	bd80      	pop	{r7, pc}
 81050aa:	bf00      	nop
 81050ac:	10000250 	.word	0x10000250
 81050b0:	40004800 	.word	0x40004800
 81050b4:	0008ca00 	.word	0x0008ca00

081050b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 81050b8:	b580      	push	{r7, lr}
 81050ba:	b082      	sub	sp, #8
 81050bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 81050be:	4b0d      	ldr	r3, [pc, #52]	; (81050f4 <MX_DMA_Init+0x3c>)
 81050c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81050c4:	4a0b      	ldr	r2, [pc, #44]	; (81050f4 <MX_DMA_Init+0x3c>)
 81050c6:	f043 0301 	orr.w	r3, r3, #1
 81050ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81050ce:	4b09      	ldr	r3, [pc, #36]	; (81050f4 <MX_DMA_Init+0x3c>)
 81050d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81050d4:	f003 0301 	and.w	r3, r3, #1
 81050d8:	607b      	str	r3, [r7, #4]
 81050da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 81050dc:	2200      	movs	r2, #0
 81050de:	2100      	movs	r1, #0
 81050e0:	200b      	movs	r0, #11
 81050e2:	f000 fb4a 	bl	810577a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 81050e6:	200b      	movs	r0, #11
 81050e8:	f000 fb61 	bl	81057ae <HAL_NVIC_EnableIRQ>

}
 81050ec:	bf00      	nop
 81050ee:	3708      	adds	r7, #8
 81050f0:	46bd      	mov	sp, r7
 81050f2:	bd80      	pop	{r7, pc}
 81050f4:	58024400 	.word	0x58024400

081050f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81050f8:	b580      	push	{r7, lr}
 81050fa:	b088      	sub	sp, #32
 81050fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81050fe:	f107 030c 	add.w	r3, r7, #12
 8105102:	2200      	movs	r2, #0
 8105104:	601a      	str	r2, [r3, #0]
 8105106:	605a      	str	r2, [r3, #4]
 8105108:	609a      	str	r2, [r3, #8]
 810510a:	60da      	str	r2, [r3, #12]
 810510c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810510e:	4b1a      	ldr	r3, [pc, #104]	; (8105178 <MX_GPIO_Init+0x80>)
 8105110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8105114:	4a18      	ldr	r2, [pc, #96]	; (8105178 <MX_GPIO_Init+0x80>)
 8105116:	f043 0308 	orr.w	r3, r3, #8
 810511a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810511e:	4b16      	ldr	r3, [pc, #88]	; (8105178 <MX_GPIO_Init+0x80>)
 8105120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8105124:	f003 0308 	and.w	r3, r3, #8
 8105128:	60bb      	str	r3, [r7, #8]
 810512a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810512c:	4b12      	ldr	r3, [pc, #72]	; (8105178 <MX_GPIO_Init+0x80>)
 810512e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8105132:	4a11      	ldr	r2, [pc, #68]	; (8105178 <MX_GPIO_Init+0x80>)
 8105134:	f043 0310 	orr.w	r3, r3, #16
 8105138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810513c:	4b0e      	ldr	r3, [pc, #56]	; (8105178 <MX_GPIO_Init+0x80>)
 810513e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8105142:	f003 0310 	and.w	r3, r3, #16
 8105146:	607b      	str	r3, [r7, #4]
 8105148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 810514a:	2200      	movs	r2, #0
 810514c:	2102      	movs	r1, #2
 810514e:	480b      	ldr	r0, [pc, #44]	; (810517c <MX_GPIO_Init+0x84>)
 8105150:	f002 fde2 	bl	8107d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8105154:	2302      	movs	r3, #2
 8105156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8105158:	2301      	movs	r3, #1
 810515a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810515c:	2300      	movs	r3, #0
 810515e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8105160:	2300      	movs	r3, #0
 8105162:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8105164:	f107 030c 	add.w	r3, r7, #12
 8105168:	4619      	mov	r1, r3
 810516a:	4804      	ldr	r0, [pc, #16]	; (810517c <MX_GPIO_Init+0x84>)
 810516c:	f002 fc24 	bl	81079b8 <HAL_GPIO_Init>

}
 8105170:	bf00      	nop
 8105172:	3720      	adds	r7, #32
 8105174:	46bd      	mov	sp, r7
 8105176:	bd80      	pop	{r7, pc}
 8105178:	58024400 	.word	0x58024400
 810517c:	58021000 	.word	0x58021000

08105180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8105180:	b480      	push	{r7}
 8105182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8105184:	b672      	cpsid	i
}
 8105186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8105188:	e7fe      	b.n	8105188 <Error_Handler+0x8>
	...

0810518c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810518c:	b480      	push	{r7}
 810518e:	b083      	sub	sp, #12
 8105190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105192:	4b0a      	ldr	r3, [pc, #40]	; (81051bc <HAL_MspInit+0x30>)
 8105194:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105198:	4a08      	ldr	r2, [pc, #32]	; (81051bc <HAL_MspInit+0x30>)
 810519a:	f043 0302 	orr.w	r3, r3, #2
 810519e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81051a2:	4b06      	ldr	r3, [pc, #24]	; (81051bc <HAL_MspInit+0x30>)
 81051a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81051a8:	f003 0302 	and.w	r3, r3, #2
 81051ac:	607b      	str	r3, [r7, #4]
 81051ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81051b0:	bf00      	nop
 81051b2:	370c      	adds	r7, #12
 81051b4:	46bd      	mov	sp, r7
 81051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051ba:	4770      	bx	lr
 81051bc:	58024400 	.word	0x58024400

081051c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81051c0:	b580      	push	{r7, lr}
 81051c2:	b0b8      	sub	sp, #224	; 0xe0
 81051c4:	af00      	add	r7, sp, #0
 81051c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81051c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81051cc:	2200      	movs	r2, #0
 81051ce:	601a      	str	r2, [r3, #0]
 81051d0:	605a      	str	r2, [r3, #4]
 81051d2:	609a      	str	r2, [r3, #8]
 81051d4:	60da      	str	r2, [r3, #12]
 81051d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81051d8:	f107 0310 	add.w	r3, r7, #16
 81051dc:	22bc      	movs	r2, #188	; 0xbc
 81051de:	2100      	movs	r1, #0
 81051e0:	4618      	mov	r0, r3
 81051e2:	f006 fadb 	bl	810b79c <memset>
  if(huart->Instance==USART3)
 81051e6:	687b      	ldr	r3, [r7, #4]
 81051e8:	681b      	ldr	r3, [r3, #0]
 81051ea:	4a3c      	ldr	r2, [pc, #240]	; (81052dc <HAL_UART_MspInit+0x11c>)
 81051ec:	4293      	cmp	r3, r2
 81051ee:	d170      	bne.n	81052d2 <HAL_UART_MspInit+0x112>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81051f0:	2302      	movs	r3, #2
 81051f2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81051f4:	2300      	movs	r3, #0
 81051f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81051fa:	f107 0310 	add.w	r3, r7, #16
 81051fe:	4618      	mov	r0, r3
 8105200:	f003 f830 	bl	8108264 <HAL_RCCEx_PeriphCLKConfig>
 8105204:	4603      	mov	r3, r0
 8105206:	2b00      	cmp	r3, #0
 8105208:	d001      	beq.n	810520e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 810520a:	f7ff ffb9 	bl	8105180 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810520e:	4b34      	ldr	r3, [pc, #208]	; (81052e0 <HAL_UART_MspInit+0x120>)
 8105210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8105214:	4a32      	ldr	r2, [pc, #200]	; (81052e0 <HAL_UART_MspInit+0x120>)
 8105216:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810521a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810521e:	4b30      	ldr	r3, [pc, #192]	; (81052e0 <HAL_UART_MspInit+0x120>)
 8105220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8105224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105228:	60fb      	str	r3, [r7, #12]
 810522a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 810522c:	4b2c      	ldr	r3, [pc, #176]	; (81052e0 <HAL_UART_MspInit+0x120>)
 810522e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8105232:	4a2b      	ldr	r2, [pc, #172]	; (81052e0 <HAL_UART_MspInit+0x120>)
 8105234:	f043 0308 	orr.w	r3, r3, #8
 8105238:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810523c:	4b28      	ldr	r3, [pc, #160]	; (81052e0 <HAL_UART_MspInit+0x120>)
 810523e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8105242:	f003 0308 	and.w	r3, r3, #8
 8105246:	60bb      	str	r3, [r7, #8]
 8105248:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 810524a:	f44f 7340 	mov.w	r3, #768	; 0x300
 810524e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8105252:	2302      	movs	r3, #2
 8105254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8105258:	2300      	movs	r3, #0
 810525a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810525e:	2300      	movs	r3, #0
 8105260:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8105264:	2307      	movs	r3, #7
 8105266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810526a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810526e:	4619      	mov	r1, r3
 8105270:	481c      	ldr	r0, [pc, #112]	; (81052e4 <HAL_UART_MspInit+0x124>)
 8105272:	f002 fba1 	bl	81079b8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8105276:	4b1c      	ldr	r3, [pc, #112]	; (81052e8 <HAL_UART_MspInit+0x128>)
 8105278:	4a1c      	ldr	r2, [pc, #112]	; (81052ec <HAL_UART_MspInit+0x12c>)
 810527a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 810527c:	4b1a      	ldr	r3, [pc, #104]	; (81052e8 <HAL_UART_MspInit+0x128>)
 810527e:	222d      	movs	r2, #45	; 0x2d
 8105280:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8105282:	4b19      	ldr	r3, [pc, #100]	; (81052e8 <HAL_UART_MspInit+0x128>)
 8105284:	2200      	movs	r2, #0
 8105286:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8105288:	4b17      	ldr	r3, [pc, #92]	; (81052e8 <HAL_UART_MspInit+0x128>)
 810528a:	2200      	movs	r2, #0
 810528c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 810528e:	4b16      	ldr	r3, [pc, #88]	; (81052e8 <HAL_UART_MspInit+0x128>)
 8105290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8105294:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8105296:	4b14      	ldr	r3, [pc, #80]	; (81052e8 <HAL_UART_MspInit+0x128>)
 8105298:	2200      	movs	r2, #0
 810529a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810529c:	4b12      	ldr	r3, [pc, #72]	; (81052e8 <HAL_UART_MspInit+0x128>)
 810529e:	2200      	movs	r2, #0
 81052a0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 81052a2:	4b11      	ldr	r3, [pc, #68]	; (81052e8 <HAL_UART_MspInit+0x128>)
 81052a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 81052a8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 81052aa:	4b0f      	ldr	r3, [pc, #60]	; (81052e8 <HAL_UART_MspInit+0x128>)
 81052ac:	2200      	movs	r2, #0
 81052ae:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81052b0:	4b0d      	ldr	r3, [pc, #52]	; (81052e8 <HAL_UART_MspInit+0x128>)
 81052b2:	2200      	movs	r2, #0
 81052b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 81052b6:	480c      	ldr	r0, [pc, #48]	; (81052e8 <HAL_UART_MspInit+0x128>)
 81052b8:	f000 faa8 	bl	810580c <HAL_DMA_Init>
 81052bc:	4603      	mov	r3, r0
 81052be:	2b00      	cmp	r3, #0
 81052c0:	d001      	beq.n	81052c6 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 81052c2:	f7ff ff5d 	bl	8105180 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 81052c6:	687b      	ldr	r3, [r7, #4]
 81052c8:	4a07      	ldr	r2, [pc, #28]	; (81052e8 <HAL_UART_MspInit+0x128>)
 81052ca:	67da      	str	r2, [r3, #124]	; 0x7c
 81052cc:	4a06      	ldr	r2, [pc, #24]	; (81052e8 <HAL_UART_MspInit+0x128>)
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 81052d2:	bf00      	nop
 81052d4:	37e0      	adds	r7, #224	; 0xe0
 81052d6:	46bd      	mov	sp, r7
 81052d8:	bd80      	pop	{r7, pc}
 81052da:	bf00      	nop
 81052dc:	40004800 	.word	0x40004800
 81052e0:	58024400 	.word	0x58024400
 81052e4:	58020c00 	.word	0x58020c00
 81052e8:	100002e0 	.word	0x100002e0
 81052ec:	40020010 	.word	0x40020010

081052f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81052f0:	b480      	push	{r7}
 81052f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81052f4:	e7fe      	b.n	81052f4 <NMI_Handler+0x4>

081052f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81052f6:	b480      	push	{r7}
 81052f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81052fa:	e7fe      	b.n	81052fa <HardFault_Handler+0x4>

081052fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81052fc:	b480      	push	{r7}
 81052fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8105300:	e7fe      	b.n	8105300 <MemManage_Handler+0x4>

08105302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8105302:	b480      	push	{r7}
 8105304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8105306:	e7fe      	b.n	8105306 <BusFault_Handler+0x4>

08105308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8105308:	b480      	push	{r7}
 810530a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810530c:	e7fe      	b.n	810530c <UsageFault_Handler+0x4>

0810530e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810530e:	b480      	push	{r7}
 8105310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8105312:	bf00      	nop
 8105314:	46bd      	mov	sp, r7
 8105316:	f85d 7b04 	ldr.w	r7, [sp], #4
 810531a:	4770      	bx	lr

0810531c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810531c:	b480      	push	{r7}
 810531e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8105320:	bf00      	nop
 8105322:	46bd      	mov	sp, r7
 8105324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105328:	4770      	bx	lr

0810532a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810532a:	b480      	push	{r7}
 810532c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810532e:	bf00      	nop
 8105330:	46bd      	mov	sp, r7
 8105332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105336:	4770      	bx	lr

08105338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8105338:	b580      	push	{r7, lr}
 810533a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810533c:	f000 f922 	bl	8105584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8105340:	bf00      	nop
 8105342:	bd80      	pop	{r7, pc}

08105344 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8105344:	b580      	push	{r7, lr}
 8105346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8105348:	4802      	ldr	r0, [pc, #8]	; (8105354 <DMA1_Stream0_IRQHandler+0x10>)
 810534a:	f001 f823 	bl	8106394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 810534e:	bf00      	nop
 8105350:	bd80      	pop	{r7, pc}
 8105352:	bf00      	nop
 8105354:	100002e0 	.word	0x100002e0

08105358 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8105358:	b480      	push	{r7}
 810535a:	af00      	add	r7, sp, #0
	return 1;
 810535c:	2301      	movs	r3, #1
}
 810535e:	4618      	mov	r0, r3
 8105360:	46bd      	mov	sp, r7
 8105362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105366:	4770      	bx	lr

08105368 <_kill>:

int _kill(int pid, int sig)
{
 8105368:	b580      	push	{r7, lr}
 810536a:	b082      	sub	sp, #8
 810536c:	af00      	add	r7, sp, #0
 810536e:	6078      	str	r0, [r7, #4]
 8105370:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8105372:	f006 f9b1 	bl	810b6d8 <__errno>
 8105376:	4603      	mov	r3, r0
 8105378:	2216      	movs	r2, #22
 810537a:	601a      	str	r2, [r3, #0]
	return -1;
 810537c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8105380:	4618      	mov	r0, r3
 8105382:	3708      	adds	r7, #8
 8105384:	46bd      	mov	sp, r7
 8105386:	bd80      	pop	{r7, pc}

08105388 <_exit>:

void _exit (int status)
{
 8105388:	b580      	push	{r7, lr}
 810538a:	b082      	sub	sp, #8
 810538c:	af00      	add	r7, sp, #0
 810538e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8105390:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8105394:	6878      	ldr	r0, [r7, #4]
 8105396:	f7ff ffe7 	bl	8105368 <_kill>
	while (1) {}		/* Make sure we hang here */
 810539a:	e7fe      	b.n	810539a <_exit+0x12>

0810539c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 810539c:	b580      	push	{r7, lr}
 810539e:	b086      	sub	sp, #24
 81053a0:	af00      	add	r7, sp, #0
 81053a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81053a4:	4a14      	ldr	r2, [pc, #80]	; (81053f8 <_sbrk+0x5c>)
 81053a6:	4b15      	ldr	r3, [pc, #84]	; (81053fc <_sbrk+0x60>)
 81053a8:	1ad3      	subs	r3, r2, r3
 81053aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81053ac:	697b      	ldr	r3, [r7, #20]
 81053ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81053b0:	4b13      	ldr	r3, [pc, #76]	; (8105400 <_sbrk+0x64>)
 81053b2:	681b      	ldr	r3, [r3, #0]
 81053b4:	2b00      	cmp	r3, #0
 81053b6:	d102      	bne.n	81053be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81053b8:	4b11      	ldr	r3, [pc, #68]	; (8105400 <_sbrk+0x64>)
 81053ba:	4a12      	ldr	r2, [pc, #72]	; (8105404 <_sbrk+0x68>)
 81053bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81053be:	4b10      	ldr	r3, [pc, #64]	; (8105400 <_sbrk+0x64>)
 81053c0:	681a      	ldr	r2, [r3, #0]
 81053c2:	687b      	ldr	r3, [r7, #4]
 81053c4:	4413      	add	r3, r2
 81053c6:	693a      	ldr	r2, [r7, #16]
 81053c8:	429a      	cmp	r2, r3
 81053ca:	d207      	bcs.n	81053dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 81053cc:	f006 f984 	bl	810b6d8 <__errno>
 81053d0:	4603      	mov	r3, r0
 81053d2:	220c      	movs	r2, #12
 81053d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81053d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81053da:	e009      	b.n	81053f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81053dc:	4b08      	ldr	r3, [pc, #32]	; (8105400 <_sbrk+0x64>)
 81053de:	681b      	ldr	r3, [r3, #0]
 81053e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81053e2:	4b07      	ldr	r3, [pc, #28]	; (8105400 <_sbrk+0x64>)
 81053e4:	681a      	ldr	r2, [r3, #0]
 81053e6:	687b      	ldr	r3, [r7, #4]
 81053e8:	4413      	add	r3, r2
 81053ea:	4a05      	ldr	r2, [pc, #20]	; (8105400 <_sbrk+0x64>)
 81053ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81053ee:	68fb      	ldr	r3, [r7, #12]
}
 81053f0:	4618      	mov	r0, r3
 81053f2:	3718      	adds	r7, #24
 81053f4:	46bd      	mov	sp, r7
 81053f6:	bd80      	pop	{r7, pc}
 81053f8:	10048000 	.word	0x10048000
 81053fc:	00000400 	.word	0x00000400
 8105400:	1000035c 	.word	0x1000035c
 8105404:	10000378 	.word	0x10000378

08105408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8105408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8105440 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810540c:	f7fb fd64 	bl	8100ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8105410:	480c      	ldr	r0, [pc, #48]	; (8105444 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8105412:	490d      	ldr	r1, [pc, #52]	; (8105448 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8105414:	4a0d      	ldr	r2, [pc, #52]	; (810544c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8105416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8105418:	e002      	b.n	8105420 <LoopCopyDataInit>

0810541a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810541a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810541c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810541e:	3304      	adds	r3, #4

08105420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8105420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8105422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8105424:	d3f9      	bcc.n	810541a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8105426:	4a0a      	ldr	r2, [pc, #40]	; (8105450 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8105428:	4c0a      	ldr	r4, [pc, #40]	; (8105454 <LoopFillZerobss+0x22>)
  movs r3, #0
 810542a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810542c:	e001      	b.n	8105432 <LoopFillZerobss>

0810542e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810542e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8105430:	3204      	adds	r2, #4

08105432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8105432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8105434:	d3fb      	bcc.n	810542e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8105436:	f006 f955 	bl	810b6e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810543a:	f7ff fce9 	bl	8104e10 <main>
  bx  lr
 810543e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8105440:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8105444:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8105448:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 810544c:	0810bc58 	.word	0x0810bc58
  ldr r2, =_sbss
 8105450:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 8105454:	10000378 	.word	0x10000378

08105458 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8105458:	e7fe      	b.n	8105458 <ADC3_IRQHandler>
	...

0810545c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810545c:	b580      	push	{r7, lr}
 810545e:	b082      	sub	sp, #8
 8105460:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8105462:	4b28      	ldr	r3, [pc, #160]	; (8105504 <HAL_Init+0xa8>)
 8105464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8105468:	4a26      	ldr	r2, [pc, #152]	; (8105504 <HAL_Init+0xa8>)
 810546a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810546e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8105472:	4b24      	ldr	r3, [pc, #144]	; (8105504 <HAL_Init+0xa8>)
 8105474:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8105478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810547c:	603b      	str	r3, [r7, #0]
 810547e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8105480:	4b21      	ldr	r3, [pc, #132]	; (8105508 <HAL_Init+0xac>)
 8105482:	681b      	ldr	r3, [r3, #0]
 8105484:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8105488:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810548c:	4a1e      	ldr	r2, [pc, #120]	; (8105508 <HAL_Init+0xac>)
 810548e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8105492:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8105494:	4b1c      	ldr	r3, [pc, #112]	; (8105508 <HAL_Init+0xac>)
 8105496:	681b      	ldr	r3, [r3, #0]
 8105498:	4a1b      	ldr	r2, [pc, #108]	; (8105508 <HAL_Init+0xac>)
 810549a:	f043 0301 	orr.w	r3, r3, #1
 810549e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81054a0:	2003      	movs	r0, #3
 81054a2:	f000 f95f 	bl	8105764 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81054a6:	f002 fd05 	bl	8107eb4 <HAL_RCC_GetSysClockFreq>
 81054aa:	4602      	mov	r2, r0
 81054ac:	4b15      	ldr	r3, [pc, #84]	; (8105504 <HAL_Init+0xa8>)
 81054ae:	699b      	ldr	r3, [r3, #24]
 81054b0:	0a1b      	lsrs	r3, r3, #8
 81054b2:	f003 030f 	and.w	r3, r3, #15
 81054b6:	4915      	ldr	r1, [pc, #84]	; (810550c <HAL_Init+0xb0>)
 81054b8:	5ccb      	ldrb	r3, [r1, r3]
 81054ba:	f003 031f 	and.w	r3, r3, #31
 81054be:	fa22 f303 	lsr.w	r3, r2, r3
 81054c2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81054c4:	4b0f      	ldr	r3, [pc, #60]	; (8105504 <HAL_Init+0xa8>)
 81054c6:	699b      	ldr	r3, [r3, #24]
 81054c8:	f003 030f 	and.w	r3, r3, #15
 81054cc:	4a0f      	ldr	r2, [pc, #60]	; (810550c <HAL_Init+0xb0>)
 81054ce:	5cd3      	ldrb	r3, [r2, r3]
 81054d0:	f003 031f 	and.w	r3, r3, #31
 81054d4:	687a      	ldr	r2, [r7, #4]
 81054d6:	fa22 f303 	lsr.w	r3, r2, r3
 81054da:	4a0d      	ldr	r2, [pc, #52]	; (8105510 <HAL_Init+0xb4>)
 81054dc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81054de:	4b0c      	ldr	r3, [pc, #48]	; (8105510 <HAL_Init+0xb4>)
 81054e0:	681b      	ldr	r3, [r3, #0]
 81054e2:	4a0c      	ldr	r2, [pc, #48]	; (8105514 <HAL_Init+0xb8>)
 81054e4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81054e6:	2000      	movs	r0, #0
 81054e8:	f000 f816 	bl	8105518 <HAL_InitTick>
 81054ec:	4603      	mov	r3, r0
 81054ee:	2b00      	cmp	r3, #0
 81054f0:	d001      	beq.n	81054f6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81054f2:	2301      	movs	r3, #1
 81054f4:	e002      	b.n	81054fc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81054f6:	f7ff fe49 	bl	810518c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81054fa:	2300      	movs	r3, #0
}
 81054fc:	4618      	mov	r0, r3
 81054fe:	3708      	adds	r7, #8
 8105500:	46bd      	mov	sp, r7
 8105502:	bd80      	pop	{r7, pc}
 8105504:	58024400 	.word	0x58024400
 8105508:	40024400 	.word	0x40024400
 810550c:	0810bb88 	.word	0x0810bb88
 8105510:	10000004 	.word	0x10000004
 8105514:	10000000 	.word	0x10000000

08105518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8105518:	b580      	push	{r7, lr}
 810551a:	b082      	sub	sp, #8
 810551c:	af00      	add	r7, sp, #0
 810551e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8105520:	4b15      	ldr	r3, [pc, #84]	; (8105578 <HAL_InitTick+0x60>)
 8105522:	781b      	ldrb	r3, [r3, #0]
 8105524:	2b00      	cmp	r3, #0
 8105526:	d101      	bne.n	810552c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8105528:	2301      	movs	r3, #1
 810552a:	e021      	b.n	8105570 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810552c:	4b13      	ldr	r3, [pc, #76]	; (810557c <HAL_InitTick+0x64>)
 810552e:	681a      	ldr	r2, [r3, #0]
 8105530:	4b11      	ldr	r3, [pc, #68]	; (8105578 <HAL_InitTick+0x60>)
 8105532:	781b      	ldrb	r3, [r3, #0]
 8105534:	4619      	mov	r1, r3
 8105536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810553a:	fbb3 f3f1 	udiv	r3, r3, r1
 810553e:	fbb2 f3f3 	udiv	r3, r2, r3
 8105542:	4618      	mov	r0, r3
 8105544:	f000 f941 	bl	81057ca <HAL_SYSTICK_Config>
 8105548:	4603      	mov	r3, r0
 810554a:	2b00      	cmp	r3, #0
 810554c:	d001      	beq.n	8105552 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810554e:	2301      	movs	r3, #1
 8105550:	e00e      	b.n	8105570 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8105552:	687b      	ldr	r3, [r7, #4]
 8105554:	2b0f      	cmp	r3, #15
 8105556:	d80a      	bhi.n	810556e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8105558:	2200      	movs	r2, #0
 810555a:	6879      	ldr	r1, [r7, #4]
 810555c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8105560:	f000 f90b 	bl	810577a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8105564:	4a06      	ldr	r2, [pc, #24]	; (8105580 <HAL_InitTick+0x68>)
 8105566:	687b      	ldr	r3, [r7, #4]
 8105568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810556a:	2300      	movs	r3, #0
 810556c:	e000      	b.n	8105570 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810556e:	2301      	movs	r3, #1
}
 8105570:	4618      	mov	r0, r3
 8105572:	3708      	adds	r7, #8
 8105574:	46bd      	mov	sp, r7
 8105576:	bd80      	pop	{r7, pc}
 8105578:	1000000c 	.word	0x1000000c
 810557c:	10000000 	.word	0x10000000
 8105580:	10000008 	.word	0x10000008

08105584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8105584:	b480      	push	{r7}
 8105586:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8105588:	4b06      	ldr	r3, [pc, #24]	; (81055a4 <HAL_IncTick+0x20>)
 810558a:	781b      	ldrb	r3, [r3, #0]
 810558c:	461a      	mov	r2, r3
 810558e:	4b06      	ldr	r3, [pc, #24]	; (81055a8 <HAL_IncTick+0x24>)
 8105590:	681b      	ldr	r3, [r3, #0]
 8105592:	4413      	add	r3, r2
 8105594:	4a04      	ldr	r2, [pc, #16]	; (81055a8 <HAL_IncTick+0x24>)
 8105596:	6013      	str	r3, [r2, #0]
}
 8105598:	bf00      	nop
 810559a:	46bd      	mov	sp, r7
 810559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055a0:	4770      	bx	lr
 81055a2:	bf00      	nop
 81055a4:	1000000c 	.word	0x1000000c
 81055a8:	10000360 	.word	0x10000360

081055ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81055ac:	b480      	push	{r7}
 81055ae:	af00      	add	r7, sp, #0
  return uwTick;
 81055b0:	4b03      	ldr	r3, [pc, #12]	; (81055c0 <HAL_GetTick+0x14>)
 81055b2:	681b      	ldr	r3, [r3, #0]
}
 81055b4:	4618      	mov	r0, r3
 81055b6:	46bd      	mov	sp, r7
 81055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055bc:	4770      	bx	lr
 81055be:	bf00      	nop
 81055c0:	10000360 	.word	0x10000360

081055c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81055c4:	b480      	push	{r7}
 81055c6:	b085      	sub	sp, #20
 81055c8:	af00      	add	r7, sp, #0
 81055ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81055cc:	687b      	ldr	r3, [r7, #4]
 81055ce:	f003 0307 	and.w	r3, r3, #7
 81055d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81055d4:	4b0c      	ldr	r3, [pc, #48]	; (8105608 <__NVIC_SetPriorityGrouping+0x44>)
 81055d6:	68db      	ldr	r3, [r3, #12]
 81055d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81055da:	68ba      	ldr	r2, [r7, #8]
 81055dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81055e0:	4013      	ands	r3, r2
 81055e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81055e4:	68fb      	ldr	r3, [r7, #12]
 81055e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81055e8:	68bb      	ldr	r3, [r7, #8]
 81055ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81055ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81055f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81055f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81055f6:	4a04      	ldr	r2, [pc, #16]	; (8105608 <__NVIC_SetPriorityGrouping+0x44>)
 81055f8:	68bb      	ldr	r3, [r7, #8]
 81055fa:	60d3      	str	r3, [r2, #12]
}
 81055fc:	bf00      	nop
 81055fe:	3714      	adds	r7, #20
 8105600:	46bd      	mov	sp, r7
 8105602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105606:	4770      	bx	lr
 8105608:	e000ed00 	.word	0xe000ed00

0810560c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810560c:	b480      	push	{r7}
 810560e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8105610:	4b04      	ldr	r3, [pc, #16]	; (8105624 <__NVIC_GetPriorityGrouping+0x18>)
 8105612:	68db      	ldr	r3, [r3, #12]
 8105614:	0a1b      	lsrs	r3, r3, #8
 8105616:	f003 0307 	and.w	r3, r3, #7
}
 810561a:	4618      	mov	r0, r3
 810561c:	46bd      	mov	sp, r7
 810561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105622:	4770      	bx	lr
 8105624:	e000ed00 	.word	0xe000ed00

08105628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8105628:	b480      	push	{r7}
 810562a:	b083      	sub	sp, #12
 810562c:	af00      	add	r7, sp, #0
 810562e:	4603      	mov	r3, r0
 8105630:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105636:	2b00      	cmp	r3, #0
 8105638:	db0b      	blt.n	8105652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810563a:	88fb      	ldrh	r3, [r7, #6]
 810563c:	f003 021f 	and.w	r2, r3, #31
 8105640:	4907      	ldr	r1, [pc, #28]	; (8105660 <__NVIC_EnableIRQ+0x38>)
 8105642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105646:	095b      	lsrs	r3, r3, #5
 8105648:	2001      	movs	r0, #1
 810564a:	fa00 f202 	lsl.w	r2, r0, r2
 810564e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8105652:	bf00      	nop
 8105654:	370c      	adds	r7, #12
 8105656:	46bd      	mov	sp, r7
 8105658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810565c:	4770      	bx	lr
 810565e:	bf00      	nop
 8105660:	e000e100 	.word	0xe000e100

08105664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8105664:	b480      	push	{r7}
 8105666:	b083      	sub	sp, #12
 8105668:	af00      	add	r7, sp, #0
 810566a:	4603      	mov	r3, r0
 810566c:	6039      	str	r1, [r7, #0]
 810566e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105670:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105674:	2b00      	cmp	r3, #0
 8105676:	db0a      	blt.n	810568e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105678:	683b      	ldr	r3, [r7, #0]
 810567a:	b2da      	uxtb	r2, r3
 810567c:	490c      	ldr	r1, [pc, #48]	; (81056b0 <__NVIC_SetPriority+0x4c>)
 810567e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105682:	0112      	lsls	r2, r2, #4
 8105684:	b2d2      	uxtb	r2, r2
 8105686:	440b      	add	r3, r1
 8105688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810568c:	e00a      	b.n	81056a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810568e:	683b      	ldr	r3, [r7, #0]
 8105690:	b2da      	uxtb	r2, r3
 8105692:	4908      	ldr	r1, [pc, #32]	; (81056b4 <__NVIC_SetPriority+0x50>)
 8105694:	88fb      	ldrh	r3, [r7, #6]
 8105696:	f003 030f 	and.w	r3, r3, #15
 810569a:	3b04      	subs	r3, #4
 810569c:	0112      	lsls	r2, r2, #4
 810569e:	b2d2      	uxtb	r2, r2
 81056a0:	440b      	add	r3, r1
 81056a2:	761a      	strb	r2, [r3, #24]
}
 81056a4:	bf00      	nop
 81056a6:	370c      	adds	r7, #12
 81056a8:	46bd      	mov	sp, r7
 81056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056ae:	4770      	bx	lr
 81056b0:	e000e100 	.word	0xe000e100
 81056b4:	e000ed00 	.word	0xe000ed00

081056b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81056b8:	b480      	push	{r7}
 81056ba:	b089      	sub	sp, #36	; 0x24
 81056bc:	af00      	add	r7, sp, #0
 81056be:	60f8      	str	r0, [r7, #12]
 81056c0:	60b9      	str	r1, [r7, #8]
 81056c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81056c4:	68fb      	ldr	r3, [r7, #12]
 81056c6:	f003 0307 	and.w	r3, r3, #7
 81056ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81056cc:	69fb      	ldr	r3, [r7, #28]
 81056ce:	f1c3 0307 	rsb	r3, r3, #7
 81056d2:	2b04      	cmp	r3, #4
 81056d4:	bf28      	it	cs
 81056d6:	2304      	movcs	r3, #4
 81056d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81056da:	69fb      	ldr	r3, [r7, #28]
 81056dc:	3304      	adds	r3, #4
 81056de:	2b06      	cmp	r3, #6
 81056e0:	d902      	bls.n	81056e8 <NVIC_EncodePriority+0x30>
 81056e2:	69fb      	ldr	r3, [r7, #28]
 81056e4:	3b03      	subs	r3, #3
 81056e6:	e000      	b.n	81056ea <NVIC_EncodePriority+0x32>
 81056e8:	2300      	movs	r3, #0
 81056ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81056ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81056f0:	69bb      	ldr	r3, [r7, #24]
 81056f2:	fa02 f303 	lsl.w	r3, r2, r3
 81056f6:	43da      	mvns	r2, r3
 81056f8:	68bb      	ldr	r3, [r7, #8]
 81056fa:	401a      	ands	r2, r3
 81056fc:	697b      	ldr	r3, [r7, #20]
 81056fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8105700:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8105704:	697b      	ldr	r3, [r7, #20]
 8105706:	fa01 f303 	lsl.w	r3, r1, r3
 810570a:	43d9      	mvns	r1, r3
 810570c:	687b      	ldr	r3, [r7, #4]
 810570e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105710:	4313      	orrs	r3, r2
         );
}
 8105712:	4618      	mov	r0, r3
 8105714:	3724      	adds	r7, #36	; 0x24
 8105716:	46bd      	mov	sp, r7
 8105718:	f85d 7b04 	ldr.w	r7, [sp], #4
 810571c:	4770      	bx	lr
	...

08105720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8105720:	b580      	push	{r7, lr}
 8105722:	b082      	sub	sp, #8
 8105724:	af00      	add	r7, sp, #0
 8105726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8105728:	687b      	ldr	r3, [r7, #4]
 810572a:	3b01      	subs	r3, #1
 810572c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105730:	d301      	bcc.n	8105736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8105732:	2301      	movs	r3, #1
 8105734:	e00f      	b.n	8105756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8105736:	4a0a      	ldr	r2, [pc, #40]	; (8105760 <SysTick_Config+0x40>)
 8105738:	687b      	ldr	r3, [r7, #4]
 810573a:	3b01      	subs	r3, #1
 810573c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810573e:	210f      	movs	r1, #15
 8105740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8105744:	f7ff ff8e 	bl	8105664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8105748:	4b05      	ldr	r3, [pc, #20]	; (8105760 <SysTick_Config+0x40>)
 810574a:	2200      	movs	r2, #0
 810574c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810574e:	4b04      	ldr	r3, [pc, #16]	; (8105760 <SysTick_Config+0x40>)
 8105750:	2207      	movs	r2, #7
 8105752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8105754:	2300      	movs	r3, #0
}
 8105756:	4618      	mov	r0, r3
 8105758:	3708      	adds	r7, #8
 810575a:	46bd      	mov	sp, r7
 810575c:	bd80      	pop	{r7, pc}
 810575e:	bf00      	nop
 8105760:	e000e010 	.word	0xe000e010

08105764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8105764:	b580      	push	{r7, lr}
 8105766:	b082      	sub	sp, #8
 8105768:	af00      	add	r7, sp, #0
 810576a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810576c:	6878      	ldr	r0, [r7, #4]
 810576e:	f7ff ff29 	bl	81055c4 <__NVIC_SetPriorityGrouping>
}
 8105772:	bf00      	nop
 8105774:	3708      	adds	r7, #8
 8105776:	46bd      	mov	sp, r7
 8105778:	bd80      	pop	{r7, pc}

0810577a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810577a:	b580      	push	{r7, lr}
 810577c:	b086      	sub	sp, #24
 810577e:	af00      	add	r7, sp, #0
 8105780:	4603      	mov	r3, r0
 8105782:	60b9      	str	r1, [r7, #8]
 8105784:	607a      	str	r2, [r7, #4]
 8105786:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8105788:	f7ff ff40 	bl	810560c <__NVIC_GetPriorityGrouping>
 810578c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810578e:	687a      	ldr	r2, [r7, #4]
 8105790:	68b9      	ldr	r1, [r7, #8]
 8105792:	6978      	ldr	r0, [r7, #20]
 8105794:	f7ff ff90 	bl	81056b8 <NVIC_EncodePriority>
 8105798:	4602      	mov	r2, r0
 810579a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810579e:	4611      	mov	r1, r2
 81057a0:	4618      	mov	r0, r3
 81057a2:	f7ff ff5f 	bl	8105664 <__NVIC_SetPriority>
}
 81057a6:	bf00      	nop
 81057a8:	3718      	adds	r7, #24
 81057aa:	46bd      	mov	sp, r7
 81057ac:	bd80      	pop	{r7, pc}

081057ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81057ae:	b580      	push	{r7, lr}
 81057b0:	b082      	sub	sp, #8
 81057b2:	af00      	add	r7, sp, #0
 81057b4:	4603      	mov	r3, r0
 81057b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81057b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81057bc:	4618      	mov	r0, r3
 81057be:	f7ff ff33 	bl	8105628 <__NVIC_EnableIRQ>
}
 81057c2:	bf00      	nop
 81057c4:	3708      	adds	r7, #8
 81057c6:	46bd      	mov	sp, r7
 81057c8:	bd80      	pop	{r7, pc}

081057ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81057ca:	b580      	push	{r7, lr}
 81057cc:	b082      	sub	sp, #8
 81057ce:	af00      	add	r7, sp, #0
 81057d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81057d2:	6878      	ldr	r0, [r7, #4]
 81057d4:	f7ff ffa4 	bl	8105720 <SysTick_Config>
 81057d8:	4603      	mov	r3, r0
}
 81057da:	4618      	mov	r0, r3
 81057dc:	3708      	adds	r7, #8
 81057de:	46bd      	mov	sp, r7
 81057e0:	bd80      	pop	{r7, pc}
	...

081057e4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81057e4:	b480      	push	{r7}
 81057e6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81057e8:	4b07      	ldr	r3, [pc, #28]	; (8105808 <HAL_GetCurrentCPUID+0x24>)
 81057ea:	681b      	ldr	r3, [r3, #0]
 81057ec:	091b      	lsrs	r3, r3, #4
 81057ee:	f003 030f 	and.w	r3, r3, #15
 81057f2:	2b07      	cmp	r3, #7
 81057f4:	d101      	bne.n	81057fa <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81057f6:	2303      	movs	r3, #3
 81057f8:	e000      	b.n	81057fc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81057fa:	2301      	movs	r3, #1
  }
}
 81057fc:	4618      	mov	r0, r3
 81057fe:	46bd      	mov	sp, r7
 8105800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105804:	4770      	bx	lr
 8105806:	bf00      	nop
 8105808:	e000ed00 	.word	0xe000ed00

0810580c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 810580c:	b580      	push	{r7, lr}
 810580e:	b086      	sub	sp, #24
 8105810:	af00      	add	r7, sp, #0
 8105812:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8105814:	f7ff feca 	bl	81055ac <HAL_GetTick>
 8105818:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810581a:	687b      	ldr	r3, [r7, #4]
 810581c:	2b00      	cmp	r3, #0
 810581e:	d101      	bne.n	8105824 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8105820:	2301      	movs	r3, #1
 8105822:	e314      	b.n	8105e4e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105824:	687b      	ldr	r3, [r7, #4]
 8105826:	681b      	ldr	r3, [r3, #0]
 8105828:	4a66      	ldr	r2, [pc, #408]	; (81059c4 <HAL_DMA_Init+0x1b8>)
 810582a:	4293      	cmp	r3, r2
 810582c:	d04a      	beq.n	81058c4 <HAL_DMA_Init+0xb8>
 810582e:	687b      	ldr	r3, [r7, #4]
 8105830:	681b      	ldr	r3, [r3, #0]
 8105832:	4a65      	ldr	r2, [pc, #404]	; (81059c8 <HAL_DMA_Init+0x1bc>)
 8105834:	4293      	cmp	r3, r2
 8105836:	d045      	beq.n	81058c4 <HAL_DMA_Init+0xb8>
 8105838:	687b      	ldr	r3, [r7, #4]
 810583a:	681b      	ldr	r3, [r3, #0]
 810583c:	4a63      	ldr	r2, [pc, #396]	; (81059cc <HAL_DMA_Init+0x1c0>)
 810583e:	4293      	cmp	r3, r2
 8105840:	d040      	beq.n	81058c4 <HAL_DMA_Init+0xb8>
 8105842:	687b      	ldr	r3, [r7, #4]
 8105844:	681b      	ldr	r3, [r3, #0]
 8105846:	4a62      	ldr	r2, [pc, #392]	; (81059d0 <HAL_DMA_Init+0x1c4>)
 8105848:	4293      	cmp	r3, r2
 810584a:	d03b      	beq.n	81058c4 <HAL_DMA_Init+0xb8>
 810584c:	687b      	ldr	r3, [r7, #4]
 810584e:	681b      	ldr	r3, [r3, #0]
 8105850:	4a60      	ldr	r2, [pc, #384]	; (81059d4 <HAL_DMA_Init+0x1c8>)
 8105852:	4293      	cmp	r3, r2
 8105854:	d036      	beq.n	81058c4 <HAL_DMA_Init+0xb8>
 8105856:	687b      	ldr	r3, [r7, #4]
 8105858:	681b      	ldr	r3, [r3, #0]
 810585a:	4a5f      	ldr	r2, [pc, #380]	; (81059d8 <HAL_DMA_Init+0x1cc>)
 810585c:	4293      	cmp	r3, r2
 810585e:	d031      	beq.n	81058c4 <HAL_DMA_Init+0xb8>
 8105860:	687b      	ldr	r3, [r7, #4]
 8105862:	681b      	ldr	r3, [r3, #0]
 8105864:	4a5d      	ldr	r2, [pc, #372]	; (81059dc <HAL_DMA_Init+0x1d0>)
 8105866:	4293      	cmp	r3, r2
 8105868:	d02c      	beq.n	81058c4 <HAL_DMA_Init+0xb8>
 810586a:	687b      	ldr	r3, [r7, #4]
 810586c:	681b      	ldr	r3, [r3, #0]
 810586e:	4a5c      	ldr	r2, [pc, #368]	; (81059e0 <HAL_DMA_Init+0x1d4>)
 8105870:	4293      	cmp	r3, r2
 8105872:	d027      	beq.n	81058c4 <HAL_DMA_Init+0xb8>
 8105874:	687b      	ldr	r3, [r7, #4]
 8105876:	681b      	ldr	r3, [r3, #0]
 8105878:	4a5a      	ldr	r2, [pc, #360]	; (81059e4 <HAL_DMA_Init+0x1d8>)
 810587a:	4293      	cmp	r3, r2
 810587c:	d022      	beq.n	81058c4 <HAL_DMA_Init+0xb8>
 810587e:	687b      	ldr	r3, [r7, #4]
 8105880:	681b      	ldr	r3, [r3, #0]
 8105882:	4a59      	ldr	r2, [pc, #356]	; (81059e8 <HAL_DMA_Init+0x1dc>)
 8105884:	4293      	cmp	r3, r2
 8105886:	d01d      	beq.n	81058c4 <HAL_DMA_Init+0xb8>
 8105888:	687b      	ldr	r3, [r7, #4]
 810588a:	681b      	ldr	r3, [r3, #0]
 810588c:	4a57      	ldr	r2, [pc, #348]	; (81059ec <HAL_DMA_Init+0x1e0>)
 810588e:	4293      	cmp	r3, r2
 8105890:	d018      	beq.n	81058c4 <HAL_DMA_Init+0xb8>
 8105892:	687b      	ldr	r3, [r7, #4]
 8105894:	681b      	ldr	r3, [r3, #0]
 8105896:	4a56      	ldr	r2, [pc, #344]	; (81059f0 <HAL_DMA_Init+0x1e4>)
 8105898:	4293      	cmp	r3, r2
 810589a:	d013      	beq.n	81058c4 <HAL_DMA_Init+0xb8>
 810589c:	687b      	ldr	r3, [r7, #4]
 810589e:	681b      	ldr	r3, [r3, #0]
 81058a0:	4a54      	ldr	r2, [pc, #336]	; (81059f4 <HAL_DMA_Init+0x1e8>)
 81058a2:	4293      	cmp	r3, r2
 81058a4:	d00e      	beq.n	81058c4 <HAL_DMA_Init+0xb8>
 81058a6:	687b      	ldr	r3, [r7, #4]
 81058a8:	681b      	ldr	r3, [r3, #0]
 81058aa:	4a53      	ldr	r2, [pc, #332]	; (81059f8 <HAL_DMA_Init+0x1ec>)
 81058ac:	4293      	cmp	r3, r2
 81058ae:	d009      	beq.n	81058c4 <HAL_DMA_Init+0xb8>
 81058b0:	687b      	ldr	r3, [r7, #4]
 81058b2:	681b      	ldr	r3, [r3, #0]
 81058b4:	4a51      	ldr	r2, [pc, #324]	; (81059fc <HAL_DMA_Init+0x1f0>)
 81058b6:	4293      	cmp	r3, r2
 81058b8:	d004      	beq.n	81058c4 <HAL_DMA_Init+0xb8>
 81058ba:	687b      	ldr	r3, [r7, #4]
 81058bc:	681b      	ldr	r3, [r3, #0]
 81058be:	4a50      	ldr	r2, [pc, #320]	; (8105a00 <HAL_DMA_Init+0x1f4>)
 81058c0:	4293      	cmp	r3, r2
 81058c2:	d101      	bne.n	81058c8 <HAL_DMA_Init+0xbc>
 81058c4:	2301      	movs	r3, #1
 81058c6:	e000      	b.n	81058ca <HAL_DMA_Init+0xbe>
 81058c8:	2300      	movs	r3, #0
 81058ca:	2b00      	cmp	r3, #0
 81058cc:	f000 813b 	beq.w	8105b46 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	2202      	movs	r2, #2
 81058d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81058d8:	687b      	ldr	r3, [r7, #4]
 81058da:	2200      	movs	r2, #0
 81058dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	681b      	ldr	r3, [r3, #0]
 81058e4:	4a37      	ldr	r2, [pc, #220]	; (81059c4 <HAL_DMA_Init+0x1b8>)
 81058e6:	4293      	cmp	r3, r2
 81058e8:	d04a      	beq.n	8105980 <HAL_DMA_Init+0x174>
 81058ea:	687b      	ldr	r3, [r7, #4]
 81058ec:	681b      	ldr	r3, [r3, #0]
 81058ee:	4a36      	ldr	r2, [pc, #216]	; (81059c8 <HAL_DMA_Init+0x1bc>)
 81058f0:	4293      	cmp	r3, r2
 81058f2:	d045      	beq.n	8105980 <HAL_DMA_Init+0x174>
 81058f4:	687b      	ldr	r3, [r7, #4]
 81058f6:	681b      	ldr	r3, [r3, #0]
 81058f8:	4a34      	ldr	r2, [pc, #208]	; (81059cc <HAL_DMA_Init+0x1c0>)
 81058fa:	4293      	cmp	r3, r2
 81058fc:	d040      	beq.n	8105980 <HAL_DMA_Init+0x174>
 81058fe:	687b      	ldr	r3, [r7, #4]
 8105900:	681b      	ldr	r3, [r3, #0]
 8105902:	4a33      	ldr	r2, [pc, #204]	; (81059d0 <HAL_DMA_Init+0x1c4>)
 8105904:	4293      	cmp	r3, r2
 8105906:	d03b      	beq.n	8105980 <HAL_DMA_Init+0x174>
 8105908:	687b      	ldr	r3, [r7, #4]
 810590a:	681b      	ldr	r3, [r3, #0]
 810590c:	4a31      	ldr	r2, [pc, #196]	; (81059d4 <HAL_DMA_Init+0x1c8>)
 810590e:	4293      	cmp	r3, r2
 8105910:	d036      	beq.n	8105980 <HAL_DMA_Init+0x174>
 8105912:	687b      	ldr	r3, [r7, #4]
 8105914:	681b      	ldr	r3, [r3, #0]
 8105916:	4a30      	ldr	r2, [pc, #192]	; (81059d8 <HAL_DMA_Init+0x1cc>)
 8105918:	4293      	cmp	r3, r2
 810591a:	d031      	beq.n	8105980 <HAL_DMA_Init+0x174>
 810591c:	687b      	ldr	r3, [r7, #4]
 810591e:	681b      	ldr	r3, [r3, #0]
 8105920:	4a2e      	ldr	r2, [pc, #184]	; (81059dc <HAL_DMA_Init+0x1d0>)
 8105922:	4293      	cmp	r3, r2
 8105924:	d02c      	beq.n	8105980 <HAL_DMA_Init+0x174>
 8105926:	687b      	ldr	r3, [r7, #4]
 8105928:	681b      	ldr	r3, [r3, #0]
 810592a:	4a2d      	ldr	r2, [pc, #180]	; (81059e0 <HAL_DMA_Init+0x1d4>)
 810592c:	4293      	cmp	r3, r2
 810592e:	d027      	beq.n	8105980 <HAL_DMA_Init+0x174>
 8105930:	687b      	ldr	r3, [r7, #4]
 8105932:	681b      	ldr	r3, [r3, #0]
 8105934:	4a2b      	ldr	r2, [pc, #172]	; (81059e4 <HAL_DMA_Init+0x1d8>)
 8105936:	4293      	cmp	r3, r2
 8105938:	d022      	beq.n	8105980 <HAL_DMA_Init+0x174>
 810593a:	687b      	ldr	r3, [r7, #4]
 810593c:	681b      	ldr	r3, [r3, #0]
 810593e:	4a2a      	ldr	r2, [pc, #168]	; (81059e8 <HAL_DMA_Init+0x1dc>)
 8105940:	4293      	cmp	r3, r2
 8105942:	d01d      	beq.n	8105980 <HAL_DMA_Init+0x174>
 8105944:	687b      	ldr	r3, [r7, #4]
 8105946:	681b      	ldr	r3, [r3, #0]
 8105948:	4a28      	ldr	r2, [pc, #160]	; (81059ec <HAL_DMA_Init+0x1e0>)
 810594a:	4293      	cmp	r3, r2
 810594c:	d018      	beq.n	8105980 <HAL_DMA_Init+0x174>
 810594e:	687b      	ldr	r3, [r7, #4]
 8105950:	681b      	ldr	r3, [r3, #0]
 8105952:	4a27      	ldr	r2, [pc, #156]	; (81059f0 <HAL_DMA_Init+0x1e4>)
 8105954:	4293      	cmp	r3, r2
 8105956:	d013      	beq.n	8105980 <HAL_DMA_Init+0x174>
 8105958:	687b      	ldr	r3, [r7, #4]
 810595a:	681b      	ldr	r3, [r3, #0]
 810595c:	4a25      	ldr	r2, [pc, #148]	; (81059f4 <HAL_DMA_Init+0x1e8>)
 810595e:	4293      	cmp	r3, r2
 8105960:	d00e      	beq.n	8105980 <HAL_DMA_Init+0x174>
 8105962:	687b      	ldr	r3, [r7, #4]
 8105964:	681b      	ldr	r3, [r3, #0]
 8105966:	4a24      	ldr	r2, [pc, #144]	; (81059f8 <HAL_DMA_Init+0x1ec>)
 8105968:	4293      	cmp	r3, r2
 810596a:	d009      	beq.n	8105980 <HAL_DMA_Init+0x174>
 810596c:	687b      	ldr	r3, [r7, #4]
 810596e:	681b      	ldr	r3, [r3, #0]
 8105970:	4a22      	ldr	r2, [pc, #136]	; (81059fc <HAL_DMA_Init+0x1f0>)
 8105972:	4293      	cmp	r3, r2
 8105974:	d004      	beq.n	8105980 <HAL_DMA_Init+0x174>
 8105976:	687b      	ldr	r3, [r7, #4]
 8105978:	681b      	ldr	r3, [r3, #0]
 810597a:	4a21      	ldr	r2, [pc, #132]	; (8105a00 <HAL_DMA_Init+0x1f4>)
 810597c:	4293      	cmp	r3, r2
 810597e:	d108      	bne.n	8105992 <HAL_DMA_Init+0x186>
 8105980:	687b      	ldr	r3, [r7, #4]
 8105982:	681b      	ldr	r3, [r3, #0]
 8105984:	681a      	ldr	r2, [r3, #0]
 8105986:	687b      	ldr	r3, [r7, #4]
 8105988:	681b      	ldr	r3, [r3, #0]
 810598a:	f022 0201 	bic.w	r2, r2, #1
 810598e:	601a      	str	r2, [r3, #0]
 8105990:	e007      	b.n	81059a2 <HAL_DMA_Init+0x196>
 8105992:	687b      	ldr	r3, [r7, #4]
 8105994:	681b      	ldr	r3, [r3, #0]
 8105996:	681a      	ldr	r2, [r3, #0]
 8105998:	687b      	ldr	r3, [r7, #4]
 810599a:	681b      	ldr	r3, [r3, #0]
 810599c:	f022 0201 	bic.w	r2, r2, #1
 81059a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81059a2:	e02f      	b.n	8105a04 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81059a4:	f7ff fe02 	bl	81055ac <HAL_GetTick>
 81059a8:	4602      	mov	r2, r0
 81059aa:	693b      	ldr	r3, [r7, #16]
 81059ac:	1ad3      	subs	r3, r2, r3
 81059ae:	2b05      	cmp	r3, #5
 81059b0:	d928      	bls.n	8105a04 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81059b2:	687b      	ldr	r3, [r7, #4]
 81059b4:	2220      	movs	r2, #32
 81059b6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81059b8:	687b      	ldr	r3, [r7, #4]
 81059ba:	2203      	movs	r2, #3
 81059bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81059c0:	2301      	movs	r3, #1
 81059c2:	e244      	b.n	8105e4e <HAL_DMA_Init+0x642>
 81059c4:	40020010 	.word	0x40020010
 81059c8:	40020028 	.word	0x40020028
 81059cc:	40020040 	.word	0x40020040
 81059d0:	40020058 	.word	0x40020058
 81059d4:	40020070 	.word	0x40020070
 81059d8:	40020088 	.word	0x40020088
 81059dc:	400200a0 	.word	0x400200a0
 81059e0:	400200b8 	.word	0x400200b8
 81059e4:	40020410 	.word	0x40020410
 81059e8:	40020428 	.word	0x40020428
 81059ec:	40020440 	.word	0x40020440
 81059f0:	40020458 	.word	0x40020458
 81059f4:	40020470 	.word	0x40020470
 81059f8:	40020488 	.word	0x40020488
 81059fc:	400204a0 	.word	0x400204a0
 8105a00:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	681b      	ldr	r3, [r3, #0]
 8105a08:	681b      	ldr	r3, [r3, #0]
 8105a0a:	f003 0301 	and.w	r3, r3, #1
 8105a0e:	2b00      	cmp	r3, #0
 8105a10:	d1c8      	bne.n	81059a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8105a12:	687b      	ldr	r3, [r7, #4]
 8105a14:	681b      	ldr	r3, [r3, #0]
 8105a16:	681b      	ldr	r3, [r3, #0]
 8105a18:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8105a1a:	697a      	ldr	r2, [r7, #20]
 8105a1c:	4b84      	ldr	r3, [pc, #528]	; (8105c30 <HAL_DMA_Init+0x424>)
 8105a1e:	4013      	ands	r3, r2
 8105a20:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8105a22:	687b      	ldr	r3, [r7, #4]
 8105a24:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8105a26:	687b      	ldr	r3, [r7, #4]
 8105a28:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8105a2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	691b      	ldr	r3, [r3, #16]
 8105a30:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8105a32:	687b      	ldr	r3, [r7, #4]
 8105a34:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8105a36:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	699b      	ldr	r3, [r3, #24]
 8105a3c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8105a3e:	687b      	ldr	r3, [r7, #4]
 8105a40:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8105a42:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8105a44:	687b      	ldr	r3, [r7, #4]
 8105a46:	6a1b      	ldr	r3, [r3, #32]
 8105a48:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8105a4a:	697a      	ldr	r2, [r7, #20]
 8105a4c:	4313      	orrs	r3, r2
 8105a4e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105a54:	2b04      	cmp	r3, #4
 8105a56:	d107      	bne.n	8105a68 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8105a58:	687b      	ldr	r3, [r7, #4]
 8105a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105a60:	4313      	orrs	r3, r2
 8105a62:	697a      	ldr	r2, [r7, #20]
 8105a64:	4313      	orrs	r3, r2
 8105a66:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8105a68:	4b72      	ldr	r3, [pc, #456]	; (8105c34 <HAL_DMA_Init+0x428>)
 8105a6a:	681b      	ldr	r3, [r3, #0]
 8105a6c:	0c1b      	lsrs	r3, r3, #16
 8105a6e:	041b      	lsls	r3, r3, #16
 8105a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105a74:	d328      	bcc.n	8105ac8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8105a76:	687b      	ldr	r3, [r7, #4]
 8105a78:	685b      	ldr	r3, [r3, #4]
 8105a7a:	2b28      	cmp	r3, #40	; 0x28
 8105a7c:	d903      	bls.n	8105a86 <HAL_DMA_Init+0x27a>
 8105a7e:	687b      	ldr	r3, [r7, #4]
 8105a80:	685b      	ldr	r3, [r3, #4]
 8105a82:	2b2e      	cmp	r3, #46	; 0x2e
 8105a84:	d917      	bls.n	8105ab6 <HAL_DMA_Init+0x2aa>
 8105a86:	687b      	ldr	r3, [r7, #4]
 8105a88:	685b      	ldr	r3, [r3, #4]
 8105a8a:	2b3e      	cmp	r3, #62	; 0x3e
 8105a8c:	d903      	bls.n	8105a96 <HAL_DMA_Init+0x28a>
 8105a8e:	687b      	ldr	r3, [r7, #4]
 8105a90:	685b      	ldr	r3, [r3, #4]
 8105a92:	2b42      	cmp	r3, #66	; 0x42
 8105a94:	d90f      	bls.n	8105ab6 <HAL_DMA_Init+0x2aa>
 8105a96:	687b      	ldr	r3, [r7, #4]
 8105a98:	685b      	ldr	r3, [r3, #4]
 8105a9a:	2b46      	cmp	r3, #70	; 0x46
 8105a9c:	d903      	bls.n	8105aa6 <HAL_DMA_Init+0x29a>
 8105a9e:	687b      	ldr	r3, [r7, #4]
 8105aa0:	685b      	ldr	r3, [r3, #4]
 8105aa2:	2b48      	cmp	r3, #72	; 0x48
 8105aa4:	d907      	bls.n	8105ab6 <HAL_DMA_Init+0x2aa>
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	685b      	ldr	r3, [r3, #4]
 8105aaa:	2b4e      	cmp	r3, #78	; 0x4e
 8105aac:	d905      	bls.n	8105aba <HAL_DMA_Init+0x2ae>
 8105aae:	687b      	ldr	r3, [r7, #4]
 8105ab0:	685b      	ldr	r3, [r3, #4]
 8105ab2:	2b52      	cmp	r3, #82	; 0x52
 8105ab4:	d801      	bhi.n	8105aba <HAL_DMA_Init+0x2ae>
 8105ab6:	2301      	movs	r3, #1
 8105ab8:	e000      	b.n	8105abc <HAL_DMA_Init+0x2b0>
 8105aba:	2300      	movs	r3, #0
 8105abc:	2b00      	cmp	r3, #0
 8105abe:	d003      	beq.n	8105ac8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8105ac0:	697b      	ldr	r3, [r7, #20]
 8105ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105ac6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8105ac8:	687b      	ldr	r3, [r7, #4]
 8105aca:	681b      	ldr	r3, [r3, #0]
 8105acc:	697a      	ldr	r2, [r7, #20]
 8105ace:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8105ad0:	687b      	ldr	r3, [r7, #4]
 8105ad2:	681b      	ldr	r3, [r3, #0]
 8105ad4:	695b      	ldr	r3, [r3, #20]
 8105ad6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8105ad8:	697b      	ldr	r3, [r7, #20]
 8105ada:	f023 0307 	bic.w	r3, r3, #7
 8105ade:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8105ae0:	687b      	ldr	r3, [r7, #4]
 8105ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105ae4:	697a      	ldr	r2, [r7, #20]
 8105ae6:	4313      	orrs	r3, r2
 8105ae8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8105aea:	687b      	ldr	r3, [r7, #4]
 8105aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105aee:	2b04      	cmp	r3, #4
 8105af0:	d117      	bne.n	8105b22 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8105af2:	687b      	ldr	r3, [r7, #4]
 8105af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105af6:	697a      	ldr	r2, [r7, #20]
 8105af8:	4313      	orrs	r3, r2
 8105afa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b00:	2b00      	cmp	r3, #0
 8105b02:	d00e      	beq.n	8105b22 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8105b04:	6878      	ldr	r0, [r7, #4]
 8105b06:	f001 fdcd 	bl	81076a4 <DMA_CheckFifoParam>
 8105b0a:	4603      	mov	r3, r0
 8105b0c:	2b00      	cmp	r3, #0
 8105b0e:	d008      	beq.n	8105b22 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8105b10:	687b      	ldr	r3, [r7, #4]
 8105b12:	2240      	movs	r2, #64	; 0x40
 8105b14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8105b16:	687b      	ldr	r3, [r7, #4]
 8105b18:	2201      	movs	r2, #1
 8105b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8105b1e:	2301      	movs	r3, #1
 8105b20:	e195      	b.n	8105e4e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8105b22:	687b      	ldr	r3, [r7, #4]
 8105b24:	681b      	ldr	r3, [r3, #0]
 8105b26:	697a      	ldr	r2, [r7, #20]
 8105b28:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8105b2a:	6878      	ldr	r0, [r7, #4]
 8105b2c:	f001 fd08 	bl	8107540 <DMA_CalcBaseAndBitshift>
 8105b30:	4603      	mov	r3, r0
 8105b32:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105b34:	687b      	ldr	r3, [r7, #4]
 8105b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105b38:	f003 031f 	and.w	r3, r3, #31
 8105b3c:	223f      	movs	r2, #63	; 0x3f
 8105b3e:	409a      	lsls	r2, r3
 8105b40:	68bb      	ldr	r3, [r7, #8]
 8105b42:	609a      	str	r2, [r3, #8]
 8105b44:	e0cb      	b.n	8105cde <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	681b      	ldr	r3, [r3, #0]
 8105b4a:	4a3b      	ldr	r2, [pc, #236]	; (8105c38 <HAL_DMA_Init+0x42c>)
 8105b4c:	4293      	cmp	r3, r2
 8105b4e:	d022      	beq.n	8105b96 <HAL_DMA_Init+0x38a>
 8105b50:	687b      	ldr	r3, [r7, #4]
 8105b52:	681b      	ldr	r3, [r3, #0]
 8105b54:	4a39      	ldr	r2, [pc, #228]	; (8105c3c <HAL_DMA_Init+0x430>)
 8105b56:	4293      	cmp	r3, r2
 8105b58:	d01d      	beq.n	8105b96 <HAL_DMA_Init+0x38a>
 8105b5a:	687b      	ldr	r3, [r7, #4]
 8105b5c:	681b      	ldr	r3, [r3, #0]
 8105b5e:	4a38      	ldr	r2, [pc, #224]	; (8105c40 <HAL_DMA_Init+0x434>)
 8105b60:	4293      	cmp	r3, r2
 8105b62:	d018      	beq.n	8105b96 <HAL_DMA_Init+0x38a>
 8105b64:	687b      	ldr	r3, [r7, #4]
 8105b66:	681b      	ldr	r3, [r3, #0]
 8105b68:	4a36      	ldr	r2, [pc, #216]	; (8105c44 <HAL_DMA_Init+0x438>)
 8105b6a:	4293      	cmp	r3, r2
 8105b6c:	d013      	beq.n	8105b96 <HAL_DMA_Init+0x38a>
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	681b      	ldr	r3, [r3, #0]
 8105b72:	4a35      	ldr	r2, [pc, #212]	; (8105c48 <HAL_DMA_Init+0x43c>)
 8105b74:	4293      	cmp	r3, r2
 8105b76:	d00e      	beq.n	8105b96 <HAL_DMA_Init+0x38a>
 8105b78:	687b      	ldr	r3, [r7, #4]
 8105b7a:	681b      	ldr	r3, [r3, #0]
 8105b7c:	4a33      	ldr	r2, [pc, #204]	; (8105c4c <HAL_DMA_Init+0x440>)
 8105b7e:	4293      	cmp	r3, r2
 8105b80:	d009      	beq.n	8105b96 <HAL_DMA_Init+0x38a>
 8105b82:	687b      	ldr	r3, [r7, #4]
 8105b84:	681b      	ldr	r3, [r3, #0]
 8105b86:	4a32      	ldr	r2, [pc, #200]	; (8105c50 <HAL_DMA_Init+0x444>)
 8105b88:	4293      	cmp	r3, r2
 8105b8a:	d004      	beq.n	8105b96 <HAL_DMA_Init+0x38a>
 8105b8c:	687b      	ldr	r3, [r7, #4]
 8105b8e:	681b      	ldr	r3, [r3, #0]
 8105b90:	4a30      	ldr	r2, [pc, #192]	; (8105c54 <HAL_DMA_Init+0x448>)
 8105b92:	4293      	cmp	r3, r2
 8105b94:	d101      	bne.n	8105b9a <HAL_DMA_Init+0x38e>
 8105b96:	2301      	movs	r3, #1
 8105b98:	e000      	b.n	8105b9c <HAL_DMA_Init+0x390>
 8105b9a:	2300      	movs	r3, #0
 8105b9c:	2b00      	cmp	r3, #0
 8105b9e:	f000 8095 	beq.w	8105ccc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8105ba2:	687b      	ldr	r3, [r7, #4]
 8105ba4:	681b      	ldr	r3, [r3, #0]
 8105ba6:	4a24      	ldr	r2, [pc, #144]	; (8105c38 <HAL_DMA_Init+0x42c>)
 8105ba8:	4293      	cmp	r3, r2
 8105baa:	d021      	beq.n	8105bf0 <HAL_DMA_Init+0x3e4>
 8105bac:	687b      	ldr	r3, [r7, #4]
 8105bae:	681b      	ldr	r3, [r3, #0]
 8105bb0:	4a22      	ldr	r2, [pc, #136]	; (8105c3c <HAL_DMA_Init+0x430>)
 8105bb2:	4293      	cmp	r3, r2
 8105bb4:	d01c      	beq.n	8105bf0 <HAL_DMA_Init+0x3e4>
 8105bb6:	687b      	ldr	r3, [r7, #4]
 8105bb8:	681b      	ldr	r3, [r3, #0]
 8105bba:	4a21      	ldr	r2, [pc, #132]	; (8105c40 <HAL_DMA_Init+0x434>)
 8105bbc:	4293      	cmp	r3, r2
 8105bbe:	d017      	beq.n	8105bf0 <HAL_DMA_Init+0x3e4>
 8105bc0:	687b      	ldr	r3, [r7, #4]
 8105bc2:	681b      	ldr	r3, [r3, #0]
 8105bc4:	4a1f      	ldr	r2, [pc, #124]	; (8105c44 <HAL_DMA_Init+0x438>)
 8105bc6:	4293      	cmp	r3, r2
 8105bc8:	d012      	beq.n	8105bf0 <HAL_DMA_Init+0x3e4>
 8105bca:	687b      	ldr	r3, [r7, #4]
 8105bcc:	681b      	ldr	r3, [r3, #0]
 8105bce:	4a1e      	ldr	r2, [pc, #120]	; (8105c48 <HAL_DMA_Init+0x43c>)
 8105bd0:	4293      	cmp	r3, r2
 8105bd2:	d00d      	beq.n	8105bf0 <HAL_DMA_Init+0x3e4>
 8105bd4:	687b      	ldr	r3, [r7, #4]
 8105bd6:	681b      	ldr	r3, [r3, #0]
 8105bd8:	4a1c      	ldr	r2, [pc, #112]	; (8105c4c <HAL_DMA_Init+0x440>)
 8105bda:	4293      	cmp	r3, r2
 8105bdc:	d008      	beq.n	8105bf0 <HAL_DMA_Init+0x3e4>
 8105bde:	687b      	ldr	r3, [r7, #4]
 8105be0:	681b      	ldr	r3, [r3, #0]
 8105be2:	4a1b      	ldr	r2, [pc, #108]	; (8105c50 <HAL_DMA_Init+0x444>)
 8105be4:	4293      	cmp	r3, r2
 8105be6:	d003      	beq.n	8105bf0 <HAL_DMA_Init+0x3e4>
 8105be8:	687b      	ldr	r3, [r7, #4]
 8105bea:	681b      	ldr	r3, [r3, #0]
 8105bec:	4a19      	ldr	r2, [pc, #100]	; (8105c54 <HAL_DMA_Init+0x448>)
 8105bee:	4293      	cmp	r3, r2
 8105bf0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8105bf2:	687b      	ldr	r3, [r7, #4]
 8105bf4:	2202      	movs	r2, #2
 8105bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8105bfa:	687b      	ldr	r3, [r7, #4]
 8105bfc:	2200      	movs	r2, #0
 8105bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8105c02:	687b      	ldr	r3, [r7, #4]
 8105c04:	681b      	ldr	r3, [r3, #0]
 8105c06:	681b      	ldr	r3, [r3, #0]
 8105c08:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8105c0a:	697b      	ldr	r3, [r7, #20]
 8105c0c:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8105c10:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8105c14:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8105c16:	687b      	ldr	r3, [r7, #4]
 8105c18:	689b      	ldr	r3, [r3, #8]
 8105c1a:	2b40      	cmp	r3, #64	; 0x40
 8105c1c:	d01c      	beq.n	8105c58 <HAL_DMA_Init+0x44c>
 8105c1e:	687b      	ldr	r3, [r7, #4]
 8105c20:	689b      	ldr	r3, [r3, #8]
 8105c22:	2b80      	cmp	r3, #128	; 0x80
 8105c24:	d102      	bne.n	8105c2c <HAL_DMA_Init+0x420>
 8105c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8105c2a:	e016      	b.n	8105c5a <HAL_DMA_Init+0x44e>
 8105c2c:	2300      	movs	r3, #0
 8105c2e:	e014      	b.n	8105c5a <HAL_DMA_Init+0x44e>
 8105c30:	fe10803f 	.word	0xfe10803f
 8105c34:	5c001000 	.word	0x5c001000
 8105c38:	58025408 	.word	0x58025408
 8105c3c:	5802541c 	.word	0x5802541c
 8105c40:	58025430 	.word	0x58025430
 8105c44:	58025444 	.word	0x58025444
 8105c48:	58025458 	.word	0x58025458
 8105c4c:	5802546c 	.word	0x5802546c
 8105c50:	58025480 	.word	0x58025480
 8105c54:	58025494 	.word	0x58025494
 8105c58:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8105c5a:	687a      	ldr	r2, [r7, #4]
 8105c5c:	68d2      	ldr	r2, [r2, #12]
 8105c5e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8105c60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8105c62:	687b      	ldr	r3, [r7, #4]
 8105c64:	691b      	ldr	r3, [r3, #16]
 8105c66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8105c68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8105c6a:	687b      	ldr	r3, [r7, #4]
 8105c6c:	695b      	ldr	r3, [r3, #20]
 8105c6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8105c70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8105c72:	687b      	ldr	r3, [r7, #4]
 8105c74:	699b      	ldr	r3, [r3, #24]
 8105c76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8105c78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8105c7a:	687b      	ldr	r3, [r7, #4]
 8105c7c:	69db      	ldr	r3, [r3, #28]
 8105c7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8105c80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8105c82:	687b      	ldr	r3, [r7, #4]
 8105c84:	6a1b      	ldr	r3, [r3, #32]
 8105c86:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8105c88:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8105c8a:	697a      	ldr	r2, [r7, #20]
 8105c8c:	4313      	orrs	r3, r2
 8105c8e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8105c90:	687b      	ldr	r3, [r7, #4]
 8105c92:	681b      	ldr	r3, [r3, #0]
 8105c94:	697a      	ldr	r2, [r7, #20]
 8105c96:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8105c98:	687b      	ldr	r3, [r7, #4]
 8105c9a:	681b      	ldr	r3, [r3, #0]
 8105c9c:	461a      	mov	r2, r3
 8105c9e:	4b6e      	ldr	r3, [pc, #440]	; (8105e58 <HAL_DMA_Init+0x64c>)
 8105ca0:	4413      	add	r3, r2
 8105ca2:	4a6e      	ldr	r2, [pc, #440]	; (8105e5c <HAL_DMA_Init+0x650>)
 8105ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8105ca8:	091b      	lsrs	r3, r3, #4
 8105caa:	009a      	lsls	r2, r3, #2
 8105cac:	687b      	ldr	r3, [r7, #4]
 8105cae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8105cb0:	6878      	ldr	r0, [r7, #4]
 8105cb2:	f001 fc45 	bl	8107540 <DMA_CalcBaseAndBitshift>
 8105cb6:	4603      	mov	r3, r0
 8105cb8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8105cba:	687b      	ldr	r3, [r7, #4]
 8105cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105cbe:	f003 031f 	and.w	r3, r3, #31
 8105cc2:	2201      	movs	r2, #1
 8105cc4:	409a      	lsls	r2, r3
 8105cc6:	68fb      	ldr	r3, [r7, #12]
 8105cc8:	605a      	str	r2, [r3, #4]
 8105cca:	e008      	b.n	8105cde <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8105ccc:	687b      	ldr	r3, [r7, #4]
 8105cce:	2240      	movs	r2, #64	; 0x40
 8105cd0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8105cd2:	687b      	ldr	r3, [r7, #4]
 8105cd4:	2203      	movs	r2, #3
 8105cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8105cda:	2301      	movs	r3, #1
 8105cdc:	e0b7      	b.n	8105e4e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105cde:	687b      	ldr	r3, [r7, #4]
 8105ce0:	681b      	ldr	r3, [r3, #0]
 8105ce2:	4a5f      	ldr	r2, [pc, #380]	; (8105e60 <HAL_DMA_Init+0x654>)
 8105ce4:	4293      	cmp	r3, r2
 8105ce6:	d072      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105ce8:	687b      	ldr	r3, [r7, #4]
 8105cea:	681b      	ldr	r3, [r3, #0]
 8105cec:	4a5d      	ldr	r2, [pc, #372]	; (8105e64 <HAL_DMA_Init+0x658>)
 8105cee:	4293      	cmp	r3, r2
 8105cf0:	d06d      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105cf2:	687b      	ldr	r3, [r7, #4]
 8105cf4:	681b      	ldr	r3, [r3, #0]
 8105cf6:	4a5c      	ldr	r2, [pc, #368]	; (8105e68 <HAL_DMA_Init+0x65c>)
 8105cf8:	4293      	cmp	r3, r2
 8105cfa:	d068      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105cfc:	687b      	ldr	r3, [r7, #4]
 8105cfe:	681b      	ldr	r3, [r3, #0]
 8105d00:	4a5a      	ldr	r2, [pc, #360]	; (8105e6c <HAL_DMA_Init+0x660>)
 8105d02:	4293      	cmp	r3, r2
 8105d04:	d063      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d06:	687b      	ldr	r3, [r7, #4]
 8105d08:	681b      	ldr	r3, [r3, #0]
 8105d0a:	4a59      	ldr	r2, [pc, #356]	; (8105e70 <HAL_DMA_Init+0x664>)
 8105d0c:	4293      	cmp	r3, r2
 8105d0e:	d05e      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d10:	687b      	ldr	r3, [r7, #4]
 8105d12:	681b      	ldr	r3, [r3, #0]
 8105d14:	4a57      	ldr	r2, [pc, #348]	; (8105e74 <HAL_DMA_Init+0x668>)
 8105d16:	4293      	cmp	r3, r2
 8105d18:	d059      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d1a:	687b      	ldr	r3, [r7, #4]
 8105d1c:	681b      	ldr	r3, [r3, #0]
 8105d1e:	4a56      	ldr	r2, [pc, #344]	; (8105e78 <HAL_DMA_Init+0x66c>)
 8105d20:	4293      	cmp	r3, r2
 8105d22:	d054      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d24:	687b      	ldr	r3, [r7, #4]
 8105d26:	681b      	ldr	r3, [r3, #0]
 8105d28:	4a54      	ldr	r2, [pc, #336]	; (8105e7c <HAL_DMA_Init+0x670>)
 8105d2a:	4293      	cmp	r3, r2
 8105d2c:	d04f      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d2e:	687b      	ldr	r3, [r7, #4]
 8105d30:	681b      	ldr	r3, [r3, #0]
 8105d32:	4a53      	ldr	r2, [pc, #332]	; (8105e80 <HAL_DMA_Init+0x674>)
 8105d34:	4293      	cmp	r3, r2
 8105d36:	d04a      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d38:	687b      	ldr	r3, [r7, #4]
 8105d3a:	681b      	ldr	r3, [r3, #0]
 8105d3c:	4a51      	ldr	r2, [pc, #324]	; (8105e84 <HAL_DMA_Init+0x678>)
 8105d3e:	4293      	cmp	r3, r2
 8105d40:	d045      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d42:	687b      	ldr	r3, [r7, #4]
 8105d44:	681b      	ldr	r3, [r3, #0]
 8105d46:	4a50      	ldr	r2, [pc, #320]	; (8105e88 <HAL_DMA_Init+0x67c>)
 8105d48:	4293      	cmp	r3, r2
 8105d4a:	d040      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d4c:	687b      	ldr	r3, [r7, #4]
 8105d4e:	681b      	ldr	r3, [r3, #0]
 8105d50:	4a4e      	ldr	r2, [pc, #312]	; (8105e8c <HAL_DMA_Init+0x680>)
 8105d52:	4293      	cmp	r3, r2
 8105d54:	d03b      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d56:	687b      	ldr	r3, [r7, #4]
 8105d58:	681b      	ldr	r3, [r3, #0]
 8105d5a:	4a4d      	ldr	r2, [pc, #308]	; (8105e90 <HAL_DMA_Init+0x684>)
 8105d5c:	4293      	cmp	r3, r2
 8105d5e:	d036      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d60:	687b      	ldr	r3, [r7, #4]
 8105d62:	681b      	ldr	r3, [r3, #0]
 8105d64:	4a4b      	ldr	r2, [pc, #300]	; (8105e94 <HAL_DMA_Init+0x688>)
 8105d66:	4293      	cmp	r3, r2
 8105d68:	d031      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d6a:	687b      	ldr	r3, [r7, #4]
 8105d6c:	681b      	ldr	r3, [r3, #0]
 8105d6e:	4a4a      	ldr	r2, [pc, #296]	; (8105e98 <HAL_DMA_Init+0x68c>)
 8105d70:	4293      	cmp	r3, r2
 8105d72:	d02c      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d74:	687b      	ldr	r3, [r7, #4]
 8105d76:	681b      	ldr	r3, [r3, #0]
 8105d78:	4a48      	ldr	r2, [pc, #288]	; (8105e9c <HAL_DMA_Init+0x690>)
 8105d7a:	4293      	cmp	r3, r2
 8105d7c:	d027      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d7e:	687b      	ldr	r3, [r7, #4]
 8105d80:	681b      	ldr	r3, [r3, #0]
 8105d82:	4a47      	ldr	r2, [pc, #284]	; (8105ea0 <HAL_DMA_Init+0x694>)
 8105d84:	4293      	cmp	r3, r2
 8105d86:	d022      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d88:	687b      	ldr	r3, [r7, #4]
 8105d8a:	681b      	ldr	r3, [r3, #0]
 8105d8c:	4a45      	ldr	r2, [pc, #276]	; (8105ea4 <HAL_DMA_Init+0x698>)
 8105d8e:	4293      	cmp	r3, r2
 8105d90:	d01d      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d92:	687b      	ldr	r3, [r7, #4]
 8105d94:	681b      	ldr	r3, [r3, #0]
 8105d96:	4a44      	ldr	r2, [pc, #272]	; (8105ea8 <HAL_DMA_Init+0x69c>)
 8105d98:	4293      	cmp	r3, r2
 8105d9a:	d018      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	681b      	ldr	r3, [r3, #0]
 8105da0:	4a42      	ldr	r2, [pc, #264]	; (8105eac <HAL_DMA_Init+0x6a0>)
 8105da2:	4293      	cmp	r3, r2
 8105da4:	d013      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105da6:	687b      	ldr	r3, [r7, #4]
 8105da8:	681b      	ldr	r3, [r3, #0]
 8105daa:	4a41      	ldr	r2, [pc, #260]	; (8105eb0 <HAL_DMA_Init+0x6a4>)
 8105dac:	4293      	cmp	r3, r2
 8105dae:	d00e      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105db0:	687b      	ldr	r3, [r7, #4]
 8105db2:	681b      	ldr	r3, [r3, #0]
 8105db4:	4a3f      	ldr	r2, [pc, #252]	; (8105eb4 <HAL_DMA_Init+0x6a8>)
 8105db6:	4293      	cmp	r3, r2
 8105db8:	d009      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105dba:	687b      	ldr	r3, [r7, #4]
 8105dbc:	681b      	ldr	r3, [r3, #0]
 8105dbe:	4a3e      	ldr	r2, [pc, #248]	; (8105eb8 <HAL_DMA_Init+0x6ac>)
 8105dc0:	4293      	cmp	r3, r2
 8105dc2:	d004      	beq.n	8105dce <HAL_DMA_Init+0x5c2>
 8105dc4:	687b      	ldr	r3, [r7, #4]
 8105dc6:	681b      	ldr	r3, [r3, #0]
 8105dc8:	4a3c      	ldr	r2, [pc, #240]	; (8105ebc <HAL_DMA_Init+0x6b0>)
 8105dca:	4293      	cmp	r3, r2
 8105dcc:	d101      	bne.n	8105dd2 <HAL_DMA_Init+0x5c6>
 8105dce:	2301      	movs	r3, #1
 8105dd0:	e000      	b.n	8105dd4 <HAL_DMA_Init+0x5c8>
 8105dd2:	2300      	movs	r3, #0
 8105dd4:	2b00      	cmp	r3, #0
 8105dd6:	d032      	beq.n	8105e3e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8105dd8:	6878      	ldr	r0, [r7, #4]
 8105dda:	f001 fcdf 	bl	810779c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8105dde:	687b      	ldr	r3, [r7, #4]
 8105de0:	689b      	ldr	r3, [r3, #8]
 8105de2:	2b80      	cmp	r3, #128	; 0x80
 8105de4:	d102      	bne.n	8105dec <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8105de6:	687b      	ldr	r3, [r7, #4]
 8105de8:	2200      	movs	r2, #0
 8105dea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8105dec:	687b      	ldr	r3, [r7, #4]
 8105dee:	685a      	ldr	r2, [r3, #4]
 8105df0:	687b      	ldr	r3, [r7, #4]
 8105df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105df4:	b2d2      	uxtb	r2, r2
 8105df6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105df8:	687b      	ldr	r3, [r7, #4]
 8105dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105dfc:	687a      	ldr	r2, [r7, #4]
 8105dfe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105e00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8105e02:	687b      	ldr	r3, [r7, #4]
 8105e04:	685b      	ldr	r3, [r3, #4]
 8105e06:	2b00      	cmp	r3, #0
 8105e08:	d010      	beq.n	8105e2c <HAL_DMA_Init+0x620>
 8105e0a:	687b      	ldr	r3, [r7, #4]
 8105e0c:	685b      	ldr	r3, [r3, #4]
 8105e0e:	2b08      	cmp	r3, #8
 8105e10:	d80c      	bhi.n	8105e2c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8105e12:	6878      	ldr	r0, [r7, #4]
 8105e14:	f001 fd5c 	bl	81078d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8105e18:	687b      	ldr	r3, [r7, #4]
 8105e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105e1c:	2200      	movs	r2, #0
 8105e1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8105e20:	687b      	ldr	r3, [r7, #4]
 8105e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105e24:	687a      	ldr	r2, [r7, #4]
 8105e26:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8105e28:	605a      	str	r2, [r3, #4]
 8105e2a:	e008      	b.n	8105e3e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	2200      	movs	r2, #0
 8105e30:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	2200      	movs	r2, #0
 8105e36:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8105e38:	687b      	ldr	r3, [r7, #4]
 8105e3a:	2200      	movs	r2, #0
 8105e3c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8105e3e:	687b      	ldr	r3, [r7, #4]
 8105e40:	2200      	movs	r2, #0
 8105e42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8105e44:	687b      	ldr	r3, [r7, #4]
 8105e46:	2201      	movs	r2, #1
 8105e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8105e4c:	2300      	movs	r3, #0
}
 8105e4e:	4618      	mov	r0, r3
 8105e50:	3718      	adds	r7, #24
 8105e52:	46bd      	mov	sp, r7
 8105e54:	bd80      	pop	{r7, pc}
 8105e56:	bf00      	nop
 8105e58:	a7fdabf8 	.word	0xa7fdabf8
 8105e5c:	cccccccd 	.word	0xcccccccd
 8105e60:	40020010 	.word	0x40020010
 8105e64:	40020028 	.word	0x40020028
 8105e68:	40020040 	.word	0x40020040
 8105e6c:	40020058 	.word	0x40020058
 8105e70:	40020070 	.word	0x40020070
 8105e74:	40020088 	.word	0x40020088
 8105e78:	400200a0 	.word	0x400200a0
 8105e7c:	400200b8 	.word	0x400200b8
 8105e80:	40020410 	.word	0x40020410
 8105e84:	40020428 	.word	0x40020428
 8105e88:	40020440 	.word	0x40020440
 8105e8c:	40020458 	.word	0x40020458
 8105e90:	40020470 	.word	0x40020470
 8105e94:	40020488 	.word	0x40020488
 8105e98:	400204a0 	.word	0x400204a0
 8105e9c:	400204b8 	.word	0x400204b8
 8105ea0:	58025408 	.word	0x58025408
 8105ea4:	5802541c 	.word	0x5802541c
 8105ea8:	58025430 	.word	0x58025430
 8105eac:	58025444 	.word	0x58025444
 8105eb0:	58025458 	.word	0x58025458
 8105eb4:	5802546c 	.word	0x5802546c
 8105eb8:	58025480 	.word	0x58025480
 8105ebc:	58025494 	.word	0x58025494

08105ec0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8105ec0:	b580      	push	{r7, lr}
 8105ec2:	b086      	sub	sp, #24
 8105ec4:	af00      	add	r7, sp, #0
 8105ec6:	60f8      	str	r0, [r7, #12]
 8105ec8:	60b9      	str	r1, [r7, #8]
 8105eca:	607a      	str	r2, [r7, #4]
 8105ecc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8105ece:	2300      	movs	r3, #0
 8105ed0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8105ed2:	68fb      	ldr	r3, [r7, #12]
 8105ed4:	2b00      	cmp	r3, #0
 8105ed6:	d101      	bne.n	8105edc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8105ed8:	2301      	movs	r3, #1
 8105eda:	e226      	b.n	810632a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8105edc:	68fb      	ldr	r3, [r7, #12]
 8105ede:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8105ee2:	2b01      	cmp	r3, #1
 8105ee4:	d101      	bne.n	8105eea <HAL_DMA_Start_IT+0x2a>
 8105ee6:	2302      	movs	r3, #2
 8105ee8:	e21f      	b.n	810632a <HAL_DMA_Start_IT+0x46a>
 8105eea:	68fb      	ldr	r3, [r7, #12]
 8105eec:	2201      	movs	r2, #1
 8105eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8105ef2:	68fb      	ldr	r3, [r7, #12]
 8105ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105ef8:	b2db      	uxtb	r3, r3
 8105efa:	2b01      	cmp	r3, #1
 8105efc:	f040 820a 	bne.w	8106314 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8105f00:	68fb      	ldr	r3, [r7, #12]
 8105f02:	2202      	movs	r2, #2
 8105f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8105f08:	68fb      	ldr	r3, [r7, #12]
 8105f0a:	2200      	movs	r2, #0
 8105f0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8105f0e:	68fb      	ldr	r3, [r7, #12]
 8105f10:	681b      	ldr	r3, [r3, #0]
 8105f12:	4a68      	ldr	r2, [pc, #416]	; (81060b4 <HAL_DMA_Start_IT+0x1f4>)
 8105f14:	4293      	cmp	r3, r2
 8105f16:	d04a      	beq.n	8105fae <HAL_DMA_Start_IT+0xee>
 8105f18:	68fb      	ldr	r3, [r7, #12]
 8105f1a:	681b      	ldr	r3, [r3, #0]
 8105f1c:	4a66      	ldr	r2, [pc, #408]	; (81060b8 <HAL_DMA_Start_IT+0x1f8>)
 8105f1e:	4293      	cmp	r3, r2
 8105f20:	d045      	beq.n	8105fae <HAL_DMA_Start_IT+0xee>
 8105f22:	68fb      	ldr	r3, [r7, #12]
 8105f24:	681b      	ldr	r3, [r3, #0]
 8105f26:	4a65      	ldr	r2, [pc, #404]	; (81060bc <HAL_DMA_Start_IT+0x1fc>)
 8105f28:	4293      	cmp	r3, r2
 8105f2a:	d040      	beq.n	8105fae <HAL_DMA_Start_IT+0xee>
 8105f2c:	68fb      	ldr	r3, [r7, #12]
 8105f2e:	681b      	ldr	r3, [r3, #0]
 8105f30:	4a63      	ldr	r2, [pc, #396]	; (81060c0 <HAL_DMA_Start_IT+0x200>)
 8105f32:	4293      	cmp	r3, r2
 8105f34:	d03b      	beq.n	8105fae <HAL_DMA_Start_IT+0xee>
 8105f36:	68fb      	ldr	r3, [r7, #12]
 8105f38:	681b      	ldr	r3, [r3, #0]
 8105f3a:	4a62      	ldr	r2, [pc, #392]	; (81060c4 <HAL_DMA_Start_IT+0x204>)
 8105f3c:	4293      	cmp	r3, r2
 8105f3e:	d036      	beq.n	8105fae <HAL_DMA_Start_IT+0xee>
 8105f40:	68fb      	ldr	r3, [r7, #12]
 8105f42:	681b      	ldr	r3, [r3, #0]
 8105f44:	4a60      	ldr	r2, [pc, #384]	; (81060c8 <HAL_DMA_Start_IT+0x208>)
 8105f46:	4293      	cmp	r3, r2
 8105f48:	d031      	beq.n	8105fae <HAL_DMA_Start_IT+0xee>
 8105f4a:	68fb      	ldr	r3, [r7, #12]
 8105f4c:	681b      	ldr	r3, [r3, #0]
 8105f4e:	4a5f      	ldr	r2, [pc, #380]	; (81060cc <HAL_DMA_Start_IT+0x20c>)
 8105f50:	4293      	cmp	r3, r2
 8105f52:	d02c      	beq.n	8105fae <HAL_DMA_Start_IT+0xee>
 8105f54:	68fb      	ldr	r3, [r7, #12]
 8105f56:	681b      	ldr	r3, [r3, #0]
 8105f58:	4a5d      	ldr	r2, [pc, #372]	; (81060d0 <HAL_DMA_Start_IT+0x210>)
 8105f5a:	4293      	cmp	r3, r2
 8105f5c:	d027      	beq.n	8105fae <HAL_DMA_Start_IT+0xee>
 8105f5e:	68fb      	ldr	r3, [r7, #12]
 8105f60:	681b      	ldr	r3, [r3, #0]
 8105f62:	4a5c      	ldr	r2, [pc, #368]	; (81060d4 <HAL_DMA_Start_IT+0x214>)
 8105f64:	4293      	cmp	r3, r2
 8105f66:	d022      	beq.n	8105fae <HAL_DMA_Start_IT+0xee>
 8105f68:	68fb      	ldr	r3, [r7, #12]
 8105f6a:	681b      	ldr	r3, [r3, #0]
 8105f6c:	4a5a      	ldr	r2, [pc, #360]	; (81060d8 <HAL_DMA_Start_IT+0x218>)
 8105f6e:	4293      	cmp	r3, r2
 8105f70:	d01d      	beq.n	8105fae <HAL_DMA_Start_IT+0xee>
 8105f72:	68fb      	ldr	r3, [r7, #12]
 8105f74:	681b      	ldr	r3, [r3, #0]
 8105f76:	4a59      	ldr	r2, [pc, #356]	; (81060dc <HAL_DMA_Start_IT+0x21c>)
 8105f78:	4293      	cmp	r3, r2
 8105f7a:	d018      	beq.n	8105fae <HAL_DMA_Start_IT+0xee>
 8105f7c:	68fb      	ldr	r3, [r7, #12]
 8105f7e:	681b      	ldr	r3, [r3, #0]
 8105f80:	4a57      	ldr	r2, [pc, #348]	; (81060e0 <HAL_DMA_Start_IT+0x220>)
 8105f82:	4293      	cmp	r3, r2
 8105f84:	d013      	beq.n	8105fae <HAL_DMA_Start_IT+0xee>
 8105f86:	68fb      	ldr	r3, [r7, #12]
 8105f88:	681b      	ldr	r3, [r3, #0]
 8105f8a:	4a56      	ldr	r2, [pc, #344]	; (81060e4 <HAL_DMA_Start_IT+0x224>)
 8105f8c:	4293      	cmp	r3, r2
 8105f8e:	d00e      	beq.n	8105fae <HAL_DMA_Start_IT+0xee>
 8105f90:	68fb      	ldr	r3, [r7, #12]
 8105f92:	681b      	ldr	r3, [r3, #0]
 8105f94:	4a54      	ldr	r2, [pc, #336]	; (81060e8 <HAL_DMA_Start_IT+0x228>)
 8105f96:	4293      	cmp	r3, r2
 8105f98:	d009      	beq.n	8105fae <HAL_DMA_Start_IT+0xee>
 8105f9a:	68fb      	ldr	r3, [r7, #12]
 8105f9c:	681b      	ldr	r3, [r3, #0]
 8105f9e:	4a53      	ldr	r2, [pc, #332]	; (81060ec <HAL_DMA_Start_IT+0x22c>)
 8105fa0:	4293      	cmp	r3, r2
 8105fa2:	d004      	beq.n	8105fae <HAL_DMA_Start_IT+0xee>
 8105fa4:	68fb      	ldr	r3, [r7, #12]
 8105fa6:	681b      	ldr	r3, [r3, #0]
 8105fa8:	4a51      	ldr	r2, [pc, #324]	; (81060f0 <HAL_DMA_Start_IT+0x230>)
 8105faa:	4293      	cmp	r3, r2
 8105fac:	d108      	bne.n	8105fc0 <HAL_DMA_Start_IT+0x100>
 8105fae:	68fb      	ldr	r3, [r7, #12]
 8105fb0:	681b      	ldr	r3, [r3, #0]
 8105fb2:	681a      	ldr	r2, [r3, #0]
 8105fb4:	68fb      	ldr	r3, [r7, #12]
 8105fb6:	681b      	ldr	r3, [r3, #0]
 8105fb8:	f022 0201 	bic.w	r2, r2, #1
 8105fbc:	601a      	str	r2, [r3, #0]
 8105fbe:	e007      	b.n	8105fd0 <HAL_DMA_Start_IT+0x110>
 8105fc0:	68fb      	ldr	r3, [r7, #12]
 8105fc2:	681b      	ldr	r3, [r3, #0]
 8105fc4:	681a      	ldr	r2, [r3, #0]
 8105fc6:	68fb      	ldr	r3, [r7, #12]
 8105fc8:	681b      	ldr	r3, [r3, #0]
 8105fca:	f022 0201 	bic.w	r2, r2, #1
 8105fce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8105fd0:	683b      	ldr	r3, [r7, #0]
 8105fd2:	687a      	ldr	r2, [r7, #4]
 8105fd4:	68b9      	ldr	r1, [r7, #8]
 8105fd6:	68f8      	ldr	r0, [r7, #12]
 8105fd8:	f001 f906 	bl	81071e8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105fdc:	68fb      	ldr	r3, [r7, #12]
 8105fde:	681b      	ldr	r3, [r3, #0]
 8105fe0:	4a34      	ldr	r2, [pc, #208]	; (81060b4 <HAL_DMA_Start_IT+0x1f4>)
 8105fe2:	4293      	cmp	r3, r2
 8105fe4:	d04a      	beq.n	810607c <HAL_DMA_Start_IT+0x1bc>
 8105fe6:	68fb      	ldr	r3, [r7, #12]
 8105fe8:	681b      	ldr	r3, [r3, #0]
 8105fea:	4a33      	ldr	r2, [pc, #204]	; (81060b8 <HAL_DMA_Start_IT+0x1f8>)
 8105fec:	4293      	cmp	r3, r2
 8105fee:	d045      	beq.n	810607c <HAL_DMA_Start_IT+0x1bc>
 8105ff0:	68fb      	ldr	r3, [r7, #12]
 8105ff2:	681b      	ldr	r3, [r3, #0]
 8105ff4:	4a31      	ldr	r2, [pc, #196]	; (81060bc <HAL_DMA_Start_IT+0x1fc>)
 8105ff6:	4293      	cmp	r3, r2
 8105ff8:	d040      	beq.n	810607c <HAL_DMA_Start_IT+0x1bc>
 8105ffa:	68fb      	ldr	r3, [r7, #12]
 8105ffc:	681b      	ldr	r3, [r3, #0]
 8105ffe:	4a30      	ldr	r2, [pc, #192]	; (81060c0 <HAL_DMA_Start_IT+0x200>)
 8106000:	4293      	cmp	r3, r2
 8106002:	d03b      	beq.n	810607c <HAL_DMA_Start_IT+0x1bc>
 8106004:	68fb      	ldr	r3, [r7, #12]
 8106006:	681b      	ldr	r3, [r3, #0]
 8106008:	4a2e      	ldr	r2, [pc, #184]	; (81060c4 <HAL_DMA_Start_IT+0x204>)
 810600a:	4293      	cmp	r3, r2
 810600c:	d036      	beq.n	810607c <HAL_DMA_Start_IT+0x1bc>
 810600e:	68fb      	ldr	r3, [r7, #12]
 8106010:	681b      	ldr	r3, [r3, #0]
 8106012:	4a2d      	ldr	r2, [pc, #180]	; (81060c8 <HAL_DMA_Start_IT+0x208>)
 8106014:	4293      	cmp	r3, r2
 8106016:	d031      	beq.n	810607c <HAL_DMA_Start_IT+0x1bc>
 8106018:	68fb      	ldr	r3, [r7, #12]
 810601a:	681b      	ldr	r3, [r3, #0]
 810601c:	4a2b      	ldr	r2, [pc, #172]	; (81060cc <HAL_DMA_Start_IT+0x20c>)
 810601e:	4293      	cmp	r3, r2
 8106020:	d02c      	beq.n	810607c <HAL_DMA_Start_IT+0x1bc>
 8106022:	68fb      	ldr	r3, [r7, #12]
 8106024:	681b      	ldr	r3, [r3, #0]
 8106026:	4a2a      	ldr	r2, [pc, #168]	; (81060d0 <HAL_DMA_Start_IT+0x210>)
 8106028:	4293      	cmp	r3, r2
 810602a:	d027      	beq.n	810607c <HAL_DMA_Start_IT+0x1bc>
 810602c:	68fb      	ldr	r3, [r7, #12]
 810602e:	681b      	ldr	r3, [r3, #0]
 8106030:	4a28      	ldr	r2, [pc, #160]	; (81060d4 <HAL_DMA_Start_IT+0x214>)
 8106032:	4293      	cmp	r3, r2
 8106034:	d022      	beq.n	810607c <HAL_DMA_Start_IT+0x1bc>
 8106036:	68fb      	ldr	r3, [r7, #12]
 8106038:	681b      	ldr	r3, [r3, #0]
 810603a:	4a27      	ldr	r2, [pc, #156]	; (81060d8 <HAL_DMA_Start_IT+0x218>)
 810603c:	4293      	cmp	r3, r2
 810603e:	d01d      	beq.n	810607c <HAL_DMA_Start_IT+0x1bc>
 8106040:	68fb      	ldr	r3, [r7, #12]
 8106042:	681b      	ldr	r3, [r3, #0]
 8106044:	4a25      	ldr	r2, [pc, #148]	; (81060dc <HAL_DMA_Start_IT+0x21c>)
 8106046:	4293      	cmp	r3, r2
 8106048:	d018      	beq.n	810607c <HAL_DMA_Start_IT+0x1bc>
 810604a:	68fb      	ldr	r3, [r7, #12]
 810604c:	681b      	ldr	r3, [r3, #0]
 810604e:	4a24      	ldr	r2, [pc, #144]	; (81060e0 <HAL_DMA_Start_IT+0x220>)
 8106050:	4293      	cmp	r3, r2
 8106052:	d013      	beq.n	810607c <HAL_DMA_Start_IT+0x1bc>
 8106054:	68fb      	ldr	r3, [r7, #12]
 8106056:	681b      	ldr	r3, [r3, #0]
 8106058:	4a22      	ldr	r2, [pc, #136]	; (81060e4 <HAL_DMA_Start_IT+0x224>)
 810605a:	4293      	cmp	r3, r2
 810605c:	d00e      	beq.n	810607c <HAL_DMA_Start_IT+0x1bc>
 810605e:	68fb      	ldr	r3, [r7, #12]
 8106060:	681b      	ldr	r3, [r3, #0]
 8106062:	4a21      	ldr	r2, [pc, #132]	; (81060e8 <HAL_DMA_Start_IT+0x228>)
 8106064:	4293      	cmp	r3, r2
 8106066:	d009      	beq.n	810607c <HAL_DMA_Start_IT+0x1bc>
 8106068:	68fb      	ldr	r3, [r7, #12]
 810606a:	681b      	ldr	r3, [r3, #0]
 810606c:	4a1f      	ldr	r2, [pc, #124]	; (81060ec <HAL_DMA_Start_IT+0x22c>)
 810606e:	4293      	cmp	r3, r2
 8106070:	d004      	beq.n	810607c <HAL_DMA_Start_IT+0x1bc>
 8106072:	68fb      	ldr	r3, [r7, #12]
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	4a1e      	ldr	r2, [pc, #120]	; (81060f0 <HAL_DMA_Start_IT+0x230>)
 8106078:	4293      	cmp	r3, r2
 810607a:	d101      	bne.n	8106080 <HAL_DMA_Start_IT+0x1c0>
 810607c:	2301      	movs	r3, #1
 810607e:	e000      	b.n	8106082 <HAL_DMA_Start_IT+0x1c2>
 8106080:	2300      	movs	r3, #0
 8106082:	2b00      	cmp	r3, #0
 8106084:	d036      	beq.n	81060f4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8106086:	68fb      	ldr	r3, [r7, #12]
 8106088:	681b      	ldr	r3, [r3, #0]
 810608a:	681b      	ldr	r3, [r3, #0]
 810608c:	f023 021e 	bic.w	r2, r3, #30
 8106090:	68fb      	ldr	r3, [r7, #12]
 8106092:	681b      	ldr	r3, [r3, #0]
 8106094:	f042 0216 	orr.w	r2, r2, #22
 8106098:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 810609a:	68fb      	ldr	r3, [r7, #12]
 810609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810609e:	2b00      	cmp	r3, #0
 81060a0:	d03e      	beq.n	8106120 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 81060a2:	68fb      	ldr	r3, [r7, #12]
 81060a4:	681b      	ldr	r3, [r3, #0]
 81060a6:	681a      	ldr	r2, [r3, #0]
 81060a8:	68fb      	ldr	r3, [r7, #12]
 81060aa:	681b      	ldr	r3, [r3, #0]
 81060ac:	f042 0208 	orr.w	r2, r2, #8
 81060b0:	601a      	str	r2, [r3, #0]
 81060b2:	e035      	b.n	8106120 <HAL_DMA_Start_IT+0x260>
 81060b4:	40020010 	.word	0x40020010
 81060b8:	40020028 	.word	0x40020028
 81060bc:	40020040 	.word	0x40020040
 81060c0:	40020058 	.word	0x40020058
 81060c4:	40020070 	.word	0x40020070
 81060c8:	40020088 	.word	0x40020088
 81060cc:	400200a0 	.word	0x400200a0
 81060d0:	400200b8 	.word	0x400200b8
 81060d4:	40020410 	.word	0x40020410
 81060d8:	40020428 	.word	0x40020428
 81060dc:	40020440 	.word	0x40020440
 81060e0:	40020458 	.word	0x40020458
 81060e4:	40020470 	.word	0x40020470
 81060e8:	40020488 	.word	0x40020488
 81060ec:	400204a0 	.word	0x400204a0
 81060f0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 81060f4:	68fb      	ldr	r3, [r7, #12]
 81060f6:	681b      	ldr	r3, [r3, #0]
 81060f8:	681b      	ldr	r3, [r3, #0]
 81060fa:	f023 020e 	bic.w	r2, r3, #14
 81060fe:	68fb      	ldr	r3, [r7, #12]
 8106100:	681b      	ldr	r3, [r3, #0]
 8106102:	f042 020a 	orr.w	r2, r2, #10
 8106106:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8106108:	68fb      	ldr	r3, [r7, #12]
 810610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810610c:	2b00      	cmp	r3, #0
 810610e:	d007      	beq.n	8106120 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8106110:	68fb      	ldr	r3, [r7, #12]
 8106112:	681b      	ldr	r3, [r3, #0]
 8106114:	681a      	ldr	r2, [r3, #0]
 8106116:	68fb      	ldr	r3, [r7, #12]
 8106118:	681b      	ldr	r3, [r3, #0]
 810611a:	f042 0204 	orr.w	r2, r2, #4
 810611e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8106120:	68fb      	ldr	r3, [r7, #12]
 8106122:	681b      	ldr	r3, [r3, #0]
 8106124:	4a83      	ldr	r2, [pc, #524]	; (8106334 <HAL_DMA_Start_IT+0x474>)
 8106126:	4293      	cmp	r3, r2
 8106128:	d072      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 810612a:	68fb      	ldr	r3, [r7, #12]
 810612c:	681b      	ldr	r3, [r3, #0]
 810612e:	4a82      	ldr	r2, [pc, #520]	; (8106338 <HAL_DMA_Start_IT+0x478>)
 8106130:	4293      	cmp	r3, r2
 8106132:	d06d      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 8106134:	68fb      	ldr	r3, [r7, #12]
 8106136:	681b      	ldr	r3, [r3, #0]
 8106138:	4a80      	ldr	r2, [pc, #512]	; (810633c <HAL_DMA_Start_IT+0x47c>)
 810613a:	4293      	cmp	r3, r2
 810613c:	d068      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 810613e:	68fb      	ldr	r3, [r7, #12]
 8106140:	681b      	ldr	r3, [r3, #0]
 8106142:	4a7f      	ldr	r2, [pc, #508]	; (8106340 <HAL_DMA_Start_IT+0x480>)
 8106144:	4293      	cmp	r3, r2
 8106146:	d063      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 8106148:	68fb      	ldr	r3, [r7, #12]
 810614a:	681b      	ldr	r3, [r3, #0]
 810614c:	4a7d      	ldr	r2, [pc, #500]	; (8106344 <HAL_DMA_Start_IT+0x484>)
 810614e:	4293      	cmp	r3, r2
 8106150:	d05e      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 8106152:	68fb      	ldr	r3, [r7, #12]
 8106154:	681b      	ldr	r3, [r3, #0]
 8106156:	4a7c      	ldr	r2, [pc, #496]	; (8106348 <HAL_DMA_Start_IT+0x488>)
 8106158:	4293      	cmp	r3, r2
 810615a:	d059      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 810615c:	68fb      	ldr	r3, [r7, #12]
 810615e:	681b      	ldr	r3, [r3, #0]
 8106160:	4a7a      	ldr	r2, [pc, #488]	; (810634c <HAL_DMA_Start_IT+0x48c>)
 8106162:	4293      	cmp	r3, r2
 8106164:	d054      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 8106166:	68fb      	ldr	r3, [r7, #12]
 8106168:	681b      	ldr	r3, [r3, #0]
 810616a:	4a79      	ldr	r2, [pc, #484]	; (8106350 <HAL_DMA_Start_IT+0x490>)
 810616c:	4293      	cmp	r3, r2
 810616e:	d04f      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 8106170:	68fb      	ldr	r3, [r7, #12]
 8106172:	681b      	ldr	r3, [r3, #0]
 8106174:	4a77      	ldr	r2, [pc, #476]	; (8106354 <HAL_DMA_Start_IT+0x494>)
 8106176:	4293      	cmp	r3, r2
 8106178:	d04a      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 810617a:	68fb      	ldr	r3, [r7, #12]
 810617c:	681b      	ldr	r3, [r3, #0]
 810617e:	4a76      	ldr	r2, [pc, #472]	; (8106358 <HAL_DMA_Start_IT+0x498>)
 8106180:	4293      	cmp	r3, r2
 8106182:	d045      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 8106184:	68fb      	ldr	r3, [r7, #12]
 8106186:	681b      	ldr	r3, [r3, #0]
 8106188:	4a74      	ldr	r2, [pc, #464]	; (810635c <HAL_DMA_Start_IT+0x49c>)
 810618a:	4293      	cmp	r3, r2
 810618c:	d040      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 810618e:	68fb      	ldr	r3, [r7, #12]
 8106190:	681b      	ldr	r3, [r3, #0]
 8106192:	4a73      	ldr	r2, [pc, #460]	; (8106360 <HAL_DMA_Start_IT+0x4a0>)
 8106194:	4293      	cmp	r3, r2
 8106196:	d03b      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 8106198:	68fb      	ldr	r3, [r7, #12]
 810619a:	681b      	ldr	r3, [r3, #0]
 810619c:	4a71      	ldr	r2, [pc, #452]	; (8106364 <HAL_DMA_Start_IT+0x4a4>)
 810619e:	4293      	cmp	r3, r2
 81061a0:	d036      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 81061a2:	68fb      	ldr	r3, [r7, #12]
 81061a4:	681b      	ldr	r3, [r3, #0]
 81061a6:	4a70      	ldr	r2, [pc, #448]	; (8106368 <HAL_DMA_Start_IT+0x4a8>)
 81061a8:	4293      	cmp	r3, r2
 81061aa:	d031      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 81061ac:	68fb      	ldr	r3, [r7, #12]
 81061ae:	681b      	ldr	r3, [r3, #0]
 81061b0:	4a6e      	ldr	r2, [pc, #440]	; (810636c <HAL_DMA_Start_IT+0x4ac>)
 81061b2:	4293      	cmp	r3, r2
 81061b4:	d02c      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 81061b6:	68fb      	ldr	r3, [r7, #12]
 81061b8:	681b      	ldr	r3, [r3, #0]
 81061ba:	4a6d      	ldr	r2, [pc, #436]	; (8106370 <HAL_DMA_Start_IT+0x4b0>)
 81061bc:	4293      	cmp	r3, r2
 81061be:	d027      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 81061c0:	68fb      	ldr	r3, [r7, #12]
 81061c2:	681b      	ldr	r3, [r3, #0]
 81061c4:	4a6b      	ldr	r2, [pc, #428]	; (8106374 <HAL_DMA_Start_IT+0x4b4>)
 81061c6:	4293      	cmp	r3, r2
 81061c8:	d022      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 81061ca:	68fb      	ldr	r3, [r7, #12]
 81061cc:	681b      	ldr	r3, [r3, #0]
 81061ce:	4a6a      	ldr	r2, [pc, #424]	; (8106378 <HAL_DMA_Start_IT+0x4b8>)
 81061d0:	4293      	cmp	r3, r2
 81061d2:	d01d      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 81061d4:	68fb      	ldr	r3, [r7, #12]
 81061d6:	681b      	ldr	r3, [r3, #0]
 81061d8:	4a68      	ldr	r2, [pc, #416]	; (810637c <HAL_DMA_Start_IT+0x4bc>)
 81061da:	4293      	cmp	r3, r2
 81061dc:	d018      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 81061de:	68fb      	ldr	r3, [r7, #12]
 81061e0:	681b      	ldr	r3, [r3, #0]
 81061e2:	4a67      	ldr	r2, [pc, #412]	; (8106380 <HAL_DMA_Start_IT+0x4c0>)
 81061e4:	4293      	cmp	r3, r2
 81061e6:	d013      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 81061e8:	68fb      	ldr	r3, [r7, #12]
 81061ea:	681b      	ldr	r3, [r3, #0]
 81061ec:	4a65      	ldr	r2, [pc, #404]	; (8106384 <HAL_DMA_Start_IT+0x4c4>)
 81061ee:	4293      	cmp	r3, r2
 81061f0:	d00e      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 81061f2:	68fb      	ldr	r3, [r7, #12]
 81061f4:	681b      	ldr	r3, [r3, #0]
 81061f6:	4a64      	ldr	r2, [pc, #400]	; (8106388 <HAL_DMA_Start_IT+0x4c8>)
 81061f8:	4293      	cmp	r3, r2
 81061fa:	d009      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 81061fc:	68fb      	ldr	r3, [r7, #12]
 81061fe:	681b      	ldr	r3, [r3, #0]
 8106200:	4a62      	ldr	r2, [pc, #392]	; (810638c <HAL_DMA_Start_IT+0x4cc>)
 8106202:	4293      	cmp	r3, r2
 8106204:	d004      	beq.n	8106210 <HAL_DMA_Start_IT+0x350>
 8106206:	68fb      	ldr	r3, [r7, #12]
 8106208:	681b      	ldr	r3, [r3, #0]
 810620a:	4a61      	ldr	r2, [pc, #388]	; (8106390 <HAL_DMA_Start_IT+0x4d0>)
 810620c:	4293      	cmp	r3, r2
 810620e:	d101      	bne.n	8106214 <HAL_DMA_Start_IT+0x354>
 8106210:	2301      	movs	r3, #1
 8106212:	e000      	b.n	8106216 <HAL_DMA_Start_IT+0x356>
 8106214:	2300      	movs	r3, #0
 8106216:	2b00      	cmp	r3, #0
 8106218:	d01a      	beq.n	8106250 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 810621a:	68fb      	ldr	r3, [r7, #12]
 810621c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810621e:	681b      	ldr	r3, [r3, #0]
 8106220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106224:	2b00      	cmp	r3, #0
 8106226:	d007      	beq.n	8106238 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8106228:	68fb      	ldr	r3, [r7, #12]
 810622a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810622c:	681a      	ldr	r2, [r3, #0]
 810622e:	68fb      	ldr	r3, [r7, #12]
 8106230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106236:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8106238:	68fb      	ldr	r3, [r7, #12]
 810623a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810623c:	2b00      	cmp	r3, #0
 810623e:	d007      	beq.n	8106250 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8106240:	68fb      	ldr	r3, [r7, #12]
 8106242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106244:	681a      	ldr	r2, [r3, #0]
 8106246:	68fb      	ldr	r3, [r7, #12]
 8106248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810624a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810624e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8106250:	68fb      	ldr	r3, [r7, #12]
 8106252:	681b      	ldr	r3, [r3, #0]
 8106254:	4a37      	ldr	r2, [pc, #220]	; (8106334 <HAL_DMA_Start_IT+0x474>)
 8106256:	4293      	cmp	r3, r2
 8106258:	d04a      	beq.n	81062f0 <HAL_DMA_Start_IT+0x430>
 810625a:	68fb      	ldr	r3, [r7, #12]
 810625c:	681b      	ldr	r3, [r3, #0]
 810625e:	4a36      	ldr	r2, [pc, #216]	; (8106338 <HAL_DMA_Start_IT+0x478>)
 8106260:	4293      	cmp	r3, r2
 8106262:	d045      	beq.n	81062f0 <HAL_DMA_Start_IT+0x430>
 8106264:	68fb      	ldr	r3, [r7, #12]
 8106266:	681b      	ldr	r3, [r3, #0]
 8106268:	4a34      	ldr	r2, [pc, #208]	; (810633c <HAL_DMA_Start_IT+0x47c>)
 810626a:	4293      	cmp	r3, r2
 810626c:	d040      	beq.n	81062f0 <HAL_DMA_Start_IT+0x430>
 810626e:	68fb      	ldr	r3, [r7, #12]
 8106270:	681b      	ldr	r3, [r3, #0]
 8106272:	4a33      	ldr	r2, [pc, #204]	; (8106340 <HAL_DMA_Start_IT+0x480>)
 8106274:	4293      	cmp	r3, r2
 8106276:	d03b      	beq.n	81062f0 <HAL_DMA_Start_IT+0x430>
 8106278:	68fb      	ldr	r3, [r7, #12]
 810627a:	681b      	ldr	r3, [r3, #0]
 810627c:	4a31      	ldr	r2, [pc, #196]	; (8106344 <HAL_DMA_Start_IT+0x484>)
 810627e:	4293      	cmp	r3, r2
 8106280:	d036      	beq.n	81062f0 <HAL_DMA_Start_IT+0x430>
 8106282:	68fb      	ldr	r3, [r7, #12]
 8106284:	681b      	ldr	r3, [r3, #0]
 8106286:	4a30      	ldr	r2, [pc, #192]	; (8106348 <HAL_DMA_Start_IT+0x488>)
 8106288:	4293      	cmp	r3, r2
 810628a:	d031      	beq.n	81062f0 <HAL_DMA_Start_IT+0x430>
 810628c:	68fb      	ldr	r3, [r7, #12]
 810628e:	681b      	ldr	r3, [r3, #0]
 8106290:	4a2e      	ldr	r2, [pc, #184]	; (810634c <HAL_DMA_Start_IT+0x48c>)
 8106292:	4293      	cmp	r3, r2
 8106294:	d02c      	beq.n	81062f0 <HAL_DMA_Start_IT+0x430>
 8106296:	68fb      	ldr	r3, [r7, #12]
 8106298:	681b      	ldr	r3, [r3, #0]
 810629a:	4a2d      	ldr	r2, [pc, #180]	; (8106350 <HAL_DMA_Start_IT+0x490>)
 810629c:	4293      	cmp	r3, r2
 810629e:	d027      	beq.n	81062f0 <HAL_DMA_Start_IT+0x430>
 81062a0:	68fb      	ldr	r3, [r7, #12]
 81062a2:	681b      	ldr	r3, [r3, #0]
 81062a4:	4a2b      	ldr	r2, [pc, #172]	; (8106354 <HAL_DMA_Start_IT+0x494>)
 81062a6:	4293      	cmp	r3, r2
 81062a8:	d022      	beq.n	81062f0 <HAL_DMA_Start_IT+0x430>
 81062aa:	68fb      	ldr	r3, [r7, #12]
 81062ac:	681b      	ldr	r3, [r3, #0]
 81062ae:	4a2a      	ldr	r2, [pc, #168]	; (8106358 <HAL_DMA_Start_IT+0x498>)
 81062b0:	4293      	cmp	r3, r2
 81062b2:	d01d      	beq.n	81062f0 <HAL_DMA_Start_IT+0x430>
 81062b4:	68fb      	ldr	r3, [r7, #12]
 81062b6:	681b      	ldr	r3, [r3, #0]
 81062b8:	4a28      	ldr	r2, [pc, #160]	; (810635c <HAL_DMA_Start_IT+0x49c>)
 81062ba:	4293      	cmp	r3, r2
 81062bc:	d018      	beq.n	81062f0 <HAL_DMA_Start_IT+0x430>
 81062be:	68fb      	ldr	r3, [r7, #12]
 81062c0:	681b      	ldr	r3, [r3, #0]
 81062c2:	4a27      	ldr	r2, [pc, #156]	; (8106360 <HAL_DMA_Start_IT+0x4a0>)
 81062c4:	4293      	cmp	r3, r2
 81062c6:	d013      	beq.n	81062f0 <HAL_DMA_Start_IT+0x430>
 81062c8:	68fb      	ldr	r3, [r7, #12]
 81062ca:	681b      	ldr	r3, [r3, #0]
 81062cc:	4a25      	ldr	r2, [pc, #148]	; (8106364 <HAL_DMA_Start_IT+0x4a4>)
 81062ce:	4293      	cmp	r3, r2
 81062d0:	d00e      	beq.n	81062f0 <HAL_DMA_Start_IT+0x430>
 81062d2:	68fb      	ldr	r3, [r7, #12]
 81062d4:	681b      	ldr	r3, [r3, #0]
 81062d6:	4a24      	ldr	r2, [pc, #144]	; (8106368 <HAL_DMA_Start_IT+0x4a8>)
 81062d8:	4293      	cmp	r3, r2
 81062da:	d009      	beq.n	81062f0 <HAL_DMA_Start_IT+0x430>
 81062dc:	68fb      	ldr	r3, [r7, #12]
 81062de:	681b      	ldr	r3, [r3, #0]
 81062e0:	4a22      	ldr	r2, [pc, #136]	; (810636c <HAL_DMA_Start_IT+0x4ac>)
 81062e2:	4293      	cmp	r3, r2
 81062e4:	d004      	beq.n	81062f0 <HAL_DMA_Start_IT+0x430>
 81062e6:	68fb      	ldr	r3, [r7, #12]
 81062e8:	681b      	ldr	r3, [r3, #0]
 81062ea:	4a21      	ldr	r2, [pc, #132]	; (8106370 <HAL_DMA_Start_IT+0x4b0>)
 81062ec:	4293      	cmp	r3, r2
 81062ee:	d108      	bne.n	8106302 <HAL_DMA_Start_IT+0x442>
 81062f0:	68fb      	ldr	r3, [r7, #12]
 81062f2:	681b      	ldr	r3, [r3, #0]
 81062f4:	681a      	ldr	r2, [r3, #0]
 81062f6:	68fb      	ldr	r3, [r7, #12]
 81062f8:	681b      	ldr	r3, [r3, #0]
 81062fa:	f042 0201 	orr.w	r2, r2, #1
 81062fe:	601a      	str	r2, [r3, #0]
 8106300:	e012      	b.n	8106328 <HAL_DMA_Start_IT+0x468>
 8106302:	68fb      	ldr	r3, [r7, #12]
 8106304:	681b      	ldr	r3, [r3, #0]
 8106306:	681a      	ldr	r2, [r3, #0]
 8106308:	68fb      	ldr	r3, [r7, #12]
 810630a:	681b      	ldr	r3, [r3, #0]
 810630c:	f042 0201 	orr.w	r2, r2, #1
 8106310:	601a      	str	r2, [r3, #0]
 8106312:	e009      	b.n	8106328 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8106314:	68fb      	ldr	r3, [r7, #12]
 8106316:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810631a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 810631c:	68fb      	ldr	r3, [r7, #12]
 810631e:	2200      	movs	r2, #0
 8106320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8106324:	2301      	movs	r3, #1
 8106326:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8106328:	7dfb      	ldrb	r3, [r7, #23]
}
 810632a:	4618      	mov	r0, r3
 810632c:	3718      	adds	r7, #24
 810632e:	46bd      	mov	sp, r7
 8106330:	bd80      	pop	{r7, pc}
 8106332:	bf00      	nop
 8106334:	40020010 	.word	0x40020010
 8106338:	40020028 	.word	0x40020028
 810633c:	40020040 	.word	0x40020040
 8106340:	40020058 	.word	0x40020058
 8106344:	40020070 	.word	0x40020070
 8106348:	40020088 	.word	0x40020088
 810634c:	400200a0 	.word	0x400200a0
 8106350:	400200b8 	.word	0x400200b8
 8106354:	40020410 	.word	0x40020410
 8106358:	40020428 	.word	0x40020428
 810635c:	40020440 	.word	0x40020440
 8106360:	40020458 	.word	0x40020458
 8106364:	40020470 	.word	0x40020470
 8106368:	40020488 	.word	0x40020488
 810636c:	400204a0 	.word	0x400204a0
 8106370:	400204b8 	.word	0x400204b8
 8106374:	58025408 	.word	0x58025408
 8106378:	5802541c 	.word	0x5802541c
 810637c:	58025430 	.word	0x58025430
 8106380:	58025444 	.word	0x58025444
 8106384:	58025458 	.word	0x58025458
 8106388:	5802546c 	.word	0x5802546c
 810638c:	58025480 	.word	0x58025480
 8106390:	58025494 	.word	0x58025494

08106394 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8106394:	b580      	push	{r7, lr}
 8106396:	b08a      	sub	sp, #40	; 0x28
 8106398:	af00      	add	r7, sp, #0
 810639a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 810639c:	2300      	movs	r3, #0
 810639e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 81063a0:	4b67      	ldr	r3, [pc, #412]	; (8106540 <HAL_DMA_IRQHandler+0x1ac>)
 81063a2:	681b      	ldr	r3, [r3, #0]
 81063a4:	4a67      	ldr	r2, [pc, #412]	; (8106544 <HAL_DMA_IRQHandler+0x1b0>)
 81063a6:	fba2 2303 	umull	r2, r3, r2, r3
 81063aa:	0a9b      	lsrs	r3, r3, #10
 81063ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81063b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81063b4:	687b      	ldr	r3, [r7, #4]
 81063b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81063b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 81063ba:	6a3b      	ldr	r3, [r7, #32]
 81063bc:	681b      	ldr	r3, [r3, #0]
 81063be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 81063c0:	69fb      	ldr	r3, [r7, #28]
 81063c2:	681b      	ldr	r3, [r3, #0]
 81063c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	681b      	ldr	r3, [r3, #0]
 81063ca:	4a5f      	ldr	r2, [pc, #380]	; (8106548 <HAL_DMA_IRQHandler+0x1b4>)
 81063cc:	4293      	cmp	r3, r2
 81063ce:	d04a      	beq.n	8106466 <HAL_DMA_IRQHandler+0xd2>
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	681b      	ldr	r3, [r3, #0]
 81063d4:	4a5d      	ldr	r2, [pc, #372]	; (810654c <HAL_DMA_IRQHandler+0x1b8>)
 81063d6:	4293      	cmp	r3, r2
 81063d8:	d045      	beq.n	8106466 <HAL_DMA_IRQHandler+0xd2>
 81063da:	687b      	ldr	r3, [r7, #4]
 81063dc:	681b      	ldr	r3, [r3, #0]
 81063de:	4a5c      	ldr	r2, [pc, #368]	; (8106550 <HAL_DMA_IRQHandler+0x1bc>)
 81063e0:	4293      	cmp	r3, r2
 81063e2:	d040      	beq.n	8106466 <HAL_DMA_IRQHandler+0xd2>
 81063e4:	687b      	ldr	r3, [r7, #4]
 81063e6:	681b      	ldr	r3, [r3, #0]
 81063e8:	4a5a      	ldr	r2, [pc, #360]	; (8106554 <HAL_DMA_IRQHandler+0x1c0>)
 81063ea:	4293      	cmp	r3, r2
 81063ec:	d03b      	beq.n	8106466 <HAL_DMA_IRQHandler+0xd2>
 81063ee:	687b      	ldr	r3, [r7, #4]
 81063f0:	681b      	ldr	r3, [r3, #0]
 81063f2:	4a59      	ldr	r2, [pc, #356]	; (8106558 <HAL_DMA_IRQHandler+0x1c4>)
 81063f4:	4293      	cmp	r3, r2
 81063f6:	d036      	beq.n	8106466 <HAL_DMA_IRQHandler+0xd2>
 81063f8:	687b      	ldr	r3, [r7, #4]
 81063fa:	681b      	ldr	r3, [r3, #0]
 81063fc:	4a57      	ldr	r2, [pc, #348]	; (810655c <HAL_DMA_IRQHandler+0x1c8>)
 81063fe:	4293      	cmp	r3, r2
 8106400:	d031      	beq.n	8106466 <HAL_DMA_IRQHandler+0xd2>
 8106402:	687b      	ldr	r3, [r7, #4]
 8106404:	681b      	ldr	r3, [r3, #0]
 8106406:	4a56      	ldr	r2, [pc, #344]	; (8106560 <HAL_DMA_IRQHandler+0x1cc>)
 8106408:	4293      	cmp	r3, r2
 810640a:	d02c      	beq.n	8106466 <HAL_DMA_IRQHandler+0xd2>
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	681b      	ldr	r3, [r3, #0]
 8106410:	4a54      	ldr	r2, [pc, #336]	; (8106564 <HAL_DMA_IRQHandler+0x1d0>)
 8106412:	4293      	cmp	r3, r2
 8106414:	d027      	beq.n	8106466 <HAL_DMA_IRQHandler+0xd2>
 8106416:	687b      	ldr	r3, [r7, #4]
 8106418:	681b      	ldr	r3, [r3, #0]
 810641a:	4a53      	ldr	r2, [pc, #332]	; (8106568 <HAL_DMA_IRQHandler+0x1d4>)
 810641c:	4293      	cmp	r3, r2
 810641e:	d022      	beq.n	8106466 <HAL_DMA_IRQHandler+0xd2>
 8106420:	687b      	ldr	r3, [r7, #4]
 8106422:	681b      	ldr	r3, [r3, #0]
 8106424:	4a51      	ldr	r2, [pc, #324]	; (810656c <HAL_DMA_IRQHandler+0x1d8>)
 8106426:	4293      	cmp	r3, r2
 8106428:	d01d      	beq.n	8106466 <HAL_DMA_IRQHandler+0xd2>
 810642a:	687b      	ldr	r3, [r7, #4]
 810642c:	681b      	ldr	r3, [r3, #0]
 810642e:	4a50      	ldr	r2, [pc, #320]	; (8106570 <HAL_DMA_IRQHandler+0x1dc>)
 8106430:	4293      	cmp	r3, r2
 8106432:	d018      	beq.n	8106466 <HAL_DMA_IRQHandler+0xd2>
 8106434:	687b      	ldr	r3, [r7, #4]
 8106436:	681b      	ldr	r3, [r3, #0]
 8106438:	4a4e      	ldr	r2, [pc, #312]	; (8106574 <HAL_DMA_IRQHandler+0x1e0>)
 810643a:	4293      	cmp	r3, r2
 810643c:	d013      	beq.n	8106466 <HAL_DMA_IRQHandler+0xd2>
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	681b      	ldr	r3, [r3, #0]
 8106442:	4a4d      	ldr	r2, [pc, #308]	; (8106578 <HAL_DMA_IRQHandler+0x1e4>)
 8106444:	4293      	cmp	r3, r2
 8106446:	d00e      	beq.n	8106466 <HAL_DMA_IRQHandler+0xd2>
 8106448:	687b      	ldr	r3, [r7, #4]
 810644a:	681b      	ldr	r3, [r3, #0]
 810644c:	4a4b      	ldr	r2, [pc, #300]	; (810657c <HAL_DMA_IRQHandler+0x1e8>)
 810644e:	4293      	cmp	r3, r2
 8106450:	d009      	beq.n	8106466 <HAL_DMA_IRQHandler+0xd2>
 8106452:	687b      	ldr	r3, [r7, #4]
 8106454:	681b      	ldr	r3, [r3, #0]
 8106456:	4a4a      	ldr	r2, [pc, #296]	; (8106580 <HAL_DMA_IRQHandler+0x1ec>)
 8106458:	4293      	cmp	r3, r2
 810645a:	d004      	beq.n	8106466 <HAL_DMA_IRQHandler+0xd2>
 810645c:	687b      	ldr	r3, [r7, #4]
 810645e:	681b      	ldr	r3, [r3, #0]
 8106460:	4a48      	ldr	r2, [pc, #288]	; (8106584 <HAL_DMA_IRQHandler+0x1f0>)
 8106462:	4293      	cmp	r3, r2
 8106464:	d101      	bne.n	810646a <HAL_DMA_IRQHandler+0xd6>
 8106466:	2301      	movs	r3, #1
 8106468:	e000      	b.n	810646c <HAL_DMA_IRQHandler+0xd8>
 810646a:	2300      	movs	r3, #0
 810646c:	2b00      	cmp	r3, #0
 810646e:	f000 842b 	beq.w	8106cc8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8106472:	687b      	ldr	r3, [r7, #4]
 8106474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106476:	f003 031f 	and.w	r3, r3, #31
 810647a:	2208      	movs	r2, #8
 810647c:	409a      	lsls	r2, r3
 810647e:	69bb      	ldr	r3, [r7, #24]
 8106480:	4013      	ands	r3, r2
 8106482:	2b00      	cmp	r3, #0
 8106484:	f000 80a2 	beq.w	81065cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8106488:	687b      	ldr	r3, [r7, #4]
 810648a:	681b      	ldr	r3, [r3, #0]
 810648c:	4a2e      	ldr	r2, [pc, #184]	; (8106548 <HAL_DMA_IRQHandler+0x1b4>)
 810648e:	4293      	cmp	r3, r2
 8106490:	d04a      	beq.n	8106528 <HAL_DMA_IRQHandler+0x194>
 8106492:	687b      	ldr	r3, [r7, #4]
 8106494:	681b      	ldr	r3, [r3, #0]
 8106496:	4a2d      	ldr	r2, [pc, #180]	; (810654c <HAL_DMA_IRQHandler+0x1b8>)
 8106498:	4293      	cmp	r3, r2
 810649a:	d045      	beq.n	8106528 <HAL_DMA_IRQHandler+0x194>
 810649c:	687b      	ldr	r3, [r7, #4]
 810649e:	681b      	ldr	r3, [r3, #0]
 81064a0:	4a2b      	ldr	r2, [pc, #172]	; (8106550 <HAL_DMA_IRQHandler+0x1bc>)
 81064a2:	4293      	cmp	r3, r2
 81064a4:	d040      	beq.n	8106528 <HAL_DMA_IRQHandler+0x194>
 81064a6:	687b      	ldr	r3, [r7, #4]
 81064a8:	681b      	ldr	r3, [r3, #0]
 81064aa:	4a2a      	ldr	r2, [pc, #168]	; (8106554 <HAL_DMA_IRQHandler+0x1c0>)
 81064ac:	4293      	cmp	r3, r2
 81064ae:	d03b      	beq.n	8106528 <HAL_DMA_IRQHandler+0x194>
 81064b0:	687b      	ldr	r3, [r7, #4]
 81064b2:	681b      	ldr	r3, [r3, #0]
 81064b4:	4a28      	ldr	r2, [pc, #160]	; (8106558 <HAL_DMA_IRQHandler+0x1c4>)
 81064b6:	4293      	cmp	r3, r2
 81064b8:	d036      	beq.n	8106528 <HAL_DMA_IRQHandler+0x194>
 81064ba:	687b      	ldr	r3, [r7, #4]
 81064bc:	681b      	ldr	r3, [r3, #0]
 81064be:	4a27      	ldr	r2, [pc, #156]	; (810655c <HAL_DMA_IRQHandler+0x1c8>)
 81064c0:	4293      	cmp	r3, r2
 81064c2:	d031      	beq.n	8106528 <HAL_DMA_IRQHandler+0x194>
 81064c4:	687b      	ldr	r3, [r7, #4]
 81064c6:	681b      	ldr	r3, [r3, #0]
 81064c8:	4a25      	ldr	r2, [pc, #148]	; (8106560 <HAL_DMA_IRQHandler+0x1cc>)
 81064ca:	4293      	cmp	r3, r2
 81064cc:	d02c      	beq.n	8106528 <HAL_DMA_IRQHandler+0x194>
 81064ce:	687b      	ldr	r3, [r7, #4]
 81064d0:	681b      	ldr	r3, [r3, #0]
 81064d2:	4a24      	ldr	r2, [pc, #144]	; (8106564 <HAL_DMA_IRQHandler+0x1d0>)
 81064d4:	4293      	cmp	r3, r2
 81064d6:	d027      	beq.n	8106528 <HAL_DMA_IRQHandler+0x194>
 81064d8:	687b      	ldr	r3, [r7, #4]
 81064da:	681b      	ldr	r3, [r3, #0]
 81064dc:	4a22      	ldr	r2, [pc, #136]	; (8106568 <HAL_DMA_IRQHandler+0x1d4>)
 81064de:	4293      	cmp	r3, r2
 81064e0:	d022      	beq.n	8106528 <HAL_DMA_IRQHandler+0x194>
 81064e2:	687b      	ldr	r3, [r7, #4]
 81064e4:	681b      	ldr	r3, [r3, #0]
 81064e6:	4a21      	ldr	r2, [pc, #132]	; (810656c <HAL_DMA_IRQHandler+0x1d8>)
 81064e8:	4293      	cmp	r3, r2
 81064ea:	d01d      	beq.n	8106528 <HAL_DMA_IRQHandler+0x194>
 81064ec:	687b      	ldr	r3, [r7, #4]
 81064ee:	681b      	ldr	r3, [r3, #0]
 81064f0:	4a1f      	ldr	r2, [pc, #124]	; (8106570 <HAL_DMA_IRQHandler+0x1dc>)
 81064f2:	4293      	cmp	r3, r2
 81064f4:	d018      	beq.n	8106528 <HAL_DMA_IRQHandler+0x194>
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	681b      	ldr	r3, [r3, #0]
 81064fa:	4a1e      	ldr	r2, [pc, #120]	; (8106574 <HAL_DMA_IRQHandler+0x1e0>)
 81064fc:	4293      	cmp	r3, r2
 81064fe:	d013      	beq.n	8106528 <HAL_DMA_IRQHandler+0x194>
 8106500:	687b      	ldr	r3, [r7, #4]
 8106502:	681b      	ldr	r3, [r3, #0]
 8106504:	4a1c      	ldr	r2, [pc, #112]	; (8106578 <HAL_DMA_IRQHandler+0x1e4>)
 8106506:	4293      	cmp	r3, r2
 8106508:	d00e      	beq.n	8106528 <HAL_DMA_IRQHandler+0x194>
 810650a:	687b      	ldr	r3, [r7, #4]
 810650c:	681b      	ldr	r3, [r3, #0]
 810650e:	4a1b      	ldr	r2, [pc, #108]	; (810657c <HAL_DMA_IRQHandler+0x1e8>)
 8106510:	4293      	cmp	r3, r2
 8106512:	d009      	beq.n	8106528 <HAL_DMA_IRQHandler+0x194>
 8106514:	687b      	ldr	r3, [r7, #4]
 8106516:	681b      	ldr	r3, [r3, #0]
 8106518:	4a19      	ldr	r2, [pc, #100]	; (8106580 <HAL_DMA_IRQHandler+0x1ec>)
 810651a:	4293      	cmp	r3, r2
 810651c:	d004      	beq.n	8106528 <HAL_DMA_IRQHandler+0x194>
 810651e:	687b      	ldr	r3, [r7, #4]
 8106520:	681b      	ldr	r3, [r3, #0]
 8106522:	4a18      	ldr	r2, [pc, #96]	; (8106584 <HAL_DMA_IRQHandler+0x1f0>)
 8106524:	4293      	cmp	r3, r2
 8106526:	d12f      	bne.n	8106588 <HAL_DMA_IRQHandler+0x1f4>
 8106528:	687b      	ldr	r3, [r7, #4]
 810652a:	681b      	ldr	r3, [r3, #0]
 810652c:	681b      	ldr	r3, [r3, #0]
 810652e:	f003 0304 	and.w	r3, r3, #4
 8106532:	2b00      	cmp	r3, #0
 8106534:	bf14      	ite	ne
 8106536:	2301      	movne	r3, #1
 8106538:	2300      	moveq	r3, #0
 810653a:	b2db      	uxtb	r3, r3
 810653c:	e02e      	b.n	810659c <HAL_DMA_IRQHandler+0x208>
 810653e:	bf00      	nop
 8106540:	10000000 	.word	0x10000000
 8106544:	1b4e81b5 	.word	0x1b4e81b5
 8106548:	40020010 	.word	0x40020010
 810654c:	40020028 	.word	0x40020028
 8106550:	40020040 	.word	0x40020040
 8106554:	40020058 	.word	0x40020058
 8106558:	40020070 	.word	0x40020070
 810655c:	40020088 	.word	0x40020088
 8106560:	400200a0 	.word	0x400200a0
 8106564:	400200b8 	.word	0x400200b8
 8106568:	40020410 	.word	0x40020410
 810656c:	40020428 	.word	0x40020428
 8106570:	40020440 	.word	0x40020440
 8106574:	40020458 	.word	0x40020458
 8106578:	40020470 	.word	0x40020470
 810657c:	40020488 	.word	0x40020488
 8106580:	400204a0 	.word	0x400204a0
 8106584:	400204b8 	.word	0x400204b8
 8106588:	687b      	ldr	r3, [r7, #4]
 810658a:	681b      	ldr	r3, [r3, #0]
 810658c:	681b      	ldr	r3, [r3, #0]
 810658e:	f003 0308 	and.w	r3, r3, #8
 8106592:	2b00      	cmp	r3, #0
 8106594:	bf14      	ite	ne
 8106596:	2301      	movne	r3, #1
 8106598:	2300      	moveq	r3, #0
 810659a:	b2db      	uxtb	r3, r3
 810659c:	2b00      	cmp	r3, #0
 810659e:	d015      	beq.n	81065cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81065a0:	687b      	ldr	r3, [r7, #4]
 81065a2:	681b      	ldr	r3, [r3, #0]
 81065a4:	681a      	ldr	r2, [r3, #0]
 81065a6:	687b      	ldr	r3, [r7, #4]
 81065a8:	681b      	ldr	r3, [r3, #0]
 81065aa:	f022 0204 	bic.w	r2, r2, #4
 81065ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81065b0:	687b      	ldr	r3, [r7, #4]
 81065b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81065b4:	f003 031f 	and.w	r3, r3, #31
 81065b8:	2208      	movs	r2, #8
 81065ba:	409a      	lsls	r2, r3
 81065bc:	6a3b      	ldr	r3, [r7, #32]
 81065be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 81065c0:	687b      	ldr	r3, [r7, #4]
 81065c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81065c4:	f043 0201 	orr.w	r2, r3, #1
 81065c8:	687b      	ldr	r3, [r7, #4]
 81065ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81065cc:	687b      	ldr	r3, [r7, #4]
 81065ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81065d0:	f003 031f 	and.w	r3, r3, #31
 81065d4:	69ba      	ldr	r2, [r7, #24]
 81065d6:	fa22 f303 	lsr.w	r3, r2, r3
 81065da:	f003 0301 	and.w	r3, r3, #1
 81065de:	2b00      	cmp	r3, #0
 81065e0:	d06e      	beq.n	81066c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 81065e2:	687b      	ldr	r3, [r7, #4]
 81065e4:	681b      	ldr	r3, [r3, #0]
 81065e6:	4a69      	ldr	r2, [pc, #420]	; (810678c <HAL_DMA_IRQHandler+0x3f8>)
 81065e8:	4293      	cmp	r3, r2
 81065ea:	d04a      	beq.n	8106682 <HAL_DMA_IRQHandler+0x2ee>
 81065ec:	687b      	ldr	r3, [r7, #4]
 81065ee:	681b      	ldr	r3, [r3, #0]
 81065f0:	4a67      	ldr	r2, [pc, #412]	; (8106790 <HAL_DMA_IRQHandler+0x3fc>)
 81065f2:	4293      	cmp	r3, r2
 81065f4:	d045      	beq.n	8106682 <HAL_DMA_IRQHandler+0x2ee>
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	681b      	ldr	r3, [r3, #0]
 81065fa:	4a66      	ldr	r2, [pc, #408]	; (8106794 <HAL_DMA_IRQHandler+0x400>)
 81065fc:	4293      	cmp	r3, r2
 81065fe:	d040      	beq.n	8106682 <HAL_DMA_IRQHandler+0x2ee>
 8106600:	687b      	ldr	r3, [r7, #4]
 8106602:	681b      	ldr	r3, [r3, #0]
 8106604:	4a64      	ldr	r2, [pc, #400]	; (8106798 <HAL_DMA_IRQHandler+0x404>)
 8106606:	4293      	cmp	r3, r2
 8106608:	d03b      	beq.n	8106682 <HAL_DMA_IRQHandler+0x2ee>
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	681b      	ldr	r3, [r3, #0]
 810660e:	4a63      	ldr	r2, [pc, #396]	; (810679c <HAL_DMA_IRQHandler+0x408>)
 8106610:	4293      	cmp	r3, r2
 8106612:	d036      	beq.n	8106682 <HAL_DMA_IRQHandler+0x2ee>
 8106614:	687b      	ldr	r3, [r7, #4]
 8106616:	681b      	ldr	r3, [r3, #0]
 8106618:	4a61      	ldr	r2, [pc, #388]	; (81067a0 <HAL_DMA_IRQHandler+0x40c>)
 810661a:	4293      	cmp	r3, r2
 810661c:	d031      	beq.n	8106682 <HAL_DMA_IRQHandler+0x2ee>
 810661e:	687b      	ldr	r3, [r7, #4]
 8106620:	681b      	ldr	r3, [r3, #0]
 8106622:	4a60      	ldr	r2, [pc, #384]	; (81067a4 <HAL_DMA_IRQHandler+0x410>)
 8106624:	4293      	cmp	r3, r2
 8106626:	d02c      	beq.n	8106682 <HAL_DMA_IRQHandler+0x2ee>
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	4a5e      	ldr	r2, [pc, #376]	; (81067a8 <HAL_DMA_IRQHandler+0x414>)
 810662e:	4293      	cmp	r3, r2
 8106630:	d027      	beq.n	8106682 <HAL_DMA_IRQHandler+0x2ee>
 8106632:	687b      	ldr	r3, [r7, #4]
 8106634:	681b      	ldr	r3, [r3, #0]
 8106636:	4a5d      	ldr	r2, [pc, #372]	; (81067ac <HAL_DMA_IRQHandler+0x418>)
 8106638:	4293      	cmp	r3, r2
 810663a:	d022      	beq.n	8106682 <HAL_DMA_IRQHandler+0x2ee>
 810663c:	687b      	ldr	r3, [r7, #4]
 810663e:	681b      	ldr	r3, [r3, #0]
 8106640:	4a5b      	ldr	r2, [pc, #364]	; (81067b0 <HAL_DMA_IRQHandler+0x41c>)
 8106642:	4293      	cmp	r3, r2
 8106644:	d01d      	beq.n	8106682 <HAL_DMA_IRQHandler+0x2ee>
 8106646:	687b      	ldr	r3, [r7, #4]
 8106648:	681b      	ldr	r3, [r3, #0]
 810664a:	4a5a      	ldr	r2, [pc, #360]	; (81067b4 <HAL_DMA_IRQHandler+0x420>)
 810664c:	4293      	cmp	r3, r2
 810664e:	d018      	beq.n	8106682 <HAL_DMA_IRQHandler+0x2ee>
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	681b      	ldr	r3, [r3, #0]
 8106654:	4a58      	ldr	r2, [pc, #352]	; (81067b8 <HAL_DMA_IRQHandler+0x424>)
 8106656:	4293      	cmp	r3, r2
 8106658:	d013      	beq.n	8106682 <HAL_DMA_IRQHandler+0x2ee>
 810665a:	687b      	ldr	r3, [r7, #4]
 810665c:	681b      	ldr	r3, [r3, #0]
 810665e:	4a57      	ldr	r2, [pc, #348]	; (81067bc <HAL_DMA_IRQHandler+0x428>)
 8106660:	4293      	cmp	r3, r2
 8106662:	d00e      	beq.n	8106682 <HAL_DMA_IRQHandler+0x2ee>
 8106664:	687b      	ldr	r3, [r7, #4]
 8106666:	681b      	ldr	r3, [r3, #0]
 8106668:	4a55      	ldr	r2, [pc, #340]	; (81067c0 <HAL_DMA_IRQHandler+0x42c>)
 810666a:	4293      	cmp	r3, r2
 810666c:	d009      	beq.n	8106682 <HAL_DMA_IRQHandler+0x2ee>
 810666e:	687b      	ldr	r3, [r7, #4]
 8106670:	681b      	ldr	r3, [r3, #0]
 8106672:	4a54      	ldr	r2, [pc, #336]	; (81067c4 <HAL_DMA_IRQHandler+0x430>)
 8106674:	4293      	cmp	r3, r2
 8106676:	d004      	beq.n	8106682 <HAL_DMA_IRQHandler+0x2ee>
 8106678:	687b      	ldr	r3, [r7, #4]
 810667a:	681b      	ldr	r3, [r3, #0]
 810667c:	4a52      	ldr	r2, [pc, #328]	; (81067c8 <HAL_DMA_IRQHandler+0x434>)
 810667e:	4293      	cmp	r3, r2
 8106680:	d10a      	bne.n	8106698 <HAL_DMA_IRQHandler+0x304>
 8106682:	687b      	ldr	r3, [r7, #4]
 8106684:	681b      	ldr	r3, [r3, #0]
 8106686:	695b      	ldr	r3, [r3, #20]
 8106688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810668c:	2b00      	cmp	r3, #0
 810668e:	bf14      	ite	ne
 8106690:	2301      	movne	r3, #1
 8106692:	2300      	moveq	r3, #0
 8106694:	b2db      	uxtb	r3, r3
 8106696:	e003      	b.n	81066a0 <HAL_DMA_IRQHandler+0x30c>
 8106698:	687b      	ldr	r3, [r7, #4]
 810669a:	681b      	ldr	r3, [r3, #0]
 810669c:	681b      	ldr	r3, [r3, #0]
 810669e:	2300      	movs	r3, #0
 81066a0:	2b00      	cmp	r3, #0
 81066a2:	d00d      	beq.n	81066c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81066a4:	687b      	ldr	r3, [r7, #4]
 81066a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81066a8:	f003 031f 	and.w	r3, r3, #31
 81066ac:	2201      	movs	r2, #1
 81066ae:	409a      	lsls	r2, r3
 81066b0:	6a3b      	ldr	r3, [r7, #32]
 81066b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81066b4:	687b      	ldr	r3, [r7, #4]
 81066b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066b8:	f043 0202 	orr.w	r2, r3, #2
 81066bc:	687b      	ldr	r3, [r7, #4]
 81066be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81066c0:	687b      	ldr	r3, [r7, #4]
 81066c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81066c4:	f003 031f 	and.w	r3, r3, #31
 81066c8:	2204      	movs	r2, #4
 81066ca:	409a      	lsls	r2, r3
 81066cc:	69bb      	ldr	r3, [r7, #24]
 81066ce:	4013      	ands	r3, r2
 81066d0:	2b00      	cmp	r3, #0
 81066d2:	f000 808f 	beq.w	81067f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	681b      	ldr	r3, [r3, #0]
 81066da:	4a2c      	ldr	r2, [pc, #176]	; (810678c <HAL_DMA_IRQHandler+0x3f8>)
 81066dc:	4293      	cmp	r3, r2
 81066de:	d04a      	beq.n	8106776 <HAL_DMA_IRQHandler+0x3e2>
 81066e0:	687b      	ldr	r3, [r7, #4]
 81066e2:	681b      	ldr	r3, [r3, #0]
 81066e4:	4a2a      	ldr	r2, [pc, #168]	; (8106790 <HAL_DMA_IRQHandler+0x3fc>)
 81066e6:	4293      	cmp	r3, r2
 81066e8:	d045      	beq.n	8106776 <HAL_DMA_IRQHandler+0x3e2>
 81066ea:	687b      	ldr	r3, [r7, #4]
 81066ec:	681b      	ldr	r3, [r3, #0]
 81066ee:	4a29      	ldr	r2, [pc, #164]	; (8106794 <HAL_DMA_IRQHandler+0x400>)
 81066f0:	4293      	cmp	r3, r2
 81066f2:	d040      	beq.n	8106776 <HAL_DMA_IRQHandler+0x3e2>
 81066f4:	687b      	ldr	r3, [r7, #4]
 81066f6:	681b      	ldr	r3, [r3, #0]
 81066f8:	4a27      	ldr	r2, [pc, #156]	; (8106798 <HAL_DMA_IRQHandler+0x404>)
 81066fa:	4293      	cmp	r3, r2
 81066fc:	d03b      	beq.n	8106776 <HAL_DMA_IRQHandler+0x3e2>
 81066fe:	687b      	ldr	r3, [r7, #4]
 8106700:	681b      	ldr	r3, [r3, #0]
 8106702:	4a26      	ldr	r2, [pc, #152]	; (810679c <HAL_DMA_IRQHandler+0x408>)
 8106704:	4293      	cmp	r3, r2
 8106706:	d036      	beq.n	8106776 <HAL_DMA_IRQHandler+0x3e2>
 8106708:	687b      	ldr	r3, [r7, #4]
 810670a:	681b      	ldr	r3, [r3, #0]
 810670c:	4a24      	ldr	r2, [pc, #144]	; (81067a0 <HAL_DMA_IRQHandler+0x40c>)
 810670e:	4293      	cmp	r3, r2
 8106710:	d031      	beq.n	8106776 <HAL_DMA_IRQHandler+0x3e2>
 8106712:	687b      	ldr	r3, [r7, #4]
 8106714:	681b      	ldr	r3, [r3, #0]
 8106716:	4a23      	ldr	r2, [pc, #140]	; (81067a4 <HAL_DMA_IRQHandler+0x410>)
 8106718:	4293      	cmp	r3, r2
 810671a:	d02c      	beq.n	8106776 <HAL_DMA_IRQHandler+0x3e2>
 810671c:	687b      	ldr	r3, [r7, #4]
 810671e:	681b      	ldr	r3, [r3, #0]
 8106720:	4a21      	ldr	r2, [pc, #132]	; (81067a8 <HAL_DMA_IRQHandler+0x414>)
 8106722:	4293      	cmp	r3, r2
 8106724:	d027      	beq.n	8106776 <HAL_DMA_IRQHandler+0x3e2>
 8106726:	687b      	ldr	r3, [r7, #4]
 8106728:	681b      	ldr	r3, [r3, #0]
 810672a:	4a20      	ldr	r2, [pc, #128]	; (81067ac <HAL_DMA_IRQHandler+0x418>)
 810672c:	4293      	cmp	r3, r2
 810672e:	d022      	beq.n	8106776 <HAL_DMA_IRQHandler+0x3e2>
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	681b      	ldr	r3, [r3, #0]
 8106734:	4a1e      	ldr	r2, [pc, #120]	; (81067b0 <HAL_DMA_IRQHandler+0x41c>)
 8106736:	4293      	cmp	r3, r2
 8106738:	d01d      	beq.n	8106776 <HAL_DMA_IRQHandler+0x3e2>
 810673a:	687b      	ldr	r3, [r7, #4]
 810673c:	681b      	ldr	r3, [r3, #0]
 810673e:	4a1d      	ldr	r2, [pc, #116]	; (81067b4 <HAL_DMA_IRQHandler+0x420>)
 8106740:	4293      	cmp	r3, r2
 8106742:	d018      	beq.n	8106776 <HAL_DMA_IRQHandler+0x3e2>
 8106744:	687b      	ldr	r3, [r7, #4]
 8106746:	681b      	ldr	r3, [r3, #0]
 8106748:	4a1b      	ldr	r2, [pc, #108]	; (81067b8 <HAL_DMA_IRQHandler+0x424>)
 810674a:	4293      	cmp	r3, r2
 810674c:	d013      	beq.n	8106776 <HAL_DMA_IRQHandler+0x3e2>
 810674e:	687b      	ldr	r3, [r7, #4]
 8106750:	681b      	ldr	r3, [r3, #0]
 8106752:	4a1a      	ldr	r2, [pc, #104]	; (81067bc <HAL_DMA_IRQHandler+0x428>)
 8106754:	4293      	cmp	r3, r2
 8106756:	d00e      	beq.n	8106776 <HAL_DMA_IRQHandler+0x3e2>
 8106758:	687b      	ldr	r3, [r7, #4]
 810675a:	681b      	ldr	r3, [r3, #0]
 810675c:	4a18      	ldr	r2, [pc, #96]	; (81067c0 <HAL_DMA_IRQHandler+0x42c>)
 810675e:	4293      	cmp	r3, r2
 8106760:	d009      	beq.n	8106776 <HAL_DMA_IRQHandler+0x3e2>
 8106762:	687b      	ldr	r3, [r7, #4]
 8106764:	681b      	ldr	r3, [r3, #0]
 8106766:	4a17      	ldr	r2, [pc, #92]	; (81067c4 <HAL_DMA_IRQHandler+0x430>)
 8106768:	4293      	cmp	r3, r2
 810676a:	d004      	beq.n	8106776 <HAL_DMA_IRQHandler+0x3e2>
 810676c:	687b      	ldr	r3, [r7, #4]
 810676e:	681b      	ldr	r3, [r3, #0]
 8106770:	4a15      	ldr	r2, [pc, #84]	; (81067c8 <HAL_DMA_IRQHandler+0x434>)
 8106772:	4293      	cmp	r3, r2
 8106774:	d12a      	bne.n	81067cc <HAL_DMA_IRQHandler+0x438>
 8106776:	687b      	ldr	r3, [r7, #4]
 8106778:	681b      	ldr	r3, [r3, #0]
 810677a:	681b      	ldr	r3, [r3, #0]
 810677c:	f003 0302 	and.w	r3, r3, #2
 8106780:	2b00      	cmp	r3, #0
 8106782:	bf14      	ite	ne
 8106784:	2301      	movne	r3, #1
 8106786:	2300      	moveq	r3, #0
 8106788:	b2db      	uxtb	r3, r3
 810678a:	e023      	b.n	81067d4 <HAL_DMA_IRQHandler+0x440>
 810678c:	40020010 	.word	0x40020010
 8106790:	40020028 	.word	0x40020028
 8106794:	40020040 	.word	0x40020040
 8106798:	40020058 	.word	0x40020058
 810679c:	40020070 	.word	0x40020070
 81067a0:	40020088 	.word	0x40020088
 81067a4:	400200a0 	.word	0x400200a0
 81067a8:	400200b8 	.word	0x400200b8
 81067ac:	40020410 	.word	0x40020410
 81067b0:	40020428 	.word	0x40020428
 81067b4:	40020440 	.word	0x40020440
 81067b8:	40020458 	.word	0x40020458
 81067bc:	40020470 	.word	0x40020470
 81067c0:	40020488 	.word	0x40020488
 81067c4:	400204a0 	.word	0x400204a0
 81067c8:	400204b8 	.word	0x400204b8
 81067cc:	687b      	ldr	r3, [r7, #4]
 81067ce:	681b      	ldr	r3, [r3, #0]
 81067d0:	681b      	ldr	r3, [r3, #0]
 81067d2:	2300      	movs	r3, #0
 81067d4:	2b00      	cmp	r3, #0
 81067d6:	d00d      	beq.n	81067f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81067d8:	687b      	ldr	r3, [r7, #4]
 81067da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81067dc:	f003 031f 	and.w	r3, r3, #31
 81067e0:	2204      	movs	r2, #4
 81067e2:	409a      	lsls	r2, r3
 81067e4:	6a3b      	ldr	r3, [r7, #32]
 81067e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 81067e8:	687b      	ldr	r3, [r7, #4]
 81067ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81067ec:	f043 0204 	orr.w	r2, r3, #4
 81067f0:	687b      	ldr	r3, [r7, #4]
 81067f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81067f4:	687b      	ldr	r3, [r7, #4]
 81067f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81067f8:	f003 031f 	and.w	r3, r3, #31
 81067fc:	2210      	movs	r2, #16
 81067fe:	409a      	lsls	r2, r3
 8106800:	69bb      	ldr	r3, [r7, #24]
 8106802:	4013      	ands	r3, r2
 8106804:	2b00      	cmp	r3, #0
 8106806:	f000 80a6 	beq.w	8106956 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 810680a:	687b      	ldr	r3, [r7, #4]
 810680c:	681b      	ldr	r3, [r3, #0]
 810680e:	4a85      	ldr	r2, [pc, #532]	; (8106a24 <HAL_DMA_IRQHandler+0x690>)
 8106810:	4293      	cmp	r3, r2
 8106812:	d04a      	beq.n	81068aa <HAL_DMA_IRQHandler+0x516>
 8106814:	687b      	ldr	r3, [r7, #4]
 8106816:	681b      	ldr	r3, [r3, #0]
 8106818:	4a83      	ldr	r2, [pc, #524]	; (8106a28 <HAL_DMA_IRQHandler+0x694>)
 810681a:	4293      	cmp	r3, r2
 810681c:	d045      	beq.n	81068aa <HAL_DMA_IRQHandler+0x516>
 810681e:	687b      	ldr	r3, [r7, #4]
 8106820:	681b      	ldr	r3, [r3, #0]
 8106822:	4a82      	ldr	r2, [pc, #520]	; (8106a2c <HAL_DMA_IRQHandler+0x698>)
 8106824:	4293      	cmp	r3, r2
 8106826:	d040      	beq.n	81068aa <HAL_DMA_IRQHandler+0x516>
 8106828:	687b      	ldr	r3, [r7, #4]
 810682a:	681b      	ldr	r3, [r3, #0]
 810682c:	4a80      	ldr	r2, [pc, #512]	; (8106a30 <HAL_DMA_IRQHandler+0x69c>)
 810682e:	4293      	cmp	r3, r2
 8106830:	d03b      	beq.n	81068aa <HAL_DMA_IRQHandler+0x516>
 8106832:	687b      	ldr	r3, [r7, #4]
 8106834:	681b      	ldr	r3, [r3, #0]
 8106836:	4a7f      	ldr	r2, [pc, #508]	; (8106a34 <HAL_DMA_IRQHandler+0x6a0>)
 8106838:	4293      	cmp	r3, r2
 810683a:	d036      	beq.n	81068aa <HAL_DMA_IRQHandler+0x516>
 810683c:	687b      	ldr	r3, [r7, #4]
 810683e:	681b      	ldr	r3, [r3, #0]
 8106840:	4a7d      	ldr	r2, [pc, #500]	; (8106a38 <HAL_DMA_IRQHandler+0x6a4>)
 8106842:	4293      	cmp	r3, r2
 8106844:	d031      	beq.n	81068aa <HAL_DMA_IRQHandler+0x516>
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	681b      	ldr	r3, [r3, #0]
 810684a:	4a7c      	ldr	r2, [pc, #496]	; (8106a3c <HAL_DMA_IRQHandler+0x6a8>)
 810684c:	4293      	cmp	r3, r2
 810684e:	d02c      	beq.n	81068aa <HAL_DMA_IRQHandler+0x516>
 8106850:	687b      	ldr	r3, [r7, #4]
 8106852:	681b      	ldr	r3, [r3, #0]
 8106854:	4a7a      	ldr	r2, [pc, #488]	; (8106a40 <HAL_DMA_IRQHandler+0x6ac>)
 8106856:	4293      	cmp	r3, r2
 8106858:	d027      	beq.n	81068aa <HAL_DMA_IRQHandler+0x516>
 810685a:	687b      	ldr	r3, [r7, #4]
 810685c:	681b      	ldr	r3, [r3, #0]
 810685e:	4a79      	ldr	r2, [pc, #484]	; (8106a44 <HAL_DMA_IRQHandler+0x6b0>)
 8106860:	4293      	cmp	r3, r2
 8106862:	d022      	beq.n	81068aa <HAL_DMA_IRQHandler+0x516>
 8106864:	687b      	ldr	r3, [r7, #4]
 8106866:	681b      	ldr	r3, [r3, #0]
 8106868:	4a77      	ldr	r2, [pc, #476]	; (8106a48 <HAL_DMA_IRQHandler+0x6b4>)
 810686a:	4293      	cmp	r3, r2
 810686c:	d01d      	beq.n	81068aa <HAL_DMA_IRQHandler+0x516>
 810686e:	687b      	ldr	r3, [r7, #4]
 8106870:	681b      	ldr	r3, [r3, #0]
 8106872:	4a76      	ldr	r2, [pc, #472]	; (8106a4c <HAL_DMA_IRQHandler+0x6b8>)
 8106874:	4293      	cmp	r3, r2
 8106876:	d018      	beq.n	81068aa <HAL_DMA_IRQHandler+0x516>
 8106878:	687b      	ldr	r3, [r7, #4]
 810687a:	681b      	ldr	r3, [r3, #0]
 810687c:	4a74      	ldr	r2, [pc, #464]	; (8106a50 <HAL_DMA_IRQHandler+0x6bc>)
 810687e:	4293      	cmp	r3, r2
 8106880:	d013      	beq.n	81068aa <HAL_DMA_IRQHandler+0x516>
 8106882:	687b      	ldr	r3, [r7, #4]
 8106884:	681b      	ldr	r3, [r3, #0]
 8106886:	4a73      	ldr	r2, [pc, #460]	; (8106a54 <HAL_DMA_IRQHandler+0x6c0>)
 8106888:	4293      	cmp	r3, r2
 810688a:	d00e      	beq.n	81068aa <HAL_DMA_IRQHandler+0x516>
 810688c:	687b      	ldr	r3, [r7, #4]
 810688e:	681b      	ldr	r3, [r3, #0]
 8106890:	4a71      	ldr	r2, [pc, #452]	; (8106a58 <HAL_DMA_IRQHandler+0x6c4>)
 8106892:	4293      	cmp	r3, r2
 8106894:	d009      	beq.n	81068aa <HAL_DMA_IRQHandler+0x516>
 8106896:	687b      	ldr	r3, [r7, #4]
 8106898:	681b      	ldr	r3, [r3, #0]
 810689a:	4a70      	ldr	r2, [pc, #448]	; (8106a5c <HAL_DMA_IRQHandler+0x6c8>)
 810689c:	4293      	cmp	r3, r2
 810689e:	d004      	beq.n	81068aa <HAL_DMA_IRQHandler+0x516>
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	681b      	ldr	r3, [r3, #0]
 81068a4:	4a6e      	ldr	r2, [pc, #440]	; (8106a60 <HAL_DMA_IRQHandler+0x6cc>)
 81068a6:	4293      	cmp	r3, r2
 81068a8:	d10a      	bne.n	81068c0 <HAL_DMA_IRQHandler+0x52c>
 81068aa:	687b      	ldr	r3, [r7, #4]
 81068ac:	681b      	ldr	r3, [r3, #0]
 81068ae:	681b      	ldr	r3, [r3, #0]
 81068b0:	f003 0308 	and.w	r3, r3, #8
 81068b4:	2b00      	cmp	r3, #0
 81068b6:	bf14      	ite	ne
 81068b8:	2301      	movne	r3, #1
 81068ba:	2300      	moveq	r3, #0
 81068bc:	b2db      	uxtb	r3, r3
 81068be:	e009      	b.n	81068d4 <HAL_DMA_IRQHandler+0x540>
 81068c0:	687b      	ldr	r3, [r7, #4]
 81068c2:	681b      	ldr	r3, [r3, #0]
 81068c4:	681b      	ldr	r3, [r3, #0]
 81068c6:	f003 0304 	and.w	r3, r3, #4
 81068ca:	2b00      	cmp	r3, #0
 81068cc:	bf14      	ite	ne
 81068ce:	2301      	movne	r3, #1
 81068d0:	2300      	moveq	r3, #0
 81068d2:	b2db      	uxtb	r3, r3
 81068d4:	2b00      	cmp	r3, #0
 81068d6:	d03e      	beq.n	8106956 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 81068d8:	687b      	ldr	r3, [r7, #4]
 81068da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81068dc:	f003 031f 	and.w	r3, r3, #31
 81068e0:	2210      	movs	r2, #16
 81068e2:	409a      	lsls	r2, r3
 81068e4:	6a3b      	ldr	r3, [r7, #32]
 81068e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81068e8:	687b      	ldr	r3, [r7, #4]
 81068ea:	681b      	ldr	r3, [r3, #0]
 81068ec:	681b      	ldr	r3, [r3, #0]
 81068ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81068f2:	2b00      	cmp	r3, #0
 81068f4:	d018      	beq.n	8106928 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81068f6:	687b      	ldr	r3, [r7, #4]
 81068f8:	681b      	ldr	r3, [r3, #0]
 81068fa:	681b      	ldr	r3, [r3, #0]
 81068fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8106900:	2b00      	cmp	r3, #0
 8106902:	d108      	bne.n	8106916 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8106904:	687b      	ldr	r3, [r7, #4]
 8106906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106908:	2b00      	cmp	r3, #0
 810690a:	d024      	beq.n	8106956 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 810690c:	687b      	ldr	r3, [r7, #4]
 810690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106910:	6878      	ldr	r0, [r7, #4]
 8106912:	4798      	blx	r3
 8106914:	e01f      	b.n	8106956 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8106916:	687b      	ldr	r3, [r7, #4]
 8106918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810691a:	2b00      	cmp	r3, #0
 810691c:	d01b      	beq.n	8106956 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 810691e:	687b      	ldr	r3, [r7, #4]
 8106920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106922:	6878      	ldr	r0, [r7, #4]
 8106924:	4798      	blx	r3
 8106926:	e016      	b.n	8106956 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8106928:	687b      	ldr	r3, [r7, #4]
 810692a:	681b      	ldr	r3, [r3, #0]
 810692c:	681b      	ldr	r3, [r3, #0]
 810692e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106932:	2b00      	cmp	r3, #0
 8106934:	d107      	bne.n	8106946 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8106936:	687b      	ldr	r3, [r7, #4]
 8106938:	681b      	ldr	r3, [r3, #0]
 810693a:	681a      	ldr	r2, [r3, #0]
 810693c:	687b      	ldr	r3, [r7, #4]
 810693e:	681b      	ldr	r3, [r3, #0]
 8106940:	f022 0208 	bic.w	r2, r2, #8
 8106944:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8106946:	687b      	ldr	r3, [r7, #4]
 8106948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810694a:	2b00      	cmp	r3, #0
 810694c:	d003      	beq.n	8106956 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 810694e:	687b      	ldr	r3, [r7, #4]
 8106950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106952:	6878      	ldr	r0, [r7, #4]
 8106954:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8106956:	687b      	ldr	r3, [r7, #4]
 8106958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810695a:	f003 031f 	and.w	r3, r3, #31
 810695e:	2220      	movs	r2, #32
 8106960:	409a      	lsls	r2, r3
 8106962:	69bb      	ldr	r3, [r7, #24]
 8106964:	4013      	ands	r3, r2
 8106966:	2b00      	cmp	r3, #0
 8106968:	f000 8110 	beq.w	8106b8c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 810696c:	687b      	ldr	r3, [r7, #4]
 810696e:	681b      	ldr	r3, [r3, #0]
 8106970:	4a2c      	ldr	r2, [pc, #176]	; (8106a24 <HAL_DMA_IRQHandler+0x690>)
 8106972:	4293      	cmp	r3, r2
 8106974:	d04a      	beq.n	8106a0c <HAL_DMA_IRQHandler+0x678>
 8106976:	687b      	ldr	r3, [r7, #4]
 8106978:	681b      	ldr	r3, [r3, #0]
 810697a:	4a2b      	ldr	r2, [pc, #172]	; (8106a28 <HAL_DMA_IRQHandler+0x694>)
 810697c:	4293      	cmp	r3, r2
 810697e:	d045      	beq.n	8106a0c <HAL_DMA_IRQHandler+0x678>
 8106980:	687b      	ldr	r3, [r7, #4]
 8106982:	681b      	ldr	r3, [r3, #0]
 8106984:	4a29      	ldr	r2, [pc, #164]	; (8106a2c <HAL_DMA_IRQHandler+0x698>)
 8106986:	4293      	cmp	r3, r2
 8106988:	d040      	beq.n	8106a0c <HAL_DMA_IRQHandler+0x678>
 810698a:	687b      	ldr	r3, [r7, #4]
 810698c:	681b      	ldr	r3, [r3, #0]
 810698e:	4a28      	ldr	r2, [pc, #160]	; (8106a30 <HAL_DMA_IRQHandler+0x69c>)
 8106990:	4293      	cmp	r3, r2
 8106992:	d03b      	beq.n	8106a0c <HAL_DMA_IRQHandler+0x678>
 8106994:	687b      	ldr	r3, [r7, #4]
 8106996:	681b      	ldr	r3, [r3, #0]
 8106998:	4a26      	ldr	r2, [pc, #152]	; (8106a34 <HAL_DMA_IRQHandler+0x6a0>)
 810699a:	4293      	cmp	r3, r2
 810699c:	d036      	beq.n	8106a0c <HAL_DMA_IRQHandler+0x678>
 810699e:	687b      	ldr	r3, [r7, #4]
 81069a0:	681b      	ldr	r3, [r3, #0]
 81069a2:	4a25      	ldr	r2, [pc, #148]	; (8106a38 <HAL_DMA_IRQHandler+0x6a4>)
 81069a4:	4293      	cmp	r3, r2
 81069a6:	d031      	beq.n	8106a0c <HAL_DMA_IRQHandler+0x678>
 81069a8:	687b      	ldr	r3, [r7, #4]
 81069aa:	681b      	ldr	r3, [r3, #0]
 81069ac:	4a23      	ldr	r2, [pc, #140]	; (8106a3c <HAL_DMA_IRQHandler+0x6a8>)
 81069ae:	4293      	cmp	r3, r2
 81069b0:	d02c      	beq.n	8106a0c <HAL_DMA_IRQHandler+0x678>
 81069b2:	687b      	ldr	r3, [r7, #4]
 81069b4:	681b      	ldr	r3, [r3, #0]
 81069b6:	4a22      	ldr	r2, [pc, #136]	; (8106a40 <HAL_DMA_IRQHandler+0x6ac>)
 81069b8:	4293      	cmp	r3, r2
 81069ba:	d027      	beq.n	8106a0c <HAL_DMA_IRQHandler+0x678>
 81069bc:	687b      	ldr	r3, [r7, #4]
 81069be:	681b      	ldr	r3, [r3, #0]
 81069c0:	4a20      	ldr	r2, [pc, #128]	; (8106a44 <HAL_DMA_IRQHandler+0x6b0>)
 81069c2:	4293      	cmp	r3, r2
 81069c4:	d022      	beq.n	8106a0c <HAL_DMA_IRQHandler+0x678>
 81069c6:	687b      	ldr	r3, [r7, #4]
 81069c8:	681b      	ldr	r3, [r3, #0]
 81069ca:	4a1f      	ldr	r2, [pc, #124]	; (8106a48 <HAL_DMA_IRQHandler+0x6b4>)
 81069cc:	4293      	cmp	r3, r2
 81069ce:	d01d      	beq.n	8106a0c <HAL_DMA_IRQHandler+0x678>
 81069d0:	687b      	ldr	r3, [r7, #4]
 81069d2:	681b      	ldr	r3, [r3, #0]
 81069d4:	4a1d      	ldr	r2, [pc, #116]	; (8106a4c <HAL_DMA_IRQHandler+0x6b8>)
 81069d6:	4293      	cmp	r3, r2
 81069d8:	d018      	beq.n	8106a0c <HAL_DMA_IRQHandler+0x678>
 81069da:	687b      	ldr	r3, [r7, #4]
 81069dc:	681b      	ldr	r3, [r3, #0]
 81069de:	4a1c      	ldr	r2, [pc, #112]	; (8106a50 <HAL_DMA_IRQHandler+0x6bc>)
 81069e0:	4293      	cmp	r3, r2
 81069e2:	d013      	beq.n	8106a0c <HAL_DMA_IRQHandler+0x678>
 81069e4:	687b      	ldr	r3, [r7, #4]
 81069e6:	681b      	ldr	r3, [r3, #0]
 81069e8:	4a1a      	ldr	r2, [pc, #104]	; (8106a54 <HAL_DMA_IRQHandler+0x6c0>)
 81069ea:	4293      	cmp	r3, r2
 81069ec:	d00e      	beq.n	8106a0c <HAL_DMA_IRQHandler+0x678>
 81069ee:	687b      	ldr	r3, [r7, #4]
 81069f0:	681b      	ldr	r3, [r3, #0]
 81069f2:	4a19      	ldr	r2, [pc, #100]	; (8106a58 <HAL_DMA_IRQHandler+0x6c4>)
 81069f4:	4293      	cmp	r3, r2
 81069f6:	d009      	beq.n	8106a0c <HAL_DMA_IRQHandler+0x678>
 81069f8:	687b      	ldr	r3, [r7, #4]
 81069fa:	681b      	ldr	r3, [r3, #0]
 81069fc:	4a17      	ldr	r2, [pc, #92]	; (8106a5c <HAL_DMA_IRQHandler+0x6c8>)
 81069fe:	4293      	cmp	r3, r2
 8106a00:	d004      	beq.n	8106a0c <HAL_DMA_IRQHandler+0x678>
 8106a02:	687b      	ldr	r3, [r7, #4]
 8106a04:	681b      	ldr	r3, [r3, #0]
 8106a06:	4a16      	ldr	r2, [pc, #88]	; (8106a60 <HAL_DMA_IRQHandler+0x6cc>)
 8106a08:	4293      	cmp	r3, r2
 8106a0a:	d12b      	bne.n	8106a64 <HAL_DMA_IRQHandler+0x6d0>
 8106a0c:	687b      	ldr	r3, [r7, #4]
 8106a0e:	681b      	ldr	r3, [r3, #0]
 8106a10:	681b      	ldr	r3, [r3, #0]
 8106a12:	f003 0310 	and.w	r3, r3, #16
 8106a16:	2b00      	cmp	r3, #0
 8106a18:	bf14      	ite	ne
 8106a1a:	2301      	movne	r3, #1
 8106a1c:	2300      	moveq	r3, #0
 8106a1e:	b2db      	uxtb	r3, r3
 8106a20:	e02a      	b.n	8106a78 <HAL_DMA_IRQHandler+0x6e4>
 8106a22:	bf00      	nop
 8106a24:	40020010 	.word	0x40020010
 8106a28:	40020028 	.word	0x40020028
 8106a2c:	40020040 	.word	0x40020040
 8106a30:	40020058 	.word	0x40020058
 8106a34:	40020070 	.word	0x40020070
 8106a38:	40020088 	.word	0x40020088
 8106a3c:	400200a0 	.word	0x400200a0
 8106a40:	400200b8 	.word	0x400200b8
 8106a44:	40020410 	.word	0x40020410
 8106a48:	40020428 	.word	0x40020428
 8106a4c:	40020440 	.word	0x40020440
 8106a50:	40020458 	.word	0x40020458
 8106a54:	40020470 	.word	0x40020470
 8106a58:	40020488 	.word	0x40020488
 8106a5c:	400204a0 	.word	0x400204a0
 8106a60:	400204b8 	.word	0x400204b8
 8106a64:	687b      	ldr	r3, [r7, #4]
 8106a66:	681b      	ldr	r3, [r3, #0]
 8106a68:	681b      	ldr	r3, [r3, #0]
 8106a6a:	f003 0302 	and.w	r3, r3, #2
 8106a6e:	2b00      	cmp	r3, #0
 8106a70:	bf14      	ite	ne
 8106a72:	2301      	movne	r3, #1
 8106a74:	2300      	moveq	r3, #0
 8106a76:	b2db      	uxtb	r3, r3
 8106a78:	2b00      	cmp	r3, #0
 8106a7a:	f000 8087 	beq.w	8106b8c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8106a7e:	687b      	ldr	r3, [r7, #4]
 8106a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106a82:	f003 031f 	and.w	r3, r3, #31
 8106a86:	2220      	movs	r2, #32
 8106a88:	409a      	lsls	r2, r3
 8106a8a:	6a3b      	ldr	r3, [r7, #32]
 8106a8c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8106a8e:	687b      	ldr	r3, [r7, #4]
 8106a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8106a94:	b2db      	uxtb	r3, r3
 8106a96:	2b04      	cmp	r3, #4
 8106a98:	d139      	bne.n	8106b0e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8106a9a:	687b      	ldr	r3, [r7, #4]
 8106a9c:	681b      	ldr	r3, [r3, #0]
 8106a9e:	681a      	ldr	r2, [r3, #0]
 8106aa0:	687b      	ldr	r3, [r7, #4]
 8106aa2:	681b      	ldr	r3, [r3, #0]
 8106aa4:	f022 0216 	bic.w	r2, r2, #22
 8106aa8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8106aaa:	687b      	ldr	r3, [r7, #4]
 8106aac:	681b      	ldr	r3, [r3, #0]
 8106aae:	695a      	ldr	r2, [r3, #20]
 8106ab0:	687b      	ldr	r3, [r7, #4]
 8106ab2:	681b      	ldr	r3, [r3, #0]
 8106ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8106ab8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8106aba:	687b      	ldr	r3, [r7, #4]
 8106abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106abe:	2b00      	cmp	r3, #0
 8106ac0:	d103      	bne.n	8106aca <HAL_DMA_IRQHandler+0x736>
 8106ac2:	687b      	ldr	r3, [r7, #4]
 8106ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106ac6:	2b00      	cmp	r3, #0
 8106ac8:	d007      	beq.n	8106ada <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8106aca:	687b      	ldr	r3, [r7, #4]
 8106acc:	681b      	ldr	r3, [r3, #0]
 8106ace:	681a      	ldr	r2, [r3, #0]
 8106ad0:	687b      	ldr	r3, [r7, #4]
 8106ad2:	681b      	ldr	r3, [r3, #0]
 8106ad4:	f022 0208 	bic.w	r2, r2, #8
 8106ad8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106ade:	f003 031f 	and.w	r3, r3, #31
 8106ae2:	223f      	movs	r2, #63	; 0x3f
 8106ae4:	409a      	lsls	r2, r3
 8106ae6:	6a3b      	ldr	r3, [r7, #32]
 8106ae8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8106aea:	687b      	ldr	r3, [r7, #4]
 8106aec:	2201      	movs	r2, #1
 8106aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8106af2:	687b      	ldr	r3, [r7, #4]
 8106af4:	2200      	movs	r2, #0
 8106af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8106afa:	687b      	ldr	r3, [r7, #4]
 8106afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106afe:	2b00      	cmp	r3, #0
 8106b00:	f000 834a 	beq.w	8107198 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8106b04:	687b      	ldr	r3, [r7, #4]
 8106b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106b08:	6878      	ldr	r0, [r7, #4]
 8106b0a:	4798      	blx	r3
          }
          return;
 8106b0c:	e344      	b.n	8107198 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8106b0e:	687b      	ldr	r3, [r7, #4]
 8106b10:	681b      	ldr	r3, [r3, #0]
 8106b12:	681b      	ldr	r3, [r3, #0]
 8106b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8106b18:	2b00      	cmp	r3, #0
 8106b1a:	d018      	beq.n	8106b4e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8106b1c:	687b      	ldr	r3, [r7, #4]
 8106b1e:	681b      	ldr	r3, [r3, #0]
 8106b20:	681b      	ldr	r3, [r3, #0]
 8106b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8106b26:	2b00      	cmp	r3, #0
 8106b28:	d108      	bne.n	8106b3c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8106b2a:	687b      	ldr	r3, [r7, #4]
 8106b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106b2e:	2b00      	cmp	r3, #0
 8106b30:	d02c      	beq.n	8106b8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8106b32:	687b      	ldr	r3, [r7, #4]
 8106b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106b36:	6878      	ldr	r0, [r7, #4]
 8106b38:	4798      	blx	r3
 8106b3a:	e027      	b.n	8106b8c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8106b3c:	687b      	ldr	r3, [r7, #4]
 8106b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106b40:	2b00      	cmp	r3, #0
 8106b42:	d023      	beq.n	8106b8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8106b44:	687b      	ldr	r3, [r7, #4]
 8106b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106b48:	6878      	ldr	r0, [r7, #4]
 8106b4a:	4798      	blx	r3
 8106b4c:	e01e      	b.n	8106b8c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8106b4e:	687b      	ldr	r3, [r7, #4]
 8106b50:	681b      	ldr	r3, [r3, #0]
 8106b52:	681b      	ldr	r3, [r3, #0]
 8106b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106b58:	2b00      	cmp	r3, #0
 8106b5a:	d10f      	bne.n	8106b7c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8106b5c:	687b      	ldr	r3, [r7, #4]
 8106b5e:	681b      	ldr	r3, [r3, #0]
 8106b60:	681a      	ldr	r2, [r3, #0]
 8106b62:	687b      	ldr	r3, [r7, #4]
 8106b64:	681b      	ldr	r3, [r3, #0]
 8106b66:	f022 0210 	bic.w	r2, r2, #16
 8106b6a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8106b6c:	687b      	ldr	r3, [r7, #4]
 8106b6e:	2201      	movs	r2, #1
 8106b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8106b74:	687b      	ldr	r3, [r7, #4]
 8106b76:	2200      	movs	r2, #0
 8106b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8106b7c:	687b      	ldr	r3, [r7, #4]
 8106b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106b80:	2b00      	cmp	r3, #0
 8106b82:	d003      	beq.n	8106b8c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8106b84:	687b      	ldr	r3, [r7, #4]
 8106b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106b88:	6878      	ldr	r0, [r7, #4]
 8106b8a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8106b8c:	687b      	ldr	r3, [r7, #4]
 8106b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106b90:	2b00      	cmp	r3, #0
 8106b92:	f000 8306 	beq.w	81071a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8106b96:	687b      	ldr	r3, [r7, #4]
 8106b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106b9a:	f003 0301 	and.w	r3, r3, #1
 8106b9e:	2b00      	cmp	r3, #0
 8106ba0:	f000 8088 	beq.w	8106cb4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8106ba4:	687b      	ldr	r3, [r7, #4]
 8106ba6:	2204      	movs	r2, #4
 8106ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8106bac:	687b      	ldr	r3, [r7, #4]
 8106bae:	681b      	ldr	r3, [r3, #0]
 8106bb0:	4a7a      	ldr	r2, [pc, #488]	; (8106d9c <HAL_DMA_IRQHandler+0xa08>)
 8106bb2:	4293      	cmp	r3, r2
 8106bb4:	d04a      	beq.n	8106c4c <HAL_DMA_IRQHandler+0x8b8>
 8106bb6:	687b      	ldr	r3, [r7, #4]
 8106bb8:	681b      	ldr	r3, [r3, #0]
 8106bba:	4a79      	ldr	r2, [pc, #484]	; (8106da0 <HAL_DMA_IRQHandler+0xa0c>)
 8106bbc:	4293      	cmp	r3, r2
 8106bbe:	d045      	beq.n	8106c4c <HAL_DMA_IRQHandler+0x8b8>
 8106bc0:	687b      	ldr	r3, [r7, #4]
 8106bc2:	681b      	ldr	r3, [r3, #0]
 8106bc4:	4a77      	ldr	r2, [pc, #476]	; (8106da4 <HAL_DMA_IRQHandler+0xa10>)
 8106bc6:	4293      	cmp	r3, r2
 8106bc8:	d040      	beq.n	8106c4c <HAL_DMA_IRQHandler+0x8b8>
 8106bca:	687b      	ldr	r3, [r7, #4]
 8106bcc:	681b      	ldr	r3, [r3, #0]
 8106bce:	4a76      	ldr	r2, [pc, #472]	; (8106da8 <HAL_DMA_IRQHandler+0xa14>)
 8106bd0:	4293      	cmp	r3, r2
 8106bd2:	d03b      	beq.n	8106c4c <HAL_DMA_IRQHandler+0x8b8>
 8106bd4:	687b      	ldr	r3, [r7, #4]
 8106bd6:	681b      	ldr	r3, [r3, #0]
 8106bd8:	4a74      	ldr	r2, [pc, #464]	; (8106dac <HAL_DMA_IRQHandler+0xa18>)
 8106bda:	4293      	cmp	r3, r2
 8106bdc:	d036      	beq.n	8106c4c <HAL_DMA_IRQHandler+0x8b8>
 8106bde:	687b      	ldr	r3, [r7, #4]
 8106be0:	681b      	ldr	r3, [r3, #0]
 8106be2:	4a73      	ldr	r2, [pc, #460]	; (8106db0 <HAL_DMA_IRQHandler+0xa1c>)
 8106be4:	4293      	cmp	r3, r2
 8106be6:	d031      	beq.n	8106c4c <HAL_DMA_IRQHandler+0x8b8>
 8106be8:	687b      	ldr	r3, [r7, #4]
 8106bea:	681b      	ldr	r3, [r3, #0]
 8106bec:	4a71      	ldr	r2, [pc, #452]	; (8106db4 <HAL_DMA_IRQHandler+0xa20>)
 8106bee:	4293      	cmp	r3, r2
 8106bf0:	d02c      	beq.n	8106c4c <HAL_DMA_IRQHandler+0x8b8>
 8106bf2:	687b      	ldr	r3, [r7, #4]
 8106bf4:	681b      	ldr	r3, [r3, #0]
 8106bf6:	4a70      	ldr	r2, [pc, #448]	; (8106db8 <HAL_DMA_IRQHandler+0xa24>)
 8106bf8:	4293      	cmp	r3, r2
 8106bfa:	d027      	beq.n	8106c4c <HAL_DMA_IRQHandler+0x8b8>
 8106bfc:	687b      	ldr	r3, [r7, #4]
 8106bfe:	681b      	ldr	r3, [r3, #0]
 8106c00:	4a6e      	ldr	r2, [pc, #440]	; (8106dbc <HAL_DMA_IRQHandler+0xa28>)
 8106c02:	4293      	cmp	r3, r2
 8106c04:	d022      	beq.n	8106c4c <HAL_DMA_IRQHandler+0x8b8>
 8106c06:	687b      	ldr	r3, [r7, #4]
 8106c08:	681b      	ldr	r3, [r3, #0]
 8106c0a:	4a6d      	ldr	r2, [pc, #436]	; (8106dc0 <HAL_DMA_IRQHandler+0xa2c>)
 8106c0c:	4293      	cmp	r3, r2
 8106c0e:	d01d      	beq.n	8106c4c <HAL_DMA_IRQHandler+0x8b8>
 8106c10:	687b      	ldr	r3, [r7, #4]
 8106c12:	681b      	ldr	r3, [r3, #0]
 8106c14:	4a6b      	ldr	r2, [pc, #428]	; (8106dc4 <HAL_DMA_IRQHandler+0xa30>)
 8106c16:	4293      	cmp	r3, r2
 8106c18:	d018      	beq.n	8106c4c <HAL_DMA_IRQHandler+0x8b8>
 8106c1a:	687b      	ldr	r3, [r7, #4]
 8106c1c:	681b      	ldr	r3, [r3, #0]
 8106c1e:	4a6a      	ldr	r2, [pc, #424]	; (8106dc8 <HAL_DMA_IRQHandler+0xa34>)
 8106c20:	4293      	cmp	r3, r2
 8106c22:	d013      	beq.n	8106c4c <HAL_DMA_IRQHandler+0x8b8>
 8106c24:	687b      	ldr	r3, [r7, #4]
 8106c26:	681b      	ldr	r3, [r3, #0]
 8106c28:	4a68      	ldr	r2, [pc, #416]	; (8106dcc <HAL_DMA_IRQHandler+0xa38>)
 8106c2a:	4293      	cmp	r3, r2
 8106c2c:	d00e      	beq.n	8106c4c <HAL_DMA_IRQHandler+0x8b8>
 8106c2e:	687b      	ldr	r3, [r7, #4]
 8106c30:	681b      	ldr	r3, [r3, #0]
 8106c32:	4a67      	ldr	r2, [pc, #412]	; (8106dd0 <HAL_DMA_IRQHandler+0xa3c>)
 8106c34:	4293      	cmp	r3, r2
 8106c36:	d009      	beq.n	8106c4c <HAL_DMA_IRQHandler+0x8b8>
 8106c38:	687b      	ldr	r3, [r7, #4]
 8106c3a:	681b      	ldr	r3, [r3, #0]
 8106c3c:	4a65      	ldr	r2, [pc, #404]	; (8106dd4 <HAL_DMA_IRQHandler+0xa40>)
 8106c3e:	4293      	cmp	r3, r2
 8106c40:	d004      	beq.n	8106c4c <HAL_DMA_IRQHandler+0x8b8>
 8106c42:	687b      	ldr	r3, [r7, #4]
 8106c44:	681b      	ldr	r3, [r3, #0]
 8106c46:	4a64      	ldr	r2, [pc, #400]	; (8106dd8 <HAL_DMA_IRQHandler+0xa44>)
 8106c48:	4293      	cmp	r3, r2
 8106c4a:	d108      	bne.n	8106c5e <HAL_DMA_IRQHandler+0x8ca>
 8106c4c:	687b      	ldr	r3, [r7, #4]
 8106c4e:	681b      	ldr	r3, [r3, #0]
 8106c50:	681a      	ldr	r2, [r3, #0]
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	681b      	ldr	r3, [r3, #0]
 8106c56:	f022 0201 	bic.w	r2, r2, #1
 8106c5a:	601a      	str	r2, [r3, #0]
 8106c5c:	e007      	b.n	8106c6e <HAL_DMA_IRQHandler+0x8da>
 8106c5e:	687b      	ldr	r3, [r7, #4]
 8106c60:	681b      	ldr	r3, [r3, #0]
 8106c62:	681a      	ldr	r2, [r3, #0]
 8106c64:	687b      	ldr	r3, [r7, #4]
 8106c66:	681b      	ldr	r3, [r3, #0]
 8106c68:	f022 0201 	bic.w	r2, r2, #1
 8106c6c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8106c6e:	68fb      	ldr	r3, [r7, #12]
 8106c70:	3301      	adds	r3, #1
 8106c72:	60fb      	str	r3, [r7, #12]
 8106c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106c76:	429a      	cmp	r2, r3
 8106c78:	d307      	bcc.n	8106c8a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8106c7a:	687b      	ldr	r3, [r7, #4]
 8106c7c:	681b      	ldr	r3, [r3, #0]
 8106c7e:	681b      	ldr	r3, [r3, #0]
 8106c80:	f003 0301 	and.w	r3, r3, #1
 8106c84:	2b00      	cmp	r3, #0
 8106c86:	d1f2      	bne.n	8106c6e <HAL_DMA_IRQHandler+0x8da>
 8106c88:	e000      	b.n	8106c8c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8106c8a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	681b      	ldr	r3, [r3, #0]
 8106c90:	681b      	ldr	r3, [r3, #0]
 8106c92:	f003 0301 	and.w	r3, r3, #1
 8106c96:	2b00      	cmp	r3, #0
 8106c98:	d004      	beq.n	8106ca4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8106c9a:	687b      	ldr	r3, [r7, #4]
 8106c9c:	2203      	movs	r2, #3
 8106c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8106ca2:	e003      	b.n	8106cac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8106ca4:	687b      	ldr	r3, [r7, #4]
 8106ca6:	2201      	movs	r2, #1
 8106ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8106cac:	687b      	ldr	r3, [r7, #4]
 8106cae:	2200      	movs	r2, #0
 8106cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8106cb4:	687b      	ldr	r3, [r7, #4]
 8106cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106cb8:	2b00      	cmp	r3, #0
 8106cba:	f000 8272 	beq.w	81071a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8106cbe:	687b      	ldr	r3, [r7, #4]
 8106cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106cc2:	6878      	ldr	r0, [r7, #4]
 8106cc4:	4798      	blx	r3
 8106cc6:	e26c      	b.n	81071a2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8106cc8:	687b      	ldr	r3, [r7, #4]
 8106cca:	681b      	ldr	r3, [r3, #0]
 8106ccc:	4a43      	ldr	r2, [pc, #268]	; (8106ddc <HAL_DMA_IRQHandler+0xa48>)
 8106cce:	4293      	cmp	r3, r2
 8106cd0:	d022      	beq.n	8106d18 <HAL_DMA_IRQHandler+0x984>
 8106cd2:	687b      	ldr	r3, [r7, #4]
 8106cd4:	681b      	ldr	r3, [r3, #0]
 8106cd6:	4a42      	ldr	r2, [pc, #264]	; (8106de0 <HAL_DMA_IRQHandler+0xa4c>)
 8106cd8:	4293      	cmp	r3, r2
 8106cda:	d01d      	beq.n	8106d18 <HAL_DMA_IRQHandler+0x984>
 8106cdc:	687b      	ldr	r3, [r7, #4]
 8106cde:	681b      	ldr	r3, [r3, #0]
 8106ce0:	4a40      	ldr	r2, [pc, #256]	; (8106de4 <HAL_DMA_IRQHandler+0xa50>)
 8106ce2:	4293      	cmp	r3, r2
 8106ce4:	d018      	beq.n	8106d18 <HAL_DMA_IRQHandler+0x984>
 8106ce6:	687b      	ldr	r3, [r7, #4]
 8106ce8:	681b      	ldr	r3, [r3, #0]
 8106cea:	4a3f      	ldr	r2, [pc, #252]	; (8106de8 <HAL_DMA_IRQHandler+0xa54>)
 8106cec:	4293      	cmp	r3, r2
 8106cee:	d013      	beq.n	8106d18 <HAL_DMA_IRQHandler+0x984>
 8106cf0:	687b      	ldr	r3, [r7, #4]
 8106cf2:	681b      	ldr	r3, [r3, #0]
 8106cf4:	4a3d      	ldr	r2, [pc, #244]	; (8106dec <HAL_DMA_IRQHandler+0xa58>)
 8106cf6:	4293      	cmp	r3, r2
 8106cf8:	d00e      	beq.n	8106d18 <HAL_DMA_IRQHandler+0x984>
 8106cfa:	687b      	ldr	r3, [r7, #4]
 8106cfc:	681b      	ldr	r3, [r3, #0]
 8106cfe:	4a3c      	ldr	r2, [pc, #240]	; (8106df0 <HAL_DMA_IRQHandler+0xa5c>)
 8106d00:	4293      	cmp	r3, r2
 8106d02:	d009      	beq.n	8106d18 <HAL_DMA_IRQHandler+0x984>
 8106d04:	687b      	ldr	r3, [r7, #4]
 8106d06:	681b      	ldr	r3, [r3, #0]
 8106d08:	4a3a      	ldr	r2, [pc, #232]	; (8106df4 <HAL_DMA_IRQHandler+0xa60>)
 8106d0a:	4293      	cmp	r3, r2
 8106d0c:	d004      	beq.n	8106d18 <HAL_DMA_IRQHandler+0x984>
 8106d0e:	687b      	ldr	r3, [r7, #4]
 8106d10:	681b      	ldr	r3, [r3, #0]
 8106d12:	4a39      	ldr	r2, [pc, #228]	; (8106df8 <HAL_DMA_IRQHandler+0xa64>)
 8106d14:	4293      	cmp	r3, r2
 8106d16:	d101      	bne.n	8106d1c <HAL_DMA_IRQHandler+0x988>
 8106d18:	2301      	movs	r3, #1
 8106d1a:	e000      	b.n	8106d1e <HAL_DMA_IRQHandler+0x98a>
 8106d1c:	2300      	movs	r3, #0
 8106d1e:	2b00      	cmp	r3, #0
 8106d20:	f000 823f 	beq.w	81071a2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8106d24:	687b      	ldr	r3, [r7, #4]
 8106d26:	681b      	ldr	r3, [r3, #0]
 8106d28:	681b      	ldr	r3, [r3, #0]
 8106d2a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8106d2c:	687b      	ldr	r3, [r7, #4]
 8106d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106d30:	f003 031f 	and.w	r3, r3, #31
 8106d34:	2204      	movs	r2, #4
 8106d36:	409a      	lsls	r2, r3
 8106d38:	697b      	ldr	r3, [r7, #20]
 8106d3a:	4013      	ands	r3, r2
 8106d3c:	2b00      	cmp	r3, #0
 8106d3e:	f000 80cd 	beq.w	8106edc <HAL_DMA_IRQHandler+0xb48>
 8106d42:	693b      	ldr	r3, [r7, #16]
 8106d44:	f003 0304 	and.w	r3, r3, #4
 8106d48:	2b00      	cmp	r3, #0
 8106d4a:	f000 80c7 	beq.w	8106edc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8106d4e:	687b      	ldr	r3, [r7, #4]
 8106d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106d52:	f003 031f 	and.w	r3, r3, #31
 8106d56:	2204      	movs	r2, #4
 8106d58:	409a      	lsls	r2, r3
 8106d5a:	69fb      	ldr	r3, [r7, #28]
 8106d5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106d5e:	693b      	ldr	r3, [r7, #16]
 8106d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106d64:	2b00      	cmp	r3, #0
 8106d66:	d049      	beq.n	8106dfc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8106d68:	693b      	ldr	r3, [r7, #16]
 8106d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106d6e:	2b00      	cmp	r3, #0
 8106d70:	d109      	bne.n	8106d86 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8106d72:	687b      	ldr	r3, [r7, #4]
 8106d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106d76:	2b00      	cmp	r3, #0
 8106d78:	f000 8210 	beq.w	810719c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8106d7c:	687b      	ldr	r3, [r7, #4]
 8106d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106d80:	6878      	ldr	r0, [r7, #4]
 8106d82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106d84:	e20a      	b.n	810719c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8106d86:	687b      	ldr	r3, [r7, #4]
 8106d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106d8a:	2b00      	cmp	r3, #0
 8106d8c:	f000 8206 	beq.w	810719c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8106d90:	687b      	ldr	r3, [r7, #4]
 8106d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106d94:	6878      	ldr	r0, [r7, #4]
 8106d96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106d98:	e200      	b.n	810719c <HAL_DMA_IRQHandler+0xe08>
 8106d9a:	bf00      	nop
 8106d9c:	40020010 	.word	0x40020010
 8106da0:	40020028 	.word	0x40020028
 8106da4:	40020040 	.word	0x40020040
 8106da8:	40020058 	.word	0x40020058
 8106dac:	40020070 	.word	0x40020070
 8106db0:	40020088 	.word	0x40020088
 8106db4:	400200a0 	.word	0x400200a0
 8106db8:	400200b8 	.word	0x400200b8
 8106dbc:	40020410 	.word	0x40020410
 8106dc0:	40020428 	.word	0x40020428
 8106dc4:	40020440 	.word	0x40020440
 8106dc8:	40020458 	.word	0x40020458
 8106dcc:	40020470 	.word	0x40020470
 8106dd0:	40020488 	.word	0x40020488
 8106dd4:	400204a0 	.word	0x400204a0
 8106dd8:	400204b8 	.word	0x400204b8
 8106ddc:	58025408 	.word	0x58025408
 8106de0:	5802541c 	.word	0x5802541c
 8106de4:	58025430 	.word	0x58025430
 8106de8:	58025444 	.word	0x58025444
 8106dec:	58025458 	.word	0x58025458
 8106df0:	5802546c 	.word	0x5802546c
 8106df4:	58025480 	.word	0x58025480
 8106df8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8106dfc:	693b      	ldr	r3, [r7, #16]
 8106dfe:	f003 0320 	and.w	r3, r3, #32
 8106e02:	2b00      	cmp	r3, #0
 8106e04:	d160      	bne.n	8106ec8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8106e06:	687b      	ldr	r3, [r7, #4]
 8106e08:	681b      	ldr	r3, [r3, #0]
 8106e0a:	4a7f      	ldr	r2, [pc, #508]	; (8107008 <HAL_DMA_IRQHandler+0xc74>)
 8106e0c:	4293      	cmp	r3, r2
 8106e0e:	d04a      	beq.n	8106ea6 <HAL_DMA_IRQHandler+0xb12>
 8106e10:	687b      	ldr	r3, [r7, #4]
 8106e12:	681b      	ldr	r3, [r3, #0]
 8106e14:	4a7d      	ldr	r2, [pc, #500]	; (810700c <HAL_DMA_IRQHandler+0xc78>)
 8106e16:	4293      	cmp	r3, r2
 8106e18:	d045      	beq.n	8106ea6 <HAL_DMA_IRQHandler+0xb12>
 8106e1a:	687b      	ldr	r3, [r7, #4]
 8106e1c:	681b      	ldr	r3, [r3, #0]
 8106e1e:	4a7c      	ldr	r2, [pc, #496]	; (8107010 <HAL_DMA_IRQHandler+0xc7c>)
 8106e20:	4293      	cmp	r3, r2
 8106e22:	d040      	beq.n	8106ea6 <HAL_DMA_IRQHandler+0xb12>
 8106e24:	687b      	ldr	r3, [r7, #4]
 8106e26:	681b      	ldr	r3, [r3, #0]
 8106e28:	4a7a      	ldr	r2, [pc, #488]	; (8107014 <HAL_DMA_IRQHandler+0xc80>)
 8106e2a:	4293      	cmp	r3, r2
 8106e2c:	d03b      	beq.n	8106ea6 <HAL_DMA_IRQHandler+0xb12>
 8106e2e:	687b      	ldr	r3, [r7, #4]
 8106e30:	681b      	ldr	r3, [r3, #0]
 8106e32:	4a79      	ldr	r2, [pc, #484]	; (8107018 <HAL_DMA_IRQHandler+0xc84>)
 8106e34:	4293      	cmp	r3, r2
 8106e36:	d036      	beq.n	8106ea6 <HAL_DMA_IRQHandler+0xb12>
 8106e38:	687b      	ldr	r3, [r7, #4]
 8106e3a:	681b      	ldr	r3, [r3, #0]
 8106e3c:	4a77      	ldr	r2, [pc, #476]	; (810701c <HAL_DMA_IRQHandler+0xc88>)
 8106e3e:	4293      	cmp	r3, r2
 8106e40:	d031      	beq.n	8106ea6 <HAL_DMA_IRQHandler+0xb12>
 8106e42:	687b      	ldr	r3, [r7, #4]
 8106e44:	681b      	ldr	r3, [r3, #0]
 8106e46:	4a76      	ldr	r2, [pc, #472]	; (8107020 <HAL_DMA_IRQHandler+0xc8c>)
 8106e48:	4293      	cmp	r3, r2
 8106e4a:	d02c      	beq.n	8106ea6 <HAL_DMA_IRQHandler+0xb12>
 8106e4c:	687b      	ldr	r3, [r7, #4]
 8106e4e:	681b      	ldr	r3, [r3, #0]
 8106e50:	4a74      	ldr	r2, [pc, #464]	; (8107024 <HAL_DMA_IRQHandler+0xc90>)
 8106e52:	4293      	cmp	r3, r2
 8106e54:	d027      	beq.n	8106ea6 <HAL_DMA_IRQHandler+0xb12>
 8106e56:	687b      	ldr	r3, [r7, #4]
 8106e58:	681b      	ldr	r3, [r3, #0]
 8106e5a:	4a73      	ldr	r2, [pc, #460]	; (8107028 <HAL_DMA_IRQHandler+0xc94>)
 8106e5c:	4293      	cmp	r3, r2
 8106e5e:	d022      	beq.n	8106ea6 <HAL_DMA_IRQHandler+0xb12>
 8106e60:	687b      	ldr	r3, [r7, #4]
 8106e62:	681b      	ldr	r3, [r3, #0]
 8106e64:	4a71      	ldr	r2, [pc, #452]	; (810702c <HAL_DMA_IRQHandler+0xc98>)
 8106e66:	4293      	cmp	r3, r2
 8106e68:	d01d      	beq.n	8106ea6 <HAL_DMA_IRQHandler+0xb12>
 8106e6a:	687b      	ldr	r3, [r7, #4]
 8106e6c:	681b      	ldr	r3, [r3, #0]
 8106e6e:	4a70      	ldr	r2, [pc, #448]	; (8107030 <HAL_DMA_IRQHandler+0xc9c>)
 8106e70:	4293      	cmp	r3, r2
 8106e72:	d018      	beq.n	8106ea6 <HAL_DMA_IRQHandler+0xb12>
 8106e74:	687b      	ldr	r3, [r7, #4]
 8106e76:	681b      	ldr	r3, [r3, #0]
 8106e78:	4a6e      	ldr	r2, [pc, #440]	; (8107034 <HAL_DMA_IRQHandler+0xca0>)
 8106e7a:	4293      	cmp	r3, r2
 8106e7c:	d013      	beq.n	8106ea6 <HAL_DMA_IRQHandler+0xb12>
 8106e7e:	687b      	ldr	r3, [r7, #4]
 8106e80:	681b      	ldr	r3, [r3, #0]
 8106e82:	4a6d      	ldr	r2, [pc, #436]	; (8107038 <HAL_DMA_IRQHandler+0xca4>)
 8106e84:	4293      	cmp	r3, r2
 8106e86:	d00e      	beq.n	8106ea6 <HAL_DMA_IRQHandler+0xb12>
 8106e88:	687b      	ldr	r3, [r7, #4]
 8106e8a:	681b      	ldr	r3, [r3, #0]
 8106e8c:	4a6b      	ldr	r2, [pc, #428]	; (810703c <HAL_DMA_IRQHandler+0xca8>)
 8106e8e:	4293      	cmp	r3, r2
 8106e90:	d009      	beq.n	8106ea6 <HAL_DMA_IRQHandler+0xb12>
 8106e92:	687b      	ldr	r3, [r7, #4]
 8106e94:	681b      	ldr	r3, [r3, #0]
 8106e96:	4a6a      	ldr	r2, [pc, #424]	; (8107040 <HAL_DMA_IRQHandler+0xcac>)
 8106e98:	4293      	cmp	r3, r2
 8106e9a:	d004      	beq.n	8106ea6 <HAL_DMA_IRQHandler+0xb12>
 8106e9c:	687b      	ldr	r3, [r7, #4]
 8106e9e:	681b      	ldr	r3, [r3, #0]
 8106ea0:	4a68      	ldr	r2, [pc, #416]	; (8107044 <HAL_DMA_IRQHandler+0xcb0>)
 8106ea2:	4293      	cmp	r3, r2
 8106ea4:	d108      	bne.n	8106eb8 <HAL_DMA_IRQHandler+0xb24>
 8106ea6:	687b      	ldr	r3, [r7, #4]
 8106ea8:	681b      	ldr	r3, [r3, #0]
 8106eaa:	681a      	ldr	r2, [r3, #0]
 8106eac:	687b      	ldr	r3, [r7, #4]
 8106eae:	681b      	ldr	r3, [r3, #0]
 8106eb0:	f022 0208 	bic.w	r2, r2, #8
 8106eb4:	601a      	str	r2, [r3, #0]
 8106eb6:	e007      	b.n	8106ec8 <HAL_DMA_IRQHandler+0xb34>
 8106eb8:	687b      	ldr	r3, [r7, #4]
 8106eba:	681b      	ldr	r3, [r3, #0]
 8106ebc:	681a      	ldr	r2, [r3, #0]
 8106ebe:	687b      	ldr	r3, [r7, #4]
 8106ec0:	681b      	ldr	r3, [r3, #0]
 8106ec2:	f022 0204 	bic.w	r2, r2, #4
 8106ec6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8106ec8:	687b      	ldr	r3, [r7, #4]
 8106eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106ecc:	2b00      	cmp	r3, #0
 8106ece:	f000 8165 	beq.w	810719c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8106ed2:	687b      	ldr	r3, [r7, #4]
 8106ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106ed6:	6878      	ldr	r0, [r7, #4]
 8106ed8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106eda:	e15f      	b.n	810719c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8106edc:	687b      	ldr	r3, [r7, #4]
 8106ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106ee0:	f003 031f 	and.w	r3, r3, #31
 8106ee4:	2202      	movs	r2, #2
 8106ee6:	409a      	lsls	r2, r3
 8106ee8:	697b      	ldr	r3, [r7, #20]
 8106eea:	4013      	ands	r3, r2
 8106eec:	2b00      	cmp	r3, #0
 8106eee:	f000 80c5 	beq.w	810707c <HAL_DMA_IRQHandler+0xce8>
 8106ef2:	693b      	ldr	r3, [r7, #16]
 8106ef4:	f003 0302 	and.w	r3, r3, #2
 8106ef8:	2b00      	cmp	r3, #0
 8106efa:	f000 80bf 	beq.w	810707c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8106efe:	687b      	ldr	r3, [r7, #4]
 8106f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106f02:	f003 031f 	and.w	r3, r3, #31
 8106f06:	2202      	movs	r2, #2
 8106f08:	409a      	lsls	r2, r3
 8106f0a:	69fb      	ldr	r3, [r7, #28]
 8106f0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106f0e:	693b      	ldr	r3, [r7, #16]
 8106f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106f14:	2b00      	cmp	r3, #0
 8106f16:	d018      	beq.n	8106f4a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8106f18:	693b      	ldr	r3, [r7, #16]
 8106f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106f1e:	2b00      	cmp	r3, #0
 8106f20:	d109      	bne.n	8106f36 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8106f22:	687b      	ldr	r3, [r7, #4]
 8106f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106f26:	2b00      	cmp	r3, #0
 8106f28:	f000 813a 	beq.w	81071a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8106f2c:	687b      	ldr	r3, [r7, #4]
 8106f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106f30:	6878      	ldr	r0, [r7, #4]
 8106f32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106f34:	e134      	b.n	81071a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8106f36:	687b      	ldr	r3, [r7, #4]
 8106f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106f3a:	2b00      	cmp	r3, #0
 8106f3c:	f000 8130 	beq.w	81071a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8106f40:	687b      	ldr	r3, [r7, #4]
 8106f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106f44:	6878      	ldr	r0, [r7, #4]
 8106f46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106f48:	e12a      	b.n	81071a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8106f4a:	693b      	ldr	r3, [r7, #16]
 8106f4c:	f003 0320 	and.w	r3, r3, #32
 8106f50:	2b00      	cmp	r3, #0
 8106f52:	f040 8089 	bne.w	8107068 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8106f56:	687b      	ldr	r3, [r7, #4]
 8106f58:	681b      	ldr	r3, [r3, #0]
 8106f5a:	4a2b      	ldr	r2, [pc, #172]	; (8107008 <HAL_DMA_IRQHandler+0xc74>)
 8106f5c:	4293      	cmp	r3, r2
 8106f5e:	d04a      	beq.n	8106ff6 <HAL_DMA_IRQHandler+0xc62>
 8106f60:	687b      	ldr	r3, [r7, #4]
 8106f62:	681b      	ldr	r3, [r3, #0]
 8106f64:	4a29      	ldr	r2, [pc, #164]	; (810700c <HAL_DMA_IRQHandler+0xc78>)
 8106f66:	4293      	cmp	r3, r2
 8106f68:	d045      	beq.n	8106ff6 <HAL_DMA_IRQHandler+0xc62>
 8106f6a:	687b      	ldr	r3, [r7, #4]
 8106f6c:	681b      	ldr	r3, [r3, #0]
 8106f6e:	4a28      	ldr	r2, [pc, #160]	; (8107010 <HAL_DMA_IRQHandler+0xc7c>)
 8106f70:	4293      	cmp	r3, r2
 8106f72:	d040      	beq.n	8106ff6 <HAL_DMA_IRQHandler+0xc62>
 8106f74:	687b      	ldr	r3, [r7, #4]
 8106f76:	681b      	ldr	r3, [r3, #0]
 8106f78:	4a26      	ldr	r2, [pc, #152]	; (8107014 <HAL_DMA_IRQHandler+0xc80>)
 8106f7a:	4293      	cmp	r3, r2
 8106f7c:	d03b      	beq.n	8106ff6 <HAL_DMA_IRQHandler+0xc62>
 8106f7e:	687b      	ldr	r3, [r7, #4]
 8106f80:	681b      	ldr	r3, [r3, #0]
 8106f82:	4a25      	ldr	r2, [pc, #148]	; (8107018 <HAL_DMA_IRQHandler+0xc84>)
 8106f84:	4293      	cmp	r3, r2
 8106f86:	d036      	beq.n	8106ff6 <HAL_DMA_IRQHandler+0xc62>
 8106f88:	687b      	ldr	r3, [r7, #4]
 8106f8a:	681b      	ldr	r3, [r3, #0]
 8106f8c:	4a23      	ldr	r2, [pc, #140]	; (810701c <HAL_DMA_IRQHandler+0xc88>)
 8106f8e:	4293      	cmp	r3, r2
 8106f90:	d031      	beq.n	8106ff6 <HAL_DMA_IRQHandler+0xc62>
 8106f92:	687b      	ldr	r3, [r7, #4]
 8106f94:	681b      	ldr	r3, [r3, #0]
 8106f96:	4a22      	ldr	r2, [pc, #136]	; (8107020 <HAL_DMA_IRQHandler+0xc8c>)
 8106f98:	4293      	cmp	r3, r2
 8106f9a:	d02c      	beq.n	8106ff6 <HAL_DMA_IRQHandler+0xc62>
 8106f9c:	687b      	ldr	r3, [r7, #4]
 8106f9e:	681b      	ldr	r3, [r3, #0]
 8106fa0:	4a20      	ldr	r2, [pc, #128]	; (8107024 <HAL_DMA_IRQHandler+0xc90>)
 8106fa2:	4293      	cmp	r3, r2
 8106fa4:	d027      	beq.n	8106ff6 <HAL_DMA_IRQHandler+0xc62>
 8106fa6:	687b      	ldr	r3, [r7, #4]
 8106fa8:	681b      	ldr	r3, [r3, #0]
 8106faa:	4a1f      	ldr	r2, [pc, #124]	; (8107028 <HAL_DMA_IRQHandler+0xc94>)
 8106fac:	4293      	cmp	r3, r2
 8106fae:	d022      	beq.n	8106ff6 <HAL_DMA_IRQHandler+0xc62>
 8106fb0:	687b      	ldr	r3, [r7, #4]
 8106fb2:	681b      	ldr	r3, [r3, #0]
 8106fb4:	4a1d      	ldr	r2, [pc, #116]	; (810702c <HAL_DMA_IRQHandler+0xc98>)
 8106fb6:	4293      	cmp	r3, r2
 8106fb8:	d01d      	beq.n	8106ff6 <HAL_DMA_IRQHandler+0xc62>
 8106fba:	687b      	ldr	r3, [r7, #4]
 8106fbc:	681b      	ldr	r3, [r3, #0]
 8106fbe:	4a1c      	ldr	r2, [pc, #112]	; (8107030 <HAL_DMA_IRQHandler+0xc9c>)
 8106fc0:	4293      	cmp	r3, r2
 8106fc2:	d018      	beq.n	8106ff6 <HAL_DMA_IRQHandler+0xc62>
 8106fc4:	687b      	ldr	r3, [r7, #4]
 8106fc6:	681b      	ldr	r3, [r3, #0]
 8106fc8:	4a1a      	ldr	r2, [pc, #104]	; (8107034 <HAL_DMA_IRQHandler+0xca0>)
 8106fca:	4293      	cmp	r3, r2
 8106fcc:	d013      	beq.n	8106ff6 <HAL_DMA_IRQHandler+0xc62>
 8106fce:	687b      	ldr	r3, [r7, #4]
 8106fd0:	681b      	ldr	r3, [r3, #0]
 8106fd2:	4a19      	ldr	r2, [pc, #100]	; (8107038 <HAL_DMA_IRQHandler+0xca4>)
 8106fd4:	4293      	cmp	r3, r2
 8106fd6:	d00e      	beq.n	8106ff6 <HAL_DMA_IRQHandler+0xc62>
 8106fd8:	687b      	ldr	r3, [r7, #4]
 8106fda:	681b      	ldr	r3, [r3, #0]
 8106fdc:	4a17      	ldr	r2, [pc, #92]	; (810703c <HAL_DMA_IRQHandler+0xca8>)
 8106fde:	4293      	cmp	r3, r2
 8106fe0:	d009      	beq.n	8106ff6 <HAL_DMA_IRQHandler+0xc62>
 8106fe2:	687b      	ldr	r3, [r7, #4]
 8106fe4:	681b      	ldr	r3, [r3, #0]
 8106fe6:	4a16      	ldr	r2, [pc, #88]	; (8107040 <HAL_DMA_IRQHandler+0xcac>)
 8106fe8:	4293      	cmp	r3, r2
 8106fea:	d004      	beq.n	8106ff6 <HAL_DMA_IRQHandler+0xc62>
 8106fec:	687b      	ldr	r3, [r7, #4]
 8106fee:	681b      	ldr	r3, [r3, #0]
 8106ff0:	4a14      	ldr	r2, [pc, #80]	; (8107044 <HAL_DMA_IRQHandler+0xcb0>)
 8106ff2:	4293      	cmp	r3, r2
 8106ff4:	d128      	bne.n	8107048 <HAL_DMA_IRQHandler+0xcb4>
 8106ff6:	687b      	ldr	r3, [r7, #4]
 8106ff8:	681b      	ldr	r3, [r3, #0]
 8106ffa:	681a      	ldr	r2, [r3, #0]
 8106ffc:	687b      	ldr	r3, [r7, #4]
 8106ffe:	681b      	ldr	r3, [r3, #0]
 8107000:	f022 0214 	bic.w	r2, r2, #20
 8107004:	601a      	str	r2, [r3, #0]
 8107006:	e027      	b.n	8107058 <HAL_DMA_IRQHandler+0xcc4>
 8107008:	40020010 	.word	0x40020010
 810700c:	40020028 	.word	0x40020028
 8107010:	40020040 	.word	0x40020040
 8107014:	40020058 	.word	0x40020058
 8107018:	40020070 	.word	0x40020070
 810701c:	40020088 	.word	0x40020088
 8107020:	400200a0 	.word	0x400200a0
 8107024:	400200b8 	.word	0x400200b8
 8107028:	40020410 	.word	0x40020410
 810702c:	40020428 	.word	0x40020428
 8107030:	40020440 	.word	0x40020440
 8107034:	40020458 	.word	0x40020458
 8107038:	40020470 	.word	0x40020470
 810703c:	40020488 	.word	0x40020488
 8107040:	400204a0 	.word	0x400204a0
 8107044:	400204b8 	.word	0x400204b8
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	681b      	ldr	r3, [r3, #0]
 810704c:	681a      	ldr	r2, [r3, #0]
 810704e:	687b      	ldr	r3, [r7, #4]
 8107050:	681b      	ldr	r3, [r3, #0]
 8107052:	f022 020a 	bic.w	r2, r2, #10
 8107056:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8107058:	687b      	ldr	r3, [r7, #4]
 810705a:	2201      	movs	r2, #1
 810705c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8107060:	687b      	ldr	r3, [r7, #4]
 8107062:	2200      	movs	r2, #0
 8107064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8107068:	687b      	ldr	r3, [r7, #4]
 810706a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810706c:	2b00      	cmp	r3, #0
 810706e:	f000 8097 	beq.w	81071a0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8107072:	687b      	ldr	r3, [r7, #4]
 8107074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107076:	6878      	ldr	r0, [r7, #4]
 8107078:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810707a:	e091      	b.n	81071a0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 810707c:	687b      	ldr	r3, [r7, #4]
 810707e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107080:	f003 031f 	and.w	r3, r3, #31
 8107084:	2208      	movs	r2, #8
 8107086:	409a      	lsls	r2, r3
 8107088:	697b      	ldr	r3, [r7, #20]
 810708a:	4013      	ands	r3, r2
 810708c:	2b00      	cmp	r3, #0
 810708e:	f000 8088 	beq.w	81071a2 <HAL_DMA_IRQHandler+0xe0e>
 8107092:	693b      	ldr	r3, [r7, #16]
 8107094:	f003 0308 	and.w	r3, r3, #8
 8107098:	2b00      	cmp	r3, #0
 810709a:	f000 8082 	beq.w	81071a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 810709e:	687b      	ldr	r3, [r7, #4]
 81070a0:	681b      	ldr	r3, [r3, #0]
 81070a2:	4a41      	ldr	r2, [pc, #260]	; (81071a8 <HAL_DMA_IRQHandler+0xe14>)
 81070a4:	4293      	cmp	r3, r2
 81070a6:	d04a      	beq.n	810713e <HAL_DMA_IRQHandler+0xdaa>
 81070a8:	687b      	ldr	r3, [r7, #4]
 81070aa:	681b      	ldr	r3, [r3, #0]
 81070ac:	4a3f      	ldr	r2, [pc, #252]	; (81071ac <HAL_DMA_IRQHandler+0xe18>)
 81070ae:	4293      	cmp	r3, r2
 81070b0:	d045      	beq.n	810713e <HAL_DMA_IRQHandler+0xdaa>
 81070b2:	687b      	ldr	r3, [r7, #4]
 81070b4:	681b      	ldr	r3, [r3, #0]
 81070b6:	4a3e      	ldr	r2, [pc, #248]	; (81071b0 <HAL_DMA_IRQHandler+0xe1c>)
 81070b8:	4293      	cmp	r3, r2
 81070ba:	d040      	beq.n	810713e <HAL_DMA_IRQHandler+0xdaa>
 81070bc:	687b      	ldr	r3, [r7, #4]
 81070be:	681b      	ldr	r3, [r3, #0]
 81070c0:	4a3c      	ldr	r2, [pc, #240]	; (81071b4 <HAL_DMA_IRQHandler+0xe20>)
 81070c2:	4293      	cmp	r3, r2
 81070c4:	d03b      	beq.n	810713e <HAL_DMA_IRQHandler+0xdaa>
 81070c6:	687b      	ldr	r3, [r7, #4]
 81070c8:	681b      	ldr	r3, [r3, #0]
 81070ca:	4a3b      	ldr	r2, [pc, #236]	; (81071b8 <HAL_DMA_IRQHandler+0xe24>)
 81070cc:	4293      	cmp	r3, r2
 81070ce:	d036      	beq.n	810713e <HAL_DMA_IRQHandler+0xdaa>
 81070d0:	687b      	ldr	r3, [r7, #4]
 81070d2:	681b      	ldr	r3, [r3, #0]
 81070d4:	4a39      	ldr	r2, [pc, #228]	; (81071bc <HAL_DMA_IRQHandler+0xe28>)
 81070d6:	4293      	cmp	r3, r2
 81070d8:	d031      	beq.n	810713e <HAL_DMA_IRQHandler+0xdaa>
 81070da:	687b      	ldr	r3, [r7, #4]
 81070dc:	681b      	ldr	r3, [r3, #0]
 81070de:	4a38      	ldr	r2, [pc, #224]	; (81071c0 <HAL_DMA_IRQHandler+0xe2c>)
 81070e0:	4293      	cmp	r3, r2
 81070e2:	d02c      	beq.n	810713e <HAL_DMA_IRQHandler+0xdaa>
 81070e4:	687b      	ldr	r3, [r7, #4]
 81070e6:	681b      	ldr	r3, [r3, #0]
 81070e8:	4a36      	ldr	r2, [pc, #216]	; (81071c4 <HAL_DMA_IRQHandler+0xe30>)
 81070ea:	4293      	cmp	r3, r2
 81070ec:	d027      	beq.n	810713e <HAL_DMA_IRQHandler+0xdaa>
 81070ee:	687b      	ldr	r3, [r7, #4]
 81070f0:	681b      	ldr	r3, [r3, #0]
 81070f2:	4a35      	ldr	r2, [pc, #212]	; (81071c8 <HAL_DMA_IRQHandler+0xe34>)
 81070f4:	4293      	cmp	r3, r2
 81070f6:	d022      	beq.n	810713e <HAL_DMA_IRQHandler+0xdaa>
 81070f8:	687b      	ldr	r3, [r7, #4]
 81070fa:	681b      	ldr	r3, [r3, #0]
 81070fc:	4a33      	ldr	r2, [pc, #204]	; (81071cc <HAL_DMA_IRQHandler+0xe38>)
 81070fe:	4293      	cmp	r3, r2
 8107100:	d01d      	beq.n	810713e <HAL_DMA_IRQHandler+0xdaa>
 8107102:	687b      	ldr	r3, [r7, #4]
 8107104:	681b      	ldr	r3, [r3, #0]
 8107106:	4a32      	ldr	r2, [pc, #200]	; (81071d0 <HAL_DMA_IRQHandler+0xe3c>)
 8107108:	4293      	cmp	r3, r2
 810710a:	d018      	beq.n	810713e <HAL_DMA_IRQHandler+0xdaa>
 810710c:	687b      	ldr	r3, [r7, #4]
 810710e:	681b      	ldr	r3, [r3, #0]
 8107110:	4a30      	ldr	r2, [pc, #192]	; (81071d4 <HAL_DMA_IRQHandler+0xe40>)
 8107112:	4293      	cmp	r3, r2
 8107114:	d013      	beq.n	810713e <HAL_DMA_IRQHandler+0xdaa>
 8107116:	687b      	ldr	r3, [r7, #4]
 8107118:	681b      	ldr	r3, [r3, #0]
 810711a:	4a2f      	ldr	r2, [pc, #188]	; (81071d8 <HAL_DMA_IRQHandler+0xe44>)
 810711c:	4293      	cmp	r3, r2
 810711e:	d00e      	beq.n	810713e <HAL_DMA_IRQHandler+0xdaa>
 8107120:	687b      	ldr	r3, [r7, #4]
 8107122:	681b      	ldr	r3, [r3, #0]
 8107124:	4a2d      	ldr	r2, [pc, #180]	; (81071dc <HAL_DMA_IRQHandler+0xe48>)
 8107126:	4293      	cmp	r3, r2
 8107128:	d009      	beq.n	810713e <HAL_DMA_IRQHandler+0xdaa>
 810712a:	687b      	ldr	r3, [r7, #4]
 810712c:	681b      	ldr	r3, [r3, #0]
 810712e:	4a2c      	ldr	r2, [pc, #176]	; (81071e0 <HAL_DMA_IRQHandler+0xe4c>)
 8107130:	4293      	cmp	r3, r2
 8107132:	d004      	beq.n	810713e <HAL_DMA_IRQHandler+0xdaa>
 8107134:	687b      	ldr	r3, [r7, #4]
 8107136:	681b      	ldr	r3, [r3, #0]
 8107138:	4a2a      	ldr	r2, [pc, #168]	; (81071e4 <HAL_DMA_IRQHandler+0xe50>)
 810713a:	4293      	cmp	r3, r2
 810713c:	d108      	bne.n	8107150 <HAL_DMA_IRQHandler+0xdbc>
 810713e:	687b      	ldr	r3, [r7, #4]
 8107140:	681b      	ldr	r3, [r3, #0]
 8107142:	681a      	ldr	r2, [r3, #0]
 8107144:	687b      	ldr	r3, [r7, #4]
 8107146:	681b      	ldr	r3, [r3, #0]
 8107148:	f022 021c 	bic.w	r2, r2, #28
 810714c:	601a      	str	r2, [r3, #0]
 810714e:	e007      	b.n	8107160 <HAL_DMA_IRQHandler+0xdcc>
 8107150:	687b      	ldr	r3, [r7, #4]
 8107152:	681b      	ldr	r3, [r3, #0]
 8107154:	681a      	ldr	r2, [r3, #0]
 8107156:	687b      	ldr	r3, [r7, #4]
 8107158:	681b      	ldr	r3, [r3, #0]
 810715a:	f022 020e 	bic.w	r2, r2, #14
 810715e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8107160:	687b      	ldr	r3, [r7, #4]
 8107162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107164:	f003 031f 	and.w	r3, r3, #31
 8107168:	2201      	movs	r2, #1
 810716a:	409a      	lsls	r2, r3
 810716c:	69fb      	ldr	r3, [r7, #28]
 810716e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8107170:	687b      	ldr	r3, [r7, #4]
 8107172:	2201      	movs	r2, #1
 8107174:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8107176:	687b      	ldr	r3, [r7, #4]
 8107178:	2201      	movs	r2, #1
 810717a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810717e:	687b      	ldr	r3, [r7, #4]
 8107180:	2200      	movs	r2, #0
 8107182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8107186:	687b      	ldr	r3, [r7, #4]
 8107188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810718a:	2b00      	cmp	r3, #0
 810718c:	d009      	beq.n	81071a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810718e:	687b      	ldr	r3, [r7, #4]
 8107190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107192:	6878      	ldr	r0, [r7, #4]
 8107194:	4798      	blx	r3
 8107196:	e004      	b.n	81071a2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8107198:	bf00      	nop
 810719a:	e002      	b.n	81071a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810719c:	bf00      	nop
 810719e:	e000      	b.n	81071a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81071a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 81071a2:	3728      	adds	r7, #40	; 0x28
 81071a4:	46bd      	mov	sp, r7
 81071a6:	bd80      	pop	{r7, pc}
 81071a8:	40020010 	.word	0x40020010
 81071ac:	40020028 	.word	0x40020028
 81071b0:	40020040 	.word	0x40020040
 81071b4:	40020058 	.word	0x40020058
 81071b8:	40020070 	.word	0x40020070
 81071bc:	40020088 	.word	0x40020088
 81071c0:	400200a0 	.word	0x400200a0
 81071c4:	400200b8 	.word	0x400200b8
 81071c8:	40020410 	.word	0x40020410
 81071cc:	40020428 	.word	0x40020428
 81071d0:	40020440 	.word	0x40020440
 81071d4:	40020458 	.word	0x40020458
 81071d8:	40020470 	.word	0x40020470
 81071dc:	40020488 	.word	0x40020488
 81071e0:	400204a0 	.word	0x400204a0
 81071e4:	400204b8 	.word	0x400204b8

081071e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 81071e8:	b480      	push	{r7}
 81071ea:	b087      	sub	sp, #28
 81071ec:	af00      	add	r7, sp, #0
 81071ee:	60f8      	str	r0, [r7, #12]
 81071f0:	60b9      	str	r1, [r7, #8]
 81071f2:	607a      	str	r2, [r7, #4]
 81071f4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81071f6:	68fb      	ldr	r3, [r7, #12]
 81071f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81071fa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81071fc:	68fb      	ldr	r3, [r7, #12]
 81071fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107200:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8107202:	68fb      	ldr	r3, [r7, #12]
 8107204:	681b      	ldr	r3, [r3, #0]
 8107206:	4a7f      	ldr	r2, [pc, #508]	; (8107404 <DMA_SetConfig+0x21c>)
 8107208:	4293      	cmp	r3, r2
 810720a:	d072      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 810720c:	68fb      	ldr	r3, [r7, #12]
 810720e:	681b      	ldr	r3, [r3, #0]
 8107210:	4a7d      	ldr	r2, [pc, #500]	; (8107408 <DMA_SetConfig+0x220>)
 8107212:	4293      	cmp	r3, r2
 8107214:	d06d      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 8107216:	68fb      	ldr	r3, [r7, #12]
 8107218:	681b      	ldr	r3, [r3, #0]
 810721a:	4a7c      	ldr	r2, [pc, #496]	; (810740c <DMA_SetConfig+0x224>)
 810721c:	4293      	cmp	r3, r2
 810721e:	d068      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 8107220:	68fb      	ldr	r3, [r7, #12]
 8107222:	681b      	ldr	r3, [r3, #0]
 8107224:	4a7a      	ldr	r2, [pc, #488]	; (8107410 <DMA_SetConfig+0x228>)
 8107226:	4293      	cmp	r3, r2
 8107228:	d063      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 810722a:	68fb      	ldr	r3, [r7, #12]
 810722c:	681b      	ldr	r3, [r3, #0]
 810722e:	4a79      	ldr	r2, [pc, #484]	; (8107414 <DMA_SetConfig+0x22c>)
 8107230:	4293      	cmp	r3, r2
 8107232:	d05e      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 8107234:	68fb      	ldr	r3, [r7, #12]
 8107236:	681b      	ldr	r3, [r3, #0]
 8107238:	4a77      	ldr	r2, [pc, #476]	; (8107418 <DMA_SetConfig+0x230>)
 810723a:	4293      	cmp	r3, r2
 810723c:	d059      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 810723e:	68fb      	ldr	r3, [r7, #12]
 8107240:	681b      	ldr	r3, [r3, #0]
 8107242:	4a76      	ldr	r2, [pc, #472]	; (810741c <DMA_SetConfig+0x234>)
 8107244:	4293      	cmp	r3, r2
 8107246:	d054      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 8107248:	68fb      	ldr	r3, [r7, #12]
 810724a:	681b      	ldr	r3, [r3, #0]
 810724c:	4a74      	ldr	r2, [pc, #464]	; (8107420 <DMA_SetConfig+0x238>)
 810724e:	4293      	cmp	r3, r2
 8107250:	d04f      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 8107252:	68fb      	ldr	r3, [r7, #12]
 8107254:	681b      	ldr	r3, [r3, #0]
 8107256:	4a73      	ldr	r2, [pc, #460]	; (8107424 <DMA_SetConfig+0x23c>)
 8107258:	4293      	cmp	r3, r2
 810725a:	d04a      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 810725c:	68fb      	ldr	r3, [r7, #12]
 810725e:	681b      	ldr	r3, [r3, #0]
 8107260:	4a71      	ldr	r2, [pc, #452]	; (8107428 <DMA_SetConfig+0x240>)
 8107262:	4293      	cmp	r3, r2
 8107264:	d045      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 8107266:	68fb      	ldr	r3, [r7, #12]
 8107268:	681b      	ldr	r3, [r3, #0]
 810726a:	4a70      	ldr	r2, [pc, #448]	; (810742c <DMA_SetConfig+0x244>)
 810726c:	4293      	cmp	r3, r2
 810726e:	d040      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 8107270:	68fb      	ldr	r3, [r7, #12]
 8107272:	681b      	ldr	r3, [r3, #0]
 8107274:	4a6e      	ldr	r2, [pc, #440]	; (8107430 <DMA_SetConfig+0x248>)
 8107276:	4293      	cmp	r3, r2
 8107278:	d03b      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 810727a:	68fb      	ldr	r3, [r7, #12]
 810727c:	681b      	ldr	r3, [r3, #0]
 810727e:	4a6d      	ldr	r2, [pc, #436]	; (8107434 <DMA_SetConfig+0x24c>)
 8107280:	4293      	cmp	r3, r2
 8107282:	d036      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 8107284:	68fb      	ldr	r3, [r7, #12]
 8107286:	681b      	ldr	r3, [r3, #0]
 8107288:	4a6b      	ldr	r2, [pc, #428]	; (8107438 <DMA_SetConfig+0x250>)
 810728a:	4293      	cmp	r3, r2
 810728c:	d031      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 810728e:	68fb      	ldr	r3, [r7, #12]
 8107290:	681b      	ldr	r3, [r3, #0]
 8107292:	4a6a      	ldr	r2, [pc, #424]	; (810743c <DMA_SetConfig+0x254>)
 8107294:	4293      	cmp	r3, r2
 8107296:	d02c      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 8107298:	68fb      	ldr	r3, [r7, #12]
 810729a:	681b      	ldr	r3, [r3, #0]
 810729c:	4a68      	ldr	r2, [pc, #416]	; (8107440 <DMA_SetConfig+0x258>)
 810729e:	4293      	cmp	r3, r2
 81072a0:	d027      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 81072a2:	68fb      	ldr	r3, [r7, #12]
 81072a4:	681b      	ldr	r3, [r3, #0]
 81072a6:	4a67      	ldr	r2, [pc, #412]	; (8107444 <DMA_SetConfig+0x25c>)
 81072a8:	4293      	cmp	r3, r2
 81072aa:	d022      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 81072ac:	68fb      	ldr	r3, [r7, #12]
 81072ae:	681b      	ldr	r3, [r3, #0]
 81072b0:	4a65      	ldr	r2, [pc, #404]	; (8107448 <DMA_SetConfig+0x260>)
 81072b2:	4293      	cmp	r3, r2
 81072b4:	d01d      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 81072b6:	68fb      	ldr	r3, [r7, #12]
 81072b8:	681b      	ldr	r3, [r3, #0]
 81072ba:	4a64      	ldr	r2, [pc, #400]	; (810744c <DMA_SetConfig+0x264>)
 81072bc:	4293      	cmp	r3, r2
 81072be:	d018      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 81072c0:	68fb      	ldr	r3, [r7, #12]
 81072c2:	681b      	ldr	r3, [r3, #0]
 81072c4:	4a62      	ldr	r2, [pc, #392]	; (8107450 <DMA_SetConfig+0x268>)
 81072c6:	4293      	cmp	r3, r2
 81072c8:	d013      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 81072ca:	68fb      	ldr	r3, [r7, #12]
 81072cc:	681b      	ldr	r3, [r3, #0]
 81072ce:	4a61      	ldr	r2, [pc, #388]	; (8107454 <DMA_SetConfig+0x26c>)
 81072d0:	4293      	cmp	r3, r2
 81072d2:	d00e      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 81072d4:	68fb      	ldr	r3, [r7, #12]
 81072d6:	681b      	ldr	r3, [r3, #0]
 81072d8:	4a5f      	ldr	r2, [pc, #380]	; (8107458 <DMA_SetConfig+0x270>)
 81072da:	4293      	cmp	r3, r2
 81072dc:	d009      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 81072de:	68fb      	ldr	r3, [r7, #12]
 81072e0:	681b      	ldr	r3, [r3, #0]
 81072e2:	4a5e      	ldr	r2, [pc, #376]	; (810745c <DMA_SetConfig+0x274>)
 81072e4:	4293      	cmp	r3, r2
 81072e6:	d004      	beq.n	81072f2 <DMA_SetConfig+0x10a>
 81072e8:	68fb      	ldr	r3, [r7, #12]
 81072ea:	681b      	ldr	r3, [r3, #0]
 81072ec:	4a5c      	ldr	r2, [pc, #368]	; (8107460 <DMA_SetConfig+0x278>)
 81072ee:	4293      	cmp	r3, r2
 81072f0:	d101      	bne.n	81072f6 <DMA_SetConfig+0x10e>
 81072f2:	2301      	movs	r3, #1
 81072f4:	e000      	b.n	81072f8 <DMA_SetConfig+0x110>
 81072f6:	2300      	movs	r3, #0
 81072f8:	2b00      	cmp	r3, #0
 81072fa:	d00d      	beq.n	8107318 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81072fc:	68fb      	ldr	r3, [r7, #12]
 81072fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107300:	68fa      	ldr	r2, [r7, #12]
 8107302:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8107304:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8107306:	68fb      	ldr	r3, [r7, #12]
 8107308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810730a:	2b00      	cmp	r3, #0
 810730c:	d004      	beq.n	8107318 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810730e:	68fb      	ldr	r3, [r7, #12]
 8107310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107312:	68fa      	ldr	r2, [r7, #12]
 8107314:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8107316:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8107318:	68fb      	ldr	r3, [r7, #12]
 810731a:	681b      	ldr	r3, [r3, #0]
 810731c:	4a39      	ldr	r2, [pc, #228]	; (8107404 <DMA_SetConfig+0x21c>)
 810731e:	4293      	cmp	r3, r2
 8107320:	d04a      	beq.n	81073b8 <DMA_SetConfig+0x1d0>
 8107322:	68fb      	ldr	r3, [r7, #12]
 8107324:	681b      	ldr	r3, [r3, #0]
 8107326:	4a38      	ldr	r2, [pc, #224]	; (8107408 <DMA_SetConfig+0x220>)
 8107328:	4293      	cmp	r3, r2
 810732a:	d045      	beq.n	81073b8 <DMA_SetConfig+0x1d0>
 810732c:	68fb      	ldr	r3, [r7, #12]
 810732e:	681b      	ldr	r3, [r3, #0]
 8107330:	4a36      	ldr	r2, [pc, #216]	; (810740c <DMA_SetConfig+0x224>)
 8107332:	4293      	cmp	r3, r2
 8107334:	d040      	beq.n	81073b8 <DMA_SetConfig+0x1d0>
 8107336:	68fb      	ldr	r3, [r7, #12]
 8107338:	681b      	ldr	r3, [r3, #0]
 810733a:	4a35      	ldr	r2, [pc, #212]	; (8107410 <DMA_SetConfig+0x228>)
 810733c:	4293      	cmp	r3, r2
 810733e:	d03b      	beq.n	81073b8 <DMA_SetConfig+0x1d0>
 8107340:	68fb      	ldr	r3, [r7, #12]
 8107342:	681b      	ldr	r3, [r3, #0]
 8107344:	4a33      	ldr	r2, [pc, #204]	; (8107414 <DMA_SetConfig+0x22c>)
 8107346:	4293      	cmp	r3, r2
 8107348:	d036      	beq.n	81073b8 <DMA_SetConfig+0x1d0>
 810734a:	68fb      	ldr	r3, [r7, #12]
 810734c:	681b      	ldr	r3, [r3, #0]
 810734e:	4a32      	ldr	r2, [pc, #200]	; (8107418 <DMA_SetConfig+0x230>)
 8107350:	4293      	cmp	r3, r2
 8107352:	d031      	beq.n	81073b8 <DMA_SetConfig+0x1d0>
 8107354:	68fb      	ldr	r3, [r7, #12]
 8107356:	681b      	ldr	r3, [r3, #0]
 8107358:	4a30      	ldr	r2, [pc, #192]	; (810741c <DMA_SetConfig+0x234>)
 810735a:	4293      	cmp	r3, r2
 810735c:	d02c      	beq.n	81073b8 <DMA_SetConfig+0x1d0>
 810735e:	68fb      	ldr	r3, [r7, #12]
 8107360:	681b      	ldr	r3, [r3, #0]
 8107362:	4a2f      	ldr	r2, [pc, #188]	; (8107420 <DMA_SetConfig+0x238>)
 8107364:	4293      	cmp	r3, r2
 8107366:	d027      	beq.n	81073b8 <DMA_SetConfig+0x1d0>
 8107368:	68fb      	ldr	r3, [r7, #12]
 810736a:	681b      	ldr	r3, [r3, #0]
 810736c:	4a2d      	ldr	r2, [pc, #180]	; (8107424 <DMA_SetConfig+0x23c>)
 810736e:	4293      	cmp	r3, r2
 8107370:	d022      	beq.n	81073b8 <DMA_SetConfig+0x1d0>
 8107372:	68fb      	ldr	r3, [r7, #12]
 8107374:	681b      	ldr	r3, [r3, #0]
 8107376:	4a2c      	ldr	r2, [pc, #176]	; (8107428 <DMA_SetConfig+0x240>)
 8107378:	4293      	cmp	r3, r2
 810737a:	d01d      	beq.n	81073b8 <DMA_SetConfig+0x1d0>
 810737c:	68fb      	ldr	r3, [r7, #12]
 810737e:	681b      	ldr	r3, [r3, #0]
 8107380:	4a2a      	ldr	r2, [pc, #168]	; (810742c <DMA_SetConfig+0x244>)
 8107382:	4293      	cmp	r3, r2
 8107384:	d018      	beq.n	81073b8 <DMA_SetConfig+0x1d0>
 8107386:	68fb      	ldr	r3, [r7, #12]
 8107388:	681b      	ldr	r3, [r3, #0]
 810738a:	4a29      	ldr	r2, [pc, #164]	; (8107430 <DMA_SetConfig+0x248>)
 810738c:	4293      	cmp	r3, r2
 810738e:	d013      	beq.n	81073b8 <DMA_SetConfig+0x1d0>
 8107390:	68fb      	ldr	r3, [r7, #12]
 8107392:	681b      	ldr	r3, [r3, #0]
 8107394:	4a27      	ldr	r2, [pc, #156]	; (8107434 <DMA_SetConfig+0x24c>)
 8107396:	4293      	cmp	r3, r2
 8107398:	d00e      	beq.n	81073b8 <DMA_SetConfig+0x1d0>
 810739a:	68fb      	ldr	r3, [r7, #12]
 810739c:	681b      	ldr	r3, [r3, #0]
 810739e:	4a26      	ldr	r2, [pc, #152]	; (8107438 <DMA_SetConfig+0x250>)
 81073a0:	4293      	cmp	r3, r2
 81073a2:	d009      	beq.n	81073b8 <DMA_SetConfig+0x1d0>
 81073a4:	68fb      	ldr	r3, [r7, #12]
 81073a6:	681b      	ldr	r3, [r3, #0]
 81073a8:	4a24      	ldr	r2, [pc, #144]	; (810743c <DMA_SetConfig+0x254>)
 81073aa:	4293      	cmp	r3, r2
 81073ac:	d004      	beq.n	81073b8 <DMA_SetConfig+0x1d0>
 81073ae:	68fb      	ldr	r3, [r7, #12]
 81073b0:	681b      	ldr	r3, [r3, #0]
 81073b2:	4a23      	ldr	r2, [pc, #140]	; (8107440 <DMA_SetConfig+0x258>)
 81073b4:	4293      	cmp	r3, r2
 81073b6:	d101      	bne.n	81073bc <DMA_SetConfig+0x1d4>
 81073b8:	2301      	movs	r3, #1
 81073ba:	e000      	b.n	81073be <DMA_SetConfig+0x1d6>
 81073bc:	2300      	movs	r3, #0
 81073be:	2b00      	cmp	r3, #0
 81073c0:	d059      	beq.n	8107476 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81073c2:	68fb      	ldr	r3, [r7, #12]
 81073c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81073c6:	f003 031f 	and.w	r3, r3, #31
 81073ca:	223f      	movs	r2, #63	; 0x3f
 81073cc:	409a      	lsls	r2, r3
 81073ce:	697b      	ldr	r3, [r7, #20]
 81073d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 81073d2:	68fb      	ldr	r3, [r7, #12]
 81073d4:	681b      	ldr	r3, [r3, #0]
 81073d6:	681a      	ldr	r2, [r3, #0]
 81073d8:	68fb      	ldr	r3, [r7, #12]
 81073da:	681b      	ldr	r3, [r3, #0]
 81073dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 81073e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 81073e2:	68fb      	ldr	r3, [r7, #12]
 81073e4:	681b      	ldr	r3, [r3, #0]
 81073e6:	683a      	ldr	r2, [r7, #0]
 81073e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81073ea:	68fb      	ldr	r3, [r7, #12]
 81073ec:	689b      	ldr	r3, [r3, #8]
 81073ee:	2b40      	cmp	r3, #64	; 0x40
 81073f0:	d138      	bne.n	8107464 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 81073f2:	68fb      	ldr	r3, [r7, #12]
 81073f4:	681b      	ldr	r3, [r3, #0]
 81073f6:	687a      	ldr	r2, [r7, #4]
 81073f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 81073fa:	68fb      	ldr	r3, [r7, #12]
 81073fc:	681b      	ldr	r3, [r3, #0]
 81073fe:	68ba      	ldr	r2, [r7, #8]
 8107400:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8107402:	e086      	b.n	8107512 <DMA_SetConfig+0x32a>
 8107404:	40020010 	.word	0x40020010
 8107408:	40020028 	.word	0x40020028
 810740c:	40020040 	.word	0x40020040
 8107410:	40020058 	.word	0x40020058
 8107414:	40020070 	.word	0x40020070
 8107418:	40020088 	.word	0x40020088
 810741c:	400200a0 	.word	0x400200a0
 8107420:	400200b8 	.word	0x400200b8
 8107424:	40020410 	.word	0x40020410
 8107428:	40020428 	.word	0x40020428
 810742c:	40020440 	.word	0x40020440
 8107430:	40020458 	.word	0x40020458
 8107434:	40020470 	.word	0x40020470
 8107438:	40020488 	.word	0x40020488
 810743c:	400204a0 	.word	0x400204a0
 8107440:	400204b8 	.word	0x400204b8
 8107444:	58025408 	.word	0x58025408
 8107448:	5802541c 	.word	0x5802541c
 810744c:	58025430 	.word	0x58025430
 8107450:	58025444 	.word	0x58025444
 8107454:	58025458 	.word	0x58025458
 8107458:	5802546c 	.word	0x5802546c
 810745c:	58025480 	.word	0x58025480
 8107460:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8107464:	68fb      	ldr	r3, [r7, #12]
 8107466:	681b      	ldr	r3, [r3, #0]
 8107468:	68ba      	ldr	r2, [r7, #8]
 810746a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 810746c:	68fb      	ldr	r3, [r7, #12]
 810746e:	681b      	ldr	r3, [r3, #0]
 8107470:	687a      	ldr	r2, [r7, #4]
 8107472:	60da      	str	r2, [r3, #12]
}
 8107474:	e04d      	b.n	8107512 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8107476:	68fb      	ldr	r3, [r7, #12]
 8107478:	681b      	ldr	r3, [r3, #0]
 810747a:	4a29      	ldr	r2, [pc, #164]	; (8107520 <DMA_SetConfig+0x338>)
 810747c:	4293      	cmp	r3, r2
 810747e:	d022      	beq.n	81074c6 <DMA_SetConfig+0x2de>
 8107480:	68fb      	ldr	r3, [r7, #12]
 8107482:	681b      	ldr	r3, [r3, #0]
 8107484:	4a27      	ldr	r2, [pc, #156]	; (8107524 <DMA_SetConfig+0x33c>)
 8107486:	4293      	cmp	r3, r2
 8107488:	d01d      	beq.n	81074c6 <DMA_SetConfig+0x2de>
 810748a:	68fb      	ldr	r3, [r7, #12]
 810748c:	681b      	ldr	r3, [r3, #0]
 810748e:	4a26      	ldr	r2, [pc, #152]	; (8107528 <DMA_SetConfig+0x340>)
 8107490:	4293      	cmp	r3, r2
 8107492:	d018      	beq.n	81074c6 <DMA_SetConfig+0x2de>
 8107494:	68fb      	ldr	r3, [r7, #12]
 8107496:	681b      	ldr	r3, [r3, #0]
 8107498:	4a24      	ldr	r2, [pc, #144]	; (810752c <DMA_SetConfig+0x344>)
 810749a:	4293      	cmp	r3, r2
 810749c:	d013      	beq.n	81074c6 <DMA_SetConfig+0x2de>
 810749e:	68fb      	ldr	r3, [r7, #12]
 81074a0:	681b      	ldr	r3, [r3, #0]
 81074a2:	4a23      	ldr	r2, [pc, #140]	; (8107530 <DMA_SetConfig+0x348>)
 81074a4:	4293      	cmp	r3, r2
 81074a6:	d00e      	beq.n	81074c6 <DMA_SetConfig+0x2de>
 81074a8:	68fb      	ldr	r3, [r7, #12]
 81074aa:	681b      	ldr	r3, [r3, #0]
 81074ac:	4a21      	ldr	r2, [pc, #132]	; (8107534 <DMA_SetConfig+0x34c>)
 81074ae:	4293      	cmp	r3, r2
 81074b0:	d009      	beq.n	81074c6 <DMA_SetConfig+0x2de>
 81074b2:	68fb      	ldr	r3, [r7, #12]
 81074b4:	681b      	ldr	r3, [r3, #0]
 81074b6:	4a20      	ldr	r2, [pc, #128]	; (8107538 <DMA_SetConfig+0x350>)
 81074b8:	4293      	cmp	r3, r2
 81074ba:	d004      	beq.n	81074c6 <DMA_SetConfig+0x2de>
 81074bc:	68fb      	ldr	r3, [r7, #12]
 81074be:	681b      	ldr	r3, [r3, #0]
 81074c0:	4a1e      	ldr	r2, [pc, #120]	; (810753c <DMA_SetConfig+0x354>)
 81074c2:	4293      	cmp	r3, r2
 81074c4:	d101      	bne.n	81074ca <DMA_SetConfig+0x2e2>
 81074c6:	2301      	movs	r3, #1
 81074c8:	e000      	b.n	81074cc <DMA_SetConfig+0x2e4>
 81074ca:	2300      	movs	r3, #0
 81074cc:	2b00      	cmp	r3, #0
 81074ce:	d020      	beq.n	8107512 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81074d0:	68fb      	ldr	r3, [r7, #12]
 81074d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81074d4:	f003 031f 	and.w	r3, r3, #31
 81074d8:	2201      	movs	r2, #1
 81074da:	409a      	lsls	r2, r3
 81074dc:	693b      	ldr	r3, [r7, #16]
 81074de:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 81074e0:	68fb      	ldr	r3, [r7, #12]
 81074e2:	681b      	ldr	r3, [r3, #0]
 81074e4:	683a      	ldr	r2, [r7, #0]
 81074e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81074e8:	68fb      	ldr	r3, [r7, #12]
 81074ea:	689b      	ldr	r3, [r3, #8]
 81074ec:	2b40      	cmp	r3, #64	; 0x40
 81074ee:	d108      	bne.n	8107502 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 81074f0:	68fb      	ldr	r3, [r7, #12]
 81074f2:	681b      	ldr	r3, [r3, #0]
 81074f4:	687a      	ldr	r2, [r7, #4]
 81074f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 81074f8:	68fb      	ldr	r3, [r7, #12]
 81074fa:	681b      	ldr	r3, [r3, #0]
 81074fc:	68ba      	ldr	r2, [r7, #8]
 81074fe:	60da      	str	r2, [r3, #12]
}
 8107500:	e007      	b.n	8107512 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8107502:	68fb      	ldr	r3, [r7, #12]
 8107504:	681b      	ldr	r3, [r3, #0]
 8107506:	68ba      	ldr	r2, [r7, #8]
 8107508:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 810750a:	68fb      	ldr	r3, [r7, #12]
 810750c:	681b      	ldr	r3, [r3, #0]
 810750e:	687a      	ldr	r2, [r7, #4]
 8107510:	60da      	str	r2, [r3, #12]
}
 8107512:	bf00      	nop
 8107514:	371c      	adds	r7, #28
 8107516:	46bd      	mov	sp, r7
 8107518:	f85d 7b04 	ldr.w	r7, [sp], #4
 810751c:	4770      	bx	lr
 810751e:	bf00      	nop
 8107520:	58025408 	.word	0x58025408
 8107524:	5802541c 	.word	0x5802541c
 8107528:	58025430 	.word	0x58025430
 810752c:	58025444 	.word	0x58025444
 8107530:	58025458 	.word	0x58025458
 8107534:	5802546c 	.word	0x5802546c
 8107538:	58025480 	.word	0x58025480
 810753c:	58025494 	.word	0x58025494

08107540 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8107540:	b480      	push	{r7}
 8107542:	b085      	sub	sp, #20
 8107544:	af00      	add	r7, sp, #0
 8107546:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8107548:	687b      	ldr	r3, [r7, #4]
 810754a:	681b      	ldr	r3, [r3, #0]
 810754c:	4a43      	ldr	r2, [pc, #268]	; (810765c <DMA_CalcBaseAndBitshift+0x11c>)
 810754e:	4293      	cmp	r3, r2
 8107550:	d04a      	beq.n	81075e8 <DMA_CalcBaseAndBitshift+0xa8>
 8107552:	687b      	ldr	r3, [r7, #4]
 8107554:	681b      	ldr	r3, [r3, #0]
 8107556:	4a42      	ldr	r2, [pc, #264]	; (8107660 <DMA_CalcBaseAndBitshift+0x120>)
 8107558:	4293      	cmp	r3, r2
 810755a:	d045      	beq.n	81075e8 <DMA_CalcBaseAndBitshift+0xa8>
 810755c:	687b      	ldr	r3, [r7, #4]
 810755e:	681b      	ldr	r3, [r3, #0]
 8107560:	4a40      	ldr	r2, [pc, #256]	; (8107664 <DMA_CalcBaseAndBitshift+0x124>)
 8107562:	4293      	cmp	r3, r2
 8107564:	d040      	beq.n	81075e8 <DMA_CalcBaseAndBitshift+0xa8>
 8107566:	687b      	ldr	r3, [r7, #4]
 8107568:	681b      	ldr	r3, [r3, #0]
 810756a:	4a3f      	ldr	r2, [pc, #252]	; (8107668 <DMA_CalcBaseAndBitshift+0x128>)
 810756c:	4293      	cmp	r3, r2
 810756e:	d03b      	beq.n	81075e8 <DMA_CalcBaseAndBitshift+0xa8>
 8107570:	687b      	ldr	r3, [r7, #4]
 8107572:	681b      	ldr	r3, [r3, #0]
 8107574:	4a3d      	ldr	r2, [pc, #244]	; (810766c <DMA_CalcBaseAndBitshift+0x12c>)
 8107576:	4293      	cmp	r3, r2
 8107578:	d036      	beq.n	81075e8 <DMA_CalcBaseAndBitshift+0xa8>
 810757a:	687b      	ldr	r3, [r7, #4]
 810757c:	681b      	ldr	r3, [r3, #0]
 810757e:	4a3c      	ldr	r2, [pc, #240]	; (8107670 <DMA_CalcBaseAndBitshift+0x130>)
 8107580:	4293      	cmp	r3, r2
 8107582:	d031      	beq.n	81075e8 <DMA_CalcBaseAndBitshift+0xa8>
 8107584:	687b      	ldr	r3, [r7, #4]
 8107586:	681b      	ldr	r3, [r3, #0]
 8107588:	4a3a      	ldr	r2, [pc, #232]	; (8107674 <DMA_CalcBaseAndBitshift+0x134>)
 810758a:	4293      	cmp	r3, r2
 810758c:	d02c      	beq.n	81075e8 <DMA_CalcBaseAndBitshift+0xa8>
 810758e:	687b      	ldr	r3, [r7, #4]
 8107590:	681b      	ldr	r3, [r3, #0]
 8107592:	4a39      	ldr	r2, [pc, #228]	; (8107678 <DMA_CalcBaseAndBitshift+0x138>)
 8107594:	4293      	cmp	r3, r2
 8107596:	d027      	beq.n	81075e8 <DMA_CalcBaseAndBitshift+0xa8>
 8107598:	687b      	ldr	r3, [r7, #4]
 810759a:	681b      	ldr	r3, [r3, #0]
 810759c:	4a37      	ldr	r2, [pc, #220]	; (810767c <DMA_CalcBaseAndBitshift+0x13c>)
 810759e:	4293      	cmp	r3, r2
 81075a0:	d022      	beq.n	81075e8 <DMA_CalcBaseAndBitshift+0xa8>
 81075a2:	687b      	ldr	r3, [r7, #4]
 81075a4:	681b      	ldr	r3, [r3, #0]
 81075a6:	4a36      	ldr	r2, [pc, #216]	; (8107680 <DMA_CalcBaseAndBitshift+0x140>)
 81075a8:	4293      	cmp	r3, r2
 81075aa:	d01d      	beq.n	81075e8 <DMA_CalcBaseAndBitshift+0xa8>
 81075ac:	687b      	ldr	r3, [r7, #4]
 81075ae:	681b      	ldr	r3, [r3, #0]
 81075b0:	4a34      	ldr	r2, [pc, #208]	; (8107684 <DMA_CalcBaseAndBitshift+0x144>)
 81075b2:	4293      	cmp	r3, r2
 81075b4:	d018      	beq.n	81075e8 <DMA_CalcBaseAndBitshift+0xa8>
 81075b6:	687b      	ldr	r3, [r7, #4]
 81075b8:	681b      	ldr	r3, [r3, #0]
 81075ba:	4a33      	ldr	r2, [pc, #204]	; (8107688 <DMA_CalcBaseAndBitshift+0x148>)
 81075bc:	4293      	cmp	r3, r2
 81075be:	d013      	beq.n	81075e8 <DMA_CalcBaseAndBitshift+0xa8>
 81075c0:	687b      	ldr	r3, [r7, #4]
 81075c2:	681b      	ldr	r3, [r3, #0]
 81075c4:	4a31      	ldr	r2, [pc, #196]	; (810768c <DMA_CalcBaseAndBitshift+0x14c>)
 81075c6:	4293      	cmp	r3, r2
 81075c8:	d00e      	beq.n	81075e8 <DMA_CalcBaseAndBitshift+0xa8>
 81075ca:	687b      	ldr	r3, [r7, #4]
 81075cc:	681b      	ldr	r3, [r3, #0]
 81075ce:	4a30      	ldr	r2, [pc, #192]	; (8107690 <DMA_CalcBaseAndBitshift+0x150>)
 81075d0:	4293      	cmp	r3, r2
 81075d2:	d009      	beq.n	81075e8 <DMA_CalcBaseAndBitshift+0xa8>
 81075d4:	687b      	ldr	r3, [r7, #4]
 81075d6:	681b      	ldr	r3, [r3, #0]
 81075d8:	4a2e      	ldr	r2, [pc, #184]	; (8107694 <DMA_CalcBaseAndBitshift+0x154>)
 81075da:	4293      	cmp	r3, r2
 81075dc:	d004      	beq.n	81075e8 <DMA_CalcBaseAndBitshift+0xa8>
 81075de:	687b      	ldr	r3, [r7, #4]
 81075e0:	681b      	ldr	r3, [r3, #0]
 81075e2:	4a2d      	ldr	r2, [pc, #180]	; (8107698 <DMA_CalcBaseAndBitshift+0x158>)
 81075e4:	4293      	cmp	r3, r2
 81075e6:	d101      	bne.n	81075ec <DMA_CalcBaseAndBitshift+0xac>
 81075e8:	2301      	movs	r3, #1
 81075ea:	e000      	b.n	81075ee <DMA_CalcBaseAndBitshift+0xae>
 81075ec:	2300      	movs	r3, #0
 81075ee:	2b00      	cmp	r3, #0
 81075f0:	d026      	beq.n	8107640 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81075f2:	687b      	ldr	r3, [r7, #4]
 81075f4:	681b      	ldr	r3, [r3, #0]
 81075f6:	b2db      	uxtb	r3, r3
 81075f8:	3b10      	subs	r3, #16
 81075fa:	4a28      	ldr	r2, [pc, #160]	; (810769c <DMA_CalcBaseAndBitshift+0x15c>)
 81075fc:	fba2 2303 	umull	r2, r3, r2, r3
 8107600:	091b      	lsrs	r3, r3, #4
 8107602:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8107604:	68fb      	ldr	r3, [r7, #12]
 8107606:	f003 0307 	and.w	r3, r3, #7
 810760a:	4a25      	ldr	r2, [pc, #148]	; (81076a0 <DMA_CalcBaseAndBitshift+0x160>)
 810760c:	5cd3      	ldrb	r3, [r2, r3]
 810760e:	461a      	mov	r2, r3
 8107610:	687b      	ldr	r3, [r7, #4]
 8107612:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8107614:	68fb      	ldr	r3, [r7, #12]
 8107616:	2b03      	cmp	r3, #3
 8107618:	d909      	bls.n	810762e <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 810761a:	687b      	ldr	r3, [r7, #4]
 810761c:	681b      	ldr	r3, [r3, #0]
 810761e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8107622:	f023 0303 	bic.w	r3, r3, #3
 8107626:	1d1a      	adds	r2, r3, #4
 8107628:	687b      	ldr	r3, [r7, #4]
 810762a:	659a      	str	r2, [r3, #88]	; 0x58
 810762c:	e00e      	b.n	810764c <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 810762e:	687b      	ldr	r3, [r7, #4]
 8107630:	681b      	ldr	r3, [r3, #0]
 8107632:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8107636:	f023 0303 	bic.w	r3, r3, #3
 810763a:	687a      	ldr	r2, [r7, #4]
 810763c:	6593      	str	r3, [r2, #88]	; 0x58
 810763e:	e005      	b.n	810764c <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8107640:	687b      	ldr	r3, [r7, #4]
 8107642:	681b      	ldr	r3, [r3, #0]
 8107644:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8107648:	687b      	ldr	r3, [r7, #4]
 810764a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 810764c:	687b      	ldr	r3, [r7, #4]
 810764e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8107650:	4618      	mov	r0, r3
 8107652:	3714      	adds	r7, #20
 8107654:	46bd      	mov	sp, r7
 8107656:	f85d 7b04 	ldr.w	r7, [sp], #4
 810765a:	4770      	bx	lr
 810765c:	40020010 	.word	0x40020010
 8107660:	40020028 	.word	0x40020028
 8107664:	40020040 	.word	0x40020040
 8107668:	40020058 	.word	0x40020058
 810766c:	40020070 	.word	0x40020070
 8107670:	40020088 	.word	0x40020088
 8107674:	400200a0 	.word	0x400200a0
 8107678:	400200b8 	.word	0x400200b8
 810767c:	40020410 	.word	0x40020410
 8107680:	40020428 	.word	0x40020428
 8107684:	40020440 	.word	0x40020440
 8107688:	40020458 	.word	0x40020458
 810768c:	40020470 	.word	0x40020470
 8107690:	40020488 	.word	0x40020488
 8107694:	400204a0 	.word	0x400204a0
 8107698:	400204b8 	.word	0x400204b8
 810769c:	aaaaaaab 	.word	0xaaaaaaab
 81076a0:	0810bb98 	.word	0x0810bb98

081076a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 81076a4:	b480      	push	{r7}
 81076a6:	b085      	sub	sp, #20
 81076a8:	af00      	add	r7, sp, #0
 81076aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81076ac:	2300      	movs	r3, #0
 81076ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81076b0:	687b      	ldr	r3, [r7, #4]
 81076b2:	699b      	ldr	r3, [r3, #24]
 81076b4:	2b00      	cmp	r3, #0
 81076b6:	d120      	bne.n	81076fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 81076b8:	687b      	ldr	r3, [r7, #4]
 81076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81076bc:	2b03      	cmp	r3, #3
 81076be:	d858      	bhi.n	8107772 <DMA_CheckFifoParam+0xce>
 81076c0:	a201      	add	r2, pc, #4	; (adr r2, 81076c8 <DMA_CheckFifoParam+0x24>)
 81076c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81076c6:	bf00      	nop
 81076c8:	081076d9 	.word	0x081076d9
 81076cc:	081076eb 	.word	0x081076eb
 81076d0:	081076d9 	.word	0x081076d9
 81076d4:	08107773 	.word	0x08107773
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81076d8:	687b      	ldr	r3, [r7, #4]
 81076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81076dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81076e0:	2b00      	cmp	r3, #0
 81076e2:	d048      	beq.n	8107776 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 81076e4:	2301      	movs	r3, #1
 81076e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81076e8:	e045      	b.n	8107776 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81076ea:	687b      	ldr	r3, [r7, #4]
 81076ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81076ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81076f2:	d142      	bne.n	810777a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 81076f4:	2301      	movs	r3, #1
 81076f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81076f8:	e03f      	b.n	810777a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 81076fa:	687b      	ldr	r3, [r7, #4]
 81076fc:	699b      	ldr	r3, [r3, #24]
 81076fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107702:	d123      	bne.n	810774c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8107704:	687b      	ldr	r3, [r7, #4]
 8107706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107708:	2b03      	cmp	r3, #3
 810770a:	d838      	bhi.n	810777e <DMA_CheckFifoParam+0xda>
 810770c:	a201      	add	r2, pc, #4	; (adr r2, 8107714 <DMA_CheckFifoParam+0x70>)
 810770e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107712:	bf00      	nop
 8107714:	08107725 	.word	0x08107725
 8107718:	0810772b 	.word	0x0810772b
 810771c:	08107725 	.word	0x08107725
 8107720:	0810773d 	.word	0x0810773d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8107724:	2301      	movs	r3, #1
 8107726:	73fb      	strb	r3, [r7, #15]
        break;
 8107728:	e030      	b.n	810778c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 810772a:	687b      	ldr	r3, [r7, #4]
 810772c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810772e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8107732:	2b00      	cmp	r3, #0
 8107734:	d025      	beq.n	8107782 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8107736:	2301      	movs	r3, #1
 8107738:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810773a:	e022      	b.n	8107782 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 810773c:	687b      	ldr	r3, [r7, #4]
 810773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107740:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8107744:	d11f      	bne.n	8107786 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8107746:	2301      	movs	r3, #1
 8107748:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810774a:	e01c      	b.n	8107786 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 810774c:	687b      	ldr	r3, [r7, #4]
 810774e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107750:	2b02      	cmp	r3, #2
 8107752:	d902      	bls.n	810775a <DMA_CheckFifoParam+0xb6>
 8107754:	2b03      	cmp	r3, #3
 8107756:	d003      	beq.n	8107760 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8107758:	e018      	b.n	810778c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 810775a:	2301      	movs	r3, #1
 810775c:	73fb      	strb	r3, [r7, #15]
        break;
 810775e:	e015      	b.n	810778c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8107760:	687b      	ldr	r3, [r7, #4]
 8107762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8107768:	2b00      	cmp	r3, #0
 810776a:	d00e      	beq.n	810778a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 810776c:	2301      	movs	r3, #1
 810776e:	73fb      	strb	r3, [r7, #15]
    break;
 8107770:	e00b      	b.n	810778a <DMA_CheckFifoParam+0xe6>
        break;
 8107772:	bf00      	nop
 8107774:	e00a      	b.n	810778c <DMA_CheckFifoParam+0xe8>
        break;
 8107776:	bf00      	nop
 8107778:	e008      	b.n	810778c <DMA_CheckFifoParam+0xe8>
        break;
 810777a:	bf00      	nop
 810777c:	e006      	b.n	810778c <DMA_CheckFifoParam+0xe8>
        break;
 810777e:	bf00      	nop
 8107780:	e004      	b.n	810778c <DMA_CheckFifoParam+0xe8>
        break;
 8107782:	bf00      	nop
 8107784:	e002      	b.n	810778c <DMA_CheckFifoParam+0xe8>
        break;
 8107786:	bf00      	nop
 8107788:	e000      	b.n	810778c <DMA_CheckFifoParam+0xe8>
    break;
 810778a:	bf00      	nop
    }
  }

  return status;
 810778c:	7bfb      	ldrb	r3, [r7, #15]
}
 810778e:	4618      	mov	r0, r3
 8107790:	3714      	adds	r7, #20
 8107792:	46bd      	mov	sp, r7
 8107794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107798:	4770      	bx	lr
 810779a:	bf00      	nop

0810779c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 810779c:	b480      	push	{r7}
 810779e:	b085      	sub	sp, #20
 81077a0:	af00      	add	r7, sp, #0
 81077a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 81077a4:	687b      	ldr	r3, [r7, #4]
 81077a6:	681b      	ldr	r3, [r3, #0]
 81077a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81077aa:	687b      	ldr	r3, [r7, #4]
 81077ac:	681b      	ldr	r3, [r3, #0]
 81077ae:	4a3a      	ldr	r2, [pc, #232]	; (8107898 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 81077b0:	4293      	cmp	r3, r2
 81077b2:	d022      	beq.n	81077fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81077b4:	687b      	ldr	r3, [r7, #4]
 81077b6:	681b      	ldr	r3, [r3, #0]
 81077b8:	4a38      	ldr	r2, [pc, #224]	; (810789c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 81077ba:	4293      	cmp	r3, r2
 81077bc:	d01d      	beq.n	81077fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81077be:	687b      	ldr	r3, [r7, #4]
 81077c0:	681b      	ldr	r3, [r3, #0]
 81077c2:	4a37      	ldr	r2, [pc, #220]	; (81078a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 81077c4:	4293      	cmp	r3, r2
 81077c6:	d018      	beq.n	81077fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81077c8:	687b      	ldr	r3, [r7, #4]
 81077ca:	681b      	ldr	r3, [r3, #0]
 81077cc:	4a35      	ldr	r2, [pc, #212]	; (81078a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 81077ce:	4293      	cmp	r3, r2
 81077d0:	d013      	beq.n	81077fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81077d2:	687b      	ldr	r3, [r7, #4]
 81077d4:	681b      	ldr	r3, [r3, #0]
 81077d6:	4a34      	ldr	r2, [pc, #208]	; (81078a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 81077d8:	4293      	cmp	r3, r2
 81077da:	d00e      	beq.n	81077fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81077dc:	687b      	ldr	r3, [r7, #4]
 81077de:	681b      	ldr	r3, [r3, #0]
 81077e0:	4a32      	ldr	r2, [pc, #200]	; (81078ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 81077e2:	4293      	cmp	r3, r2
 81077e4:	d009      	beq.n	81077fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81077e6:	687b      	ldr	r3, [r7, #4]
 81077e8:	681b      	ldr	r3, [r3, #0]
 81077ea:	4a31      	ldr	r2, [pc, #196]	; (81078b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 81077ec:	4293      	cmp	r3, r2
 81077ee:	d004      	beq.n	81077fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81077f0:	687b      	ldr	r3, [r7, #4]
 81077f2:	681b      	ldr	r3, [r3, #0]
 81077f4:	4a2f      	ldr	r2, [pc, #188]	; (81078b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 81077f6:	4293      	cmp	r3, r2
 81077f8:	d101      	bne.n	81077fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 81077fa:	2301      	movs	r3, #1
 81077fc:	e000      	b.n	8107800 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 81077fe:	2300      	movs	r3, #0
 8107800:	2b00      	cmp	r3, #0
 8107802:	d01c      	beq.n	810783e <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8107804:	687b      	ldr	r3, [r7, #4]
 8107806:	681b      	ldr	r3, [r3, #0]
 8107808:	b2db      	uxtb	r3, r3
 810780a:	3b08      	subs	r3, #8
 810780c:	4a2a      	ldr	r2, [pc, #168]	; (81078b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 810780e:	fba2 2303 	umull	r2, r3, r2, r3
 8107812:	091b      	lsrs	r3, r3, #4
 8107814:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8107816:	68fb      	ldr	r3, [r7, #12]
 8107818:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 810781c:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8107820:	009b      	lsls	r3, r3, #2
 8107822:	461a      	mov	r2, r3
 8107824:	687b      	ldr	r3, [r7, #4]
 8107826:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8107828:	687b      	ldr	r3, [r7, #4]
 810782a:	4a24      	ldr	r2, [pc, #144]	; (81078bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 810782c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810782e:	68fb      	ldr	r3, [r7, #12]
 8107830:	f003 031f 	and.w	r3, r3, #31
 8107834:	2201      	movs	r2, #1
 8107836:	409a      	lsls	r2, r3
 8107838:	687b      	ldr	r3, [r7, #4]
 810783a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 810783c:	e026      	b.n	810788c <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810783e:	687b      	ldr	r3, [r7, #4]
 8107840:	681b      	ldr	r3, [r3, #0]
 8107842:	b2db      	uxtb	r3, r3
 8107844:	3b10      	subs	r3, #16
 8107846:	4a1e      	ldr	r2, [pc, #120]	; (81078c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8107848:	fba2 2303 	umull	r2, r3, r2, r3
 810784c:	091b      	lsrs	r3, r3, #4
 810784e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8107850:	68bb      	ldr	r3, [r7, #8]
 8107852:	4a1c      	ldr	r2, [pc, #112]	; (81078c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8107854:	4293      	cmp	r3, r2
 8107856:	d806      	bhi.n	8107866 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8107858:	68bb      	ldr	r3, [r7, #8]
 810785a:	4a1b      	ldr	r2, [pc, #108]	; (81078c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 810785c:	4293      	cmp	r3, r2
 810785e:	d902      	bls.n	8107866 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8107860:	68fb      	ldr	r3, [r7, #12]
 8107862:	3308      	adds	r3, #8
 8107864:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8107866:	68fb      	ldr	r3, [r7, #12]
 8107868:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 810786c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8107870:	009b      	lsls	r3, r3, #2
 8107872:	461a      	mov	r2, r3
 8107874:	687b      	ldr	r3, [r7, #4]
 8107876:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8107878:	687b      	ldr	r3, [r7, #4]
 810787a:	4a14      	ldr	r2, [pc, #80]	; (81078cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 810787c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810787e:	68fb      	ldr	r3, [r7, #12]
 8107880:	f003 031f 	and.w	r3, r3, #31
 8107884:	2201      	movs	r2, #1
 8107886:	409a      	lsls	r2, r3
 8107888:	687b      	ldr	r3, [r7, #4]
 810788a:	669a      	str	r2, [r3, #104]	; 0x68
}
 810788c:	bf00      	nop
 810788e:	3714      	adds	r7, #20
 8107890:	46bd      	mov	sp, r7
 8107892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107896:	4770      	bx	lr
 8107898:	58025408 	.word	0x58025408
 810789c:	5802541c 	.word	0x5802541c
 81078a0:	58025430 	.word	0x58025430
 81078a4:	58025444 	.word	0x58025444
 81078a8:	58025458 	.word	0x58025458
 81078ac:	5802546c 	.word	0x5802546c
 81078b0:	58025480 	.word	0x58025480
 81078b4:	58025494 	.word	0x58025494
 81078b8:	cccccccd 	.word	0xcccccccd
 81078bc:	58025880 	.word	0x58025880
 81078c0:	aaaaaaab 	.word	0xaaaaaaab
 81078c4:	400204b8 	.word	0x400204b8
 81078c8:	4002040f 	.word	0x4002040f
 81078cc:	40020880 	.word	0x40020880

081078d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81078d0:	b480      	push	{r7}
 81078d2:	b085      	sub	sp, #20
 81078d4:	af00      	add	r7, sp, #0
 81078d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 81078d8:	687b      	ldr	r3, [r7, #4]
 81078da:	685b      	ldr	r3, [r3, #4]
 81078dc:	b2db      	uxtb	r3, r3
 81078de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 81078e0:	68fb      	ldr	r3, [r7, #12]
 81078e2:	2b00      	cmp	r3, #0
 81078e4:	d04a      	beq.n	810797c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 81078e6:	68fb      	ldr	r3, [r7, #12]
 81078e8:	2b08      	cmp	r3, #8
 81078ea:	d847      	bhi.n	810797c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81078ec:	687b      	ldr	r3, [r7, #4]
 81078ee:	681b      	ldr	r3, [r3, #0]
 81078f0:	4a25      	ldr	r2, [pc, #148]	; (8107988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 81078f2:	4293      	cmp	r3, r2
 81078f4:	d022      	beq.n	810793c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81078f6:	687b      	ldr	r3, [r7, #4]
 81078f8:	681b      	ldr	r3, [r3, #0]
 81078fa:	4a24      	ldr	r2, [pc, #144]	; (810798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 81078fc:	4293      	cmp	r3, r2
 81078fe:	d01d      	beq.n	810793c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8107900:	687b      	ldr	r3, [r7, #4]
 8107902:	681b      	ldr	r3, [r3, #0]
 8107904:	4a22      	ldr	r2, [pc, #136]	; (8107990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8107906:	4293      	cmp	r3, r2
 8107908:	d018      	beq.n	810793c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810790a:	687b      	ldr	r3, [r7, #4]
 810790c:	681b      	ldr	r3, [r3, #0]
 810790e:	4a21      	ldr	r2, [pc, #132]	; (8107994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8107910:	4293      	cmp	r3, r2
 8107912:	d013      	beq.n	810793c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8107914:	687b      	ldr	r3, [r7, #4]
 8107916:	681b      	ldr	r3, [r3, #0]
 8107918:	4a1f      	ldr	r2, [pc, #124]	; (8107998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 810791a:	4293      	cmp	r3, r2
 810791c:	d00e      	beq.n	810793c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810791e:	687b      	ldr	r3, [r7, #4]
 8107920:	681b      	ldr	r3, [r3, #0]
 8107922:	4a1e      	ldr	r2, [pc, #120]	; (810799c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8107924:	4293      	cmp	r3, r2
 8107926:	d009      	beq.n	810793c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8107928:	687b      	ldr	r3, [r7, #4]
 810792a:	681b      	ldr	r3, [r3, #0]
 810792c:	4a1c      	ldr	r2, [pc, #112]	; (81079a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 810792e:	4293      	cmp	r3, r2
 8107930:	d004      	beq.n	810793c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8107932:	687b      	ldr	r3, [r7, #4]
 8107934:	681b      	ldr	r3, [r3, #0]
 8107936:	4a1b      	ldr	r2, [pc, #108]	; (81079a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8107938:	4293      	cmp	r3, r2
 810793a:	d101      	bne.n	8107940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 810793c:	2301      	movs	r3, #1
 810793e:	e000      	b.n	8107942 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8107940:	2300      	movs	r3, #0
 8107942:	2b00      	cmp	r3, #0
 8107944:	d00a      	beq.n	810795c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8107946:	68fa      	ldr	r2, [r7, #12]
 8107948:	4b17      	ldr	r3, [pc, #92]	; (81079a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 810794a:	4413      	add	r3, r2
 810794c:	009b      	lsls	r3, r3, #2
 810794e:	461a      	mov	r2, r3
 8107950:	687b      	ldr	r3, [r7, #4]
 8107952:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8107954:	687b      	ldr	r3, [r7, #4]
 8107956:	4a15      	ldr	r2, [pc, #84]	; (81079ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8107958:	671a      	str	r2, [r3, #112]	; 0x70
 810795a:	e009      	b.n	8107970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 810795c:	68fa      	ldr	r2, [r7, #12]
 810795e:	4b14      	ldr	r3, [pc, #80]	; (81079b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8107960:	4413      	add	r3, r2
 8107962:	009b      	lsls	r3, r3, #2
 8107964:	461a      	mov	r2, r3
 8107966:	687b      	ldr	r3, [r7, #4]
 8107968:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 810796a:	687b      	ldr	r3, [r7, #4]
 810796c:	4a11      	ldr	r2, [pc, #68]	; (81079b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 810796e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8107970:	68fb      	ldr	r3, [r7, #12]
 8107972:	3b01      	subs	r3, #1
 8107974:	2201      	movs	r2, #1
 8107976:	409a      	lsls	r2, r3
 8107978:	687b      	ldr	r3, [r7, #4]
 810797a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 810797c:	bf00      	nop
 810797e:	3714      	adds	r7, #20
 8107980:	46bd      	mov	sp, r7
 8107982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107986:	4770      	bx	lr
 8107988:	58025408 	.word	0x58025408
 810798c:	5802541c 	.word	0x5802541c
 8107990:	58025430 	.word	0x58025430
 8107994:	58025444 	.word	0x58025444
 8107998:	58025458 	.word	0x58025458
 810799c:	5802546c 	.word	0x5802546c
 81079a0:	58025480 	.word	0x58025480
 81079a4:	58025494 	.word	0x58025494
 81079a8:	1600963f 	.word	0x1600963f
 81079ac:	58025940 	.word	0x58025940
 81079b0:	1000823f 	.word	0x1000823f
 81079b4:	40020940 	.word	0x40020940

081079b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81079b8:	b480      	push	{r7}
 81079ba:	b089      	sub	sp, #36	; 0x24
 81079bc:	af00      	add	r7, sp, #0
 81079be:	6078      	str	r0, [r7, #4]
 81079c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81079c2:	2300      	movs	r3, #0
 81079c4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81079c6:	4b89      	ldr	r3, [pc, #548]	; (8107bec <HAL_GPIO_Init+0x234>)
 81079c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81079ca:	e194      	b.n	8107cf6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81079cc:	683b      	ldr	r3, [r7, #0]
 81079ce:	681a      	ldr	r2, [r3, #0]
 81079d0:	2101      	movs	r1, #1
 81079d2:	69fb      	ldr	r3, [r7, #28]
 81079d4:	fa01 f303 	lsl.w	r3, r1, r3
 81079d8:	4013      	ands	r3, r2
 81079da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81079dc:	693b      	ldr	r3, [r7, #16]
 81079de:	2b00      	cmp	r3, #0
 81079e0:	f000 8186 	beq.w	8107cf0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81079e4:	683b      	ldr	r3, [r7, #0]
 81079e6:	685b      	ldr	r3, [r3, #4]
 81079e8:	f003 0303 	and.w	r3, r3, #3
 81079ec:	2b01      	cmp	r3, #1
 81079ee:	d005      	beq.n	81079fc <HAL_GPIO_Init+0x44>
 81079f0:	683b      	ldr	r3, [r7, #0]
 81079f2:	685b      	ldr	r3, [r3, #4]
 81079f4:	f003 0303 	and.w	r3, r3, #3
 81079f8:	2b02      	cmp	r3, #2
 81079fa:	d130      	bne.n	8107a5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81079fc:	687b      	ldr	r3, [r7, #4]
 81079fe:	689b      	ldr	r3, [r3, #8]
 8107a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8107a02:	69fb      	ldr	r3, [r7, #28]
 8107a04:	005b      	lsls	r3, r3, #1
 8107a06:	2203      	movs	r2, #3
 8107a08:	fa02 f303 	lsl.w	r3, r2, r3
 8107a0c:	43db      	mvns	r3, r3
 8107a0e:	69ba      	ldr	r2, [r7, #24]
 8107a10:	4013      	ands	r3, r2
 8107a12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8107a14:	683b      	ldr	r3, [r7, #0]
 8107a16:	68da      	ldr	r2, [r3, #12]
 8107a18:	69fb      	ldr	r3, [r7, #28]
 8107a1a:	005b      	lsls	r3, r3, #1
 8107a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8107a20:	69ba      	ldr	r2, [r7, #24]
 8107a22:	4313      	orrs	r3, r2
 8107a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8107a26:	687b      	ldr	r3, [r7, #4]
 8107a28:	69ba      	ldr	r2, [r7, #24]
 8107a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8107a2c:	687b      	ldr	r3, [r7, #4]
 8107a2e:	685b      	ldr	r3, [r3, #4]
 8107a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8107a32:	2201      	movs	r2, #1
 8107a34:	69fb      	ldr	r3, [r7, #28]
 8107a36:	fa02 f303 	lsl.w	r3, r2, r3
 8107a3a:	43db      	mvns	r3, r3
 8107a3c:	69ba      	ldr	r2, [r7, #24]
 8107a3e:	4013      	ands	r3, r2
 8107a40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8107a42:	683b      	ldr	r3, [r7, #0]
 8107a44:	685b      	ldr	r3, [r3, #4]
 8107a46:	091b      	lsrs	r3, r3, #4
 8107a48:	f003 0201 	and.w	r2, r3, #1
 8107a4c:	69fb      	ldr	r3, [r7, #28]
 8107a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8107a52:	69ba      	ldr	r2, [r7, #24]
 8107a54:	4313      	orrs	r3, r2
 8107a56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8107a58:	687b      	ldr	r3, [r7, #4]
 8107a5a:	69ba      	ldr	r2, [r7, #24]
 8107a5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8107a5e:	683b      	ldr	r3, [r7, #0]
 8107a60:	685b      	ldr	r3, [r3, #4]
 8107a62:	f003 0303 	and.w	r3, r3, #3
 8107a66:	2b03      	cmp	r3, #3
 8107a68:	d017      	beq.n	8107a9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8107a6a:	687b      	ldr	r3, [r7, #4]
 8107a6c:	68db      	ldr	r3, [r3, #12]
 8107a6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8107a70:	69fb      	ldr	r3, [r7, #28]
 8107a72:	005b      	lsls	r3, r3, #1
 8107a74:	2203      	movs	r2, #3
 8107a76:	fa02 f303 	lsl.w	r3, r2, r3
 8107a7a:	43db      	mvns	r3, r3
 8107a7c:	69ba      	ldr	r2, [r7, #24]
 8107a7e:	4013      	ands	r3, r2
 8107a80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8107a82:	683b      	ldr	r3, [r7, #0]
 8107a84:	689a      	ldr	r2, [r3, #8]
 8107a86:	69fb      	ldr	r3, [r7, #28]
 8107a88:	005b      	lsls	r3, r3, #1
 8107a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8107a8e:	69ba      	ldr	r2, [r7, #24]
 8107a90:	4313      	orrs	r3, r2
 8107a92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8107a94:	687b      	ldr	r3, [r7, #4]
 8107a96:	69ba      	ldr	r2, [r7, #24]
 8107a98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8107a9a:	683b      	ldr	r3, [r7, #0]
 8107a9c:	685b      	ldr	r3, [r3, #4]
 8107a9e:	f003 0303 	and.w	r3, r3, #3
 8107aa2:	2b02      	cmp	r3, #2
 8107aa4:	d123      	bne.n	8107aee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8107aa6:	69fb      	ldr	r3, [r7, #28]
 8107aa8:	08da      	lsrs	r2, r3, #3
 8107aaa:	687b      	ldr	r3, [r7, #4]
 8107aac:	3208      	adds	r2, #8
 8107aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8107ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8107ab4:	69fb      	ldr	r3, [r7, #28]
 8107ab6:	f003 0307 	and.w	r3, r3, #7
 8107aba:	009b      	lsls	r3, r3, #2
 8107abc:	220f      	movs	r2, #15
 8107abe:	fa02 f303 	lsl.w	r3, r2, r3
 8107ac2:	43db      	mvns	r3, r3
 8107ac4:	69ba      	ldr	r2, [r7, #24]
 8107ac6:	4013      	ands	r3, r2
 8107ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8107aca:	683b      	ldr	r3, [r7, #0]
 8107acc:	691a      	ldr	r2, [r3, #16]
 8107ace:	69fb      	ldr	r3, [r7, #28]
 8107ad0:	f003 0307 	and.w	r3, r3, #7
 8107ad4:	009b      	lsls	r3, r3, #2
 8107ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8107ada:	69ba      	ldr	r2, [r7, #24]
 8107adc:	4313      	orrs	r3, r2
 8107ade:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8107ae0:	69fb      	ldr	r3, [r7, #28]
 8107ae2:	08da      	lsrs	r2, r3, #3
 8107ae4:	687b      	ldr	r3, [r7, #4]
 8107ae6:	3208      	adds	r2, #8
 8107ae8:	69b9      	ldr	r1, [r7, #24]
 8107aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8107aee:	687b      	ldr	r3, [r7, #4]
 8107af0:	681b      	ldr	r3, [r3, #0]
 8107af2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8107af4:	69fb      	ldr	r3, [r7, #28]
 8107af6:	005b      	lsls	r3, r3, #1
 8107af8:	2203      	movs	r2, #3
 8107afa:	fa02 f303 	lsl.w	r3, r2, r3
 8107afe:	43db      	mvns	r3, r3
 8107b00:	69ba      	ldr	r2, [r7, #24]
 8107b02:	4013      	ands	r3, r2
 8107b04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8107b06:	683b      	ldr	r3, [r7, #0]
 8107b08:	685b      	ldr	r3, [r3, #4]
 8107b0a:	f003 0203 	and.w	r2, r3, #3
 8107b0e:	69fb      	ldr	r3, [r7, #28]
 8107b10:	005b      	lsls	r3, r3, #1
 8107b12:	fa02 f303 	lsl.w	r3, r2, r3
 8107b16:	69ba      	ldr	r2, [r7, #24]
 8107b18:	4313      	orrs	r3, r2
 8107b1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8107b1c:	687b      	ldr	r3, [r7, #4]
 8107b1e:	69ba      	ldr	r2, [r7, #24]
 8107b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8107b22:	683b      	ldr	r3, [r7, #0]
 8107b24:	685b      	ldr	r3, [r3, #4]
 8107b26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8107b2a:	2b00      	cmp	r3, #0
 8107b2c:	f000 80e0 	beq.w	8107cf0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8107b30:	4b2f      	ldr	r3, [pc, #188]	; (8107bf0 <HAL_GPIO_Init+0x238>)
 8107b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8107b36:	4a2e      	ldr	r2, [pc, #184]	; (8107bf0 <HAL_GPIO_Init+0x238>)
 8107b38:	f043 0302 	orr.w	r3, r3, #2
 8107b3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8107b40:	4b2b      	ldr	r3, [pc, #172]	; (8107bf0 <HAL_GPIO_Init+0x238>)
 8107b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8107b46:	f003 0302 	and.w	r3, r3, #2
 8107b4a:	60fb      	str	r3, [r7, #12]
 8107b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8107b4e:	4a29      	ldr	r2, [pc, #164]	; (8107bf4 <HAL_GPIO_Init+0x23c>)
 8107b50:	69fb      	ldr	r3, [r7, #28]
 8107b52:	089b      	lsrs	r3, r3, #2
 8107b54:	3302      	adds	r3, #2
 8107b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8107b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8107b5c:	69fb      	ldr	r3, [r7, #28]
 8107b5e:	f003 0303 	and.w	r3, r3, #3
 8107b62:	009b      	lsls	r3, r3, #2
 8107b64:	220f      	movs	r2, #15
 8107b66:	fa02 f303 	lsl.w	r3, r2, r3
 8107b6a:	43db      	mvns	r3, r3
 8107b6c:	69ba      	ldr	r2, [r7, #24]
 8107b6e:	4013      	ands	r3, r2
 8107b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8107b72:	687b      	ldr	r3, [r7, #4]
 8107b74:	4a20      	ldr	r2, [pc, #128]	; (8107bf8 <HAL_GPIO_Init+0x240>)
 8107b76:	4293      	cmp	r3, r2
 8107b78:	d052      	beq.n	8107c20 <HAL_GPIO_Init+0x268>
 8107b7a:	687b      	ldr	r3, [r7, #4]
 8107b7c:	4a1f      	ldr	r2, [pc, #124]	; (8107bfc <HAL_GPIO_Init+0x244>)
 8107b7e:	4293      	cmp	r3, r2
 8107b80:	d031      	beq.n	8107be6 <HAL_GPIO_Init+0x22e>
 8107b82:	687b      	ldr	r3, [r7, #4]
 8107b84:	4a1e      	ldr	r2, [pc, #120]	; (8107c00 <HAL_GPIO_Init+0x248>)
 8107b86:	4293      	cmp	r3, r2
 8107b88:	d02b      	beq.n	8107be2 <HAL_GPIO_Init+0x22a>
 8107b8a:	687b      	ldr	r3, [r7, #4]
 8107b8c:	4a1d      	ldr	r2, [pc, #116]	; (8107c04 <HAL_GPIO_Init+0x24c>)
 8107b8e:	4293      	cmp	r3, r2
 8107b90:	d025      	beq.n	8107bde <HAL_GPIO_Init+0x226>
 8107b92:	687b      	ldr	r3, [r7, #4]
 8107b94:	4a1c      	ldr	r2, [pc, #112]	; (8107c08 <HAL_GPIO_Init+0x250>)
 8107b96:	4293      	cmp	r3, r2
 8107b98:	d01f      	beq.n	8107bda <HAL_GPIO_Init+0x222>
 8107b9a:	687b      	ldr	r3, [r7, #4]
 8107b9c:	4a1b      	ldr	r2, [pc, #108]	; (8107c0c <HAL_GPIO_Init+0x254>)
 8107b9e:	4293      	cmp	r3, r2
 8107ba0:	d019      	beq.n	8107bd6 <HAL_GPIO_Init+0x21e>
 8107ba2:	687b      	ldr	r3, [r7, #4]
 8107ba4:	4a1a      	ldr	r2, [pc, #104]	; (8107c10 <HAL_GPIO_Init+0x258>)
 8107ba6:	4293      	cmp	r3, r2
 8107ba8:	d013      	beq.n	8107bd2 <HAL_GPIO_Init+0x21a>
 8107baa:	687b      	ldr	r3, [r7, #4]
 8107bac:	4a19      	ldr	r2, [pc, #100]	; (8107c14 <HAL_GPIO_Init+0x25c>)
 8107bae:	4293      	cmp	r3, r2
 8107bb0:	d00d      	beq.n	8107bce <HAL_GPIO_Init+0x216>
 8107bb2:	687b      	ldr	r3, [r7, #4]
 8107bb4:	4a18      	ldr	r2, [pc, #96]	; (8107c18 <HAL_GPIO_Init+0x260>)
 8107bb6:	4293      	cmp	r3, r2
 8107bb8:	d007      	beq.n	8107bca <HAL_GPIO_Init+0x212>
 8107bba:	687b      	ldr	r3, [r7, #4]
 8107bbc:	4a17      	ldr	r2, [pc, #92]	; (8107c1c <HAL_GPIO_Init+0x264>)
 8107bbe:	4293      	cmp	r3, r2
 8107bc0:	d101      	bne.n	8107bc6 <HAL_GPIO_Init+0x20e>
 8107bc2:	2309      	movs	r3, #9
 8107bc4:	e02d      	b.n	8107c22 <HAL_GPIO_Init+0x26a>
 8107bc6:	230a      	movs	r3, #10
 8107bc8:	e02b      	b.n	8107c22 <HAL_GPIO_Init+0x26a>
 8107bca:	2308      	movs	r3, #8
 8107bcc:	e029      	b.n	8107c22 <HAL_GPIO_Init+0x26a>
 8107bce:	2307      	movs	r3, #7
 8107bd0:	e027      	b.n	8107c22 <HAL_GPIO_Init+0x26a>
 8107bd2:	2306      	movs	r3, #6
 8107bd4:	e025      	b.n	8107c22 <HAL_GPIO_Init+0x26a>
 8107bd6:	2305      	movs	r3, #5
 8107bd8:	e023      	b.n	8107c22 <HAL_GPIO_Init+0x26a>
 8107bda:	2304      	movs	r3, #4
 8107bdc:	e021      	b.n	8107c22 <HAL_GPIO_Init+0x26a>
 8107bde:	2303      	movs	r3, #3
 8107be0:	e01f      	b.n	8107c22 <HAL_GPIO_Init+0x26a>
 8107be2:	2302      	movs	r3, #2
 8107be4:	e01d      	b.n	8107c22 <HAL_GPIO_Init+0x26a>
 8107be6:	2301      	movs	r3, #1
 8107be8:	e01b      	b.n	8107c22 <HAL_GPIO_Init+0x26a>
 8107bea:	bf00      	nop
 8107bec:	580000c0 	.word	0x580000c0
 8107bf0:	58024400 	.word	0x58024400
 8107bf4:	58000400 	.word	0x58000400
 8107bf8:	58020000 	.word	0x58020000
 8107bfc:	58020400 	.word	0x58020400
 8107c00:	58020800 	.word	0x58020800
 8107c04:	58020c00 	.word	0x58020c00
 8107c08:	58021000 	.word	0x58021000
 8107c0c:	58021400 	.word	0x58021400
 8107c10:	58021800 	.word	0x58021800
 8107c14:	58021c00 	.word	0x58021c00
 8107c18:	58022000 	.word	0x58022000
 8107c1c:	58022400 	.word	0x58022400
 8107c20:	2300      	movs	r3, #0
 8107c22:	69fa      	ldr	r2, [r7, #28]
 8107c24:	f002 0203 	and.w	r2, r2, #3
 8107c28:	0092      	lsls	r2, r2, #2
 8107c2a:	4093      	lsls	r3, r2
 8107c2c:	69ba      	ldr	r2, [r7, #24]
 8107c2e:	4313      	orrs	r3, r2
 8107c30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8107c32:	4938      	ldr	r1, [pc, #224]	; (8107d14 <HAL_GPIO_Init+0x35c>)
 8107c34:	69fb      	ldr	r3, [r7, #28]
 8107c36:	089b      	lsrs	r3, r3, #2
 8107c38:	3302      	adds	r3, #2
 8107c3a:	69ba      	ldr	r2, [r7, #24]
 8107c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8107c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8107c44:	681b      	ldr	r3, [r3, #0]
 8107c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107c48:	693b      	ldr	r3, [r7, #16]
 8107c4a:	43db      	mvns	r3, r3
 8107c4c:	69ba      	ldr	r2, [r7, #24]
 8107c4e:	4013      	ands	r3, r2
 8107c50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8107c52:	683b      	ldr	r3, [r7, #0]
 8107c54:	685b      	ldr	r3, [r3, #4]
 8107c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8107c5a:	2b00      	cmp	r3, #0
 8107c5c:	d003      	beq.n	8107c66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8107c5e:	69ba      	ldr	r2, [r7, #24]
 8107c60:	693b      	ldr	r3, [r7, #16]
 8107c62:	4313      	orrs	r3, r2
 8107c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8107c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8107c6a:	69bb      	ldr	r3, [r7, #24]
 8107c6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8107c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8107c72:	685b      	ldr	r3, [r3, #4]
 8107c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107c76:	693b      	ldr	r3, [r7, #16]
 8107c78:	43db      	mvns	r3, r3
 8107c7a:	69ba      	ldr	r2, [r7, #24]
 8107c7c:	4013      	ands	r3, r2
 8107c7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8107c80:	683b      	ldr	r3, [r7, #0]
 8107c82:	685b      	ldr	r3, [r3, #4]
 8107c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8107c88:	2b00      	cmp	r3, #0
 8107c8a:	d003      	beq.n	8107c94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8107c8c:	69ba      	ldr	r2, [r7, #24]
 8107c8e:	693b      	ldr	r3, [r7, #16]
 8107c90:	4313      	orrs	r3, r2
 8107c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8107c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8107c98:	69bb      	ldr	r3, [r7, #24]
 8107c9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8107c9c:	697b      	ldr	r3, [r7, #20]
 8107c9e:	685b      	ldr	r3, [r3, #4]
 8107ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107ca2:	693b      	ldr	r3, [r7, #16]
 8107ca4:	43db      	mvns	r3, r3
 8107ca6:	69ba      	ldr	r2, [r7, #24]
 8107ca8:	4013      	ands	r3, r2
 8107caa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8107cac:	683b      	ldr	r3, [r7, #0]
 8107cae:	685b      	ldr	r3, [r3, #4]
 8107cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107cb4:	2b00      	cmp	r3, #0
 8107cb6:	d003      	beq.n	8107cc0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8107cb8:	69ba      	ldr	r2, [r7, #24]
 8107cba:	693b      	ldr	r3, [r7, #16]
 8107cbc:	4313      	orrs	r3, r2
 8107cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8107cc0:	697b      	ldr	r3, [r7, #20]
 8107cc2:	69ba      	ldr	r2, [r7, #24]
 8107cc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8107cc6:	697b      	ldr	r3, [r7, #20]
 8107cc8:	681b      	ldr	r3, [r3, #0]
 8107cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107ccc:	693b      	ldr	r3, [r7, #16]
 8107cce:	43db      	mvns	r3, r3
 8107cd0:	69ba      	ldr	r2, [r7, #24]
 8107cd2:	4013      	ands	r3, r2
 8107cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8107cd6:	683b      	ldr	r3, [r7, #0]
 8107cd8:	685b      	ldr	r3, [r3, #4]
 8107cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8107cde:	2b00      	cmp	r3, #0
 8107ce0:	d003      	beq.n	8107cea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8107ce2:	69ba      	ldr	r2, [r7, #24]
 8107ce4:	693b      	ldr	r3, [r7, #16]
 8107ce6:	4313      	orrs	r3, r2
 8107ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8107cea:	697b      	ldr	r3, [r7, #20]
 8107cec:	69ba      	ldr	r2, [r7, #24]
 8107cee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8107cf0:	69fb      	ldr	r3, [r7, #28]
 8107cf2:	3301      	adds	r3, #1
 8107cf4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8107cf6:	683b      	ldr	r3, [r7, #0]
 8107cf8:	681a      	ldr	r2, [r3, #0]
 8107cfa:	69fb      	ldr	r3, [r7, #28]
 8107cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8107d00:	2b00      	cmp	r3, #0
 8107d02:	f47f ae63 	bne.w	81079cc <HAL_GPIO_Init+0x14>
  }
}
 8107d06:	bf00      	nop
 8107d08:	bf00      	nop
 8107d0a:	3724      	adds	r7, #36	; 0x24
 8107d0c:	46bd      	mov	sp, r7
 8107d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d12:	4770      	bx	lr
 8107d14:	58000400 	.word	0x58000400

08107d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8107d18:	b480      	push	{r7}
 8107d1a:	b083      	sub	sp, #12
 8107d1c:	af00      	add	r7, sp, #0
 8107d1e:	6078      	str	r0, [r7, #4]
 8107d20:	460b      	mov	r3, r1
 8107d22:	807b      	strh	r3, [r7, #2]
 8107d24:	4613      	mov	r3, r2
 8107d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8107d28:	787b      	ldrb	r3, [r7, #1]
 8107d2a:	2b00      	cmp	r3, #0
 8107d2c:	d003      	beq.n	8107d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8107d2e:	887a      	ldrh	r2, [r7, #2]
 8107d30:	687b      	ldr	r3, [r7, #4]
 8107d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8107d34:	e003      	b.n	8107d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8107d36:	887b      	ldrh	r3, [r7, #2]
 8107d38:	041a      	lsls	r2, r3, #16
 8107d3a:	687b      	ldr	r3, [r7, #4]
 8107d3c:	619a      	str	r2, [r3, #24]
}
 8107d3e:	bf00      	nop
 8107d40:	370c      	adds	r7, #12
 8107d42:	46bd      	mov	sp, r7
 8107d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d48:	4770      	bx	lr

08107d4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8107d4a:	b480      	push	{r7}
 8107d4c:	b085      	sub	sp, #20
 8107d4e:	af00      	add	r7, sp, #0
 8107d50:	6078      	str	r0, [r7, #4]
 8107d52:	460b      	mov	r3, r1
 8107d54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8107d56:	687b      	ldr	r3, [r7, #4]
 8107d58:	695b      	ldr	r3, [r3, #20]
 8107d5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8107d5c:	887a      	ldrh	r2, [r7, #2]
 8107d5e:	68fb      	ldr	r3, [r7, #12]
 8107d60:	4013      	ands	r3, r2
 8107d62:	041a      	lsls	r2, r3, #16
 8107d64:	68fb      	ldr	r3, [r7, #12]
 8107d66:	43d9      	mvns	r1, r3
 8107d68:	887b      	ldrh	r3, [r7, #2]
 8107d6a:	400b      	ands	r3, r1
 8107d6c:	431a      	orrs	r2, r3
 8107d6e:	687b      	ldr	r3, [r7, #4]
 8107d70:	619a      	str	r2, [r3, #24]
}
 8107d72:	bf00      	nop
 8107d74:	3714      	adds	r7, #20
 8107d76:	46bd      	mov	sp, r7
 8107d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d7c:	4770      	bx	lr
	...

08107d80 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8107d80:	b480      	push	{r7}
 8107d82:	b083      	sub	sp, #12
 8107d84:	af00      	add	r7, sp, #0
 8107d86:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8107d88:	4b05      	ldr	r3, [pc, #20]	; (8107da0 <HAL_HSEM_ActivateNotification+0x20>)
 8107d8a:	681a      	ldr	r2, [r3, #0]
 8107d8c:	4904      	ldr	r1, [pc, #16]	; (8107da0 <HAL_HSEM_ActivateNotification+0x20>)
 8107d8e:	687b      	ldr	r3, [r7, #4]
 8107d90:	4313      	orrs	r3, r2
 8107d92:	600b      	str	r3, [r1, #0]
#endif
}
 8107d94:	bf00      	nop
 8107d96:	370c      	adds	r7, #12
 8107d98:	46bd      	mov	sp, r7
 8107d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d9e:	4770      	bx	lr
 8107da0:	58026510 	.word	0x58026510

08107da4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8107da4:	b580      	push	{r7, lr}
 8107da6:	b084      	sub	sp, #16
 8107da8:	af00      	add	r7, sp, #0
 8107daa:	60f8      	str	r0, [r7, #12]
 8107dac:	460b      	mov	r3, r1
 8107dae:	607a      	str	r2, [r7, #4]
 8107db0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8107db2:	4b37      	ldr	r3, [pc, #220]	; (8107e90 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107db4:	681b      	ldr	r3, [r3, #0]
 8107db6:	f023 0201 	bic.w	r2, r3, #1
 8107dba:	4935      	ldr	r1, [pc, #212]	; (8107e90 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107dbc:	68fb      	ldr	r3, [r7, #12]
 8107dbe:	4313      	orrs	r3, r2
 8107dc0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8107dc2:	687b      	ldr	r3, [r7, #4]
 8107dc4:	2b00      	cmp	r3, #0
 8107dc6:	d123      	bne.n	8107e10 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8107dc8:	f7fd fd0c 	bl	81057e4 <HAL_GetCurrentCPUID>
 8107dcc:	4603      	mov	r3, r0
 8107dce:	2b03      	cmp	r3, #3
 8107dd0:	d158      	bne.n	8107e84 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8107dd2:	4b2f      	ldr	r3, [pc, #188]	; (8107e90 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107dd4:	691b      	ldr	r3, [r3, #16]
 8107dd6:	4a2e      	ldr	r2, [pc, #184]	; (8107e90 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107dd8:	f023 0301 	bic.w	r3, r3, #1
 8107ddc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107dde:	4b2d      	ldr	r3, [pc, #180]	; (8107e94 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107de0:	691b      	ldr	r3, [r3, #16]
 8107de2:	4a2c      	ldr	r2, [pc, #176]	; (8107e94 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107de4:	f043 0304 	orr.w	r3, r3, #4
 8107de8:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8107dea:	f3bf 8f4f 	dsb	sy
}
 8107dee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8107df0:	f3bf 8f6f 	isb	sy
}
 8107df4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8107df6:	7afb      	ldrb	r3, [r7, #11]
 8107df8:	2b01      	cmp	r3, #1
 8107dfa:	d101      	bne.n	8107e00 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8107dfc:	bf30      	wfi
 8107dfe:	e000      	b.n	8107e02 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8107e00:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107e02:	4b24      	ldr	r3, [pc, #144]	; (8107e94 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107e04:	691b      	ldr	r3, [r3, #16]
 8107e06:	4a23      	ldr	r2, [pc, #140]	; (8107e94 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107e08:	f023 0304 	bic.w	r3, r3, #4
 8107e0c:	6113      	str	r3, [r2, #16]
 8107e0e:	e03c      	b.n	8107e8a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8107e10:	687b      	ldr	r3, [r7, #4]
 8107e12:	2b01      	cmp	r3, #1
 8107e14:	d123      	bne.n	8107e5e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8107e16:	f7fd fce5 	bl	81057e4 <HAL_GetCurrentCPUID>
 8107e1a:	4603      	mov	r3, r0
 8107e1c:	2b01      	cmp	r3, #1
 8107e1e:	d133      	bne.n	8107e88 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8107e20:	4b1b      	ldr	r3, [pc, #108]	; (8107e90 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107e22:	695b      	ldr	r3, [r3, #20]
 8107e24:	4a1a      	ldr	r2, [pc, #104]	; (8107e90 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107e26:	f023 0302 	bic.w	r3, r3, #2
 8107e2a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107e2c:	4b19      	ldr	r3, [pc, #100]	; (8107e94 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107e2e:	691b      	ldr	r3, [r3, #16]
 8107e30:	4a18      	ldr	r2, [pc, #96]	; (8107e94 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107e32:	f043 0304 	orr.w	r3, r3, #4
 8107e36:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8107e38:	f3bf 8f4f 	dsb	sy
}
 8107e3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8107e3e:	f3bf 8f6f 	isb	sy
}
 8107e42:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8107e44:	7afb      	ldrb	r3, [r7, #11]
 8107e46:	2b01      	cmp	r3, #1
 8107e48:	d101      	bne.n	8107e4e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8107e4a:	bf30      	wfi
 8107e4c:	e000      	b.n	8107e50 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8107e4e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107e50:	4b10      	ldr	r3, [pc, #64]	; (8107e94 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107e52:	691b      	ldr	r3, [r3, #16]
 8107e54:	4a0f      	ldr	r2, [pc, #60]	; (8107e94 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107e56:	f023 0304 	bic.w	r3, r3, #4
 8107e5a:	6113      	str	r3, [r2, #16]
 8107e5c:	e015      	b.n	8107e8a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107e5e:	f7fd fcc1 	bl	81057e4 <HAL_GetCurrentCPUID>
 8107e62:	4603      	mov	r3, r0
 8107e64:	2b03      	cmp	r3, #3
 8107e66:	d106      	bne.n	8107e76 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8107e68:	4b09      	ldr	r3, [pc, #36]	; (8107e90 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107e6a:	691b      	ldr	r3, [r3, #16]
 8107e6c:	4a08      	ldr	r2, [pc, #32]	; (8107e90 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107e6e:	f023 0304 	bic.w	r3, r3, #4
 8107e72:	6113      	str	r3, [r2, #16]
 8107e74:	e009      	b.n	8107e8a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8107e76:	4b06      	ldr	r3, [pc, #24]	; (8107e90 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107e78:	695b      	ldr	r3, [r3, #20]
 8107e7a:	4a05      	ldr	r2, [pc, #20]	; (8107e90 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107e7c:	f023 0304 	bic.w	r3, r3, #4
 8107e80:	6153      	str	r3, [r2, #20]
 8107e82:	e002      	b.n	8107e8a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8107e84:	bf00      	nop
 8107e86:	e000      	b.n	8107e8a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8107e88:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8107e8a:	3710      	adds	r7, #16
 8107e8c:	46bd      	mov	sp, r7
 8107e8e:	bd80      	pop	{r7, pc}
 8107e90:	58024800 	.word	0x58024800
 8107e94:	e000ed00 	.word	0xe000ed00

08107e98 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8107e98:	b580      	push	{r7, lr}
 8107e9a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107e9c:	f7fd fca2 	bl	81057e4 <HAL_GetCurrentCPUID>
 8107ea0:	4603      	mov	r3, r0
 8107ea2:	2b03      	cmp	r3, #3
 8107ea4:	d101      	bne.n	8107eaa <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8107ea6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8107ea8:	e001      	b.n	8107eae <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8107eaa:	bf40      	sev
    __WFE ();
 8107eac:	bf20      	wfe
}
 8107eae:	bf00      	nop
 8107eb0:	bd80      	pop	{r7, pc}
	...

08107eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8107eb4:	b480      	push	{r7}
 8107eb6:	b089      	sub	sp, #36	; 0x24
 8107eb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8107eba:	4bb3      	ldr	r3, [pc, #716]	; (8108188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107ebc:	691b      	ldr	r3, [r3, #16]
 8107ebe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107ec2:	2b18      	cmp	r3, #24
 8107ec4:	f200 8155 	bhi.w	8108172 <HAL_RCC_GetSysClockFreq+0x2be>
 8107ec8:	a201      	add	r2, pc, #4	; (adr r2, 8107ed0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8107eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107ece:	bf00      	nop
 8107ed0:	08107f35 	.word	0x08107f35
 8107ed4:	08108173 	.word	0x08108173
 8107ed8:	08108173 	.word	0x08108173
 8107edc:	08108173 	.word	0x08108173
 8107ee0:	08108173 	.word	0x08108173
 8107ee4:	08108173 	.word	0x08108173
 8107ee8:	08108173 	.word	0x08108173
 8107eec:	08108173 	.word	0x08108173
 8107ef0:	08107f5b 	.word	0x08107f5b
 8107ef4:	08108173 	.word	0x08108173
 8107ef8:	08108173 	.word	0x08108173
 8107efc:	08108173 	.word	0x08108173
 8107f00:	08108173 	.word	0x08108173
 8107f04:	08108173 	.word	0x08108173
 8107f08:	08108173 	.word	0x08108173
 8107f0c:	08108173 	.word	0x08108173
 8107f10:	08107f61 	.word	0x08107f61
 8107f14:	08108173 	.word	0x08108173
 8107f18:	08108173 	.word	0x08108173
 8107f1c:	08108173 	.word	0x08108173
 8107f20:	08108173 	.word	0x08108173
 8107f24:	08108173 	.word	0x08108173
 8107f28:	08108173 	.word	0x08108173
 8107f2c:	08108173 	.word	0x08108173
 8107f30:	08107f67 	.word	0x08107f67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107f34:	4b94      	ldr	r3, [pc, #592]	; (8108188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107f36:	681b      	ldr	r3, [r3, #0]
 8107f38:	f003 0320 	and.w	r3, r3, #32
 8107f3c:	2b00      	cmp	r3, #0
 8107f3e:	d009      	beq.n	8107f54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107f40:	4b91      	ldr	r3, [pc, #580]	; (8108188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107f42:	681b      	ldr	r3, [r3, #0]
 8107f44:	08db      	lsrs	r3, r3, #3
 8107f46:	f003 0303 	and.w	r3, r3, #3
 8107f4a:	4a90      	ldr	r2, [pc, #576]	; (810818c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8107f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8107f50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8107f52:	e111      	b.n	8108178 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8107f54:	4b8d      	ldr	r3, [pc, #564]	; (810818c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8107f56:	61bb      	str	r3, [r7, #24]
    break;
 8107f58:	e10e      	b.n	8108178 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8107f5a:	4b8d      	ldr	r3, [pc, #564]	; (8108190 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8107f5c:	61bb      	str	r3, [r7, #24]
    break;
 8107f5e:	e10b      	b.n	8108178 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8107f60:	4b8c      	ldr	r3, [pc, #560]	; (8108194 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8107f62:	61bb      	str	r3, [r7, #24]
    break;
 8107f64:	e108      	b.n	8108178 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107f66:	4b88      	ldr	r3, [pc, #544]	; (8108188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f6a:	f003 0303 	and.w	r3, r3, #3
 8107f6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8107f70:	4b85      	ldr	r3, [pc, #532]	; (8108188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f74:	091b      	lsrs	r3, r3, #4
 8107f76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107f7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8107f7c:	4b82      	ldr	r3, [pc, #520]	; (8108188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107f80:	f003 0301 	and.w	r3, r3, #1
 8107f84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8107f86:	4b80      	ldr	r3, [pc, #512]	; (8108188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107f8a:	08db      	lsrs	r3, r3, #3
 8107f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107f90:	68fa      	ldr	r2, [r7, #12]
 8107f92:	fb02 f303 	mul.w	r3, r2, r3
 8107f96:	ee07 3a90 	vmov	s15, r3
 8107f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107f9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8107fa2:	693b      	ldr	r3, [r7, #16]
 8107fa4:	2b00      	cmp	r3, #0
 8107fa6:	f000 80e1 	beq.w	810816c <HAL_RCC_GetSysClockFreq+0x2b8>
 8107faa:	697b      	ldr	r3, [r7, #20]
 8107fac:	2b02      	cmp	r3, #2
 8107fae:	f000 8083 	beq.w	81080b8 <HAL_RCC_GetSysClockFreq+0x204>
 8107fb2:	697b      	ldr	r3, [r7, #20]
 8107fb4:	2b02      	cmp	r3, #2
 8107fb6:	f200 80a1 	bhi.w	81080fc <HAL_RCC_GetSysClockFreq+0x248>
 8107fba:	697b      	ldr	r3, [r7, #20]
 8107fbc:	2b00      	cmp	r3, #0
 8107fbe:	d003      	beq.n	8107fc8 <HAL_RCC_GetSysClockFreq+0x114>
 8107fc0:	697b      	ldr	r3, [r7, #20]
 8107fc2:	2b01      	cmp	r3, #1
 8107fc4:	d056      	beq.n	8108074 <HAL_RCC_GetSysClockFreq+0x1c0>
 8107fc6:	e099      	b.n	81080fc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107fc8:	4b6f      	ldr	r3, [pc, #444]	; (8108188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107fca:	681b      	ldr	r3, [r3, #0]
 8107fcc:	f003 0320 	and.w	r3, r3, #32
 8107fd0:	2b00      	cmp	r3, #0
 8107fd2:	d02d      	beq.n	8108030 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107fd4:	4b6c      	ldr	r3, [pc, #432]	; (8108188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107fd6:	681b      	ldr	r3, [r3, #0]
 8107fd8:	08db      	lsrs	r3, r3, #3
 8107fda:	f003 0303 	and.w	r3, r3, #3
 8107fde:	4a6b      	ldr	r2, [pc, #428]	; (810818c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8107fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8107fe4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107fe6:	687b      	ldr	r3, [r7, #4]
 8107fe8:	ee07 3a90 	vmov	s15, r3
 8107fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107ff0:	693b      	ldr	r3, [r7, #16]
 8107ff2:	ee07 3a90 	vmov	s15, r3
 8107ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107ffe:	4b62      	ldr	r3, [pc, #392]	; (8108188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108006:	ee07 3a90 	vmov	s15, r3
 810800a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810800e:	ed97 6a02 	vldr	s12, [r7, #8]
 8108012:	eddf 5a61 	vldr	s11, [pc, #388]	; 8108198 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810801a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810801e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108026:	ee67 7a27 	vmul.f32	s15, s14, s15
 810802a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810802e:	e087      	b.n	8108140 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108030:	693b      	ldr	r3, [r7, #16]
 8108032:	ee07 3a90 	vmov	s15, r3
 8108036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810803a:	eddf 6a58 	vldr	s13, [pc, #352]	; 810819c <HAL_RCC_GetSysClockFreq+0x2e8>
 810803e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108042:	4b51      	ldr	r3, [pc, #324]	; (8108188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810804a:	ee07 3a90 	vmov	s15, r3
 810804e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108052:	ed97 6a02 	vldr	s12, [r7, #8]
 8108056:	eddf 5a50 	vldr	s11, [pc, #320]	; 8108198 <HAL_RCC_GetSysClockFreq+0x2e4>
 810805a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810805e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810806a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810806e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108072:	e065      	b.n	8108140 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108074:	693b      	ldr	r3, [r7, #16]
 8108076:	ee07 3a90 	vmov	s15, r3
 810807a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810807e:	eddf 6a48 	vldr	s13, [pc, #288]	; 81081a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8108082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108086:	4b40      	ldr	r3, [pc, #256]	; (8108188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810808a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810808e:	ee07 3a90 	vmov	s15, r3
 8108092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108096:	ed97 6a02 	vldr	s12, [r7, #8]
 810809a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8108198 <HAL_RCC_GetSysClockFreq+0x2e4>
 810809e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81080a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81080a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81080aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81080ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81080b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81080b6:	e043      	b.n	8108140 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81080b8:	693b      	ldr	r3, [r7, #16]
 81080ba:	ee07 3a90 	vmov	s15, r3
 81080be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 81081a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 81080c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81080ca:	4b2f      	ldr	r3, [pc, #188]	; (8108188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81080cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81080ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81080d2:	ee07 3a90 	vmov	s15, r3
 81080d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81080da:	ed97 6a02 	vldr	s12, [r7, #8]
 81080de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8108198 <HAL_RCC_GetSysClockFreq+0x2e4>
 81080e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81080e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81080ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81080ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81080f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81080f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81080fa:	e021      	b.n	8108140 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81080fc:	693b      	ldr	r3, [r7, #16]
 81080fe:	ee07 3a90 	vmov	s15, r3
 8108102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108106:	eddf 6a26 	vldr	s13, [pc, #152]	; 81081a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 810810a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810810e:	4b1e      	ldr	r3, [pc, #120]	; (8108188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108116:	ee07 3a90 	vmov	s15, r3
 810811a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810811e:	ed97 6a02 	vldr	s12, [r7, #8]
 8108122:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8108198 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810812a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810812e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108136:	ee67 7a27 	vmul.f32	s15, s14, s15
 810813a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810813e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8108140:	4b11      	ldr	r3, [pc, #68]	; (8108188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108144:	0a5b      	lsrs	r3, r3, #9
 8108146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810814a:	3301      	adds	r3, #1
 810814c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810814e:	683b      	ldr	r3, [r7, #0]
 8108150:	ee07 3a90 	vmov	s15, r3
 8108154:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8108158:	edd7 6a07 	vldr	s13, [r7, #28]
 810815c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108164:	ee17 3a90 	vmov	r3, s15
 8108168:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810816a:	e005      	b.n	8108178 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 810816c:	2300      	movs	r3, #0
 810816e:	61bb      	str	r3, [r7, #24]
    break;
 8108170:	e002      	b.n	8108178 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8108172:	4b07      	ldr	r3, [pc, #28]	; (8108190 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8108174:	61bb      	str	r3, [r7, #24]
    break;
 8108176:	bf00      	nop
  }

  return sysclockfreq;
 8108178:	69bb      	ldr	r3, [r7, #24]
}
 810817a:	4618      	mov	r0, r3
 810817c:	3724      	adds	r7, #36	; 0x24
 810817e:	46bd      	mov	sp, r7
 8108180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108184:	4770      	bx	lr
 8108186:	bf00      	nop
 8108188:	58024400 	.word	0x58024400
 810818c:	03d09000 	.word	0x03d09000
 8108190:	003d0900 	.word	0x003d0900
 8108194:	007a1200 	.word	0x007a1200
 8108198:	46000000 	.word	0x46000000
 810819c:	4c742400 	.word	0x4c742400
 81081a0:	4a742400 	.word	0x4a742400
 81081a4:	4af42400 	.word	0x4af42400

081081a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81081a8:	b580      	push	{r7, lr}
 81081aa:	b082      	sub	sp, #8
 81081ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81081ae:	f7ff fe81 	bl	8107eb4 <HAL_RCC_GetSysClockFreq>
 81081b2:	4602      	mov	r2, r0
 81081b4:	4b11      	ldr	r3, [pc, #68]	; (81081fc <HAL_RCC_GetHCLKFreq+0x54>)
 81081b6:	699b      	ldr	r3, [r3, #24]
 81081b8:	0a1b      	lsrs	r3, r3, #8
 81081ba:	f003 030f 	and.w	r3, r3, #15
 81081be:	4910      	ldr	r1, [pc, #64]	; (8108200 <HAL_RCC_GetHCLKFreq+0x58>)
 81081c0:	5ccb      	ldrb	r3, [r1, r3]
 81081c2:	f003 031f 	and.w	r3, r3, #31
 81081c6:	fa22 f303 	lsr.w	r3, r2, r3
 81081ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81081cc:	4b0b      	ldr	r3, [pc, #44]	; (81081fc <HAL_RCC_GetHCLKFreq+0x54>)
 81081ce:	699b      	ldr	r3, [r3, #24]
 81081d0:	f003 030f 	and.w	r3, r3, #15
 81081d4:	4a0a      	ldr	r2, [pc, #40]	; (8108200 <HAL_RCC_GetHCLKFreq+0x58>)
 81081d6:	5cd3      	ldrb	r3, [r2, r3]
 81081d8:	f003 031f 	and.w	r3, r3, #31
 81081dc:	687a      	ldr	r2, [r7, #4]
 81081de:	fa22 f303 	lsr.w	r3, r2, r3
 81081e2:	4a08      	ldr	r2, [pc, #32]	; (8108204 <HAL_RCC_GetHCLKFreq+0x5c>)
 81081e4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81081e6:	4b07      	ldr	r3, [pc, #28]	; (8108204 <HAL_RCC_GetHCLKFreq+0x5c>)
 81081e8:	681b      	ldr	r3, [r3, #0]
 81081ea:	4a07      	ldr	r2, [pc, #28]	; (8108208 <HAL_RCC_GetHCLKFreq+0x60>)
 81081ec:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81081ee:	4b05      	ldr	r3, [pc, #20]	; (8108204 <HAL_RCC_GetHCLKFreq+0x5c>)
 81081f0:	681b      	ldr	r3, [r3, #0]
}
 81081f2:	4618      	mov	r0, r3
 81081f4:	3708      	adds	r7, #8
 81081f6:	46bd      	mov	sp, r7
 81081f8:	bd80      	pop	{r7, pc}
 81081fa:	bf00      	nop
 81081fc:	58024400 	.word	0x58024400
 8108200:	0810bb88 	.word	0x0810bb88
 8108204:	10000004 	.word	0x10000004
 8108208:	10000000 	.word	0x10000000

0810820c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810820c:	b580      	push	{r7, lr}
 810820e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8108210:	f7ff ffca 	bl	81081a8 <HAL_RCC_GetHCLKFreq>
 8108214:	4602      	mov	r2, r0
 8108216:	4b06      	ldr	r3, [pc, #24]	; (8108230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8108218:	69db      	ldr	r3, [r3, #28]
 810821a:	091b      	lsrs	r3, r3, #4
 810821c:	f003 0307 	and.w	r3, r3, #7
 8108220:	4904      	ldr	r1, [pc, #16]	; (8108234 <HAL_RCC_GetPCLK1Freq+0x28>)
 8108222:	5ccb      	ldrb	r3, [r1, r3]
 8108224:	f003 031f 	and.w	r3, r3, #31
 8108228:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810822c:	4618      	mov	r0, r3
 810822e:	bd80      	pop	{r7, pc}
 8108230:	58024400 	.word	0x58024400
 8108234:	0810bb88 	.word	0x0810bb88

08108238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8108238:	b580      	push	{r7, lr}
 810823a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810823c:	f7ff ffb4 	bl	81081a8 <HAL_RCC_GetHCLKFreq>
 8108240:	4602      	mov	r2, r0
 8108242:	4b06      	ldr	r3, [pc, #24]	; (810825c <HAL_RCC_GetPCLK2Freq+0x24>)
 8108244:	69db      	ldr	r3, [r3, #28]
 8108246:	0a1b      	lsrs	r3, r3, #8
 8108248:	f003 0307 	and.w	r3, r3, #7
 810824c:	4904      	ldr	r1, [pc, #16]	; (8108260 <HAL_RCC_GetPCLK2Freq+0x28>)
 810824e:	5ccb      	ldrb	r3, [r1, r3]
 8108250:	f003 031f 	and.w	r3, r3, #31
 8108254:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8108258:	4618      	mov	r0, r3
 810825a:	bd80      	pop	{r7, pc}
 810825c:	58024400 	.word	0x58024400
 8108260:	0810bb88 	.word	0x0810bb88

08108264 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8108264:	b580      	push	{r7, lr}
 8108266:	b086      	sub	sp, #24
 8108268:	af00      	add	r7, sp, #0
 810826a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810826c:	2300      	movs	r3, #0
 810826e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8108270:	2300      	movs	r3, #0
 8108272:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8108274:	687b      	ldr	r3, [r7, #4]
 8108276:	681b      	ldr	r3, [r3, #0]
 8108278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810827c:	2b00      	cmp	r3, #0
 810827e:	d03f      	beq.n	8108300 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8108280:	687b      	ldr	r3, [r7, #4]
 8108282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108284:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8108288:	d02a      	beq.n	81082e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 810828a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810828e:	d824      	bhi.n	81082da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8108290:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108294:	d018      	beq.n	81082c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8108296:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810829a:	d81e      	bhi.n	81082da <HAL_RCCEx_PeriphCLKConfig+0x76>
 810829c:	2b00      	cmp	r3, #0
 810829e:	d003      	beq.n	81082a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 81082a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81082a4:	d007      	beq.n	81082b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 81082a6:	e018      	b.n	81082da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81082a8:	4ba3      	ldr	r3, [pc, #652]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81082aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81082ac:	4aa2      	ldr	r2, [pc, #648]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81082ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81082b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81082b4:	e015      	b.n	81082e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81082b6:	687b      	ldr	r3, [r7, #4]
 81082b8:	3304      	adds	r3, #4
 81082ba:	2102      	movs	r1, #2
 81082bc:	4618      	mov	r0, r3
 81082be:	f001 f9d5 	bl	810966c <RCCEx_PLL2_Config>
 81082c2:	4603      	mov	r3, r0
 81082c4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81082c6:	e00c      	b.n	81082e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81082c8:	687b      	ldr	r3, [r7, #4]
 81082ca:	3324      	adds	r3, #36	; 0x24
 81082cc:	2102      	movs	r1, #2
 81082ce:	4618      	mov	r0, r3
 81082d0:	f001 fa7e 	bl	81097d0 <RCCEx_PLL3_Config>
 81082d4:	4603      	mov	r3, r0
 81082d6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81082d8:	e003      	b.n	81082e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81082da:	2301      	movs	r3, #1
 81082dc:	75fb      	strb	r3, [r7, #23]
      break;
 81082de:	e000      	b.n	81082e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81082e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81082e2:	7dfb      	ldrb	r3, [r7, #23]
 81082e4:	2b00      	cmp	r3, #0
 81082e6:	d109      	bne.n	81082fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81082e8:	4b93      	ldr	r3, [pc, #588]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81082ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81082ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81082f0:	687b      	ldr	r3, [r7, #4]
 81082f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81082f4:	4990      	ldr	r1, [pc, #576]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81082f6:	4313      	orrs	r3, r2
 81082f8:	650b      	str	r3, [r1, #80]	; 0x50
 81082fa:	e001      	b.n	8108300 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81082fc:	7dfb      	ldrb	r3, [r7, #23]
 81082fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8108300:	687b      	ldr	r3, [r7, #4]
 8108302:	681b      	ldr	r3, [r3, #0]
 8108304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108308:	2b00      	cmp	r3, #0
 810830a:	d03d      	beq.n	8108388 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 810830c:	687b      	ldr	r3, [r7, #4]
 810830e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108310:	2b04      	cmp	r3, #4
 8108312:	d826      	bhi.n	8108362 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8108314:	a201      	add	r2, pc, #4	; (adr r2, 810831c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8108316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810831a:	bf00      	nop
 810831c:	08108331 	.word	0x08108331
 8108320:	0810833f 	.word	0x0810833f
 8108324:	08108351 	.word	0x08108351
 8108328:	08108369 	.word	0x08108369
 810832c:	08108369 	.word	0x08108369
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108330:	4b81      	ldr	r3, [pc, #516]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8108332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108334:	4a80      	ldr	r2, [pc, #512]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8108336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810833a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810833c:	e015      	b.n	810836a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810833e:	687b      	ldr	r3, [r7, #4]
 8108340:	3304      	adds	r3, #4
 8108342:	2100      	movs	r1, #0
 8108344:	4618      	mov	r0, r3
 8108346:	f001 f991 	bl	810966c <RCCEx_PLL2_Config>
 810834a:	4603      	mov	r3, r0
 810834c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810834e:	e00c      	b.n	810836a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108350:	687b      	ldr	r3, [r7, #4]
 8108352:	3324      	adds	r3, #36	; 0x24
 8108354:	2100      	movs	r1, #0
 8108356:	4618      	mov	r0, r3
 8108358:	f001 fa3a 	bl	81097d0 <RCCEx_PLL3_Config>
 810835c:	4603      	mov	r3, r0
 810835e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108360:	e003      	b.n	810836a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108362:	2301      	movs	r3, #1
 8108364:	75fb      	strb	r3, [r7, #23]
      break;
 8108366:	e000      	b.n	810836a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8108368:	bf00      	nop
    }

    if(ret == HAL_OK)
 810836a:	7dfb      	ldrb	r3, [r7, #23]
 810836c:	2b00      	cmp	r3, #0
 810836e:	d109      	bne.n	8108384 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8108370:	4b71      	ldr	r3, [pc, #452]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8108372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108374:	f023 0207 	bic.w	r2, r3, #7
 8108378:	687b      	ldr	r3, [r7, #4]
 810837a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810837c:	496e      	ldr	r1, [pc, #440]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810837e:	4313      	orrs	r3, r2
 8108380:	650b      	str	r3, [r1, #80]	; 0x50
 8108382:	e001      	b.n	8108388 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108384:	7dfb      	ldrb	r3, [r7, #23]
 8108386:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8108388:	687b      	ldr	r3, [r7, #4]
 810838a:	681b      	ldr	r3, [r3, #0]
 810838c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8108390:	2b00      	cmp	r3, #0
 8108392:	d042      	beq.n	810841a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8108394:	687b      	ldr	r3, [r7, #4]
 8108396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810839c:	d02b      	beq.n	81083f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810839e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81083a2:	d825      	bhi.n	81083f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81083a4:	2bc0      	cmp	r3, #192	; 0xc0
 81083a6:	d028      	beq.n	81083fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 81083a8:	2bc0      	cmp	r3, #192	; 0xc0
 81083aa:	d821      	bhi.n	81083f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81083ac:	2b80      	cmp	r3, #128	; 0x80
 81083ae:	d016      	beq.n	81083de <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81083b0:	2b80      	cmp	r3, #128	; 0x80
 81083b2:	d81d      	bhi.n	81083f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81083b4:	2b00      	cmp	r3, #0
 81083b6:	d002      	beq.n	81083be <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81083b8:	2b40      	cmp	r3, #64	; 0x40
 81083ba:	d007      	beq.n	81083cc <HAL_RCCEx_PeriphCLKConfig+0x168>
 81083bc:	e018      	b.n	81083f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81083be:	4b5e      	ldr	r3, [pc, #376]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81083c2:	4a5d      	ldr	r2, [pc, #372]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81083c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81083c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81083ca:	e017      	b.n	81083fc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81083cc:	687b      	ldr	r3, [r7, #4]
 81083ce:	3304      	adds	r3, #4
 81083d0:	2100      	movs	r1, #0
 81083d2:	4618      	mov	r0, r3
 81083d4:	f001 f94a 	bl	810966c <RCCEx_PLL2_Config>
 81083d8:	4603      	mov	r3, r0
 81083da:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81083dc:	e00e      	b.n	81083fc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81083de:	687b      	ldr	r3, [r7, #4]
 81083e0:	3324      	adds	r3, #36	; 0x24
 81083e2:	2100      	movs	r1, #0
 81083e4:	4618      	mov	r0, r3
 81083e6:	f001 f9f3 	bl	81097d0 <RCCEx_PLL3_Config>
 81083ea:	4603      	mov	r3, r0
 81083ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81083ee:	e005      	b.n	81083fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81083f0:	2301      	movs	r3, #1
 81083f2:	75fb      	strb	r3, [r7, #23]
      break;
 81083f4:	e002      	b.n	81083fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81083f6:	bf00      	nop
 81083f8:	e000      	b.n	81083fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81083fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81083fc:	7dfb      	ldrb	r3, [r7, #23]
 81083fe:	2b00      	cmp	r3, #0
 8108400:	d109      	bne.n	8108416 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8108402:	4b4d      	ldr	r3, [pc, #308]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8108404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108406:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 810840a:	687b      	ldr	r3, [r7, #4]
 810840c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810840e:	494a      	ldr	r1, [pc, #296]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8108410:	4313      	orrs	r3, r2
 8108412:	650b      	str	r3, [r1, #80]	; 0x50
 8108414:	e001      	b.n	810841a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108416:	7dfb      	ldrb	r3, [r7, #23]
 8108418:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810841a:	687b      	ldr	r3, [r7, #4]
 810841c:	681b      	ldr	r3, [r3, #0]
 810841e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8108422:	2b00      	cmp	r3, #0
 8108424:	d049      	beq.n	81084ba <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8108426:	687b      	ldr	r3, [r7, #4]
 8108428:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810842c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8108430:	d030      	beq.n	8108494 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8108432:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8108436:	d82a      	bhi.n	810848e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108438:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810843c:	d02c      	beq.n	8108498 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810843e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8108442:	d824      	bhi.n	810848e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108444:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8108448:	d018      	beq.n	810847c <HAL_RCCEx_PeriphCLKConfig+0x218>
 810844a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810844e:	d81e      	bhi.n	810848e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108450:	2b00      	cmp	r3, #0
 8108452:	d003      	beq.n	810845c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8108454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108458:	d007      	beq.n	810846a <HAL_RCCEx_PeriphCLKConfig+0x206>
 810845a:	e018      	b.n	810848e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810845c:	4b36      	ldr	r3, [pc, #216]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810845e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108460:	4a35      	ldr	r2, [pc, #212]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8108462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108466:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108468:	e017      	b.n	810849a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810846a:	687b      	ldr	r3, [r7, #4]
 810846c:	3304      	adds	r3, #4
 810846e:	2100      	movs	r1, #0
 8108470:	4618      	mov	r0, r3
 8108472:	f001 f8fb 	bl	810966c <RCCEx_PLL2_Config>
 8108476:	4603      	mov	r3, r0
 8108478:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810847a:	e00e      	b.n	810849a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810847c:	687b      	ldr	r3, [r7, #4]
 810847e:	3324      	adds	r3, #36	; 0x24
 8108480:	2100      	movs	r1, #0
 8108482:	4618      	mov	r0, r3
 8108484:	f001 f9a4 	bl	81097d0 <RCCEx_PLL3_Config>
 8108488:	4603      	mov	r3, r0
 810848a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810848c:	e005      	b.n	810849a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810848e:	2301      	movs	r3, #1
 8108490:	75fb      	strb	r3, [r7, #23]
      break;
 8108492:	e002      	b.n	810849a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8108494:	bf00      	nop
 8108496:	e000      	b.n	810849a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8108498:	bf00      	nop
    }

    if(ret == HAL_OK)
 810849a:	7dfb      	ldrb	r3, [r7, #23]
 810849c:	2b00      	cmp	r3, #0
 810849e:	d10a      	bne.n	81084b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81084a0:	4b25      	ldr	r3, [pc, #148]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81084a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81084a4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81084a8:	687b      	ldr	r3, [r7, #4]
 81084aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81084ae:	4922      	ldr	r1, [pc, #136]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81084b0:	4313      	orrs	r3, r2
 81084b2:	658b      	str	r3, [r1, #88]	; 0x58
 81084b4:	e001      	b.n	81084ba <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81084b6:	7dfb      	ldrb	r3, [r7, #23]
 81084b8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81084ba:	687b      	ldr	r3, [r7, #4]
 81084bc:	681b      	ldr	r3, [r3, #0]
 81084be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81084c2:	2b00      	cmp	r3, #0
 81084c4:	d04b      	beq.n	810855e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81084c6:	687b      	ldr	r3, [r7, #4]
 81084c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81084cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81084d0:	d030      	beq.n	8108534 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81084d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81084d6:	d82a      	bhi.n	810852e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81084d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81084dc:	d02e      	beq.n	810853c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 81084de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81084e2:	d824      	bhi.n	810852e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81084e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81084e8:	d018      	beq.n	810851c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81084ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81084ee:	d81e      	bhi.n	810852e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81084f0:	2b00      	cmp	r3, #0
 81084f2:	d003      	beq.n	81084fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 81084f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81084f8:	d007      	beq.n	810850a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81084fa:	e018      	b.n	810852e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81084fc:	4b0e      	ldr	r3, [pc, #56]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81084fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108500:	4a0d      	ldr	r2, [pc, #52]	; (8108538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8108502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108506:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108508:	e019      	b.n	810853e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810850a:	687b      	ldr	r3, [r7, #4]
 810850c:	3304      	adds	r3, #4
 810850e:	2100      	movs	r1, #0
 8108510:	4618      	mov	r0, r3
 8108512:	f001 f8ab 	bl	810966c <RCCEx_PLL2_Config>
 8108516:	4603      	mov	r3, r0
 8108518:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810851a:	e010      	b.n	810853e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810851c:	687b      	ldr	r3, [r7, #4]
 810851e:	3324      	adds	r3, #36	; 0x24
 8108520:	2100      	movs	r1, #0
 8108522:	4618      	mov	r0, r3
 8108524:	f001 f954 	bl	81097d0 <RCCEx_PLL3_Config>
 8108528:	4603      	mov	r3, r0
 810852a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810852c:	e007      	b.n	810853e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810852e:	2301      	movs	r3, #1
 8108530:	75fb      	strb	r3, [r7, #23]
      break;
 8108532:	e004      	b.n	810853e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8108534:	bf00      	nop
 8108536:	e002      	b.n	810853e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8108538:	58024400 	.word	0x58024400
      break;
 810853c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810853e:	7dfb      	ldrb	r3, [r7, #23]
 8108540:	2b00      	cmp	r3, #0
 8108542:	d10a      	bne.n	810855a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8108544:	4b99      	ldr	r3, [pc, #612]	; (81087ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8108546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108548:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 810854c:	687b      	ldr	r3, [r7, #4]
 810854e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8108552:	4996      	ldr	r1, [pc, #600]	; (81087ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8108554:	4313      	orrs	r3, r2
 8108556:	658b      	str	r3, [r1, #88]	; 0x58
 8108558:	e001      	b.n	810855e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810855a:	7dfb      	ldrb	r3, [r7, #23]
 810855c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810855e:	687b      	ldr	r3, [r7, #4]
 8108560:	681b      	ldr	r3, [r3, #0]
 8108562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108566:	2b00      	cmp	r3, #0
 8108568:	d032      	beq.n	81085d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 810856a:	687b      	ldr	r3, [r7, #4]
 810856c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810856e:	2b30      	cmp	r3, #48	; 0x30
 8108570:	d01c      	beq.n	81085ac <HAL_RCCEx_PeriphCLKConfig+0x348>
 8108572:	2b30      	cmp	r3, #48	; 0x30
 8108574:	d817      	bhi.n	81085a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8108576:	2b20      	cmp	r3, #32
 8108578:	d00c      	beq.n	8108594 <HAL_RCCEx_PeriphCLKConfig+0x330>
 810857a:	2b20      	cmp	r3, #32
 810857c:	d813      	bhi.n	81085a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 810857e:	2b00      	cmp	r3, #0
 8108580:	d016      	beq.n	81085b0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8108582:	2b10      	cmp	r3, #16
 8108584:	d10f      	bne.n	81085a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108586:	4b89      	ldr	r3, [pc, #548]	; (81087ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8108588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810858a:	4a88      	ldr	r2, [pc, #544]	; (81087ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810858c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108590:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8108592:	e00e      	b.n	81085b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8108594:	687b      	ldr	r3, [r7, #4]
 8108596:	3304      	adds	r3, #4
 8108598:	2102      	movs	r1, #2
 810859a:	4618      	mov	r0, r3
 810859c:	f001 f866 	bl	810966c <RCCEx_PLL2_Config>
 81085a0:	4603      	mov	r3, r0
 81085a2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81085a4:	e005      	b.n	81085b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81085a6:	2301      	movs	r3, #1
 81085a8:	75fb      	strb	r3, [r7, #23]
      break;
 81085aa:	e002      	b.n	81085b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 81085ac:	bf00      	nop
 81085ae:	e000      	b.n	81085b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 81085b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81085b2:	7dfb      	ldrb	r3, [r7, #23]
 81085b4:	2b00      	cmp	r3, #0
 81085b6:	d109      	bne.n	81085cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81085b8:	4b7c      	ldr	r3, [pc, #496]	; (81087ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81085ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81085bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81085c0:	687b      	ldr	r3, [r7, #4]
 81085c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81085c4:	4979      	ldr	r1, [pc, #484]	; (81087ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81085c6:	4313      	orrs	r3, r2
 81085c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 81085ca:	e001      	b.n	81085d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81085cc:	7dfb      	ldrb	r3, [r7, #23]
 81085ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81085d0:	687b      	ldr	r3, [r7, #4]
 81085d2:	681b      	ldr	r3, [r3, #0]
 81085d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81085d8:	2b00      	cmp	r3, #0
 81085da:	d047      	beq.n	810866c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81085dc:	687b      	ldr	r3, [r7, #4]
 81085de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81085e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81085e4:	d030      	beq.n	8108648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 81085e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81085ea:	d82a      	bhi.n	8108642 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81085ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81085f0:	d02c      	beq.n	810864c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 81085f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81085f6:	d824      	bhi.n	8108642 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81085f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81085fc:	d018      	beq.n	8108630 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 81085fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108602:	d81e      	bhi.n	8108642 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8108604:	2b00      	cmp	r3, #0
 8108606:	d003      	beq.n	8108610 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8108608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810860c:	d007      	beq.n	810861e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 810860e:	e018      	b.n	8108642 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108610:	4b66      	ldr	r3, [pc, #408]	; (81087ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8108612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108614:	4a65      	ldr	r2, [pc, #404]	; (81087ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8108616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810861a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810861c:	e017      	b.n	810864e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810861e:	687b      	ldr	r3, [r7, #4]
 8108620:	3304      	adds	r3, #4
 8108622:	2100      	movs	r1, #0
 8108624:	4618      	mov	r0, r3
 8108626:	f001 f821 	bl	810966c <RCCEx_PLL2_Config>
 810862a:	4603      	mov	r3, r0
 810862c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810862e:	e00e      	b.n	810864e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108630:	687b      	ldr	r3, [r7, #4]
 8108632:	3324      	adds	r3, #36	; 0x24
 8108634:	2100      	movs	r1, #0
 8108636:	4618      	mov	r0, r3
 8108638:	f001 f8ca 	bl	81097d0 <RCCEx_PLL3_Config>
 810863c:	4603      	mov	r3, r0
 810863e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8108640:	e005      	b.n	810864e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108642:	2301      	movs	r3, #1
 8108644:	75fb      	strb	r3, [r7, #23]
      break;
 8108646:	e002      	b.n	810864e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8108648:	bf00      	nop
 810864a:	e000      	b.n	810864e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 810864c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810864e:	7dfb      	ldrb	r3, [r7, #23]
 8108650:	2b00      	cmp	r3, #0
 8108652:	d109      	bne.n	8108668 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8108654:	4b55      	ldr	r3, [pc, #340]	; (81087ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8108656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108658:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 810865c:	687b      	ldr	r3, [r7, #4]
 810865e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8108660:	4952      	ldr	r1, [pc, #328]	; (81087ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8108662:	4313      	orrs	r3, r2
 8108664:	650b      	str	r3, [r1, #80]	; 0x50
 8108666:	e001      	b.n	810866c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108668:	7dfb      	ldrb	r3, [r7, #23]
 810866a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810866c:	687b      	ldr	r3, [r7, #4]
 810866e:	681b      	ldr	r3, [r3, #0]
 8108670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8108674:	2b00      	cmp	r3, #0
 8108676:	d049      	beq.n	810870c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8108678:	687b      	ldr	r3, [r7, #4]
 810867a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810867c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8108680:	d02e      	beq.n	81086e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8108682:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8108686:	d828      	bhi.n	81086da <HAL_RCCEx_PeriphCLKConfig+0x476>
 8108688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810868c:	d02a      	beq.n	81086e4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 810868e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8108692:	d822      	bhi.n	81086da <HAL_RCCEx_PeriphCLKConfig+0x476>
 8108694:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8108698:	d026      	beq.n	81086e8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 810869a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810869e:	d81c      	bhi.n	81086da <HAL_RCCEx_PeriphCLKConfig+0x476>
 81086a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81086a4:	d010      	beq.n	81086c8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 81086a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81086aa:	d816      	bhi.n	81086da <HAL_RCCEx_PeriphCLKConfig+0x476>
 81086ac:	2b00      	cmp	r3, #0
 81086ae:	d01d      	beq.n	81086ec <HAL_RCCEx_PeriphCLKConfig+0x488>
 81086b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81086b4:	d111      	bne.n	81086da <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81086b6:	687b      	ldr	r3, [r7, #4]
 81086b8:	3304      	adds	r3, #4
 81086ba:	2101      	movs	r1, #1
 81086bc:	4618      	mov	r0, r3
 81086be:	f000 ffd5 	bl	810966c <RCCEx_PLL2_Config>
 81086c2:	4603      	mov	r3, r0
 81086c4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81086c6:	e012      	b.n	81086ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81086c8:	687b      	ldr	r3, [r7, #4]
 81086ca:	3324      	adds	r3, #36	; 0x24
 81086cc:	2101      	movs	r1, #1
 81086ce:	4618      	mov	r0, r3
 81086d0:	f001 f87e 	bl	81097d0 <RCCEx_PLL3_Config>
 81086d4:	4603      	mov	r3, r0
 81086d6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81086d8:	e009      	b.n	81086ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81086da:	2301      	movs	r3, #1
 81086dc:	75fb      	strb	r3, [r7, #23]
      break;
 81086de:	e006      	b.n	81086ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81086e0:	bf00      	nop
 81086e2:	e004      	b.n	81086ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81086e4:	bf00      	nop
 81086e6:	e002      	b.n	81086ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81086e8:	bf00      	nop
 81086ea:	e000      	b.n	81086ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81086ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 81086ee:	7dfb      	ldrb	r3, [r7, #23]
 81086f0:	2b00      	cmp	r3, #0
 81086f2:	d109      	bne.n	8108708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81086f4:	4b2d      	ldr	r3, [pc, #180]	; (81087ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81086f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81086f8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81086fc:	687b      	ldr	r3, [r7, #4]
 81086fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108700:	492a      	ldr	r1, [pc, #168]	; (81087ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8108702:	4313      	orrs	r3, r2
 8108704:	650b      	str	r3, [r1, #80]	; 0x50
 8108706:	e001      	b.n	810870c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108708:	7dfb      	ldrb	r3, [r7, #23]
 810870a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810870c:	687b      	ldr	r3, [r7, #4]
 810870e:	681b      	ldr	r3, [r3, #0]
 8108710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8108714:	2b00      	cmp	r3, #0
 8108716:	d04d      	beq.n	81087b4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8108718:	687b      	ldr	r3, [r7, #4]
 810871a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810871e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108722:	d02e      	beq.n	8108782 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8108724:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108728:	d828      	bhi.n	810877c <HAL_RCCEx_PeriphCLKConfig+0x518>
 810872a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810872e:	d02a      	beq.n	8108786 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8108730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108734:	d822      	bhi.n	810877c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8108736:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810873a:	d026      	beq.n	810878a <HAL_RCCEx_PeriphCLKConfig+0x526>
 810873c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108740:	d81c      	bhi.n	810877c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8108742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108746:	d010      	beq.n	810876a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8108748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810874c:	d816      	bhi.n	810877c <HAL_RCCEx_PeriphCLKConfig+0x518>
 810874e:	2b00      	cmp	r3, #0
 8108750:	d01d      	beq.n	810878e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8108752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108756:	d111      	bne.n	810877c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108758:	687b      	ldr	r3, [r7, #4]
 810875a:	3304      	adds	r3, #4
 810875c:	2101      	movs	r1, #1
 810875e:	4618      	mov	r0, r3
 8108760:	f000 ff84 	bl	810966c <RCCEx_PLL2_Config>
 8108764:	4603      	mov	r3, r0
 8108766:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8108768:	e012      	b.n	8108790 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810876a:	687b      	ldr	r3, [r7, #4]
 810876c:	3324      	adds	r3, #36	; 0x24
 810876e:	2101      	movs	r1, #1
 8108770:	4618      	mov	r0, r3
 8108772:	f001 f82d 	bl	81097d0 <RCCEx_PLL3_Config>
 8108776:	4603      	mov	r3, r0
 8108778:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810877a:	e009      	b.n	8108790 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810877c:	2301      	movs	r3, #1
 810877e:	75fb      	strb	r3, [r7, #23]
      break;
 8108780:	e006      	b.n	8108790 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8108782:	bf00      	nop
 8108784:	e004      	b.n	8108790 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8108786:	bf00      	nop
 8108788:	e002      	b.n	8108790 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810878a:	bf00      	nop
 810878c:	e000      	b.n	8108790 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810878e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108790:	7dfb      	ldrb	r3, [r7, #23]
 8108792:	2b00      	cmp	r3, #0
 8108794:	d10c      	bne.n	81087b0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8108796:	4b05      	ldr	r3, [pc, #20]	; (81087ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8108798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810879a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810879e:	687b      	ldr	r3, [r7, #4]
 81087a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81087a4:	4901      	ldr	r1, [pc, #4]	; (81087ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81087a6:	4313      	orrs	r3, r2
 81087a8:	658b      	str	r3, [r1, #88]	; 0x58
 81087aa:	e003      	b.n	81087b4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 81087ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81087b0:	7dfb      	ldrb	r3, [r7, #23]
 81087b2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81087b4:	687b      	ldr	r3, [r7, #4]
 81087b6:	681b      	ldr	r3, [r3, #0]
 81087b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81087bc:	2b00      	cmp	r3, #0
 81087be:	d02f      	beq.n	8108820 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 81087c0:	687b      	ldr	r3, [r7, #4]
 81087c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81087c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81087c8:	d00e      	beq.n	81087e8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 81087ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81087ce:	d814      	bhi.n	81087fa <HAL_RCCEx_PeriphCLKConfig+0x596>
 81087d0:	2b00      	cmp	r3, #0
 81087d2:	d015      	beq.n	8108800 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 81087d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81087d8:	d10f      	bne.n	81087fa <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81087da:	4bb0      	ldr	r3, [pc, #704]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81087dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81087de:	4aaf      	ldr	r2, [pc, #700]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81087e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81087e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81087e6:	e00c      	b.n	8108802 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81087e8:	687b      	ldr	r3, [r7, #4]
 81087ea:	3304      	adds	r3, #4
 81087ec:	2101      	movs	r1, #1
 81087ee:	4618      	mov	r0, r3
 81087f0:	f000 ff3c 	bl	810966c <RCCEx_PLL2_Config>
 81087f4:	4603      	mov	r3, r0
 81087f6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81087f8:	e003      	b.n	8108802 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81087fa:	2301      	movs	r3, #1
 81087fc:	75fb      	strb	r3, [r7, #23]
      break;
 81087fe:	e000      	b.n	8108802 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8108800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108802:	7dfb      	ldrb	r3, [r7, #23]
 8108804:	2b00      	cmp	r3, #0
 8108806:	d109      	bne.n	810881c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8108808:	4ba4      	ldr	r3, [pc, #656]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810880a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810880c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8108810:	687b      	ldr	r3, [r7, #4]
 8108812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108814:	49a1      	ldr	r1, [pc, #644]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8108816:	4313      	orrs	r3, r2
 8108818:	650b      	str	r3, [r1, #80]	; 0x50
 810881a:	e001      	b.n	8108820 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810881c:	7dfb      	ldrb	r3, [r7, #23]
 810881e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8108820:	687b      	ldr	r3, [r7, #4]
 8108822:	681b      	ldr	r3, [r3, #0]
 8108824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8108828:	2b00      	cmp	r3, #0
 810882a:	d032      	beq.n	8108892 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810882c:	687b      	ldr	r3, [r7, #4]
 810882e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108830:	2b03      	cmp	r3, #3
 8108832:	d81b      	bhi.n	810886c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8108834:	a201      	add	r2, pc, #4	; (adr r2, 810883c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8108836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810883a:	bf00      	nop
 810883c:	08108873 	.word	0x08108873
 8108840:	0810884d 	.word	0x0810884d
 8108844:	0810885b 	.word	0x0810885b
 8108848:	08108873 	.word	0x08108873
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810884c:	4b93      	ldr	r3, [pc, #588]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108850:	4a92      	ldr	r2, [pc, #584]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8108852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108856:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8108858:	e00c      	b.n	8108874 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810885a:	687b      	ldr	r3, [r7, #4]
 810885c:	3304      	adds	r3, #4
 810885e:	2102      	movs	r1, #2
 8108860:	4618      	mov	r0, r3
 8108862:	f000 ff03 	bl	810966c <RCCEx_PLL2_Config>
 8108866:	4603      	mov	r3, r0
 8108868:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810886a:	e003      	b.n	8108874 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810886c:	2301      	movs	r3, #1
 810886e:	75fb      	strb	r3, [r7, #23]
      break;
 8108870:	e000      	b.n	8108874 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8108872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108874:	7dfb      	ldrb	r3, [r7, #23]
 8108876:	2b00      	cmp	r3, #0
 8108878:	d109      	bne.n	810888e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810887a:	4b88      	ldr	r3, [pc, #544]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810887c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810887e:	f023 0203 	bic.w	r2, r3, #3
 8108882:	687b      	ldr	r3, [r7, #4]
 8108884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108886:	4985      	ldr	r1, [pc, #532]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8108888:	4313      	orrs	r3, r2
 810888a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810888c:	e001      	b.n	8108892 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810888e:	7dfb      	ldrb	r3, [r7, #23]
 8108890:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8108892:	687b      	ldr	r3, [r7, #4]
 8108894:	681b      	ldr	r3, [r3, #0]
 8108896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810889a:	2b00      	cmp	r3, #0
 810889c:	f000 8088 	beq.w	81089b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81088a0:	4b7f      	ldr	r3, [pc, #508]	; (8108aa0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81088a2:	681b      	ldr	r3, [r3, #0]
 81088a4:	4a7e      	ldr	r2, [pc, #504]	; (8108aa0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81088a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81088aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81088ac:	f7fc fe7e 	bl	81055ac <HAL_GetTick>
 81088b0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81088b2:	e009      	b.n	81088c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81088b4:	f7fc fe7a 	bl	81055ac <HAL_GetTick>
 81088b8:	4602      	mov	r2, r0
 81088ba:	693b      	ldr	r3, [r7, #16]
 81088bc:	1ad3      	subs	r3, r2, r3
 81088be:	2b64      	cmp	r3, #100	; 0x64
 81088c0:	d902      	bls.n	81088c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81088c2:	2303      	movs	r3, #3
 81088c4:	75fb      	strb	r3, [r7, #23]
        break;
 81088c6:	e005      	b.n	81088d4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81088c8:	4b75      	ldr	r3, [pc, #468]	; (8108aa0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81088ca:	681b      	ldr	r3, [r3, #0]
 81088cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81088d0:	2b00      	cmp	r3, #0
 81088d2:	d0ef      	beq.n	81088b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81088d4:	7dfb      	ldrb	r3, [r7, #23]
 81088d6:	2b00      	cmp	r3, #0
 81088d8:	d168      	bne.n	81089ac <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81088da:	4b70      	ldr	r3, [pc, #448]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81088dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81088de:	687b      	ldr	r3, [r7, #4]
 81088e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81088e4:	4053      	eors	r3, r2
 81088e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81088ea:	2b00      	cmp	r3, #0
 81088ec:	d013      	beq.n	8108916 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81088ee:	4b6b      	ldr	r3, [pc, #428]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81088f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81088f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81088f6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81088f8:	4b68      	ldr	r3, [pc, #416]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81088fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81088fc:	4a67      	ldr	r2, [pc, #412]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81088fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8108902:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8108904:	4b65      	ldr	r3, [pc, #404]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8108906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108908:	4a64      	ldr	r2, [pc, #400]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810890a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810890e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8108910:	4a62      	ldr	r2, [pc, #392]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8108912:	68fb      	ldr	r3, [r7, #12]
 8108914:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8108916:	687b      	ldr	r3, [r7, #4]
 8108918:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810891c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108920:	d115      	bne.n	810894e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8108922:	f7fc fe43 	bl	81055ac <HAL_GetTick>
 8108926:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8108928:	e00b      	b.n	8108942 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810892a:	f7fc fe3f 	bl	81055ac <HAL_GetTick>
 810892e:	4602      	mov	r2, r0
 8108930:	693b      	ldr	r3, [r7, #16]
 8108932:	1ad3      	subs	r3, r2, r3
 8108934:	f241 3288 	movw	r2, #5000	; 0x1388
 8108938:	4293      	cmp	r3, r2
 810893a:	d902      	bls.n	8108942 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 810893c:	2303      	movs	r3, #3
 810893e:	75fb      	strb	r3, [r7, #23]
            break;
 8108940:	e005      	b.n	810894e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8108942:	4b56      	ldr	r3, [pc, #344]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8108944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108946:	f003 0302 	and.w	r3, r3, #2
 810894a:	2b00      	cmp	r3, #0
 810894c:	d0ed      	beq.n	810892a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810894e:	7dfb      	ldrb	r3, [r7, #23]
 8108950:	2b00      	cmp	r3, #0
 8108952:	d128      	bne.n	81089a6 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8108954:	687b      	ldr	r3, [r7, #4]
 8108956:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810895a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810895e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108962:	d10f      	bne.n	8108984 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8108964:	4b4d      	ldr	r3, [pc, #308]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8108966:	691b      	ldr	r3, [r3, #16]
 8108968:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 810896c:	687b      	ldr	r3, [r7, #4]
 810896e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108972:	091b      	lsrs	r3, r3, #4
 8108974:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8108978:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810897c:	4947      	ldr	r1, [pc, #284]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810897e:	4313      	orrs	r3, r2
 8108980:	610b      	str	r3, [r1, #16]
 8108982:	e005      	b.n	8108990 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8108984:	4b45      	ldr	r3, [pc, #276]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8108986:	691b      	ldr	r3, [r3, #16]
 8108988:	4a44      	ldr	r2, [pc, #272]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810898a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810898e:	6113      	str	r3, [r2, #16]
 8108990:	4b42      	ldr	r3, [pc, #264]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8108992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8108994:	687b      	ldr	r3, [r7, #4]
 8108996:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810899a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810899e:	493f      	ldr	r1, [pc, #252]	; (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81089a0:	4313      	orrs	r3, r2
 81089a2:	670b      	str	r3, [r1, #112]	; 0x70
 81089a4:	e004      	b.n	81089b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81089a6:	7dfb      	ldrb	r3, [r7, #23]
 81089a8:	75bb      	strb	r3, [r7, #22]
 81089aa:	e001      	b.n	81089b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81089ac:	7dfb      	ldrb	r3, [r7, #23]
 81089ae:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81089b0:	687b      	ldr	r3, [r7, #4]
 81089b2:	681b      	ldr	r3, [r3, #0]
 81089b4:	f003 0301 	and.w	r3, r3, #1
 81089b8:	2b00      	cmp	r3, #0
 81089ba:	f000 8083 	beq.w	8108ac4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81089be:	687b      	ldr	r3, [r7, #4]
 81089c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81089c2:	2b28      	cmp	r3, #40	; 0x28
 81089c4:	d866      	bhi.n	8108a94 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81089c6:	a201      	add	r2, pc, #4	; (adr r2, 81089cc <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81089cc:	08108aa5 	.word	0x08108aa5
 81089d0:	08108a95 	.word	0x08108a95
 81089d4:	08108a95 	.word	0x08108a95
 81089d8:	08108a95 	.word	0x08108a95
 81089dc:	08108a95 	.word	0x08108a95
 81089e0:	08108a95 	.word	0x08108a95
 81089e4:	08108a95 	.word	0x08108a95
 81089e8:	08108a95 	.word	0x08108a95
 81089ec:	08108a71 	.word	0x08108a71
 81089f0:	08108a95 	.word	0x08108a95
 81089f4:	08108a95 	.word	0x08108a95
 81089f8:	08108a95 	.word	0x08108a95
 81089fc:	08108a95 	.word	0x08108a95
 8108a00:	08108a95 	.word	0x08108a95
 8108a04:	08108a95 	.word	0x08108a95
 8108a08:	08108a95 	.word	0x08108a95
 8108a0c:	08108a83 	.word	0x08108a83
 8108a10:	08108a95 	.word	0x08108a95
 8108a14:	08108a95 	.word	0x08108a95
 8108a18:	08108a95 	.word	0x08108a95
 8108a1c:	08108a95 	.word	0x08108a95
 8108a20:	08108a95 	.word	0x08108a95
 8108a24:	08108a95 	.word	0x08108a95
 8108a28:	08108a95 	.word	0x08108a95
 8108a2c:	08108aa5 	.word	0x08108aa5
 8108a30:	08108a95 	.word	0x08108a95
 8108a34:	08108a95 	.word	0x08108a95
 8108a38:	08108a95 	.word	0x08108a95
 8108a3c:	08108a95 	.word	0x08108a95
 8108a40:	08108a95 	.word	0x08108a95
 8108a44:	08108a95 	.word	0x08108a95
 8108a48:	08108a95 	.word	0x08108a95
 8108a4c:	08108aa5 	.word	0x08108aa5
 8108a50:	08108a95 	.word	0x08108a95
 8108a54:	08108a95 	.word	0x08108a95
 8108a58:	08108a95 	.word	0x08108a95
 8108a5c:	08108a95 	.word	0x08108a95
 8108a60:	08108a95 	.word	0x08108a95
 8108a64:	08108a95 	.word	0x08108a95
 8108a68:	08108a95 	.word	0x08108a95
 8108a6c:	08108aa5 	.word	0x08108aa5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108a70:	687b      	ldr	r3, [r7, #4]
 8108a72:	3304      	adds	r3, #4
 8108a74:	2101      	movs	r1, #1
 8108a76:	4618      	mov	r0, r3
 8108a78:	f000 fdf8 	bl	810966c <RCCEx_PLL2_Config>
 8108a7c:	4603      	mov	r3, r0
 8108a7e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8108a80:	e011      	b.n	8108aa6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108a82:	687b      	ldr	r3, [r7, #4]
 8108a84:	3324      	adds	r3, #36	; 0x24
 8108a86:	2101      	movs	r1, #1
 8108a88:	4618      	mov	r0, r3
 8108a8a:	f000 fea1 	bl	81097d0 <RCCEx_PLL3_Config>
 8108a8e:	4603      	mov	r3, r0
 8108a90:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8108a92:	e008      	b.n	8108aa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108a94:	2301      	movs	r3, #1
 8108a96:	75fb      	strb	r3, [r7, #23]
      break;
 8108a98:	e005      	b.n	8108aa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8108a9a:	bf00      	nop
 8108a9c:	58024400 	.word	0x58024400
 8108aa0:	58024800 	.word	0x58024800
      break;
 8108aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108aa6:	7dfb      	ldrb	r3, [r7, #23]
 8108aa8:	2b00      	cmp	r3, #0
 8108aaa:	d109      	bne.n	8108ac0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8108aac:	4b96      	ldr	r3, [pc, #600]	; (8108d08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8108aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108ab0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8108ab4:	687b      	ldr	r3, [r7, #4]
 8108ab6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108ab8:	4993      	ldr	r1, [pc, #588]	; (8108d08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8108aba:	4313      	orrs	r3, r2
 8108abc:	654b      	str	r3, [r1, #84]	; 0x54
 8108abe:	e001      	b.n	8108ac4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108ac0:	7dfb      	ldrb	r3, [r7, #23]
 8108ac2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8108ac4:	687b      	ldr	r3, [r7, #4]
 8108ac6:	681b      	ldr	r3, [r3, #0]
 8108ac8:	f003 0302 	and.w	r3, r3, #2
 8108acc:	2b00      	cmp	r3, #0
 8108ace:	d038      	beq.n	8108b42 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8108ad0:	687b      	ldr	r3, [r7, #4]
 8108ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108ad4:	2b05      	cmp	r3, #5
 8108ad6:	d821      	bhi.n	8108b1c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8108ad8:	a201      	add	r2, pc, #4	; (adr r2, 8108ae0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8108ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108ade:	bf00      	nop
 8108ae0:	08108b23 	.word	0x08108b23
 8108ae4:	08108af9 	.word	0x08108af9
 8108ae8:	08108b0b 	.word	0x08108b0b
 8108aec:	08108b23 	.word	0x08108b23
 8108af0:	08108b23 	.word	0x08108b23
 8108af4:	08108b23 	.word	0x08108b23
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108af8:	687b      	ldr	r3, [r7, #4]
 8108afa:	3304      	adds	r3, #4
 8108afc:	2101      	movs	r1, #1
 8108afe:	4618      	mov	r0, r3
 8108b00:	f000 fdb4 	bl	810966c <RCCEx_PLL2_Config>
 8108b04:	4603      	mov	r3, r0
 8108b06:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8108b08:	e00c      	b.n	8108b24 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108b0a:	687b      	ldr	r3, [r7, #4]
 8108b0c:	3324      	adds	r3, #36	; 0x24
 8108b0e:	2101      	movs	r1, #1
 8108b10:	4618      	mov	r0, r3
 8108b12:	f000 fe5d 	bl	81097d0 <RCCEx_PLL3_Config>
 8108b16:	4603      	mov	r3, r0
 8108b18:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8108b1a:	e003      	b.n	8108b24 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108b1c:	2301      	movs	r3, #1
 8108b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8108b20:	e000      	b.n	8108b24 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8108b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108b24:	7dfb      	ldrb	r3, [r7, #23]
 8108b26:	2b00      	cmp	r3, #0
 8108b28:	d109      	bne.n	8108b3e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8108b2a:	4b77      	ldr	r3, [pc, #476]	; (8108d08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8108b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108b2e:	f023 0207 	bic.w	r2, r3, #7
 8108b32:	687b      	ldr	r3, [r7, #4]
 8108b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108b36:	4974      	ldr	r1, [pc, #464]	; (8108d08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8108b38:	4313      	orrs	r3, r2
 8108b3a:	654b      	str	r3, [r1, #84]	; 0x54
 8108b3c:	e001      	b.n	8108b42 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108b3e:	7dfb      	ldrb	r3, [r7, #23]
 8108b40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8108b42:	687b      	ldr	r3, [r7, #4]
 8108b44:	681b      	ldr	r3, [r3, #0]
 8108b46:	f003 0304 	and.w	r3, r3, #4
 8108b4a:	2b00      	cmp	r3, #0
 8108b4c:	d03a      	beq.n	8108bc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8108b4e:	687b      	ldr	r3, [r7, #4]
 8108b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8108b54:	2b05      	cmp	r3, #5
 8108b56:	d821      	bhi.n	8108b9c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8108b58:	a201      	add	r2, pc, #4	; (adr r2, 8108b60 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8108b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108b5e:	bf00      	nop
 8108b60:	08108ba3 	.word	0x08108ba3
 8108b64:	08108b79 	.word	0x08108b79
 8108b68:	08108b8b 	.word	0x08108b8b
 8108b6c:	08108ba3 	.word	0x08108ba3
 8108b70:	08108ba3 	.word	0x08108ba3
 8108b74:	08108ba3 	.word	0x08108ba3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108b78:	687b      	ldr	r3, [r7, #4]
 8108b7a:	3304      	adds	r3, #4
 8108b7c:	2101      	movs	r1, #1
 8108b7e:	4618      	mov	r0, r3
 8108b80:	f000 fd74 	bl	810966c <RCCEx_PLL2_Config>
 8108b84:	4603      	mov	r3, r0
 8108b86:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8108b88:	e00c      	b.n	8108ba4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108b8a:	687b      	ldr	r3, [r7, #4]
 8108b8c:	3324      	adds	r3, #36	; 0x24
 8108b8e:	2101      	movs	r1, #1
 8108b90:	4618      	mov	r0, r3
 8108b92:	f000 fe1d 	bl	81097d0 <RCCEx_PLL3_Config>
 8108b96:	4603      	mov	r3, r0
 8108b98:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8108b9a:	e003      	b.n	8108ba4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108b9c:	2301      	movs	r3, #1
 8108b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8108ba0:	e000      	b.n	8108ba4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8108ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108ba4:	7dfb      	ldrb	r3, [r7, #23]
 8108ba6:	2b00      	cmp	r3, #0
 8108ba8:	d10a      	bne.n	8108bc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8108baa:	4b57      	ldr	r3, [pc, #348]	; (8108d08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8108bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108bae:	f023 0207 	bic.w	r2, r3, #7
 8108bb2:	687b      	ldr	r3, [r7, #4]
 8108bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8108bb8:	4953      	ldr	r1, [pc, #332]	; (8108d08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8108bba:	4313      	orrs	r3, r2
 8108bbc:	658b      	str	r3, [r1, #88]	; 0x58
 8108bbe:	e001      	b.n	8108bc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108bc0:	7dfb      	ldrb	r3, [r7, #23]
 8108bc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8108bc4:	687b      	ldr	r3, [r7, #4]
 8108bc6:	681b      	ldr	r3, [r3, #0]
 8108bc8:	f003 0320 	and.w	r3, r3, #32
 8108bcc:	2b00      	cmp	r3, #0
 8108bce:	d04b      	beq.n	8108c68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8108bd0:	687b      	ldr	r3, [r7, #4]
 8108bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108bda:	d02e      	beq.n	8108c3a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8108bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108be0:	d828      	bhi.n	8108c34 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8108be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108be6:	d02a      	beq.n	8108c3e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8108be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108bec:	d822      	bhi.n	8108c34 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8108bee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108bf2:	d026      	beq.n	8108c42 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8108bf4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108bf8:	d81c      	bhi.n	8108c34 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8108bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108bfe:	d010      	beq.n	8108c22 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8108c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108c04:	d816      	bhi.n	8108c34 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8108c06:	2b00      	cmp	r3, #0
 8108c08:	d01d      	beq.n	8108c46 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8108c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108c0e:	d111      	bne.n	8108c34 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108c10:	687b      	ldr	r3, [r7, #4]
 8108c12:	3304      	adds	r3, #4
 8108c14:	2100      	movs	r1, #0
 8108c16:	4618      	mov	r0, r3
 8108c18:	f000 fd28 	bl	810966c <RCCEx_PLL2_Config>
 8108c1c:	4603      	mov	r3, r0
 8108c1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8108c20:	e012      	b.n	8108c48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8108c22:	687b      	ldr	r3, [r7, #4]
 8108c24:	3324      	adds	r3, #36	; 0x24
 8108c26:	2102      	movs	r1, #2
 8108c28:	4618      	mov	r0, r3
 8108c2a:	f000 fdd1 	bl	81097d0 <RCCEx_PLL3_Config>
 8108c2e:	4603      	mov	r3, r0
 8108c30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8108c32:	e009      	b.n	8108c48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108c34:	2301      	movs	r3, #1
 8108c36:	75fb      	strb	r3, [r7, #23]
      break;
 8108c38:	e006      	b.n	8108c48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8108c3a:	bf00      	nop
 8108c3c:	e004      	b.n	8108c48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8108c3e:	bf00      	nop
 8108c40:	e002      	b.n	8108c48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8108c42:	bf00      	nop
 8108c44:	e000      	b.n	8108c48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8108c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108c48:	7dfb      	ldrb	r3, [r7, #23]
 8108c4a:	2b00      	cmp	r3, #0
 8108c4c:	d10a      	bne.n	8108c64 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8108c4e:	4b2e      	ldr	r3, [pc, #184]	; (8108d08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8108c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108c52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8108c56:	687b      	ldr	r3, [r7, #4]
 8108c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108c5c:	492a      	ldr	r1, [pc, #168]	; (8108d08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8108c5e:	4313      	orrs	r3, r2
 8108c60:	654b      	str	r3, [r1, #84]	; 0x54
 8108c62:	e001      	b.n	8108c68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108c64:	7dfb      	ldrb	r3, [r7, #23]
 8108c66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8108c68:	687b      	ldr	r3, [r7, #4]
 8108c6a:	681b      	ldr	r3, [r3, #0]
 8108c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108c70:	2b00      	cmp	r3, #0
 8108c72:	d04d      	beq.n	8108d10 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8108c74:	687b      	ldr	r3, [r7, #4]
 8108c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8108c7a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8108c7e:	d02e      	beq.n	8108cde <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8108c80:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8108c84:	d828      	bhi.n	8108cd8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8108c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108c8a:	d02a      	beq.n	8108ce2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8108c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108c90:	d822      	bhi.n	8108cd8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8108c92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8108c96:	d026      	beq.n	8108ce6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8108c98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8108c9c:	d81c      	bhi.n	8108cd8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8108c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108ca2:	d010      	beq.n	8108cc6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8108ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108ca8:	d816      	bhi.n	8108cd8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8108caa:	2b00      	cmp	r3, #0
 8108cac:	d01d      	beq.n	8108cea <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8108cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108cb2:	d111      	bne.n	8108cd8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108cb4:	687b      	ldr	r3, [r7, #4]
 8108cb6:	3304      	adds	r3, #4
 8108cb8:	2100      	movs	r1, #0
 8108cba:	4618      	mov	r0, r3
 8108cbc:	f000 fcd6 	bl	810966c <RCCEx_PLL2_Config>
 8108cc0:	4603      	mov	r3, r0
 8108cc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8108cc4:	e012      	b.n	8108cec <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8108cc6:	687b      	ldr	r3, [r7, #4]
 8108cc8:	3324      	adds	r3, #36	; 0x24
 8108cca:	2102      	movs	r1, #2
 8108ccc:	4618      	mov	r0, r3
 8108cce:	f000 fd7f 	bl	81097d0 <RCCEx_PLL3_Config>
 8108cd2:	4603      	mov	r3, r0
 8108cd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8108cd6:	e009      	b.n	8108cec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108cd8:	2301      	movs	r3, #1
 8108cda:	75fb      	strb	r3, [r7, #23]
      break;
 8108cdc:	e006      	b.n	8108cec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8108cde:	bf00      	nop
 8108ce0:	e004      	b.n	8108cec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8108ce2:	bf00      	nop
 8108ce4:	e002      	b.n	8108cec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8108ce6:	bf00      	nop
 8108ce8:	e000      	b.n	8108cec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8108cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108cec:	7dfb      	ldrb	r3, [r7, #23]
 8108cee:	2b00      	cmp	r3, #0
 8108cf0:	d10c      	bne.n	8108d0c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8108cf2:	4b05      	ldr	r3, [pc, #20]	; (8108d08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8108cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108cf6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8108cfa:	687b      	ldr	r3, [r7, #4]
 8108cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8108d00:	4901      	ldr	r1, [pc, #4]	; (8108d08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8108d02:	4313      	orrs	r3, r2
 8108d04:	658b      	str	r3, [r1, #88]	; 0x58
 8108d06:	e003      	b.n	8108d10 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8108d08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d0c:	7dfb      	ldrb	r3, [r7, #23]
 8108d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8108d10:	687b      	ldr	r3, [r7, #4]
 8108d12:	681b      	ldr	r3, [r3, #0]
 8108d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108d18:	2b00      	cmp	r3, #0
 8108d1a:	d04b      	beq.n	8108db4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8108d1c:	687b      	ldr	r3, [r7, #4]
 8108d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8108d22:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8108d26:	d02e      	beq.n	8108d86 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8108d28:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8108d2c:	d828      	bhi.n	8108d80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8108d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108d32:	d02a      	beq.n	8108d8a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8108d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108d38:	d822      	bhi.n	8108d80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8108d3a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8108d3e:	d026      	beq.n	8108d8e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8108d40:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8108d44:	d81c      	bhi.n	8108d80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8108d46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108d4a:	d010      	beq.n	8108d6e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8108d4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108d50:	d816      	bhi.n	8108d80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8108d52:	2b00      	cmp	r3, #0
 8108d54:	d01d      	beq.n	8108d92 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8108d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108d5a:	d111      	bne.n	8108d80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108d5c:	687b      	ldr	r3, [r7, #4]
 8108d5e:	3304      	adds	r3, #4
 8108d60:	2100      	movs	r1, #0
 8108d62:	4618      	mov	r0, r3
 8108d64:	f000 fc82 	bl	810966c <RCCEx_PLL2_Config>
 8108d68:	4603      	mov	r3, r0
 8108d6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8108d6c:	e012      	b.n	8108d94 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8108d6e:	687b      	ldr	r3, [r7, #4]
 8108d70:	3324      	adds	r3, #36	; 0x24
 8108d72:	2102      	movs	r1, #2
 8108d74:	4618      	mov	r0, r3
 8108d76:	f000 fd2b 	bl	81097d0 <RCCEx_PLL3_Config>
 8108d7a:	4603      	mov	r3, r0
 8108d7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8108d7e:	e009      	b.n	8108d94 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108d80:	2301      	movs	r3, #1
 8108d82:	75fb      	strb	r3, [r7, #23]
      break;
 8108d84:	e006      	b.n	8108d94 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8108d86:	bf00      	nop
 8108d88:	e004      	b.n	8108d94 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8108d8a:	bf00      	nop
 8108d8c:	e002      	b.n	8108d94 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8108d8e:	bf00      	nop
 8108d90:	e000      	b.n	8108d94 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8108d92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108d94:	7dfb      	ldrb	r3, [r7, #23]
 8108d96:	2b00      	cmp	r3, #0
 8108d98:	d10a      	bne.n	8108db0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8108d9a:	4b9d      	ldr	r3, [pc, #628]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108d9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8108da2:	687b      	ldr	r3, [r7, #4]
 8108da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8108da8:	4999      	ldr	r1, [pc, #612]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108daa:	4313      	orrs	r3, r2
 8108dac:	658b      	str	r3, [r1, #88]	; 0x58
 8108dae:	e001      	b.n	8108db4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108db0:	7dfb      	ldrb	r3, [r7, #23]
 8108db2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8108db4:	687b      	ldr	r3, [r7, #4]
 8108db6:	681b      	ldr	r3, [r3, #0]
 8108db8:	f003 0308 	and.w	r3, r3, #8
 8108dbc:	2b00      	cmp	r3, #0
 8108dbe:	d01a      	beq.n	8108df6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8108dc0:	687b      	ldr	r3, [r7, #4]
 8108dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108dca:	d10a      	bne.n	8108de2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8108dcc:	687b      	ldr	r3, [r7, #4]
 8108dce:	3324      	adds	r3, #36	; 0x24
 8108dd0:	2102      	movs	r1, #2
 8108dd2:	4618      	mov	r0, r3
 8108dd4:	f000 fcfc 	bl	81097d0 <RCCEx_PLL3_Config>
 8108dd8:	4603      	mov	r3, r0
 8108dda:	2b00      	cmp	r3, #0
 8108ddc:	d001      	beq.n	8108de2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8108dde:	2301      	movs	r3, #1
 8108de0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8108de2:	4b8b      	ldr	r3, [pc, #556]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108de6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8108dea:	687b      	ldr	r3, [r7, #4]
 8108dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108df0:	4987      	ldr	r1, [pc, #540]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108df2:	4313      	orrs	r3, r2
 8108df4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8108df6:	687b      	ldr	r3, [r7, #4]
 8108df8:	681b      	ldr	r3, [r3, #0]
 8108dfa:	f003 0310 	and.w	r3, r3, #16
 8108dfe:	2b00      	cmp	r3, #0
 8108e00:	d01a      	beq.n	8108e38 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8108e02:	687b      	ldr	r3, [r7, #4]
 8108e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8108e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108e0c:	d10a      	bne.n	8108e24 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8108e0e:	687b      	ldr	r3, [r7, #4]
 8108e10:	3324      	adds	r3, #36	; 0x24
 8108e12:	2102      	movs	r1, #2
 8108e14:	4618      	mov	r0, r3
 8108e16:	f000 fcdb 	bl	81097d0 <RCCEx_PLL3_Config>
 8108e1a:	4603      	mov	r3, r0
 8108e1c:	2b00      	cmp	r3, #0
 8108e1e:	d001      	beq.n	8108e24 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8108e20:	2301      	movs	r3, #1
 8108e22:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8108e24:	4b7a      	ldr	r3, [pc, #488]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108e28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8108e2c:	687b      	ldr	r3, [r7, #4]
 8108e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8108e32:	4977      	ldr	r1, [pc, #476]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108e34:	4313      	orrs	r3, r2
 8108e36:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8108e38:	687b      	ldr	r3, [r7, #4]
 8108e3a:	681b      	ldr	r3, [r3, #0]
 8108e3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8108e40:	2b00      	cmp	r3, #0
 8108e42:	d034      	beq.n	8108eae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8108e44:	687b      	ldr	r3, [r7, #4]
 8108e46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8108e4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108e4e:	d01d      	beq.n	8108e8c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8108e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108e54:	d817      	bhi.n	8108e86 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8108e56:	2b00      	cmp	r3, #0
 8108e58:	d003      	beq.n	8108e62 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8108e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108e5e:	d009      	beq.n	8108e74 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8108e60:	e011      	b.n	8108e86 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108e62:	687b      	ldr	r3, [r7, #4]
 8108e64:	3304      	adds	r3, #4
 8108e66:	2100      	movs	r1, #0
 8108e68:	4618      	mov	r0, r3
 8108e6a:	f000 fbff 	bl	810966c <RCCEx_PLL2_Config>
 8108e6e:	4603      	mov	r3, r0
 8108e70:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8108e72:	e00c      	b.n	8108e8e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8108e74:	687b      	ldr	r3, [r7, #4]
 8108e76:	3324      	adds	r3, #36	; 0x24
 8108e78:	2102      	movs	r1, #2
 8108e7a:	4618      	mov	r0, r3
 8108e7c:	f000 fca8 	bl	81097d0 <RCCEx_PLL3_Config>
 8108e80:	4603      	mov	r3, r0
 8108e82:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8108e84:	e003      	b.n	8108e8e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108e86:	2301      	movs	r3, #1
 8108e88:	75fb      	strb	r3, [r7, #23]
      break;
 8108e8a:	e000      	b.n	8108e8e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8108e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108e8e:	7dfb      	ldrb	r3, [r7, #23]
 8108e90:	2b00      	cmp	r3, #0
 8108e92:	d10a      	bne.n	8108eaa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8108e94:	4b5e      	ldr	r3, [pc, #376]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108e98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8108e9c:	687b      	ldr	r3, [r7, #4]
 8108e9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8108ea2:	495b      	ldr	r1, [pc, #364]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108ea4:	4313      	orrs	r3, r2
 8108ea6:	658b      	str	r3, [r1, #88]	; 0x58
 8108ea8:	e001      	b.n	8108eae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108eaa:	7dfb      	ldrb	r3, [r7, #23]
 8108eac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8108eae:	687b      	ldr	r3, [r7, #4]
 8108eb0:	681b      	ldr	r3, [r3, #0]
 8108eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8108eb6:	2b00      	cmp	r3, #0
 8108eb8:	d033      	beq.n	8108f22 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8108eba:	687b      	ldr	r3, [r7, #4]
 8108ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108ec0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8108ec4:	d01c      	beq.n	8108f00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8108ec6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8108eca:	d816      	bhi.n	8108efa <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8108ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108ed0:	d003      	beq.n	8108eda <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8108ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108ed6:	d007      	beq.n	8108ee8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8108ed8:	e00f      	b.n	8108efa <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108eda:	4b4d      	ldr	r3, [pc, #308]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108ede:	4a4c      	ldr	r2, [pc, #304]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8108ee6:	e00c      	b.n	8108f02 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108ee8:	687b      	ldr	r3, [r7, #4]
 8108eea:	3324      	adds	r3, #36	; 0x24
 8108eec:	2101      	movs	r1, #1
 8108eee:	4618      	mov	r0, r3
 8108ef0:	f000 fc6e 	bl	81097d0 <RCCEx_PLL3_Config>
 8108ef4:	4603      	mov	r3, r0
 8108ef6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8108ef8:	e003      	b.n	8108f02 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108efa:	2301      	movs	r3, #1
 8108efc:	75fb      	strb	r3, [r7, #23]
      break;
 8108efe:	e000      	b.n	8108f02 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8108f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108f02:	7dfb      	ldrb	r3, [r7, #23]
 8108f04:	2b00      	cmp	r3, #0
 8108f06:	d10a      	bne.n	8108f1e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8108f08:	4b41      	ldr	r3, [pc, #260]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108f0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8108f10:	687b      	ldr	r3, [r7, #4]
 8108f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108f16:	493e      	ldr	r1, [pc, #248]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108f18:	4313      	orrs	r3, r2
 8108f1a:	654b      	str	r3, [r1, #84]	; 0x54
 8108f1c:	e001      	b.n	8108f22 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108f1e:	7dfb      	ldrb	r3, [r7, #23]
 8108f20:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8108f22:	687b      	ldr	r3, [r7, #4]
 8108f24:	681b      	ldr	r3, [r3, #0]
 8108f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8108f2a:	2b00      	cmp	r3, #0
 8108f2c:	d029      	beq.n	8108f82 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8108f2e:	687b      	ldr	r3, [r7, #4]
 8108f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108f32:	2b00      	cmp	r3, #0
 8108f34:	d003      	beq.n	8108f3e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8108f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108f3a:	d007      	beq.n	8108f4c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8108f3c:	e00f      	b.n	8108f5e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108f3e:	4b34      	ldr	r3, [pc, #208]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108f42:	4a33      	ldr	r2, [pc, #204]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108f48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8108f4a:	e00b      	b.n	8108f64 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8108f4c:	687b      	ldr	r3, [r7, #4]
 8108f4e:	3304      	adds	r3, #4
 8108f50:	2102      	movs	r1, #2
 8108f52:	4618      	mov	r0, r3
 8108f54:	f000 fb8a 	bl	810966c <RCCEx_PLL2_Config>
 8108f58:	4603      	mov	r3, r0
 8108f5a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8108f5c:	e002      	b.n	8108f64 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8108f5e:	2301      	movs	r3, #1
 8108f60:	75fb      	strb	r3, [r7, #23]
      break;
 8108f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108f64:	7dfb      	ldrb	r3, [r7, #23]
 8108f66:	2b00      	cmp	r3, #0
 8108f68:	d109      	bne.n	8108f7e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8108f6a:	4b29      	ldr	r3, [pc, #164]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108f6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8108f72:	687b      	ldr	r3, [r7, #4]
 8108f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108f76:	4926      	ldr	r1, [pc, #152]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108f78:	4313      	orrs	r3, r2
 8108f7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8108f7c:	e001      	b.n	8108f82 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108f7e:	7dfb      	ldrb	r3, [r7, #23]
 8108f80:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8108f82:	687b      	ldr	r3, [r7, #4]
 8108f84:	681b      	ldr	r3, [r3, #0]
 8108f86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108f8a:	2b00      	cmp	r3, #0
 8108f8c:	d00a      	beq.n	8108fa4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8108f8e:	687b      	ldr	r3, [r7, #4]
 8108f90:	3324      	adds	r3, #36	; 0x24
 8108f92:	2102      	movs	r1, #2
 8108f94:	4618      	mov	r0, r3
 8108f96:	f000 fc1b 	bl	81097d0 <RCCEx_PLL3_Config>
 8108f9a:	4603      	mov	r3, r0
 8108f9c:	2b00      	cmp	r3, #0
 8108f9e:	d001      	beq.n	8108fa4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8108fa0:	2301      	movs	r3, #1
 8108fa2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8108fa4:	687b      	ldr	r3, [r7, #4]
 8108fa6:	681b      	ldr	r3, [r3, #0]
 8108fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8108fac:	2b00      	cmp	r3, #0
 8108fae:	d033      	beq.n	8109018 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8108fb0:	687b      	ldr	r3, [r7, #4]
 8108fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8108fb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108fb8:	d017      	beq.n	8108fea <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8108fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108fbe:	d811      	bhi.n	8108fe4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8108fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8108fc4:	d013      	beq.n	8108fee <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8108fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8108fca:	d80b      	bhi.n	8108fe4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8108fcc:	2b00      	cmp	r3, #0
 8108fce:	d010      	beq.n	8108ff2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8108fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108fd4:	d106      	bne.n	8108fe4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108fd6:	4b0e      	ldr	r3, [pc, #56]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108fda:	4a0d      	ldr	r2, [pc, #52]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8108fe2:	e007      	b.n	8108ff4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108fe4:	2301      	movs	r3, #1
 8108fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8108fe8:	e004      	b.n	8108ff4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8108fea:	bf00      	nop
 8108fec:	e002      	b.n	8108ff4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8108fee:	bf00      	nop
 8108ff0:	e000      	b.n	8108ff4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8108ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108ff4:	7dfb      	ldrb	r3, [r7, #23]
 8108ff6:	2b00      	cmp	r3, #0
 8108ff8:	d10c      	bne.n	8109014 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8108ffa:	4b05      	ldr	r3, [pc, #20]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8108ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108ffe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8109002:	687b      	ldr	r3, [r7, #4]
 8109004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109006:	4902      	ldr	r1, [pc, #8]	; (8109010 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109008:	4313      	orrs	r3, r2
 810900a:	654b      	str	r3, [r1, #84]	; 0x54
 810900c:	e004      	b.n	8109018 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 810900e:	bf00      	nop
 8109010:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109014:	7dfb      	ldrb	r3, [r7, #23]
 8109016:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8109018:	687b      	ldr	r3, [r7, #4]
 810901a:	681b      	ldr	r3, [r3, #0]
 810901c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8109020:	2b00      	cmp	r3, #0
 8109022:	d008      	beq.n	8109036 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8109024:	4b31      	ldr	r3, [pc, #196]	; (81090ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8109026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109028:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810902c:	687b      	ldr	r3, [r7, #4]
 810902e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109030:	492e      	ldr	r1, [pc, #184]	; (81090ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8109032:	4313      	orrs	r3, r2
 8109034:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8109036:	687b      	ldr	r3, [r7, #4]
 8109038:	681b      	ldr	r3, [r3, #0]
 810903a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810903e:	2b00      	cmp	r3, #0
 8109040:	d009      	beq.n	8109056 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8109042:	4b2a      	ldr	r3, [pc, #168]	; (81090ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8109044:	691b      	ldr	r3, [r3, #16]
 8109046:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810904a:	687b      	ldr	r3, [r7, #4]
 810904c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8109050:	4926      	ldr	r1, [pc, #152]	; (81090ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8109052:	4313      	orrs	r3, r2
 8109054:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8109056:	687b      	ldr	r3, [r7, #4]
 8109058:	681b      	ldr	r3, [r3, #0]
 810905a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810905e:	2b00      	cmp	r3, #0
 8109060:	d008      	beq.n	8109074 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8109062:	4b22      	ldr	r3, [pc, #136]	; (81090ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8109064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109066:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810906a:	687b      	ldr	r3, [r7, #4]
 810906c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810906e:	491f      	ldr	r1, [pc, #124]	; (81090ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8109070:	4313      	orrs	r3, r2
 8109072:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8109074:	687b      	ldr	r3, [r7, #4]
 8109076:	681b      	ldr	r3, [r3, #0]
 8109078:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810907c:	2b00      	cmp	r3, #0
 810907e:	d00d      	beq.n	810909c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8109080:	4b1a      	ldr	r3, [pc, #104]	; (81090ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8109082:	691b      	ldr	r3, [r3, #16]
 8109084:	4a19      	ldr	r2, [pc, #100]	; (81090ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8109086:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810908a:	6113      	str	r3, [r2, #16]
 810908c:	4b17      	ldr	r3, [pc, #92]	; (81090ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810908e:	691a      	ldr	r2, [r3, #16]
 8109090:	687b      	ldr	r3, [r7, #4]
 8109092:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8109096:	4915      	ldr	r1, [pc, #84]	; (81090ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8109098:	4313      	orrs	r3, r2
 810909a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810909c:	687b      	ldr	r3, [r7, #4]
 810909e:	681b      	ldr	r3, [r3, #0]
 81090a0:	2b00      	cmp	r3, #0
 81090a2:	da08      	bge.n	81090b6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81090a4:	4b11      	ldr	r3, [pc, #68]	; (81090ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81090a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81090a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81090ac:	687b      	ldr	r3, [r7, #4]
 81090ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81090b0:	490e      	ldr	r1, [pc, #56]	; (81090ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81090b2:	4313      	orrs	r3, r2
 81090b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81090b6:	687b      	ldr	r3, [r7, #4]
 81090b8:	681b      	ldr	r3, [r3, #0]
 81090ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81090be:	2b00      	cmp	r3, #0
 81090c0:	d009      	beq.n	81090d6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81090c2:	4b0a      	ldr	r3, [pc, #40]	; (81090ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81090c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81090c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81090ca:	687b      	ldr	r3, [r7, #4]
 81090cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81090d0:	4906      	ldr	r1, [pc, #24]	; (81090ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81090d2:	4313      	orrs	r3, r2
 81090d4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81090d6:	7dbb      	ldrb	r3, [r7, #22]
 81090d8:	2b00      	cmp	r3, #0
 81090da:	d101      	bne.n	81090e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 81090dc:	2300      	movs	r3, #0
 81090de:	e000      	b.n	81090e2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 81090e0:	2301      	movs	r3, #1
}
 81090e2:	4618      	mov	r0, r3
 81090e4:	3718      	adds	r7, #24
 81090e6:	46bd      	mov	sp, r7
 81090e8:	bd80      	pop	{r7, pc}
 81090ea:	bf00      	nop
 81090ec:	58024400 	.word	0x58024400

081090f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81090f0:	b580      	push	{r7, lr}
 81090f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81090f4:	f7ff f858 	bl	81081a8 <HAL_RCC_GetHCLKFreq>
 81090f8:	4602      	mov	r2, r0
 81090fa:	4b06      	ldr	r3, [pc, #24]	; (8109114 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81090fc:	6a1b      	ldr	r3, [r3, #32]
 81090fe:	091b      	lsrs	r3, r3, #4
 8109100:	f003 0307 	and.w	r3, r3, #7
 8109104:	4904      	ldr	r1, [pc, #16]	; (8109118 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8109106:	5ccb      	ldrb	r3, [r1, r3]
 8109108:	f003 031f 	and.w	r3, r3, #31
 810910c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8109110:	4618      	mov	r0, r3
 8109112:	bd80      	pop	{r7, pc}
 8109114:	58024400 	.word	0x58024400
 8109118:	0810bb88 	.word	0x0810bb88

0810911c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 810911c:	b480      	push	{r7}
 810911e:	b089      	sub	sp, #36	; 0x24
 8109120:	af00      	add	r7, sp, #0
 8109122:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109124:	4ba1      	ldr	r3, [pc, #644]	; (81093ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109128:	f003 0303 	and.w	r3, r3, #3
 810912c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810912e:	4b9f      	ldr	r3, [pc, #636]	; (81093ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109132:	0b1b      	lsrs	r3, r3, #12
 8109134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8109138:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810913a:	4b9c      	ldr	r3, [pc, #624]	; (81093ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810913c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810913e:	091b      	lsrs	r3, r3, #4
 8109140:	f003 0301 	and.w	r3, r3, #1
 8109144:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8109146:	4b99      	ldr	r3, [pc, #612]	; (81093ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810914a:	08db      	lsrs	r3, r3, #3
 810914c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109150:	693a      	ldr	r2, [r7, #16]
 8109152:	fb02 f303 	mul.w	r3, r2, r3
 8109156:	ee07 3a90 	vmov	s15, r3
 810915a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810915e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8109162:	697b      	ldr	r3, [r7, #20]
 8109164:	2b00      	cmp	r3, #0
 8109166:	f000 8111 	beq.w	810938c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810916a:	69bb      	ldr	r3, [r7, #24]
 810916c:	2b02      	cmp	r3, #2
 810916e:	f000 8083 	beq.w	8109278 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8109172:	69bb      	ldr	r3, [r7, #24]
 8109174:	2b02      	cmp	r3, #2
 8109176:	f200 80a1 	bhi.w	81092bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810917a:	69bb      	ldr	r3, [r7, #24]
 810917c:	2b00      	cmp	r3, #0
 810917e:	d003      	beq.n	8109188 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8109180:	69bb      	ldr	r3, [r7, #24]
 8109182:	2b01      	cmp	r3, #1
 8109184:	d056      	beq.n	8109234 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8109186:	e099      	b.n	81092bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109188:	4b88      	ldr	r3, [pc, #544]	; (81093ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810918a:	681b      	ldr	r3, [r3, #0]
 810918c:	f003 0320 	and.w	r3, r3, #32
 8109190:	2b00      	cmp	r3, #0
 8109192:	d02d      	beq.n	81091f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109194:	4b85      	ldr	r3, [pc, #532]	; (81093ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109196:	681b      	ldr	r3, [r3, #0]
 8109198:	08db      	lsrs	r3, r3, #3
 810919a:	f003 0303 	and.w	r3, r3, #3
 810919e:	4a84      	ldr	r2, [pc, #528]	; (81093b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81091a0:	fa22 f303 	lsr.w	r3, r2, r3
 81091a4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81091a6:	68bb      	ldr	r3, [r7, #8]
 81091a8:	ee07 3a90 	vmov	s15, r3
 81091ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81091b0:	697b      	ldr	r3, [r7, #20]
 81091b2:	ee07 3a90 	vmov	s15, r3
 81091b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81091ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81091be:	4b7b      	ldr	r3, [pc, #492]	; (81093ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81091c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81091c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81091c6:	ee07 3a90 	vmov	s15, r3
 81091ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81091ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81091d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 81093b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81091d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81091da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81091de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81091e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81091e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81091ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81091ee:	e087      	b.n	8109300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81091f0:	697b      	ldr	r3, [r7, #20]
 81091f2:	ee07 3a90 	vmov	s15, r3
 81091f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81091fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81093b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81091fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109202:	4b6a      	ldr	r3, [pc, #424]	; (81093ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810920a:	ee07 3a90 	vmov	s15, r3
 810920e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109212:	ed97 6a03 	vldr	s12, [r7, #12]
 8109216:	eddf 5a67 	vldr	s11, [pc, #412]	; 81093b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810921a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810921e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810922a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810922e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109232:	e065      	b.n	8109300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109234:	697b      	ldr	r3, [r7, #20]
 8109236:	ee07 3a90 	vmov	s15, r3
 810923a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810923e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81093bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8109242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109246:	4b59      	ldr	r3, [pc, #356]	; (81093ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810924a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810924e:	ee07 3a90 	vmov	s15, r3
 8109252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109256:	ed97 6a03 	vldr	s12, [r7, #12]
 810925a:	eddf 5a56 	vldr	s11, [pc, #344]	; 81093b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810925e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810926a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810926e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109272:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109276:	e043      	b.n	8109300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109278:	697b      	ldr	r3, [r7, #20]
 810927a:	ee07 3a90 	vmov	s15, r3
 810927e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109282:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8109286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810928a:	4b48      	ldr	r3, [pc, #288]	; (81093ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810928c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810928e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109292:	ee07 3a90 	vmov	s15, r3
 8109296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810929a:	ed97 6a03 	vldr	s12, [r7, #12]
 810929e:	eddf 5a45 	vldr	s11, [pc, #276]	; 81093b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81092a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81092a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81092aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81092ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81092b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81092b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81092ba:	e021      	b.n	8109300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81092bc:	697b      	ldr	r3, [r7, #20]
 81092be:	ee07 3a90 	vmov	s15, r3
 81092c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81092c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81093bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81092ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81092ce:	4b37      	ldr	r3, [pc, #220]	; (81093ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81092d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81092d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81092d6:	ee07 3a90 	vmov	s15, r3
 81092da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81092de:	ed97 6a03 	vldr	s12, [r7, #12]
 81092e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 81093b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81092e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81092ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81092ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81092f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81092f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81092fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81092fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8109300:	4b2a      	ldr	r3, [pc, #168]	; (81093ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109304:	0a5b      	lsrs	r3, r3, #9
 8109306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810930a:	ee07 3a90 	vmov	s15, r3
 810930e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109316:	ee37 7a87 	vadd.f32	s14, s15, s14
 810931a:	edd7 6a07 	vldr	s13, [r7, #28]
 810931e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109326:	ee17 2a90 	vmov	r2, s15
 810932a:	687b      	ldr	r3, [r7, #4]
 810932c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810932e:	4b1f      	ldr	r3, [pc, #124]	; (81093ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109332:	0c1b      	lsrs	r3, r3, #16
 8109334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109338:	ee07 3a90 	vmov	s15, r3
 810933c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109344:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109348:	edd7 6a07 	vldr	s13, [r7, #28]
 810934c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109354:	ee17 2a90 	vmov	r2, s15
 8109358:	687b      	ldr	r3, [r7, #4]
 810935a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 810935c:	4b13      	ldr	r3, [pc, #76]	; (81093ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109360:	0e1b      	lsrs	r3, r3, #24
 8109362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109366:	ee07 3a90 	vmov	s15, r3
 810936a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810936e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109372:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109376:	edd7 6a07 	vldr	s13, [r7, #28]
 810937a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810937e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109382:	ee17 2a90 	vmov	r2, s15
 8109386:	687b      	ldr	r3, [r7, #4]
 8109388:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810938a:	e008      	b.n	810939e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810938c:	687b      	ldr	r3, [r7, #4]
 810938e:	2200      	movs	r2, #0
 8109390:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8109392:	687b      	ldr	r3, [r7, #4]
 8109394:	2200      	movs	r2, #0
 8109396:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8109398:	687b      	ldr	r3, [r7, #4]
 810939a:	2200      	movs	r2, #0
 810939c:	609a      	str	r2, [r3, #8]
}
 810939e:	bf00      	nop
 81093a0:	3724      	adds	r7, #36	; 0x24
 81093a2:	46bd      	mov	sp, r7
 81093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093a8:	4770      	bx	lr
 81093aa:	bf00      	nop
 81093ac:	58024400 	.word	0x58024400
 81093b0:	03d09000 	.word	0x03d09000
 81093b4:	46000000 	.word	0x46000000
 81093b8:	4c742400 	.word	0x4c742400
 81093bc:	4a742400 	.word	0x4a742400
 81093c0:	4af42400 	.word	0x4af42400

081093c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81093c4:	b480      	push	{r7}
 81093c6:	b089      	sub	sp, #36	; 0x24
 81093c8:	af00      	add	r7, sp, #0
 81093ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81093cc:	4ba1      	ldr	r3, [pc, #644]	; (8109654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81093ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81093d0:	f003 0303 	and.w	r3, r3, #3
 81093d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81093d6:	4b9f      	ldr	r3, [pc, #636]	; (8109654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81093d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81093da:	0d1b      	lsrs	r3, r3, #20
 81093dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81093e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81093e2:	4b9c      	ldr	r3, [pc, #624]	; (8109654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81093e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81093e6:	0a1b      	lsrs	r3, r3, #8
 81093e8:	f003 0301 	and.w	r3, r3, #1
 81093ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81093ee:	4b99      	ldr	r3, [pc, #612]	; (8109654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81093f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81093f2:	08db      	lsrs	r3, r3, #3
 81093f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81093f8:	693a      	ldr	r2, [r7, #16]
 81093fa:	fb02 f303 	mul.w	r3, r2, r3
 81093fe:	ee07 3a90 	vmov	s15, r3
 8109402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109406:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810940a:	697b      	ldr	r3, [r7, #20]
 810940c:	2b00      	cmp	r3, #0
 810940e:	f000 8111 	beq.w	8109634 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8109412:	69bb      	ldr	r3, [r7, #24]
 8109414:	2b02      	cmp	r3, #2
 8109416:	f000 8083 	beq.w	8109520 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810941a:	69bb      	ldr	r3, [r7, #24]
 810941c:	2b02      	cmp	r3, #2
 810941e:	f200 80a1 	bhi.w	8109564 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8109422:	69bb      	ldr	r3, [r7, #24]
 8109424:	2b00      	cmp	r3, #0
 8109426:	d003      	beq.n	8109430 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8109428:	69bb      	ldr	r3, [r7, #24]
 810942a:	2b01      	cmp	r3, #1
 810942c:	d056      	beq.n	81094dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810942e:	e099      	b.n	8109564 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109430:	4b88      	ldr	r3, [pc, #544]	; (8109654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109432:	681b      	ldr	r3, [r3, #0]
 8109434:	f003 0320 	and.w	r3, r3, #32
 8109438:	2b00      	cmp	r3, #0
 810943a:	d02d      	beq.n	8109498 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810943c:	4b85      	ldr	r3, [pc, #532]	; (8109654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810943e:	681b      	ldr	r3, [r3, #0]
 8109440:	08db      	lsrs	r3, r3, #3
 8109442:	f003 0303 	and.w	r3, r3, #3
 8109446:	4a84      	ldr	r2, [pc, #528]	; (8109658 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8109448:	fa22 f303 	lsr.w	r3, r2, r3
 810944c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810944e:	68bb      	ldr	r3, [r7, #8]
 8109450:	ee07 3a90 	vmov	s15, r3
 8109454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109458:	697b      	ldr	r3, [r7, #20]
 810945a:	ee07 3a90 	vmov	s15, r3
 810945e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109466:	4b7b      	ldr	r3, [pc, #492]	; (8109654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810946a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810946e:	ee07 3a90 	vmov	s15, r3
 8109472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109476:	ed97 6a03 	vldr	s12, [r7, #12]
 810947a:	eddf 5a78 	vldr	s11, [pc, #480]	; 810965c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810947e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810948a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810948e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109492:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8109496:	e087      	b.n	81095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109498:	697b      	ldr	r3, [r7, #20]
 810949a:	ee07 3a90 	vmov	s15, r3
 810949e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81094a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8109660 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81094a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81094aa:	4b6a      	ldr	r3, [pc, #424]	; (8109654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81094ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81094ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81094b2:	ee07 3a90 	vmov	s15, r3
 81094b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81094ba:	ed97 6a03 	vldr	s12, [r7, #12]
 81094be:	eddf 5a67 	vldr	s11, [pc, #412]	; 810965c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81094c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81094c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81094ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81094ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81094d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81094d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81094da:	e065      	b.n	81095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81094dc:	697b      	ldr	r3, [r7, #20]
 81094de:	ee07 3a90 	vmov	s15, r3
 81094e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81094e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8109664 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81094ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81094ee:	4b59      	ldr	r3, [pc, #356]	; (8109654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81094f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81094f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81094f6:	ee07 3a90 	vmov	s15, r3
 81094fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81094fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8109502:	eddf 5a56 	vldr	s11, [pc, #344]	; 810965c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810950a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810950e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109516:	ee67 7a27 	vmul.f32	s15, s14, s15
 810951a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810951e:	e043      	b.n	81095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109520:	697b      	ldr	r3, [r7, #20]
 8109522:	ee07 3a90 	vmov	s15, r3
 8109526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810952a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8109668 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810952e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109532:	4b48      	ldr	r3, [pc, #288]	; (8109654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810953a:	ee07 3a90 	vmov	s15, r3
 810953e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109542:	ed97 6a03 	vldr	s12, [r7, #12]
 8109546:	eddf 5a45 	vldr	s11, [pc, #276]	; 810965c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810954a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810954e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810955a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810955e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109562:	e021      	b.n	81095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109564:	697b      	ldr	r3, [r7, #20]
 8109566:	ee07 3a90 	vmov	s15, r3
 810956a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810956e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8109664 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8109572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109576:	4b37      	ldr	r3, [pc, #220]	; (8109654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810957a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810957e:	ee07 3a90 	vmov	s15, r3
 8109582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109586:	ed97 6a03 	vldr	s12, [r7, #12]
 810958a:	eddf 5a34 	vldr	s11, [pc, #208]	; 810965c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810958e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810959a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810959e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81095a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81095a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81095a8:	4b2a      	ldr	r3, [pc, #168]	; (8109654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81095aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81095ac:	0a5b      	lsrs	r3, r3, #9
 81095ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81095b2:	ee07 3a90 	vmov	s15, r3
 81095b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81095ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81095be:	ee37 7a87 	vadd.f32	s14, s15, s14
 81095c2:	edd7 6a07 	vldr	s13, [r7, #28]
 81095c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81095ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81095ce:	ee17 2a90 	vmov	r2, s15
 81095d2:	687b      	ldr	r3, [r7, #4]
 81095d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81095d6:	4b1f      	ldr	r3, [pc, #124]	; (8109654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81095d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81095da:	0c1b      	lsrs	r3, r3, #16
 81095dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81095e0:	ee07 3a90 	vmov	s15, r3
 81095e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81095e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81095ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 81095f0:	edd7 6a07 	vldr	s13, [r7, #28]
 81095f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81095f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81095fc:	ee17 2a90 	vmov	r2, s15
 8109600:	687b      	ldr	r3, [r7, #4]
 8109602:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8109604:	4b13      	ldr	r3, [pc, #76]	; (8109654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109608:	0e1b      	lsrs	r3, r3, #24
 810960a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810960e:	ee07 3a90 	vmov	s15, r3
 8109612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810961a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810961e:	edd7 6a07 	vldr	s13, [r7, #28]
 8109622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810962a:	ee17 2a90 	vmov	r2, s15
 810962e:	687b      	ldr	r3, [r7, #4]
 8109630:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8109632:	e008      	b.n	8109646 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8109634:	687b      	ldr	r3, [r7, #4]
 8109636:	2200      	movs	r2, #0
 8109638:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810963a:	687b      	ldr	r3, [r7, #4]
 810963c:	2200      	movs	r2, #0
 810963e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8109640:	687b      	ldr	r3, [r7, #4]
 8109642:	2200      	movs	r2, #0
 8109644:	609a      	str	r2, [r3, #8]
}
 8109646:	bf00      	nop
 8109648:	3724      	adds	r7, #36	; 0x24
 810964a:	46bd      	mov	sp, r7
 810964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109650:	4770      	bx	lr
 8109652:	bf00      	nop
 8109654:	58024400 	.word	0x58024400
 8109658:	03d09000 	.word	0x03d09000
 810965c:	46000000 	.word	0x46000000
 8109660:	4c742400 	.word	0x4c742400
 8109664:	4a742400 	.word	0x4a742400
 8109668:	4af42400 	.word	0x4af42400

0810966c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810966c:	b580      	push	{r7, lr}
 810966e:	b084      	sub	sp, #16
 8109670:	af00      	add	r7, sp, #0
 8109672:	6078      	str	r0, [r7, #4]
 8109674:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8109676:	2300      	movs	r3, #0
 8109678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810967a:	4b54      	ldr	r3, [pc, #336]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 810967c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810967e:	f003 0303 	and.w	r3, r3, #3
 8109682:	2b03      	cmp	r3, #3
 8109684:	d101      	bne.n	810968a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8109686:	2301      	movs	r3, #1
 8109688:	e09b      	b.n	81097c2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810968a:	4b50      	ldr	r3, [pc, #320]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 810968c:	681b      	ldr	r3, [r3, #0]
 810968e:	4a4f      	ldr	r2, [pc, #316]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109690:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8109694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109696:	f7fb ff89 	bl	81055ac <HAL_GetTick>
 810969a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810969c:	e008      	b.n	81096b0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810969e:	f7fb ff85 	bl	81055ac <HAL_GetTick>
 81096a2:	4602      	mov	r2, r0
 81096a4:	68bb      	ldr	r3, [r7, #8]
 81096a6:	1ad3      	subs	r3, r2, r3
 81096a8:	2b02      	cmp	r3, #2
 81096aa:	d901      	bls.n	81096b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81096ac:	2303      	movs	r3, #3
 81096ae:	e088      	b.n	81097c2 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81096b0:	4b46      	ldr	r3, [pc, #280]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 81096b2:	681b      	ldr	r3, [r3, #0]
 81096b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81096b8:	2b00      	cmp	r3, #0
 81096ba:	d1f0      	bne.n	810969e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81096bc:	4b43      	ldr	r3, [pc, #268]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 81096be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81096c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81096c4:	687b      	ldr	r3, [r7, #4]
 81096c6:	681b      	ldr	r3, [r3, #0]
 81096c8:	031b      	lsls	r3, r3, #12
 81096ca:	4940      	ldr	r1, [pc, #256]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 81096cc:	4313      	orrs	r3, r2
 81096ce:	628b      	str	r3, [r1, #40]	; 0x28
 81096d0:	687b      	ldr	r3, [r7, #4]
 81096d2:	685b      	ldr	r3, [r3, #4]
 81096d4:	3b01      	subs	r3, #1
 81096d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81096da:	687b      	ldr	r3, [r7, #4]
 81096dc:	689b      	ldr	r3, [r3, #8]
 81096de:	3b01      	subs	r3, #1
 81096e0:	025b      	lsls	r3, r3, #9
 81096e2:	b29b      	uxth	r3, r3
 81096e4:	431a      	orrs	r2, r3
 81096e6:	687b      	ldr	r3, [r7, #4]
 81096e8:	68db      	ldr	r3, [r3, #12]
 81096ea:	3b01      	subs	r3, #1
 81096ec:	041b      	lsls	r3, r3, #16
 81096ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81096f2:	431a      	orrs	r2, r3
 81096f4:	687b      	ldr	r3, [r7, #4]
 81096f6:	691b      	ldr	r3, [r3, #16]
 81096f8:	3b01      	subs	r3, #1
 81096fa:	061b      	lsls	r3, r3, #24
 81096fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8109700:	4932      	ldr	r1, [pc, #200]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109702:	4313      	orrs	r3, r2
 8109704:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8109706:	4b31      	ldr	r3, [pc, #196]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810970a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810970e:	687b      	ldr	r3, [r7, #4]
 8109710:	695b      	ldr	r3, [r3, #20]
 8109712:	492e      	ldr	r1, [pc, #184]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109714:	4313      	orrs	r3, r2
 8109716:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8109718:	4b2c      	ldr	r3, [pc, #176]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 810971a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810971c:	f023 0220 	bic.w	r2, r3, #32
 8109720:	687b      	ldr	r3, [r7, #4]
 8109722:	699b      	ldr	r3, [r3, #24]
 8109724:	4929      	ldr	r1, [pc, #164]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109726:	4313      	orrs	r3, r2
 8109728:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810972a:	4b28      	ldr	r3, [pc, #160]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 810972c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810972e:	4a27      	ldr	r2, [pc, #156]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109730:	f023 0310 	bic.w	r3, r3, #16
 8109734:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8109736:	4b25      	ldr	r3, [pc, #148]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810973a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810973e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8109742:	687a      	ldr	r2, [r7, #4]
 8109744:	69d2      	ldr	r2, [r2, #28]
 8109746:	00d2      	lsls	r2, r2, #3
 8109748:	4920      	ldr	r1, [pc, #128]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 810974a:	4313      	orrs	r3, r2
 810974c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810974e:	4b1f      	ldr	r3, [pc, #124]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109752:	4a1e      	ldr	r2, [pc, #120]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109754:	f043 0310 	orr.w	r3, r3, #16
 8109758:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810975a:	683b      	ldr	r3, [r7, #0]
 810975c:	2b00      	cmp	r3, #0
 810975e:	d106      	bne.n	810976e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8109760:	4b1a      	ldr	r3, [pc, #104]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109764:	4a19      	ldr	r2, [pc, #100]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109766:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810976a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810976c:	e00f      	b.n	810978e <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810976e:	683b      	ldr	r3, [r7, #0]
 8109770:	2b01      	cmp	r3, #1
 8109772:	d106      	bne.n	8109782 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8109774:	4b15      	ldr	r3, [pc, #84]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109778:	4a14      	ldr	r2, [pc, #80]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 810977a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810977e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109780:	e005      	b.n	810978e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8109782:	4b12      	ldr	r3, [pc, #72]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109786:	4a11      	ldr	r2, [pc, #68]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109788:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810978c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810978e:	4b0f      	ldr	r3, [pc, #60]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109790:	681b      	ldr	r3, [r3, #0]
 8109792:	4a0e      	ldr	r2, [pc, #56]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 8109794:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8109798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810979a:	f7fb ff07 	bl	81055ac <HAL_GetTick>
 810979e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81097a0:	e008      	b.n	81097b4 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81097a2:	f7fb ff03 	bl	81055ac <HAL_GetTick>
 81097a6:	4602      	mov	r2, r0
 81097a8:	68bb      	ldr	r3, [r7, #8]
 81097aa:	1ad3      	subs	r3, r2, r3
 81097ac:	2b02      	cmp	r3, #2
 81097ae:	d901      	bls.n	81097b4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81097b0:	2303      	movs	r3, #3
 81097b2:	e006      	b.n	81097c2 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81097b4:	4b05      	ldr	r3, [pc, #20]	; (81097cc <RCCEx_PLL2_Config+0x160>)
 81097b6:	681b      	ldr	r3, [r3, #0]
 81097b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81097bc:	2b00      	cmp	r3, #0
 81097be:	d0f0      	beq.n	81097a2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81097c0:	7bfb      	ldrb	r3, [r7, #15]
}
 81097c2:	4618      	mov	r0, r3
 81097c4:	3710      	adds	r7, #16
 81097c6:	46bd      	mov	sp, r7
 81097c8:	bd80      	pop	{r7, pc}
 81097ca:	bf00      	nop
 81097cc:	58024400 	.word	0x58024400

081097d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81097d0:	b580      	push	{r7, lr}
 81097d2:	b084      	sub	sp, #16
 81097d4:	af00      	add	r7, sp, #0
 81097d6:	6078      	str	r0, [r7, #4]
 81097d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81097da:	2300      	movs	r3, #0
 81097dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81097de:	4b54      	ldr	r3, [pc, #336]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 81097e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81097e2:	f003 0303 	and.w	r3, r3, #3
 81097e6:	2b03      	cmp	r3, #3
 81097e8:	d101      	bne.n	81097ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81097ea:	2301      	movs	r3, #1
 81097ec:	e09b      	b.n	8109926 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81097ee:	4b50      	ldr	r3, [pc, #320]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 81097f0:	681b      	ldr	r3, [r3, #0]
 81097f2:	4a4f      	ldr	r2, [pc, #316]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 81097f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81097f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81097fa:	f7fb fed7 	bl	81055ac <HAL_GetTick>
 81097fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8109800:	e008      	b.n	8109814 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8109802:	f7fb fed3 	bl	81055ac <HAL_GetTick>
 8109806:	4602      	mov	r2, r0
 8109808:	68bb      	ldr	r3, [r7, #8]
 810980a:	1ad3      	subs	r3, r2, r3
 810980c:	2b02      	cmp	r3, #2
 810980e:	d901      	bls.n	8109814 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8109810:	2303      	movs	r3, #3
 8109812:	e088      	b.n	8109926 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8109814:	4b46      	ldr	r3, [pc, #280]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 8109816:	681b      	ldr	r3, [r3, #0]
 8109818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810981c:	2b00      	cmp	r3, #0
 810981e:	d1f0      	bne.n	8109802 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8109820:	4b43      	ldr	r3, [pc, #268]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 8109822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109824:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8109828:	687b      	ldr	r3, [r7, #4]
 810982a:	681b      	ldr	r3, [r3, #0]
 810982c:	051b      	lsls	r3, r3, #20
 810982e:	4940      	ldr	r1, [pc, #256]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 8109830:	4313      	orrs	r3, r2
 8109832:	628b      	str	r3, [r1, #40]	; 0x28
 8109834:	687b      	ldr	r3, [r7, #4]
 8109836:	685b      	ldr	r3, [r3, #4]
 8109838:	3b01      	subs	r3, #1
 810983a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810983e:	687b      	ldr	r3, [r7, #4]
 8109840:	689b      	ldr	r3, [r3, #8]
 8109842:	3b01      	subs	r3, #1
 8109844:	025b      	lsls	r3, r3, #9
 8109846:	b29b      	uxth	r3, r3
 8109848:	431a      	orrs	r2, r3
 810984a:	687b      	ldr	r3, [r7, #4]
 810984c:	68db      	ldr	r3, [r3, #12]
 810984e:	3b01      	subs	r3, #1
 8109850:	041b      	lsls	r3, r3, #16
 8109852:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8109856:	431a      	orrs	r2, r3
 8109858:	687b      	ldr	r3, [r7, #4]
 810985a:	691b      	ldr	r3, [r3, #16]
 810985c:	3b01      	subs	r3, #1
 810985e:	061b      	lsls	r3, r3, #24
 8109860:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8109864:	4932      	ldr	r1, [pc, #200]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 8109866:	4313      	orrs	r3, r2
 8109868:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810986a:	4b31      	ldr	r3, [pc, #196]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 810986c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810986e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8109872:	687b      	ldr	r3, [r7, #4]
 8109874:	695b      	ldr	r3, [r3, #20]
 8109876:	492e      	ldr	r1, [pc, #184]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 8109878:	4313      	orrs	r3, r2
 810987a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810987c:	4b2c      	ldr	r3, [pc, #176]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 810987e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109880:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8109884:	687b      	ldr	r3, [r7, #4]
 8109886:	699b      	ldr	r3, [r3, #24]
 8109888:	4929      	ldr	r1, [pc, #164]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 810988a:	4313      	orrs	r3, r2
 810988c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810988e:	4b28      	ldr	r3, [pc, #160]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 8109890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109892:	4a27      	ldr	r2, [pc, #156]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 8109894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8109898:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810989a:	4b25      	ldr	r3, [pc, #148]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 810989c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810989e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81098a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81098a6:	687a      	ldr	r2, [r7, #4]
 81098a8:	69d2      	ldr	r2, [r2, #28]
 81098aa:	00d2      	lsls	r2, r2, #3
 81098ac:	4920      	ldr	r1, [pc, #128]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 81098ae:	4313      	orrs	r3, r2
 81098b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81098b2:	4b1f      	ldr	r3, [pc, #124]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 81098b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81098b6:	4a1e      	ldr	r2, [pc, #120]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 81098b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81098bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81098be:	683b      	ldr	r3, [r7, #0]
 81098c0:	2b00      	cmp	r3, #0
 81098c2:	d106      	bne.n	81098d2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81098c4:	4b1a      	ldr	r3, [pc, #104]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 81098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81098c8:	4a19      	ldr	r2, [pc, #100]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 81098ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81098ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 81098d0:	e00f      	b.n	81098f2 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81098d2:	683b      	ldr	r3, [r7, #0]
 81098d4:	2b01      	cmp	r3, #1
 81098d6:	d106      	bne.n	81098e6 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81098d8:	4b15      	ldr	r3, [pc, #84]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 81098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81098dc:	4a14      	ldr	r2, [pc, #80]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 81098de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81098e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81098e4:	e005      	b.n	81098f2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81098e6:	4b12      	ldr	r3, [pc, #72]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 81098e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81098ea:	4a11      	ldr	r2, [pc, #68]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 81098ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81098f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81098f2:	4b0f      	ldr	r3, [pc, #60]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 81098f4:	681b      	ldr	r3, [r3, #0]
 81098f6:	4a0e      	ldr	r2, [pc, #56]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 81098f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81098fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81098fe:	f7fb fe55 	bl	81055ac <HAL_GetTick>
 8109902:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109904:	e008      	b.n	8109918 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8109906:	f7fb fe51 	bl	81055ac <HAL_GetTick>
 810990a:	4602      	mov	r2, r0
 810990c:	68bb      	ldr	r3, [r7, #8]
 810990e:	1ad3      	subs	r3, r2, r3
 8109910:	2b02      	cmp	r3, #2
 8109912:	d901      	bls.n	8109918 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8109914:	2303      	movs	r3, #3
 8109916:	e006      	b.n	8109926 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109918:	4b05      	ldr	r3, [pc, #20]	; (8109930 <RCCEx_PLL3_Config+0x160>)
 810991a:	681b      	ldr	r3, [r3, #0]
 810991c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8109920:	2b00      	cmp	r3, #0
 8109922:	d0f0      	beq.n	8109906 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8109924:	7bfb      	ldrb	r3, [r7, #15]
}
 8109926:	4618      	mov	r0, r3
 8109928:	3710      	adds	r7, #16
 810992a:	46bd      	mov	sp, r7
 810992c:	bd80      	pop	{r7, pc}
 810992e:	bf00      	nop
 8109930:	58024400 	.word	0x58024400

08109934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8109934:	b580      	push	{r7, lr}
 8109936:	b082      	sub	sp, #8
 8109938:	af00      	add	r7, sp, #0
 810993a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810993c:	687b      	ldr	r3, [r7, #4]
 810993e:	2b00      	cmp	r3, #0
 8109940:	d101      	bne.n	8109946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8109942:	2301      	movs	r3, #1
 8109944:	e042      	b.n	81099cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8109946:	687b      	ldr	r3, [r7, #4]
 8109948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810994c:	2b00      	cmp	r3, #0
 810994e:	d106      	bne.n	810995e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8109950:	687b      	ldr	r3, [r7, #4]
 8109952:	2200      	movs	r2, #0
 8109954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8109958:	6878      	ldr	r0, [r7, #4]
 810995a:	f7fb fc31 	bl	81051c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810995e:	687b      	ldr	r3, [r7, #4]
 8109960:	2224      	movs	r2, #36	; 0x24
 8109962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8109966:	687b      	ldr	r3, [r7, #4]
 8109968:	681b      	ldr	r3, [r3, #0]
 810996a:	681a      	ldr	r2, [r3, #0]
 810996c:	687b      	ldr	r3, [r7, #4]
 810996e:	681b      	ldr	r3, [r3, #0]
 8109970:	f022 0201 	bic.w	r2, r2, #1
 8109974:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8109976:	6878      	ldr	r0, [r7, #4]
 8109978:	f000 f942 	bl	8109c00 <UART_SetConfig>
 810997c:	4603      	mov	r3, r0
 810997e:	2b01      	cmp	r3, #1
 8109980:	d101      	bne.n	8109986 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8109982:	2301      	movs	r3, #1
 8109984:	e022      	b.n	81099cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8109986:	687b      	ldr	r3, [r7, #4]
 8109988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810998a:	2b00      	cmp	r3, #0
 810998c:	d002      	beq.n	8109994 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810998e:	6878      	ldr	r0, [r7, #4]
 8109990:	f000 fe9e 	bl	810a6d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8109994:	687b      	ldr	r3, [r7, #4]
 8109996:	681b      	ldr	r3, [r3, #0]
 8109998:	685a      	ldr	r2, [r3, #4]
 810999a:	687b      	ldr	r3, [r7, #4]
 810999c:	681b      	ldr	r3, [r3, #0]
 810999e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81099a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81099a4:	687b      	ldr	r3, [r7, #4]
 81099a6:	681b      	ldr	r3, [r3, #0]
 81099a8:	689a      	ldr	r2, [r3, #8]
 81099aa:	687b      	ldr	r3, [r7, #4]
 81099ac:	681b      	ldr	r3, [r3, #0]
 81099ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81099b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81099b4:	687b      	ldr	r3, [r7, #4]
 81099b6:	681b      	ldr	r3, [r3, #0]
 81099b8:	681a      	ldr	r2, [r3, #0]
 81099ba:	687b      	ldr	r3, [r7, #4]
 81099bc:	681b      	ldr	r3, [r3, #0]
 81099be:	f042 0201 	orr.w	r2, r2, #1
 81099c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81099c4:	6878      	ldr	r0, [r7, #4]
 81099c6:	f000 ff25 	bl	810a814 <UART_CheckIdleState>
 81099ca:	4603      	mov	r3, r0
}
 81099cc:	4618      	mov	r0, r3
 81099ce:	3708      	adds	r7, #8
 81099d0:	46bd      	mov	sp, r7
 81099d2:	bd80      	pop	{r7, pc}

081099d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81099d4:	b580      	push	{r7, lr}
 81099d6:	b08a      	sub	sp, #40	; 0x28
 81099d8:	af02      	add	r7, sp, #8
 81099da:	60f8      	str	r0, [r7, #12]
 81099dc:	60b9      	str	r1, [r7, #8]
 81099de:	603b      	str	r3, [r7, #0]
 81099e0:	4613      	mov	r3, r2
 81099e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81099e4:	68fb      	ldr	r3, [r7, #12]
 81099e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81099ea:	2b20      	cmp	r3, #32
 81099ec:	f040 8083 	bne.w	8109af6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 81099f0:	68bb      	ldr	r3, [r7, #8]
 81099f2:	2b00      	cmp	r3, #0
 81099f4:	d002      	beq.n	81099fc <HAL_UART_Transmit+0x28>
 81099f6:	88fb      	ldrh	r3, [r7, #6]
 81099f8:	2b00      	cmp	r3, #0
 81099fa:	d101      	bne.n	8109a00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 81099fc:	2301      	movs	r3, #1
 81099fe:	e07b      	b.n	8109af8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8109a00:	68fb      	ldr	r3, [r7, #12]
 8109a02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109a06:	2b01      	cmp	r3, #1
 8109a08:	d101      	bne.n	8109a0e <HAL_UART_Transmit+0x3a>
 8109a0a:	2302      	movs	r3, #2
 8109a0c:	e074      	b.n	8109af8 <HAL_UART_Transmit+0x124>
 8109a0e:	68fb      	ldr	r3, [r7, #12]
 8109a10:	2201      	movs	r2, #1
 8109a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109a16:	68fb      	ldr	r3, [r7, #12]
 8109a18:	2200      	movs	r2, #0
 8109a1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8109a1e:	68fb      	ldr	r3, [r7, #12]
 8109a20:	2221      	movs	r2, #33	; 0x21
 8109a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8109a26:	f7fb fdc1 	bl	81055ac <HAL_GetTick>
 8109a2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8109a2c:	68fb      	ldr	r3, [r7, #12]
 8109a2e:	88fa      	ldrh	r2, [r7, #6]
 8109a30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8109a34:	68fb      	ldr	r3, [r7, #12]
 8109a36:	88fa      	ldrh	r2, [r7, #6]
 8109a38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8109a3c:	68fb      	ldr	r3, [r7, #12]
 8109a3e:	689b      	ldr	r3, [r3, #8]
 8109a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109a44:	d108      	bne.n	8109a58 <HAL_UART_Transmit+0x84>
 8109a46:	68fb      	ldr	r3, [r7, #12]
 8109a48:	691b      	ldr	r3, [r3, #16]
 8109a4a:	2b00      	cmp	r3, #0
 8109a4c:	d104      	bne.n	8109a58 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8109a4e:	2300      	movs	r3, #0
 8109a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8109a52:	68bb      	ldr	r3, [r7, #8]
 8109a54:	61bb      	str	r3, [r7, #24]
 8109a56:	e003      	b.n	8109a60 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8109a58:	68bb      	ldr	r3, [r7, #8]
 8109a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8109a5c:	2300      	movs	r3, #0
 8109a5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8109a60:	68fb      	ldr	r3, [r7, #12]
 8109a62:	2200      	movs	r2, #0
 8109a64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8109a68:	e02c      	b.n	8109ac4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8109a6a:	683b      	ldr	r3, [r7, #0]
 8109a6c:	9300      	str	r3, [sp, #0]
 8109a6e:	697b      	ldr	r3, [r7, #20]
 8109a70:	2200      	movs	r2, #0
 8109a72:	2180      	movs	r1, #128	; 0x80
 8109a74:	68f8      	ldr	r0, [r7, #12]
 8109a76:	f000 ff18 	bl	810a8aa <UART_WaitOnFlagUntilTimeout>
 8109a7a:	4603      	mov	r3, r0
 8109a7c:	2b00      	cmp	r3, #0
 8109a7e:	d001      	beq.n	8109a84 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8109a80:	2303      	movs	r3, #3
 8109a82:	e039      	b.n	8109af8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8109a84:	69fb      	ldr	r3, [r7, #28]
 8109a86:	2b00      	cmp	r3, #0
 8109a88:	d10b      	bne.n	8109aa2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8109a8a:	69bb      	ldr	r3, [r7, #24]
 8109a8c:	881b      	ldrh	r3, [r3, #0]
 8109a8e:	461a      	mov	r2, r3
 8109a90:	68fb      	ldr	r3, [r7, #12]
 8109a92:	681b      	ldr	r3, [r3, #0]
 8109a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8109a98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8109a9a:	69bb      	ldr	r3, [r7, #24]
 8109a9c:	3302      	adds	r3, #2
 8109a9e:	61bb      	str	r3, [r7, #24]
 8109aa0:	e007      	b.n	8109ab2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8109aa2:	69fb      	ldr	r3, [r7, #28]
 8109aa4:	781a      	ldrb	r2, [r3, #0]
 8109aa6:	68fb      	ldr	r3, [r7, #12]
 8109aa8:	681b      	ldr	r3, [r3, #0]
 8109aaa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8109aac:	69fb      	ldr	r3, [r7, #28]
 8109aae:	3301      	adds	r3, #1
 8109ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8109ab2:	68fb      	ldr	r3, [r7, #12]
 8109ab4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8109ab8:	b29b      	uxth	r3, r3
 8109aba:	3b01      	subs	r3, #1
 8109abc:	b29a      	uxth	r2, r3
 8109abe:	68fb      	ldr	r3, [r7, #12]
 8109ac0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8109ac4:	68fb      	ldr	r3, [r7, #12]
 8109ac6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8109aca:	b29b      	uxth	r3, r3
 8109acc:	2b00      	cmp	r3, #0
 8109ace:	d1cc      	bne.n	8109a6a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8109ad0:	683b      	ldr	r3, [r7, #0]
 8109ad2:	9300      	str	r3, [sp, #0]
 8109ad4:	697b      	ldr	r3, [r7, #20]
 8109ad6:	2200      	movs	r2, #0
 8109ad8:	2140      	movs	r1, #64	; 0x40
 8109ada:	68f8      	ldr	r0, [r7, #12]
 8109adc:	f000 fee5 	bl	810a8aa <UART_WaitOnFlagUntilTimeout>
 8109ae0:	4603      	mov	r3, r0
 8109ae2:	2b00      	cmp	r3, #0
 8109ae4:	d001      	beq.n	8109aea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8109ae6:	2303      	movs	r3, #3
 8109ae8:	e006      	b.n	8109af8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8109aea:	68fb      	ldr	r3, [r7, #12]
 8109aec:	2220      	movs	r2, #32
 8109aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8109af2:	2300      	movs	r3, #0
 8109af4:	e000      	b.n	8109af8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8109af6:	2302      	movs	r3, #2
  }
}
 8109af8:	4618      	mov	r0, r3
 8109afa:	3720      	adds	r7, #32
 8109afc:	46bd      	mov	sp, r7
 8109afe:	bd80      	pop	{r7, pc}

08109b00 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8109b00:	b580      	push	{r7, lr}
 8109b02:	b08a      	sub	sp, #40	; 0x28
 8109b04:	af00      	add	r7, sp, #0
 8109b06:	60f8      	str	r0, [r7, #12]
 8109b08:	60b9      	str	r1, [r7, #8]
 8109b0a:	4613      	mov	r3, r2
 8109b0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8109b0e:	68fb      	ldr	r3, [r7, #12]
 8109b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8109b14:	2b20      	cmp	r3, #32
 8109b16:	d142      	bne.n	8109b9e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8109b18:	68bb      	ldr	r3, [r7, #8]
 8109b1a:	2b00      	cmp	r3, #0
 8109b1c:	d002      	beq.n	8109b24 <HAL_UART_Receive_DMA+0x24>
 8109b1e:	88fb      	ldrh	r3, [r7, #6]
 8109b20:	2b00      	cmp	r3, #0
 8109b22:	d101      	bne.n	8109b28 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8109b24:	2301      	movs	r3, #1
 8109b26:	e03b      	b.n	8109ba0 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8109b28:	68fb      	ldr	r3, [r7, #12]
 8109b2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109b2e:	2b01      	cmp	r3, #1
 8109b30:	d101      	bne.n	8109b36 <HAL_UART_Receive_DMA+0x36>
 8109b32:	2302      	movs	r3, #2
 8109b34:	e034      	b.n	8109ba0 <HAL_UART_Receive_DMA+0xa0>
 8109b36:	68fb      	ldr	r3, [r7, #12]
 8109b38:	2201      	movs	r2, #1
 8109b3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109b3e:	68fb      	ldr	r3, [r7, #12]
 8109b40:	2200      	movs	r2, #0
 8109b42:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8109b44:	68fb      	ldr	r3, [r7, #12]
 8109b46:	681b      	ldr	r3, [r3, #0]
 8109b48:	4a17      	ldr	r2, [pc, #92]	; (8109ba8 <HAL_UART_Receive_DMA+0xa8>)
 8109b4a:	4293      	cmp	r3, r2
 8109b4c:	d01f      	beq.n	8109b8e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8109b4e:	68fb      	ldr	r3, [r7, #12]
 8109b50:	681b      	ldr	r3, [r3, #0]
 8109b52:	685b      	ldr	r3, [r3, #4]
 8109b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8109b58:	2b00      	cmp	r3, #0
 8109b5a:	d018      	beq.n	8109b8e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8109b5c:	68fb      	ldr	r3, [r7, #12]
 8109b5e:	681b      	ldr	r3, [r3, #0]
 8109b60:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109b62:	697b      	ldr	r3, [r7, #20]
 8109b64:	e853 3f00 	ldrex	r3, [r3]
 8109b68:	613b      	str	r3, [r7, #16]
   return(result);
 8109b6a:	693b      	ldr	r3, [r7, #16]
 8109b6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8109b70:	627b      	str	r3, [r7, #36]	; 0x24
 8109b72:	68fb      	ldr	r3, [r7, #12]
 8109b74:	681b      	ldr	r3, [r3, #0]
 8109b76:	461a      	mov	r2, r3
 8109b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109b7a:	623b      	str	r3, [r7, #32]
 8109b7c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109b7e:	69f9      	ldr	r1, [r7, #28]
 8109b80:	6a3a      	ldr	r2, [r7, #32]
 8109b82:	e841 2300 	strex	r3, r2, [r1]
 8109b86:	61bb      	str	r3, [r7, #24]
   return(result);
 8109b88:	69bb      	ldr	r3, [r7, #24]
 8109b8a:	2b00      	cmp	r3, #0
 8109b8c:	d1e6      	bne.n	8109b5c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8109b8e:	88fb      	ldrh	r3, [r7, #6]
 8109b90:	461a      	mov	r2, r3
 8109b92:	68b9      	ldr	r1, [r7, #8]
 8109b94:	68f8      	ldr	r0, [r7, #12]
 8109b96:	f000 ff51 	bl	810aa3c <UART_Start_Receive_DMA>
 8109b9a:	4603      	mov	r3, r0
 8109b9c:	e000      	b.n	8109ba0 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8109b9e:	2302      	movs	r3, #2
  }
}
 8109ba0:	4618      	mov	r0, r3
 8109ba2:	3728      	adds	r7, #40	; 0x28
 8109ba4:	46bd      	mov	sp, r7
 8109ba6:	bd80      	pop	{r7, pc}
 8109ba8:	58000c00 	.word	0x58000c00

08109bac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8109bac:	b480      	push	{r7}
 8109bae:	b083      	sub	sp, #12
 8109bb0:	af00      	add	r7, sp, #0
 8109bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8109bb4:	bf00      	nop
 8109bb6:	370c      	adds	r7, #12
 8109bb8:	46bd      	mov	sp, r7
 8109bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109bbe:	4770      	bx	lr

08109bc0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8109bc0:	b480      	push	{r7}
 8109bc2:	b083      	sub	sp, #12
 8109bc4:	af00      	add	r7, sp, #0
 8109bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8109bc8:	bf00      	nop
 8109bca:	370c      	adds	r7, #12
 8109bcc:	46bd      	mov	sp, r7
 8109bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109bd2:	4770      	bx	lr

08109bd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8109bd4:	b480      	push	{r7}
 8109bd6:	b083      	sub	sp, #12
 8109bd8:	af00      	add	r7, sp, #0
 8109bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8109bdc:	bf00      	nop
 8109bde:	370c      	adds	r7, #12
 8109be0:	46bd      	mov	sp, r7
 8109be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109be6:	4770      	bx	lr

08109be8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8109be8:	b480      	push	{r7}
 8109bea:	b083      	sub	sp, #12
 8109bec:	af00      	add	r7, sp, #0
 8109bee:	6078      	str	r0, [r7, #4]
 8109bf0:	460b      	mov	r3, r1
 8109bf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8109bf4:	bf00      	nop
 8109bf6:	370c      	adds	r7, #12
 8109bf8:	46bd      	mov	sp, r7
 8109bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109bfe:	4770      	bx	lr

08109c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8109c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8109c04:	b092      	sub	sp, #72	; 0x48
 8109c06:	af00      	add	r7, sp, #0
 8109c08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8109c0a:	2300      	movs	r3, #0
 8109c0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8109c10:	697b      	ldr	r3, [r7, #20]
 8109c12:	689a      	ldr	r2, [r3, #8]
 8109c14:	697b      	ldr	r3, [r7, #20]
 8109c16:	691b      	ldr	r3, [r3, #16]
 8109c18:	431a      	orrs	r2, r3
 8109c1a:	697b      	ldr	r3, [r7, #20]
 8109c1c:	695b      	ldr	r3, [r3, #20]
 8109c1e:	431a      	orrs	r2, r3
 8109c20:	697b      	ldr	r3, [r7, #20]
 8109c22:	69db      	ldr	r3, [r3, #28]
 8109c24:	4313      	orrs	r3, r2
 8109c26:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8109c28:	697b      	ldr	r3, [r7, #20]
 8109c2a:	681b      	ldr	r3, [r3, #0]
 8109c2c:	681a      	ldr	r2, [r3, #0]
 8109c2e:	4bbd      	ldr	r3, [pc, #756]	; (8109f24 <UART_SetConfig+0x324>)
 8109c30:	4013      	ands	r3, r2
 8109c32:	697a      	ldr	r2, [r7, #20]
 8109c34:	6812      	ldr	r2, [r2, #0]
 8109c36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8109c38:	430b      	orrs	r3, r1
 8109c3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8109c3c:	697b      	ldr	r3, [r7, #20]
 8109c3e:	681b      	ldr	r3, [r3, #0]
 8109c40:	685b      	ldr	r3, [r3, #4]
 8109c42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8109c46:	697b      	ldr	r3, [r7, #20]
 8109c48:	68da      	ldr	r2, [r3, #12]
 8109c4a:	697b      	ldr	r3, [r7, #20]
 8109c4c:	681b      	ldr	r3, [r3, #0]
 8109c4e:	430a      	orrs	r2, r1
 8109c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8109c52:	697b      	ldr	r3, [r7, #20]
 8109c54:	699b      	ldr	r3, [r3, #24]
 8109c56:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8109c58:	697b      	ldr	r3, [r7, #20]
 8109c5a:	681b      	ldr	r3, [r3, #0]
 8109c5c:	4ab2      	ldr	r2, [pc, #712]	; (8109f28 <UART_SetConfig+0x328>)
 8109c5e:	4293      	cmp	r3, r2
 8109c60:	d004      	beq.n	8109c6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8109c62:	697b      	ldr	r3, [r7, #20]
 8109c64:	6a1b      	ldr	r3, [r3, #32]
 8109c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8109c68:	4313      	orrs	r3, r2
 8109c6a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8109c6c:	697b      	ldr	r3, [r7, #20]
 8109c6e:	681b      	ldr	r3, [r3, #0]
 8109c70:	689b      	ldr	r3, [r3, #8]
 8109c72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8109c76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8109c7a:	697a      	ldr	r2, [r7, #20]
 8109c7c:	6812      	ldr	r2, [r2, #0]
 8109c7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8109c80:	430b      	orrs	r3, r1
 8109c82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8109c84:	697b      	ldr	r3, [r7, #20]
 8109c86:	681b      	ldr	r3, [r3, #0]
 8109c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109c8a:	f023 010f 	bic.w	r1, r3, #15
 8109c8e:	697b      	ldr	r3, [r7, #20]
 8109c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8109c92:	697b      	ldr	r3, [r7, #20]
 8109c94:	681b      	ldr	r3, [r3, #0]
 8109c96:	430a      	orrs	r2, r1
 8109c98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8109c9a:	697b      	ldr	r3, [r7, #20]
 8109c9c:	681b      	ldr	r3, [r3, #0]
 8109c9e:	4aa3      	ldr	r2, [pc, #652]	; (8109f2c <UART_SetConfig+0x32c>)
 8109ca0:	4293      	cmp	r3, r2
 8109ca2:	d177      	bne.n	8109d94 <UART_SetConfig+0x194>
 8109ca4:	4ba2      	ldr	r3, [pc, #648]	; (8109f30 <UART_SetConfig+0x330>)
 8109ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109ca8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109cac:	2b28      	cmp	r3, #40	; 0x28
 8109cae:	d86d      	bhi.n	8109d8c <UART_SetConfig+0x18c>
 8109cb0:	a201      	add	r2, pc, #4	; (adr r2, 8109cb8 <UART_SetConfig+0xb8>)
 8109cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109cb6:	bf00      	nop
 8109cb8:	08109d5d 	.word	0x08109d5d
 8109cbc:	08109d8d 	.word	0x08109d8d
 8109cc0:	08109d8d 	.word	0x08109d8d
 8109cc4:	08109d8d 	.word	0x08109d8d
 8109cc8:	08109d8d 	.word	0x08109d8d
 8109ccc:	08109d8d 	.word	0x08109d8d
 8109cd0:	08109d8d 	.word	0x08109d8d
 8109cd4:	08109d8d 	.word	0x08109d8d
 8109cd8:	08109d65 	.word	0x08109d65
 8109cdc:	08109d8d 	.word	0x08109d8d
 8109ce0:	08109d8d 	.word	0x08109d8d
 8109ce4:	08109d8d 	.word	0x08109d8d
 8109ce8:	08109d8d 	.word	0x08109d8d
 8109cec:	08109d8d 	.word	0x08109d8d
 8109cf0:	08109d8d 	.word	0x08109d8d
 8109cf4:	08109d8d 	.word	0x08109d8d
 8109cf8:	08109d6d 	.word	0x08109d6d
 8109cfc:	08109d8d 	.word	0x08109d8d
 8109d00:	08109d8d 	.word	0x08109d8d
 8109d04:	08109d8d 	.word	0x08109d8d
 8109d08:	08109d8d 	.word	0x08109d8d
 8109d0c:	08109d8d 	.word	0x08109d8d
 8109d10:	08109d8d 	.word	0x08109d8d
 8109d14:	08109d8d 	.word	0x08109d8d
 8109d18:	08109d75 	.word	0x08109d75
 8109d1c:	08109d8d 	.word	0x08109d8d
 8109d20:	08109d8d 	.word	0x08109d8d
 8109d24:	08109d8d 	.word	0x08109d8d
 8109d28:	08109d8d 	.word	0x08109d8d
 8109d2c:	08109d8d 	.word	0x08109d8d
 8109d30:	08109d8d 	.word	0x08109d8d
 8109d34:	08109d8d 	.word	0x08109d8d
 8109d38:	08109d7d 	.word	0x08109d7d
 8109d3c:	08109d8d 	.word	0x08109d8d
 8109d40:	08109d8d 	.word	0x08109d8d
 8109d44:	08109d8d 	.word	0x08109d8d
 8109d48:	08109d8d 	.word	0x08109d8d
 8109d4c:	08109d8d 	.word	0x08109d8d
 8109d50:	08109d8d 	.word	0x08109d8d
 8109d54:	08109d8d 	.word	0x08109d8d
 8109d58:	08109d85 	.word	0x08109d85
 8109d5c:	2301      	movs	r3, #1
 8109d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109d62:	e220      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109d64:	2304      	movs	r3, #4
 8109d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109d6a:	e21c      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109d6c:	2308      	movs	r3, #8
 8109d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109d72:	e218      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109d74:	2310      	movs	r3, #16
 8109d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109d7a:	e214      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109d7c:	2320      	movs	r3, #32
 8109d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109d82:	e210      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109d84:	2340      	movs	r3, #64	; 0x40
 8109d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109d8a:	e20c      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109d8c:	2380      	movs	r3, #128	; 0x80
 8109d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109d92:	e208      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109d94:	697b      	ldr	r3, [r7, #20]
 8109d96:	681b      	ldr	r3, [r3, #0]
 8109d98:	4a66      	ldr	r2, [pc, #408]	; (8109f34 <UART_SetConfig+0x334>)
 8109d9a:	4293      	cmp	r3, r2
 8109d9c:	d130      	bne.n	8109e00 <UART_SetConfig+0x200>
 8109d9e:	4b64      	ldr	r3, [pc, #400]	; (8109f30 <UART_SetConfig+0x330>)
 8109da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109da2:	f003 0307 	and.w	r3, r3, #7
 8109da6:	2b05      	cmp	r3, #5
 8109da8:	d826      	bhi.n	8109df8 <UART_SetConfig+0x1f8>
 8109daa:	a201      	add	r2, pc, #4	; (adr r2, 8109db0 <UART_SetConfig+0x1b0>)
 8109dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109db0:	08109dc9 	.word	0x08109dc9
 8109db4:	08109dd1 	.word	0x08109dd1
 8109db8:	08109dd9 	.word	0x08109dd9
 8109dbc:	08109de1 	.word	0x08109de1
 8109dc0:	08109de9 	.word	0x08109de9
 8109dc4:	08109df1 	.word	0x08109df1
 8109dc8:	2300      	movs	r3, #0
 8109dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109dce:	e1ea      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109dd0:	2304      	movs	r3, #4
 8109dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109dd6:	e1e6      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109dd8:	2308      	movs	r3, #8
 8109dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109dde:	e1e2      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109de0:	2310      	movs	r3, #16
 8109de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109de6:	e1de      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109de8:	2320      	movs	r3, #32
 8109dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109dee:	e1da      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109df0:	2340      	movs	r3, #64	; 0x40
 8109df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109df6:	e1d6      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109df8:	2380      	movs	r3, #128	; 0x80
 8109dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109dfe:	e1d2      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109e00:	697b      	ldr	r3, [r7, #20]
 8109e02:	681b      	ldr	r3, [r3, #0]
 8109e04:	4a4c      	ldr	r2, [pc, #304]	; (8109f38 <UART_SetConfig+0x338>)
 8109e06:	4293      	cmp	r3, r2
 8109e08:	d130      	bne.n	8109e6c <UART_SetConfig+0x26c>
 8109e0a:	4b49      	ldr	r3, [pc, #292]	; (8109f30 <UART_SetConfig+0x330>)
 8109e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109e0e:	f003 0307 	and.w	r3, r3, #7
 8109e12:	2b05      	cmp	r3, #5
 8109e14:	d826      	bhi.n	8109e64 <UART_SetConfig+0x264>
 8109e16:	a201      	add	r2, pc, #4	; (adr r2, 8109e1c <UART_SetConfig+0x21c>)
 8109e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109e1c:	08109e35 	.word	0x08109e35
 8109e20:	08109e3d 	.word	0x08109e3d
 8109e24:	08109e45 	.word	0x08109e45
 8109e28:	08109e4d 	.word	0x08109e4d
 8109e2c:	08109e55 	.word	0x08109e55
 8109e30:	08109e5d 	.word	0x08109e5d
 8109e34:	2300      	movs	r3, #0
 8109e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e3a:	e1b4      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109e3c:	2304      	movs	r3, #4
 8109e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e42:	e1b0      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109e44:	2308      	movs	r3, #8
 8109e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e4a:	e1ac      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109e4c:	2310      	movs	r3, #16
 8109e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e52:	e1a8      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109e54:	2320      	movs	r3, #32
 8109e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e5a:	e1a4      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109e5c:	2340      	movs	r3, #64	; 0x40
 8109e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e62:	e1a0      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109e64:	2380      	movs	r3, #128	; 0x80
 8109e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e6a:	e19c      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109e6c:	697b      	ldr	r3, [r7, #20]
 8109e6e:	681b      	ldr	r3, [r3, #0]
 8109e70:	4a32      	ldr	r2, [pc, #200]	; (8109f3c <UART_SetConfig+0x33c>)
 8109e72:	4293      	cmp	r3, r2
 8109e74:	d130      	bne.n	8109ed8 <UART_SetConfig+0x2d8>
 8109e76:	4b2e      	ldr	r3, [pc, #184]	; (8109f30 <UART_SetConfig+0x330>)
 8109e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109e7a:	f003 0307 	and.w	r3, r3, #7
 8109e7e:	2b05      	cmp	r3, #5
 8109e80:	d826      	bhi.n	8109ed0 <UART_SetConfig+0x2d0>
 8109e82:	a201      	add	r2, pc, #4	; (adr r2, 8109e88 <UART_SetConfig+0x288>)
 8109e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109e88:	08109ea1 	.word	0x08109ea1
 8109e8c:	08109ea9 	.word	0x08109ea9
 8109e90:	08109eb1 	.word	0x08109eb1
 8109e94:	08109eb9 	.word	0x08109eb9
 8109e98:	08109ec1 	.word	0x08109ec1
 8109e9c:	08109ec9 	.word	0x08109ec9
 8109ea0:	2300      	movs	r3, #0
 8109ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ea6:	e17e      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109ea8:	2304      	movs	r3, #4
 8109eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109eae:	e17a      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109eb0:	2308      	movs	r3, #8
 8109eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109eb6:	e176      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109eb8:	2310      	movs	r3, #16
 8109eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ebe:	e172      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109ec0:	2320      	movs	r3, #32
 8109ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ec6:	e16e      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109ec8:	2340      	movs	r3, #64	; 0x40
 8109eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ece:	e16a      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109ed0:	2380      	movs	r3, #128	; 0x80
 8109ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ed6:	e166      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109ed8:	697b      	ldr	r3, [r7, #20]
 8109eda:	681b      	ldr	r3, [r3, #0]
 8109edc:	4a18      	ldr	r2, [pc, #96]	; (8109f40 <UART_SetConfig+0x340>)
 8109ede:	4293      	cmp	r3, r2
 8109ee0:	d140      	bne.n	8109f64 <UART_SetConfig+0x364>
 8109ee2:	4b13      	ldr	r3, [pc, #76]	; (8109f30 <UART_SetConfig+0x330>)
 8109ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109ee6:	f003 0307 	and.w	r3, r3, #7
 8109eea:	2b05      	cmp	r3, #5
 8109eec:	d836      	bhi.n	8109f5c <UART_SetConfig+0x35c>
 8109eee:	a201      	add	r2, pc, #4	; (adr r2, 8109ef4 <UART_SetConfig+0x2f4>)
 8109ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109ef4:	08109f0d 	.word	0x08109f0d
 8109ef8:	08109f15 	.word	0x08109f15
 8109efc:	08109f1d 	.word	0x08109f1d
 8109f00:	08109f45 	.word	0x08109f45
 8109f04:	08109f4d 	.word	0x08109f4d
 8109f08:	08109f55 	.word	0x08109f55
 8109f0c:	2300      	movs	r3, #0
 8109f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f12:	e148      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109f14:	2304      	movs	r3, #4
 8109f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f1a:	e144      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109f1c:	2308      	movs	r3, #8
 8109f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f22:	e140      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109f24:	cfff69f3 	.word	0xcfff69f3
 8109f28:	58000c00 	.word	0x58000c00
 8109f2c:	40011000 	.word	0x40011000
 8109f30:	58024400 	.word	0x58024400
 8109f34:	40004400 	.word	0x40004400
 8109f38:	40004800 	.word	0x40004800
 8109f3c:	40004c00 	.word	0x40004c00
 8109f40:	40005000 	.word	0x40005000
 8109f44:	2310      	movs	r3, #16
 8109f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f4a:	e12c      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109f4c:	2320      	movs	r3, #32
 8109f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f52:	e128      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109f54:	2340      	movs	r3, #64	; 0x40
 8109f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f5a:	e124      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109f5c:	2380      	movs	r3, #128	; 0x80
 8109f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f62:	e120      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 8109f64:	697b      	ldr	r3, [r7, #20]
 8109f66:	681b      	ldr	r3, [r3, #0]
 8109f68:	4acb      	ldr	r2, [pc, #812]	; (810a298 <UART_SetConfig+0x698>)
 8109f6a:	4293      	cmp	r3, r2
 8109f6c:	d176      	bne.n	810a05c <UART_SetConfig+0x45c>
 8109f6e:	4bcb      	ldr	r3, [pc, #812]	; (810a29c <UART_SetConfig+0x69c>)
 8109f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109f72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109f76:	2b28      	cmp	r3, #40	; 0x28
 8109f78:	d86c      	bhi.n	810a054 <UART_SetConfig+0x454>
 8109f7a:	a201      	add	r2, pc, #4	; (adr r2, 8109f80 <UART_SetConfig+0x380>)
 8109f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109f80:	0810a025 	.word	0x0810a025
 8109f84:	0810a055 	.word	0x0810a055
 8109f88:	0810a055 	.word	0x0810a055
 8109f8c:	0810a055 	.word	0x0810a055
 8109f90:	0810a055 	.word	0x0810a055
 8109f94:	0810a055 	.word	0x0810a055
 8109f98:	0810a055 	.word	0x0810a055
 8109f9c:	0810a055 	.word	0x0810a055
 8109fa0:	0810a02d 	.word	0x0810a02d
 8109fa4:	0810a055 	.word	0x0810a055
 8109fa8:	0810a055 	.word	0x0810a055
 8109fac:	0810a055 	.word	0x0810a055
 8109fb0:	0810a055 	.word	0x0810a055
 8109fb4:	0810a055 	.word	0x0810a055
 8109fb8:	0810a055 	.word	0x0810a055
 8109fbc:	0810a055 	.word	0x0810a055
 8109fc0:	0810a035 	.word	0x0810a035
 8109fc4:	0810a055 	.word	0x0810a055
 8109fc8:	0810a055 	.word	0x0810a055
 8109fcc:	0810a055 	.word	0x0810a055
 8109fd0:	0810a055 	.word	0x0810a055
 8109fd4:	0810a055 	.word	0x0810a055
 8109fd8:	0810a055 	.word	0x0810a055
 8109fdc:	0810a055 	.word	0x0810a055
 8109fe0:	0810a03d 	.word	0x0810a03d
 8109fe4:	0810a055 	.word	0x0810a055
 8109fe8:	0810a055 	.word	0x0810a055
 8109fec:	0810a055 	.word	0x0810a055
 8109ff0:	0810a055 	.word	0x0810a055
 8109ff4:	0810a055 	.word	0x0810a055
 8109ff8:	0810a055 	.word	0x0810a055
 8109ffc:	0810a055 	.word	0x0810a055
 810a000:	0810a045 	.word	0x0810a045
 810a004:	0810a055 	.word	0x0810a055
 810a008:	0810a055 	.word	0x0810a055
 810a00c:	0810a055 	.word	0x0810a055
 810a010:	0810a055 	.word	0x0810a055
 810a014:	0810a055 	.word	0x0810a055
 810a018:	0810a055 	.word	0x0810a055
 810a01c:	0810a055 	.word	0x0810a055
 810a020:	0810a04d 	.word	0x0810a04d
 810a024:	2301      	movs	r3, #1
 810a026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a02a:	e0bc      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a02c:	2304      	movs	r3, #4
 810a02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a032:	e0b8      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a034:	2308      	movs	r3, #8
 810a036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a03a:	e0b4      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a03c:	2310      	movs	r3, #16
 810a03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a042:	e0b0      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a044:	2320      	movs	r3, #32
 810a046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a04a:	e0ac      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a04c:	2340      	movs	r3, #64	; 0x40
 810a04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a052:	e0a8      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a054:	2380      	movs	r3, #128	; 0x80
 810a056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a05a:	e0a4      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a05c:	697b      	ldr	r3, [r7, #20]
 810a05e:	681b      	ldr	r3, [r3, #0]
 810a060:	4a8f      	ldr	r2, [pc, #572]	; (810a2a0 <UART_SetConfig+0x6a0>)
 810a062:	4293      	cmp	r3, r2
 810a064:	d130      	bne.n	810a0c8 <UART_SetConfig+0x4c8>
 810a066:	4b8d      	ldr	r3, [pc, #564]	; (810a29c <UART_SetConfig+0x69c>)
 810a068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a06a:	f003 0307 	and.w	r3, r3, #7
 810a06e:	2b05      	cmp	r3, #5
 810a070:	d826      	bhi.n	810a0c0 <UART_SetConfig+0x4c0>
 810a072:	a201      	add	r2, pc, #4	; (adr r2, 810a078 <UART_SetConfig+0x478>)
 810a074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a078:	0810a091 	.word	0x0810a091
 810a07c:	0810a099 	.word	0x0810a099
 810a080:	0810a0a1 	.word	0x0810a0a1
 810a084:	0810a0a9 	.word	0x0810a0a9
 810a088:	0810a0b1 	.word	0x0810a0b1
 810a08c:	0810a0b9 	.word	0x0810a0b9
 810a090:	2300      	movs	r3, #0
 810a092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a096:	e086      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a098:	2304      	movs	r3, #4
 810a09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a09e:	e082      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a0a0:	2308      	movs	r3, #8
 810a0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0a6:	e07e      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a0a8:	2310      	movs	r3, #16
 810a0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0ae:	e07a      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a0b0:	2320      	movs	r3, #32
 810a0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0b6:	e076      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a0b8:	2340      	movs	r3, #64	; 0x40
 810a0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0be:	e072      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a0c0:	2380      	movs	r3, #128	; 0x80
 810a0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0c6:	e06e      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a0c8:	697b      	ldr	r3, [r7, #20]
 810a0ca:	681b      	ldr	r3, [r3, #0]
 810a0cc:	4a75      	ldr	r2, [pc, #468]	; (810a2a4 <UART_SetConfig+0x6a4>)
 810a0ce:	4293      	cmp	r3, r2
 810a0d0:	d130      	bne.n	810a134 <UART_SetConfig+0x534>
 810a0d2:	4b72      	ldr	r3, [pc, #456]	; (810a29c <UART_SetConfig+0x69c>)
 810a0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a0d6:	f003 0307 	and.w	r3, r3, #7
 810a0da:	2b05      	cmp	r3, #5
 810a0dc:	d826      	bhi.n	810a12c <UART_SetConfig+0x52c>
 810a0de:	a201      	add	r2, pc, #4	; (adr r2, 810a0e4 <UART_SetConfig+0x4e4>)
 810a0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a0e4:	0810a0fd 	.word	0x0810a0fd
 810a0e8:	0810a105 	.word	0x0810a105
 810a0ec:	0810a10d 	.word	0x0810a10d
 810a0f0:	0810a115 	.word	0x0810a115
 810a0f4:	0810a11d 	.word	0x0810a11d
 810a0f8:	0810a125 	.word	0x0810a125
 810a0fc:	2300      	movs	r3, #0
 810a0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a102:	e050      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a104:	2304      	movs	r3, #4
 810a106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a10a:	e04c      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a10c:	2308      	movs	r3, #8
 810a10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a112:	e048      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a114:	2310      	movs	r3, #16
 810a116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a11a:	e044      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a11c:	2320      	movs	r3, #32
 810a11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a122:	e040      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a124:	2340      	movs	r3, #64	; 0x40
 810a126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a12a:	e03c      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a12c:	2380      	movs	r3, #128	; 0x80
 810a12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a132:	e038      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a134:	697b      	ldr	r3, [r7, #20]
 810a136:	681b      	ldr	r3, [r3, #0]
 810a138:	4a5b      	ldr	r2, [pc, #364]	; (810a2a8 <UART_SetConfig+0x6a8>)
 810a13a:	4293      	cmp	r3, r2
 810a13c:	d130      	bne.n	810a1a0 <UART_SetConfig+0x5a0>
 810a13e:	4b57      	ldr	r3, [pc, #348]	; (810a29c <UART_SetConfig+0x69c>)
 810a140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a142:	f003 0307 	and.w	r3, r3, #7
 810a146:	2b05      	cmp	r3, #5
 810a148:	d826      	bhi.n	810a198 <UART_SetConfig+0x598>
 810a14a:	a201      	add	r2, pc, #4	; (adr r2, 810a150 <UART_SetConfig+0x550>)
 810a14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a150:	0810a169 	.word	0x0810a169
 810a154:	0810a171 	.word	0x0810a171
 810a158:	0810a179 	.word	0x0810a179
 810a15c:	0810a181 	.word	0x0810a181
 810a160:	0810a189 	.word	0x0810a189
 810a164:	0810a191 	.word	0x0810a191
 810a168:	2302      	movs	r3, #2
 810a16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a16e:	e01a      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a170:	2304      	movs	r3, #4
 810a172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a176:	e016      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a178:	2308      	movs	r3, #8
 810a17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a17e:	e012      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a180:	2310      	movs	r3, #16
 810a182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a186:	e00e      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a188:	2320      	movs	r3, #32
 810a18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a18e:	e00a      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a190:	2340      	movs	r3, #64	; 0x40
 810a192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a196:	e006      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a198:	2380      	movs	r3, #128	; 0x80
 810a19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a19e:	e002      	b.n	810a1a6 <UART_SetConfig+0x5a6>
 810a1a0:	2380      	movs	r3, #128	; 0x80
 810a1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810a1a6:	697b      	ldr	r3, [r7, #20]
 810a1a8:	681b      	ldr	r3, [r3, #0]
 810a1aa:	4a3f      	ldr	r2, [pc, #252]	; (810a2a8 <UART_SetConfig+0x6a8>)
 810a1ac:	4293      	cmp	r3, r2
 810a1ae:	f040 80f8 	bne.w	810a3a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810a1b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810a1b6:	2b20      	cmp	r3, #32
 810a1b8:	dc46      	bgt.n	810a248 <UART_SetConfig+0x648>
 810a1ba:	2b02      	cmp	r3, #2
 810a1bc:	f2c0 8082 	blt.w	810a2c4 <UART_SetConfig+0x6c4>
 810a1c0:	3b02      	subs	r3, #2
 810a1c2:	2b1e      	cmp	r3, #30
 810a1c4:	d87e      	bhi.n	810a2c4 <UART_SetConfig+0x6c4>
 810a1c6:	a201      	add	r2, pc, #4	; (adr r2, 810a1cc <UART_SetConfig+0x5cc>)
 810a1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a1cc:	0810a24f 	.word	0x0810a24f
 810a1d0:	0810a2c5 	.word	0x0810a2c5
 810a1d4:	0810a257 	.word	0x0810a257
 810a1d8:	0810a2c5 	.word	0x0810a2c5
 810a1dc:	0810a2c5 	.word	0x0810a2c5
 810a1e0:	0810a2c5 	.word	0x0810a2c5
 810a1e4:	0810a267 	.word	0x0810a267
 810a1e8:	0810a2c5 	.word	0x0810a2c5
 810a1ec:	0810a2c5 	.word	0x0810a2c5
 810a1f0:	0810a2c5 	.word	0x0810a2c5
 810a1f4:	0810a2c5 	.word	0x0810a2c5
 810a1f8:	0810a2c5 	.word	0x0810a2c5
 810a1fc:	0810a2c5 	.word	0x0810a2c5
 810a200:	0810a2c5 	.word	0x0810a2c5
 810a204:	0810a277 	.word	0x0810a277
 810a208:	0810a2c5 	.word	0x0810a2c5
 810a20c:	0810a2c5 	.word	0x0810a2c5
 810a210:	0810a2c5 	.word	0x0810a2c5
 810a214:	0810a2c5 	.word	0x0810a2c5
 810a218:	0810a2c5 	.word	0x0810a2c5
 810a21c:	0810a2c5 	.word	0x0810a2c5
 810a220:	0810a2c5 	.word	0x0810a2c5
 810a224:	0810a2c5 	.word	0x0810a2c5
 810a228:	0810a2c5 	.word	0x0810a2c5
 810a22c:	0810a2c5 	.word	0x0810a2c5
 810a230:	0810a2c5 	.word	0x0810a2c5
 810a234:	0810a2c5 	.word	0x0810a2c5
 810a238:	0810a2c5 	.word	0x0810a2c5
 810a23c:	0810a2c5 	.word	0x0810a2c5
 810a240:	0810a2c5 	.word	0x0810a2c5
 810a244:	0810a2b7 	.word	0x0810a2b7
 810a248:	2b40      	cmp	r3, #64	; 0x40
 810a24a:	d037      	beq.n	810a2bc <UART_SetConfig+0x6bc>
 810a24c:	e03a      	b.n	810a2c4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810a24e:	f7fe ff4f 	bl	81090f0 <HAL_RCCEx_GetD3PCLK1Freq>
 810a252:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a254:	e03c      	b.n	810a2d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a25a:	4618      	mov	r0, r3
 810a25c:	f7fe ff5e 	bl	810911c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a264:	e034      	b.n	810a2d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a266:	f107 0318 	add.w	r3, r7, #24
 810a26a:	4618      	mov	r0, r3
 810a26c:	f7ff f8aa 	bl	81093c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a270:	69fb      	ldr	r3, [r7, #28]
 810a272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a274:	e02c      	b.n	810a2d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a276:	4b09      	ldr	r3, [pc, #36]	; (810a29c <UART_SetConfig+0x69c>)
 810a278:	681b      	ldr	r3, [r3, #0]
 810a27a:	f003 0320 	and.w	r3, r3, #32
 810a27e:	2b00      	cmp	r3, #0
 810a280:	d016      	beq.n	810a2b0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a282:	4b06      	ldr	r3, [pc, #24]	; (810a29c <UART_SetConfig+0x69c>)
 810a284:	681b      	ldr	r3, [r3, #0]
 810a286:	08db      	lsrs	r3, r3, #3
 810a288:	f003 0303 	and.w	r3, r3, #3
 810a28c:	4a07      	ldr	r2, [pc, #28]	; (810a2ac <UART_SetConfig+0x6ac>)
 810a28e:	fa22 f303 	lsr.w	r3, r2, r3
 810a292:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a294:	e01c      	b.n	810a2d0 <UART_SetConfig+0x6d0>
 810a296:	bf00      	nop
 810a298:	40011400 	.word	0x40011400
 810a29c:	58024400 	.word	0x58024400
 810a2a0:	40007800 	.word	0x40007800
 810a2a4:	40007c00 	.word	0x40007c00
 810a2a8:	58000c00 	.word	0x58000c00
 810a2ac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810a2b0:	4b9d      	ldr	r3, [pc, #628]	; (810a528 <UART_SetConfig+0x928>)
 810a2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a2b4:	e00c      	b.n	810a2d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a2b6:	4b9d      	ldr	r3, [pc, #628]	; (810a52c <UART_SetConfig+0x92c>)
 810a2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a2ba:	e009      	b.n	810a2d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a2bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a2c2:	e005      	b.n	810a2d0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810a2c4:	2300      	movs	r3, #0
 810a2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810a2c8:	2301      	movs	r3, #1
 810a2ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810a2ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810a2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a2d2:	2b00      	cmp	r3, #0
 810a2d4:	f000 81de 	beq.w	810a694 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810a2d8:	697b      	ldr	r3, [r7, #20]
 810a2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a2dc:	4a94      	ldr	r2, [pc, #592]	; (810a530 <UART_SetConfig+0x930>)
 810a2de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a2e2:	461a      	mov	r2, r3
 810a2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a2e6:	fbb3 f3f2 	udiv	r3, r3, r2
 810a2ea:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a2ec:	697b      	ldr	r3, [r7, #20]
 810a2ee:	685a      	ldr	r2, [r3, #4]
 810a2f0:	4613      	mov	r3, r2
 810a2f2:	005b      	lsls	r3, r3, #1
 810a2f4:	4413      	add	r3, r2
 810a2f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a2f8:	429a      	cmp	r2, r3
 810a2fa:	d305      	bcc.n	810a308 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810a2fc:	697b      	ldr	r3, [r7, #20]
 810a2fe:	685b      	ldr	r3, [r3, #4]
 810a300:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a304:	429a      	cmp	r2, r3
 810a306:	d903      	bls.n	810a310 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810a308:	2301      	movs	r3, #1
 810a30a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810a30e:	e1c1      	b.n	810a694 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a312:	2200      	movs	r2, #0
 810a314:	60bb      	str	r3, [r7, #8]
 810a316:	60fa      	str	r2, [r7, #12]
 810a318:	697b      	ldr	r3, [r7, #20]
 810a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a31c:	4a84      	ldr	r2, [pc, #528]	; (810a530 <UART_SetConfig+0x930>)
 810a31e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a322:	b29b      	uxth	r3, r3
 810a324:	2200      	movs	r2, #0
 810a326:	603b      	str	r3, [r7, #0]
 810a328:	607a      	str	r2, [r7, #4]
 810a32a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a32e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810a332:	f7f6 fc4f 	bl	8100bd4 <__aeabi_uldivmod>
 810a336:	4602      	mov	r2, r0
 810a338:	460b      	mov	r3, r1
 810a33a:	4610      	mov	r0, r2
 810a33c:	4619      	mov	r1, r3
 810a33e:	f04f 0200 	mov.w	r2, #0
 810a342:	f04f 0300 	mov.w	r3, #0
 810a346:	020b      	lsls	r3, r1, #8
 810a348:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810a34c:	0202      	lsls	r2, r0, #8
 810a34e:	6979      	ldr	r1, [r7, #20]
 810a350:	6849      	ldr	r1, [r1, #4]
 810a352:	0849      	lsrs	r1, r1, #1
 810a354:	2000      	movs	r0, #0
 810a356:	460c      	mov	r4, r1
 810a358:	4605      	mov	r5, r0
 810a35a:	eb12 0804 	adds.w	r8, r2, r4
 810a35e:	eb43 0905 	adc.w	r9, r3, r5
 810a362:	697b      	ldr	r3, [r7, #20]
 810a364:	685b      	ldr	r3, [r3, #4]
 810a366:	2200      	movs	r2, #0
 810a368:	469a      	mov	sl, r3
 810a36a:	4693      	mov	fp, r2
 810a36c:	4652      	mov	r2, sl
 810a36e:	465b      	mov	r3, fp
 810a370:	4640      	mov	r0, r8
 810a372:	4649      	mov	r1, r9
 810a374:	f7f6 fc2e 	bl	8100bd4 <__aeabi_uldivmod>
 810a378:	4602      	mov	r2, r0
 810a37a:	460b      	mov	r3, r1
 810a37c:	4613      	mov	r3, r2
 810a37e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810a380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810a386:	d308      	bcc.n	810a39a <UART_SetConfig+0x79a>
 810a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a38a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a38e:	d204      	bcs.n	810a39a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810a390:	697b      	ldr	r3, [r7, #20]
 810a392:	681b      	ldr	r3, [r3, #0]
 810a394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810a396:	60da      	str	r2, [r3, #12]
 810a398:	e17c      	b.n	810a694 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810a39a:	2301      	movs	r3, #1
 810a39c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810a3a0:	e178      	b.n	810a694 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810a3a2:	697b      	ldr	r3, [r7, #20]
 810a3a4:	69db      	ldr	r3, [r3, #28]
 810a3a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810a3aa:	f040 80c5 	bne.w	810a538 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810a3ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810a3b2:	2b20      	cmp	r3, #32
 810a3b4:	dc48      	bgt.n	810a448 <UART_SetConfig+0x848>
 810a3b6:	2b00      	cmp	r3, #0
 810a3b8:	db7b      	blt.n	810a4b2 <UART_SetConfig+0x8b2>
 810a3ba:	2b20      	cmp	r3, #32
 810a3bc:	d879      	bhi.n	810a4b2 <UART_SetConfig+0x8b2>
 810a3be:	a201      	add	r2, pc, #4	; (adr r2, 810a3c4 <UART_SetConfig+0x7c4>)
 810a3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a3c4:	0810a44f 	.word	0x0810a44f
 810a3c8:	0810a457 	.word	0x0810a457
 810a3cc:	0810a4b3 	.word	0x0810a4b3
 810a3d0:	0810a4b3 	.word	0x0810a4b3
 810a3d4:	0810a45f 	.word	0x0810a45f
 810a3d8:	0810a4b3 	.word	0x0810a4b3
 810a3dc:	0810a4b3 	.word	0x0810a4b3
 810a3e0:	0810a4b3 	.word	0x0810a4b3
 810a3e4:	0810a46f 	.word	0x0810a46f
 810a3e8:	0810a4b3 	.word	0x0810a4b3
 810a3ec:	0810a4b3 	.word	0x0810a4b3
 810a3f0:	0810a4b3 	.word	0x0810a4b3
 810a3f4:	0810a4b3 	.word	0x0810a4b3
 810a3f8:	0810a4b3 	.word	0x0810a4b3
 810a3fc:	0810a4b3 	.word	0x0810a4b3
 810a400:	0810a4b3 	.word	0x0810a4b3
 810a404:	0810a47f 	.word	0x0810a47f
 810a408:	0810a4b3 	.word	0x0810a4b3
 810a40c:	0810a4b3 	.word	0x0810a4b3
 810a410:	0810a4b3 	.word	0x0810a4b3
 810a414:	0810a4b3 	.word	0x0810a4b3
 810a418:	0810a4b3 	.word	0x0810a4b3
 810a41c:	0810a4b3 	.word	0x0810a4b3
 810a420:	0810a4b3 	.word	0x0810a4b3
 810a424:	0810a4b3 	.word	0x0810a4b3
 810a428:	0810a4b3 	.word	0x0810a4b3
 810a42c:	0810a4b3 	.word	0x0810a4b3
 810a430:	0810a4b3 	.word	0x0810a4b3
 810a434:	0810a4b3 	.word	0x0810a4b3
 810a438:	0810a4b3 	.word	0x0810a4b3
 810a43c:	0810a4b3 	.word	0x0810a4b3
 810a440:	0810a4b3 	.word	0x0810a4b3
 810a444:	0810a4a5 	.word	0x0810a4a5
 810a448:	2b40      	cmp	r3, #64	; 0x40
 810a44a:	d02e      	beq.n	810a4aa <UART_SetConfig+0x8aa>
 810a44c:	e031      	b.n	810a4b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a44e:	f7fd fedd 	bl	810820c <HAL_RCC_GetPCLK1Freq>
 810a452:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a454:	e033      	b.n	810a4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a456:	f7fd feef 	bl	8108238 <HAL_RCC_GetPCLK2Freq>
 810a45a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a45c:	e02f      	b.n	810a4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a45e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a462:	4618      	mov	r0, r3
 810a464:	f7fe fe5a 	bl	810911c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a46c:	e027      	b.n	810a4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a46e:	f107 0318 	add.w	r3, r7, #24
 810a472:	4618      	mov	r0, r3
 810a474:	f7fe ffa6 	bl	81093c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a478:	69fb      	ldr	r3, [r7, #28]
 810a47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a47c:	e01f      	b.n	810a4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a47e:	4b2d      	ldr	r3, [pc, #180]	; (810a534 <UART_SetConfig+0x934>)
 810a480:	681b      	ldr	r3, [r3, #0]
 810a482:	f003 0320 	and.w	r3, r3, #32
 810a486:	2b00      	cmp	r3, #0
 810a488:	d009      	beq.n	810a49e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a48a:	4b2a      	ldr	r3, [pc, #168]	; (810a534 <UART_SetConfig+0x934>)
 810a48c:	681b      	ldr	r3, [r3, #0]
 810a48e:	08db      	lsrs	r3, r3, #3
 810a490:	f003 0303 	and.w	r3, r3, #3
 810a494:	4a24      	ldr	r2, [pc, #144]	; (810a528 <UART_SetConfig+0x928>)
 810a496:	fa22 f303 	lsr.w	r3, r2, r3
 810a49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a49c:	e00f      	b.n	810a4be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810a49e:	4b22      	ldr	r3, [pc, #136]	; (810a528 <UART_SetConfig+0x928>)
 810a4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a4a2:	e00c      	b.n	810a4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a4a4:	4b21      	ldr	r3, [pc, #132]	; (810a52c <UART_SetConfig+0x92c>)
 810a4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a4a8:	e009      	b.n	810a4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a4aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a4b0:	e005      	b.n	810a4be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810a4b2:	2300      	movs	r3, #0
 810a4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810a4b6:	2301      	movs	r3, #1
 810a4b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810a4bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810a4be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a4c0:	2b00      	cmp	r3, #0
 810a4c2:	f000 80e7 	beq.w	810a694 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a4c6:	697b      	ldr	r3, [r7, #20]
 810a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a4ca:	4a19      	ldr	r2, [pc, #100]	; (810a530 <UART_SetConfig+0x930>)
 810a4cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a4d0:	461a      	mov	r2, r3
 810a4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a4d4:	fbb3 f3f2 	udiv	r3, r3, r2
 810a4d8:	005a      	lsls	r2, r3, #1
 810a4da:	697b      	ldr	r3, [r7, #20]
 810a4dc:	685b      	ldr	r3, [r3, #4]
 810a4de:	085b      	lsrs	r3, r3, #1
 810a4e0:	441a      	add	r2, r3
 810a4e2:	697b      	ldr	r3, [r7, #20]
 810a4e4:	685b      	ldr	r3, [r3, #4]
 810a4e6:	fbb2 f3f3 	udiv	r3, r2, r3
 810a4ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a4ee:	2b0f      	cmp	r3, #15
 810a4f0:	d916      	bls.n	810a520 <UART_SetConfig+0x920>
 810a4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a4f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a4f8:	d212      	bcs.n	810a520 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810a4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a4fc:	b29b      	uxth	r3, r3
 810a4fe:	f023 030f 	bic.w	r3, r3, #15
 810a502:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810a504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a506:	085b      	lsrs	r3, r3, #1
 810a508:	b29b      	uxth	r3, r3
 810a50a:	f003 0307 	and.w	r3, r3, #7
 810a50e:	b29a      	uxth	r2, r3
 810a510:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810a512:	4313      	orrs	r3, r2
 810a514:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 810a516:	697b      	ldr	r3, [r7, #20]
 810a518:	681b      	ldr	r3, [r3, #0]
 810a51a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 810a51c:	60da      	str	r2, [r3, #12]
 810a51e:	e0b9      	b.n	810a694 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a520:	2301      	movs	r3, #1
 810a522:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810a526:	e0b5      	b.n	810a694 <UART_SetConfig+0xa94>
 810a528:	03d09000 	.word	0x03d09000
 810a52c:	003d0900 	.word	0x003d0900
 810a530:	0810bba0 	.word	0x0810bba0
 810a534:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810a538:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810a53c:	2b20      	cmp	r3, #32
 810a53e:	dc49      	bgt.n	810a5d4 <UART_SetConfig+0x9d4>
 810a540:	2b00      	cmp	r3, #0
 810a542:	db7c      	blt.n	810a63e <UART_SetConfig+0xa3e>
 810a544:	2b20      	cmp	r3, #32
 810a546:	d87a      	bhi.n	810a63e <UART_SetConfig+0xa3e>
 810a548:	a201      	add	r2, pc, #4	; (adr r2, 810a550 <UART_SetConfig+0x950>)
 810a54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a54e:	bf00      	nop
 810a550:	0810a5db 	.word	0x0810a5db
 810a554:	0810a5e3 	.word	0x0810a5e3
 810a558:	0810a63f 	.word	0x0810a63f
 810a55c:	0810a63f 	.word	0x0810a63f
 810a560:	0810a5eb 	.word	0x0810a5eb
 810a564:	0810a63f 	.word	0x0810a63f
 810a568:	0810a63f 	.word	0x0810a63f
 810a56c:	0810a63f 	.word	0x0810a63f
 810a570:	0810a5fb 	.word	0x0810a5fb
 810a574:	0810a63f 	.word	0x0810a63f
 810a578:	0810a63f 	.word	0x0810a63f
 810a57c:	0810a63f 	.word	0x0810a63f
 810a580:	0810a63f 	.word	0x0810a63f
 810a584:	0810a63f 	.word	0x0810a63f
 810a588:	0810a63f 	.word	0x0810a63f
 810a58c:	0810a63f 	.word	0x0810a63f
 810a590:	0810a60b 	.word	0x0810a60b
 810a594:	0810a63f 	.word	0x0810a63f
 810a598:	0810a63f 	.word	0x0810a63f
 810a59c:	0810a63f 	.word	0x0810a63f
 810a5a0:	0810a63f 	.word	0x0810a63f
 810a5a4:	0810a63f 	.word	0x0810a63f
 810a5a8:	0810a63f 	.word	0x0810a63f
 810a5ac:	0810a63f 	.word	0x0810a63f
 810a5b0:	0810a63f 	.word	0x0810a63f
 810a5b4:	0810a63f 	.word	0x0810a63f
 810a5b8:	0810a63f 	.word	0x0810a63f
 810a5bc:	0810a63f 	.word	0x0810a63f
 810a5c0:	0810a63f 	.word	0x0810a63f
 810a5c4:	0810a63f 	.word	0x0810a63f
 810a5c8:	0810a63f 	.word	0x0810a63f
 810a5cc:	0810a63f 	.word	0x0810a63f
 810a5d0:	0810a631 	.word	0x0810a631
 810a5d4:	2b40      	cmp	r3, #64	; 0x40
 810a5d6:	d02e      	beq.n	810a636 <UART_SetConfig+0xa36>
 810a5d8:	e031      	b.n	810a63e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a5da:	f7fd fe17 	bl	810820c <HAL_RCC_GetPCLK1Freq>
 810a5de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a5e0:	e033      	b.n	810a64a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a5e2:	f7fd fe29 	bl	8108238 <HAL_RCC_GetPCLK2Freq>
 810a5e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a5e8:	e02f      	b.n	810a64a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a5ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a5ee:	4618      	mov	r0, r3
 810a5f0:	f7fe fd94 	bl	810911c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a5f8:	e027      	b.n	810a64a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a5fa:	f107 0318 	add.w	r3, r7, #24
 810a5fe:	4618      	mov	r0, r3
 810a600:	f7fe fee0 	bl	81093c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a604:	69fb      	ldr	r3, [r7, #28]
 810a606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a608:	e01f      	b.n	810a64a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a60a:	4b2d      	ldr	r3, [pc, #180]	; (810a6c0 <UART_SetConfig+0xac0>)
 810a60c:	681b      	ldr	r3, [r3, #0]
 810a60e:	f003 0320 	and.w	r3, r3, #32
 810a612:	2b00      	cmp	r3, #0
 810a614:	d009      	beq.n	810a62a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a616:	4b2a      	ldr	r3, [pc, #168]	; (810a6c0 <UART_SetConfig+0xac0>)
 810a618:	681b      	ldr	r3, [r3, #0]
 810a61a:	08db      	lsrs	r3, r3, #3
 810a61c:	f003 0303 	and.w	r3, r3, #3
 810a620:	4a28      	ldr	r2, [pc, #160]	; (810a6c4 <UART_SetConfig+0xac4>)
 810a622:	fa22 f303 	lsr.w	r3, r2, r3
 810a626:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a628:	e00f      	b.n	810a64a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810a62a:	4b26      	ldr	r3, [pc, #152]	; (810a6c4 <UART_SetConfig+0xac4>)
 810a62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a62e:	e00c      	b.n	810a64a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a630:	4b25      	ldr	r3, [pc, #148]	; (810a6c8 <UART_SetConfig+0xac8>)
 810a632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a634:	e009      	b.n	810a64a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a63c:	e005      	b.n	810a64a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810a63e:	2300      	movs	r3, #0
 810a640:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810a642:	2301      	movs	r3, #1
 810a644:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810a648:	bf00      	nop
    }

    if (pclk != 0U)
 810a64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a64c:	2b00      	cmp	r3, #0
 810a64e:	d021      	beq.n	810a694 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a650:	697b      	ldr	r3, [r7, #20]
 810a652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a654:	4a1d      	ldr	r2, [pc, #116]	; (810a6cc <UART_SetConfig+0xacc>)
 810a656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a65a:	461a      	mov	r2, r3
 810a65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a65e:	fbb3 f2f2 	udiv	r2, r3, r2
 810a662:	697b      	ldr	r3, [r7, #20]
 810a664:	685b      	ldr	r3, [r3, #4]
 810a666:	085b      	lsrs	r3, r3, #1
 810a668:	441a      	add	r2, r3
 810a66a:	697b      	ldr	r3, [r7, #20]
 810a66c:	685b      	ldr	r3, [r3, #4]
 810a66e:	fbb2 f3f3 	udiv	r3, r2, r3
 810a672:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a676:	2b0f      	cmp	r3, #15
 810a678:	d909      	bls.n	810a68e <UART_SetConfig+0xa8e>
 810a67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a67c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a680:	d205      	bcs.n	810a68e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810a682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a684:	b29a      	uxth	r2, r3
 810a686:	697b      	ldr	r3, [r7, #20]
 810a688:	681b      	ldr	r3, [r3, #0]
 810a68a:	60da      	str	r2, [r3, #12]
 810a68c:	e002      	b.n	810a694 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a68e:	2301      	movs	r3, #1
 810a690:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810a694:	697b      	ldr	r3, [r7, #20]
 810a696:	2201      	movs	r2, #1
 810a698:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810a69c:	697b      	ldr	r3, [r7, #20]
 810a69e:	2201      	movs	r2, #1
 810a6a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810a6a4:	697b      	ldr	r3, [r7, #20]
 810a6a6:	2200      	movs	r2, #0
 810a6a8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810a6aa:	697b      	ldr	r3, [r7, #20]
 810a6ac:	2200      	movs	r2, #0
 810a6ae:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810a6b0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 810a6b4:	4618      	mov	r0, r3
 810a6b6:	3748      	adds	r7, #72	; 0x48
 810a6b8:	46bd      	mov	sp, r7
 810a6ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810a6be:	bf00      	nop
 810a6c0:	58024400 	.word	0x58024400
 810a6c4:	03d09000 	.word	0x03d09000
 810a6c8:	003d0900 	.word	0x003d0900
 810a6cc:	0810bba0 	.word	0x0810bba0

0810a6d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810a6d0:	b480      	push	{r7}
 810a6d2:	b083      	sub	sp, #12
 810a6d4:	af00      	add	r7, sp, #0
 810a6d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810a6d8:	687b      	ldr	r3, [r7, #4]
 810a6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a6dc:	f003 0301 	and.w	r3, r3, #1
 810a6e0:	2b00      	cmp	r3, #0
 810a6e2:	d00a      	beq.n	810a6fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810a6e4:	687b      	ldr	r3, [r7, #4]
 810a6e6:	681b      	ldr	r3, [r3, #0]
 810a6e8:	685b      	ldr	r3, [r3, #4]
 810a6ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810a6ee:	687b      	ldr	r3, [r7, #4]
 810a6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a6f2:	687b      	ldr	r3, [r7, #4]
 810a6f4:	681b      	ldr	r3, [r3, #0]
 810a6f6:	430a      	orrs	r2, r1
 810a6f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810a6fa:	687b      	ldr	r3, [r7, #4]
 810a6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a6fe:	f003 0302 	and.w	r3, r3, #2
 810a702:	2b00      	cmp	r3, #0
 810a704:	d00a      	beq.n	810a71c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810a706:	687b      	ldr	r3, [r7, #4]
 810a708:	681b      	ldr	r3, [r3, #0]
 810a70a:	685b      	ldr	r3, [r3, #4]
 810a70c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810a710:	687b      	ldr	r3, [r7, #4]
 810a712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810a714:	687b      	ldr	r3, [r7, #4]
 810a716:	681b      	ldr	r3, [r3, #0]
 810a718:	430a      	orrs	r2, r1
 810a71a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810a71c:	687b      	ldr	r3, [r7, #4]
 810a71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a720:	f003 0304 	and.w	r3, r3, #4
 810a724:	2b00      	cmp	r3, #0
 810a726:	d00a      	beq.n	810a73e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810a728:	687b      	ldr	r3, [r7, #4]
 810a72a:	681b      	ldr	r3, [r3, #0]
 810a72c:	685b      	ldr	r3, [r3, #4]
 810a72e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810a732:	687b      	ldr	r3, [r7, #4]
 810a734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810a736:	687b      	ldr	r3, [r7, #4]
 810a738:	681b      	ldr	r3, [r3, #0]
 810a73a:	430a      	orrs	r2, r1
 810a73c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810a73e:	687b      	ldr	r3, [r7, #4]
 810a740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a742:	f003 0308 	and.w	r3, r3, #8
 810a746:	2b00      	cmp	r3, #0
 810a748:	d00a      	beq.n	810a760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810a74a:	687b      	ldr	r3, [r7, #4]
 810a74c:	681b      	ldr	r3, [r3, #0]
 810a74e:	685b      	ldr	r3, [r3, #4]
 810a750:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810a754:	687b      	ldr	r3, [r7, #4]
 810a756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a758:	687b      	ldr	r3, [r7, #4]
 810a75a:	681b      	ldr	r3, [r3, #0]
 810a75c:	430a      	orrs	r2, r1
 810a75e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810a760:	687b      	ldr	r3, [r7, #4]
 810a762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a764:	f003 0310 	and.w	r3, r3, #16
 810a768:	2b00      	cmp	r3, #0
 810a76a:	d00a      	beq.n	810a782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810a76c:	687b      	ldr	r3, [r7, #4]
 810a76e:	681b      	ldr	r3, [r3, #0]
 810a770:	689b      	ldr	r3, [r3, #8]
 810a772:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810a776:	687b      	ldr	r3, [r7, #4]
 810a778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810a77a:	687b      	ldr	r3, [r7, #4]
 810a77c:	681b      	ldr	r3, [r3, #0]
 810a77e:	430a      	orrs	r2, r1
 810a780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810a782:	687b      	ldr	r3, [r7, #4]
 810a784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a786:	f003 0320 	and.w	r3, r3, #32
 810a78a:	2b00      	cmp	r3, #0
 810a78c:	d00a      	beq.n	810a7a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810a78e:	687b      	ldr	r3, [r7, #4]
 810a790:	681b      	ldr	r3, [r3, #0]
 810a792:	689b      	ldr	r3, [r3, #8]
 810a794:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810a798:	687b      	ldr	r3, [r7, #4]
 810a79a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810a79c:	687b      	ldr	r3, [r7, #4]
 810a79e:	681b      	ldr	r3, [r3, #0]
 810a7a0:	430a      	orrs	r2, r1
 810a7a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810a7a4:	687b      	ldr	r3, [r7, #4]
 810a7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a7ac:	2b00      	cmp	r3, #0
 810a7ae:	d01a      	beq.n	810a7e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810a7b0:	687b      	ldr	r3, [r7, #4]
 810a7b2:	681b      	ldr	r3, [r3, #0]
 810a7b4:	685b      	ldr	r3, [r3, #4]
 810a7b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810a7ba:	687b      	ldr	r3, [r7, #4]
 810a7bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810a7be:	687b      	ldr	r3, [r7, #4]
 810a7c0:	681b      	ldr	r3, [r3, #0]
 810a7c2:	430a      	orrs	r2, r1
 810a7c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810a7c6:	687b      	ldr	r3, [r7, #4]
 810a7c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a7ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a7ce:	d10a      	bne.n	810a7e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810a7d0:	687b      	ldr	r3, [r7, #4]
 810a7d2:	681b      	ldr	r3, [r3, #0]
 810a7d4:	685b      	ldr	r3, [r3, #4]
 810a7d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810a7da:	687b      	ldr	r3, [r7, #4]
 810a7dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810a7de:	687b      	ldr	r3, [r7, #4]
 810a7e0:	681b      	ldr	r3, [r3, #0]
 810a7e2:	430a      	orrs	r2, r1
 810a7e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810a7e6:	687b      	ldr	r3, [r7, #4]
 810a7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a7ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a7ee:	2b00      	cmp	r3, #0
 810a7f0:	d00a      	beq.n	810a808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810a7f2:	687b      	ldr	r3, [r7, #4]
 810a7f4:	681b      	ldr	r3, [r3, #0]
 810a7f6:	685b      	ldr	r3, [r3, #4]
 810a7f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810a7fc:	687b      	ldr	r3, [r7, #4]
 810a7fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810a800:	687b      	ldr	r3, [r7, #4]
 810a802:	681b      	ldr	r3, [r3, #0]
 810a804:	430a      	orrs	r2, r1
 810a806:	605a      	str	r2, [r3, #4]
  }
}
 810a808:	bf00      	nop
 810a80a:	370c      	adds	r7, #12
 810a80c:	46bd      	mov	sp, r7
 810a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a812:	4770      	bx	lr

0810a814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810a814:	b580      	push	{r7, lr}
 810a816:	b086      	sub	sp, #24
 810a818:	af02      	add	r7, sp, #8
 810a81a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a81c:	687b      	ldr	r3, [r7, #4]
 810a81e:	2200      	movs	r2, #0
 810a820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810a824:	f7fa fec2 	bl	81055ac <HAL_GetTick>
 810a828:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810a82a:	687b      	ldr	r3, [r7, #4]
 810a82c:	681b      	ldr	r3, [r3, #0]
 810a82e:	681b      	ldr	r3, [r3, #0]
 810a830:	f003 0308 	and.w	r3, r3, #8
 810a834:	2b08      	cmp	r3, #8
 810a836:	d10e      	bne.n	810a856 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a83c:	9300      	str	r3, [sp, #0]
 810a83e:	68fb      	ldr	r3, [r7, #12]
 810a840:	2200      	movs	r2, #0
 810a842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810a846:	6878      	ldr	r0, [r7, #4]
 810a848:	f000 f82f 	bl	810a8aa <UART_WaitOnFlagUntilTimeout>
 810a84c:	4603      	mov	r3, r0
 810a84e:	2b00      	cmp	r3, #0
 810a850:	d001      	beq.n	810a856 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a852:	2303      	movs	r3, #3
 810a854:	e025      	b.n	810a8a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810a856:	687b      	ldr	r3, [r7, #4]
 810a858:	681b      	ldr	r3, [r3, #0]
 810a85a:	681b      	ldr	r3, [r3, #0]
 810a85c:	f003 0304 	and.w	r3, r3, #4
 810a860:	2b04      	cmp	r3, #4
 810a862:	d10e      	bne.n	810a882 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a868:	9300      	str	r3, [sp, #0]
 810a86a:	68fb      	ldr	r3, [r7, #12]
 810a86c:	2200      	movs	r2, #0
 810a86e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810a872:	6878      	ldr	r0, [r7, #4]
 810a874:	f000 f819 	bl	810a8aa <UART_WaitOnFlagUntilTimeout>
 810a878:	4603      	mov	r3, r0
 810a87a:	2b00      	cmp	r3, #0
 810a87c:	d001      	beq.n	810a882 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a87e:	2303      	movs	r3, #3
 810a880:	e00f      	b.n	810a8a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810a882:	687b      	ldr	r3, [r7, #4]
 810a884:	2220      	movs	r2, #32
 810a886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810a88a:	687b      	ldr	r3, [r7, #4]
 810a88c:	2220      	movs	r2, #32
 810a88e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a892:	687b      	ldr	r3, [r7, #4]
 810a894:	2200      	movs	r2, #0
 810a896:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810a898:	687b      	ldr	r3, [r7, #4]
 810a89a:	2200      	movs	r2, #0
 810a89c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810a8a0:	2300      	movs	r3, #0
}
 810a8a2:	4618      	mov	r0, r3
 810a8a4:	3710      	adds	r7, #16
 810a8a6:	46bd      	mov	sp, r7
 810a8a8:	bd80      	pop	{r7, pc}

0810a8aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810a8aa:	b580      	push	{r7, lr}
 810a8ac:	b09c      	sub	sp, #112	; 0x70
 810a8ae:	af00      	add	r7, sp, #0
 810a8b0:	60f8      	str	r0, [r7, #12]
 810a8b2:	60b9      	str	r1, [r7, #8]
 810a8b4:	603b      	str	r3, [r7, #0]
 810a8b6:	4613      	mov	r3, r2
 810a8b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a8ba:	e0a9      	b.n	810aa10 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810a8bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810a8be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a8c2:	f000 80a5 	beq.w	810aa10 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810a8c6:	f7fa fe71 	bl	81055ac <HAL_GetTick>
 810a8ca:	4602      	mov	r2, r0
 810a8cc:	683b      	ldr	r3, [r7, #0]
 810a8ce:	1ad3      	subs	r3, r2, r3
 810a8d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 810a8d2:	429a      	cmp	r2, r3
 810a8d4:	d302      	bcc.n	810a8dc <UART_WaitOnFlagUntilTimeout+0x32>
 810a8d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810a8d8:	2b00      	cmp	r3, #0
 810a8da:	d140      	bne.n	810a95e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810a8dc:	68fb      	ldr	r3, [r7, #12]
 810a8de:	681b      	ldr	r3, [r3, #0]
 810a8e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a8e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810a8e4:	e853 3f00 	ldrex	r3, [r3]
 810a8e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810a8ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810a8ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810a8f0:	667b      	str	r3, [r7, #100]	; 0x64
 810a8f2:	68fb      	ldr	r3, [r7, #12]
 810a8f4:	681b      	ldr	r3, [r3, #0]
 810a8f6:	461a      	mov	r2, r3
 810a8f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810a8fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 810a8fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a8fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 810a900:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810a902:	e841 2300 	strex	r3, r2, [r1]
 810a906:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 810a908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810a90a:	2b00      	cmp	r3, #0
 810a90c:	d1e6      	bne.n	810a8dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a90e:	68fb      	ldr	r3, [r7, #12]
 810a910:	681b      	ldr	r3, [r3, #0]
 810a912:	3308      	adds	r3, #8
 810a914:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a918:	e853 3f00 	ldrex	r3, [r3]
 810a91c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810a91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a920:	f023 0301 	bic.w	r3, r3, #1
 810a924:	663b      	str	r3, [r7, #96]	; 0x60
 810a926:	68fb      	ldr	r3, [r7, #12]
 810a928:	681b      	ldr	r3, [r3, #0]
 810a92a:	3308      	adds	r3, #8
 810a92c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810a92e:	64ba      	str	r2, [r7, #72]	; 0x48
 810a930:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a932:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810a934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810a936:	e841 2300 	strex	r3, r2, [r1]
 810a93a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 810a93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810a93e:	2b00      	cmp	r3, #0
 810a940:	d1e5      	bne.n	810a90e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 810a942:	68fb      	ldr	r3, [r7, #12]
 810a944:	2220      	movs	r2, #32
 810a946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810a94a:	68fb      	ldr	r3, [r7, #12]
 810a94c:	2220      	movs	r2, #32
 810a94e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810a952:	68fb      	ldr	r3, [r7, #12]
 810a954:	2200      	movs	r2, #0
 810a956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810a95a:	2303      	movs	r3, #3
 810a95c:	e069      	b.n	810aa32 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810a95e:	68fb      	ldr	r3, [r7, #12]
 810a960:	681b      	ldr	r3, [r3, #0]
 810a962:	681b      	ldr	r3, [r3, #0]
 810a964:	f003 0304 	and.w	r3, r3, #4
 810a968:	2b00      	cmp	r3, #0
 810a96a:	d051      	beq.n	810aa10 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810a96c:	68fb      	ldr	r3, [r7, #12]
 810a96e:	681b      	ldr	r3, [r3, #0]
 810a970:	69db      	ldr	r3, [r3, #28]
 810a972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810a976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810a97a:	d149      	bne.n	810aa10 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810a97c:	68fb      	ldr	r3, [r7, #12]
 810a97e:	681b      	ldr	r3, [r3, #0]
 810a980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810a984:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810a986:	68fb      	ldr	r3, [r7, #12]
 810a988:	681b      	ldr	r3, [r3, #0]
 810a98a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a98e:	e853 3f00 	ldrex	r3, [r3]
 810a992:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a996:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810a99a:	66fb      	str	r3, [r7, #108]	; 0x6c
 810a99c:	68fb      	ldr	r3, [r7, #12]
 810a99e:	681b      	ldr	r3, [r3, #0]
 810a9a0:	461a      	mov	r2, r3
 810a9a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810a9a4:	637b      	str	r3, [r7, #52]	; 0x34
 810a9a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a9a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810a9aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810a9ac:	e841 2300 	strex	r3, r2, [r1]
 810a9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 810a9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a9b4:	2b00      	cmp	r3, #0
 810a9b6:	d1e6      	bne.n	810a986 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a9b8:	68fb      	ldr	r3, [r7, #12]
 810a9ba:	681b      	ldr	r3, [r3, #0]
 810a9bc:	3308      	adds	r3, #8
 810a9be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a9c0:	697b      	ldr	r3, [r7, #20]
 810a9c2:	e853 3f00 	ldrex	r3, [r3]
 810a9c6:	613b      	str	r3, [r7, #16]
   return(result);
 810a9c8:	693b      	ldr	r3, [r7, #16]
 810a9ca:	f023 0301 	bic.w	r3, r3, #1
 810a9ce:	66bb      	str	r3, [r7, #104]	; 0x68
 810a9d0:	68fb      	ldr	r3, [r7, #12]
 810a9d2:	681b      	ldr	r3, [r3, #0]
 810a9d4:	3308      	adds	r3, #8
 810a9d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 810a9d8:	623a      	str	r2, [r7, #32]
 810a9da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a9dc:	69f9      	ldr	r1, [r7, #28]
 810a9de:	6a3a      	ldr	r2, [r7, #32]
 810a9e0:	e841 2300 	strex	r3, r2, [r1]
 810a9e4:	61bb      	str	r3, [r7, #24]
   return(result);
 810a9e6:	69bb      	ldr	r3, [r7, #24]
 810a9e8:	2b00      	cmp	r3, #0
 810a9ea:	d1e5      	bne.n	810a9b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 810a9ec:	68fb      	ldr	r3, [r7, #12]
 810a9ee:	2220      	movs	r2, #32
 810a9f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810a9f4:	68fb      	ldr	r3, [r7, #12]
 810a9f6:	2220      	movs	r2, #32
 810a9f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810a9fc:	68fb      	ldr	r3, [r7, #12]
 810a9fe:	2220      	movs	r2, #32
 810aa00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810aa04:	68fb      	ldr	r3, [r7, #12]
 810aa06:	2200      	movs	r2, #0
 810aa08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810aa0c:	2303      	movs	r3, #3
 810aa0e:	e010      	b.n	810aa32 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810aa10:	68fb      	ldr	r3, [r7, #12]
 810aa12:	681b      	ldr	r3, [r3, #0]
 810aa14:	69da      	ldr	r2, [r3, #28]
 810aa16:	68bb      	ldr	r3, [r7, #8]
 810aa18:	4013      	ands	r3, r2
 810aa1a:	68ba      	ldr	r2, [r7, #8]
 810aa1c:	429a      	cmp	r2, r3
 810aa1e:	bf0c      	ite	eq
 810aa20:	2301      	moveq	r3, #1
 810aa22:	2300      	movne	r3, #0
 810aa24:	b2db      	uxtb	r3, r3
 810aa26:	461a      	mov	r2, r3
 810aa28:	79fb      	ldrb	r3, [r7, #7]
 810aa2a:	429a      	cmp	r2, r3
 810aa2c:	f43f af46 	beq.w	810a8bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810aa30:	2300      	movs	r3, #0
}
 810aa32:	4618      	mov	r0, r3
 810aa34:	3770      	adds	r7, #112	; 0x70
 810aa36:	46bd      	mov	sp, r7
 810aa38:	bd80      	pop	{r7, pc}
	...

0810aa3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810aa3c:	b580      	push	{r7, lr}
 810aa3e:	b096      	sub	sp, #88	; 0x58
 810aa40:	af00      	add	r7, sp, #0
 810aa42:	60f8      	str	r0, [r7, #12]
 810aa44:	60b9      	str	r1, [r7, #8]
 810aa46:	4613      	mov	r3, r2
 810aa48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 810aa4a:	68fb      	ldr	r3, [r7, #12]
 810aa4c:	68ba      	ldr	r2, [r7, #8]
 810aa4e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 810aa50:	68fb      	ldr	r3, [r7, #12]
 810aa52:	88fa      	ldrh	r2, [r7, #6]
 810aa54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810aa58:	68fb      	ldr	r3, [r7, #12]
 810aa5a:	2200      	movs	r2, #0
 810aa5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810aa60:	68fb      	ldr	r3, [r7, #12]
 810aa62:	2222      	movs	r2, #34	; 0x22
 810aa64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 810aa68:	68fb      	ldr	r3, [r7, #12]
 810aa6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aa6c:	2b00      	cmp	r3, #0
 810aa6e:	d02c      	beq.n	810aaca <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 810aa70:	68fb      	ldr	r3, [r7, #12]
 810aa72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aa74:	4a42      	ldr	r2, [pc, #264]	; (810ab80 <UART_Start_Receive_DMA+0x144>)
 810aa76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 810aa78:	68fb      	ldr	r3, [r7, #12]
 810aa7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aa7c:	4a41      	ldr	r2, [pc, #260]	; (810ab84 <UART_Start_Receive_DMA+0x148>)
 810aa7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 810aa80:	68fb      	ldr	r3, [r7, #12]
 810aa82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aa84:	4a40      	ldr	r2, [pc, #256]	; (810ab88 <UART_Start_Receive_DMA+0x14c>)
 810aa86:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 810aa88:	68fb      	ldr	r3, [r7, #12]
 810aa8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aa8c:	2200      	movs	r2, #0
 810aa8e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 810aa90:	68fb      	ldr	r3, [r7, #12]
 810aa92:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 810aa94:	68fb      	ldr	r3, [r7, #12]
 810aa96:	681b      	ldr	r3, [r3, #0]
 810aa98:	3324      	adds	r3, #36	; 0x24
 810aa9a:	4619      	mov	r1, r3
 810aa9c:	68fb      	ldr	r3, [r7, #12]
 810aa9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810aaa0:	461a      	mov	r2, r3
 810aaa2:	88fb      	ldrh	r3, [r7, #6]
 810aaa4:	f7fb fa0c 	bl	8105ec0 <HAL_DMA_Start_IT>
 810aaa8:	4603      	mov	r3, r0
 810aaaa:	2b00      	cmp	r3, #0
 810aaac:	d00d      	beq.n	810aaca <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 810aaae:	68fb      	ldr	r3, [r7, #12]
 810aab0:	2210      	movs	r2, #16
 810aab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 810aab6:	68fb      	ldr	r3, [r7, #12]
 810aab8:	2200      	movs	r2, #0
 810aaba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 810aabe:	68fb      	ldr	r3, [r7, #12]
 810aac0:	2220      	movs	r2, #32
 810aac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 810aac6:	2301      	movs	r3, #1
 810aac8:	e055      	b.n	810ab76 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 810aaca:	68fb      	ldr	r3, [r7, #12]
 810aacc:	2200      	movs	r2, #0
 810aace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 810aad2:	68fb      	ldr	r3, [r7, #12]
 810aad4:	691b      	ldr	r3, [r3, #16]
 810aad6:	2b00      	cmp	r3, #0
 810aad8:	d018      	beq.n	810ab0c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810aada:	68fb      	ldr	r3, [r7, #12]
 810aadc:	681b      	ldr	r3, [r3, #0]
 810aade:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810aae2:	e853 3f00 	ldrex	r3, [r3]
 810aae6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810aae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810aaea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810aaee:	657b      	str	r3, [r7, #84]	; 0x54
 810aaf0:	68fb      	ldr	r3, [r7, #12]
 810aaf2:	681b      	ldr	r3, [r3, #0]
 810aaf4:	461a      	mov	r2, r3
 810aaf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810aaf8:	64bb      	str	r3, [r7, #72]	; 0x48
 810aafa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aafc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810aafe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810ab00:	e841 2300 	strex	r3, r2, [r1]
 810ab04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 810ab06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810ab08:	2b00      	cmp	r3, #0
 810ab0a:	d1e6      	bne.n	810aada <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ab0c:	68fb      	ldr	r3, [r7, #12]
 810ab0e:	681b      	ldr	r3, [r3, #0]
 810ab10:	3308      	adds	r3, #8
 810ab12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ab14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ab16:	e853 3f00 	ldrex	r3, [r3]
 810ab1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ab1e:	f043 0301 	orr.w	r3, r3, #1
 810ab22:	653b      	str	r3, [r7, #80]	; 0x50
 810ab24:	68fb      	ldr	r3, [r7, #12]
 810ab26:	681b      	ldr	r3, [r3, #0]
 810ab28:	3308      	adds	r3, #8
 810ab2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 810ab2c:	637a      	str	r2, [r7, #52]	; 0x34
 810ab2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ab30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810ab32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810ab34:	e841 2300 	strex	r3, r2, [r1]
 810ab38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 810ab3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ab3c:	2b00      	cmp	r3, #0
 810ab3e:	d1e5      	bne.n	810ab0c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810ab40:	68fb      	ldr	r3, [r7, #12]
 810ab42:	681b      	ldr	r3, [r3, #0]
 810ab44:	3308      	adds	r3, #8
 810ab46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ab48:	697b      	ldr	r3, [r7, #20]
 810ab4a:	e853 3f00 	ldrex	r3, [r3]
 810ab4e:	613b      	str	r3, [r7, #16]
   return(result);
 810ab50:	693b      	ldr	r3, [r7, #16]
 810ab52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810ab56:	64fb      	str	r3, [r7, #76]	; 0x4c
 810ab58:	68fb      	ldr	r3, [r7, #12]
 810ab5a:	681b      	ldr	r3, [r3, #0]
 810ab5c:	3308      	adds	r3, #8
 810ab5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 810ab60:	623a      	str	r2, [r7, #32]
 810ab62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ab64:	69f9      	ldr	r1, [r7, #28]
 810ab66:	6a3a      	ldr	r2, [r7, #32]
 810ab68:	e841 2300 	strex	r3, r2, [r1]
 810ab6c:	61bb      	str	r3, [r7, #24]
   return(result);
 810ab6e:	69bb      	ldr	r3, [r7, #24]
 810ab70:	2b00      	cmp	r3, #0
 810ab72:	d1e5      	bne.n	810ab40 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 810ab74:	2300      	movs	r3, #0
}
 810ab76:	4618      	mov	r0, r3
 810ab78:	3758      	adds	r7, #88	; 0x58
 810ab7a:	46bd      	mov	sp, r7
 810ab7c:	bd80      	pop	{r7, pc}
 810ab7e:	bf00      	nop
 810ab80:	0810acdb 	.word	0x0810acdb
 810ab84:	0810adfd 	.word	0x0810adfd
 810ab88:	0810ae35 	.word	0x0810ae35

0810ab8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810ab8c:	b480      	push	{r7}
 810ab8e:	b08f      	sub	sp, #60	; 0x3c
 810ab90:	af00      	add	r7, sp, #0
 810ab92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810ab94:	687b      	ldr	r3, [r7, #4]
 810ab96:	681b      	ldr	r3, [r3, #0]
 810ab98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ab9a:	6a3b      	ldr	r3, [r7, #32]
 810ab9c:	e853 3f00 	ldrex	r3, [r3]
 810aba0:	61fb      	str	r3, [r7, #28]
   return(result);
 810aba2:	69fb      	ldr	r3, [r7, #28]
 810aba4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 810aba8:	637b      	str	r3, [r7, #52]	; 0x34
 810abaa:	687b      	ldr	r3, [r7, #4]
 810abac:	681b      	ldr	r3, [r3, #0]
 810abae:	461a      	mov	r2, r3
 810abb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810abb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 810abb4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810abb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810abb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810abba:	e841 2300 	strex	r3, r2, [r1]
 810abbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810abc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810abc2:	2b00      	cmp	r3, #0
 810abc4:	d1e6      	bne.n	810ab94 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810abc6:	687b      	ldr	r3, [r7, #4]
 810abc8:	681b      	ldr	r3, [r3, #0]
 810abca:	3308      	adds	r3, #8
 810abcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810abce:	68fb      	ldr	r3, [r7, #12]
 810abd0:	e853 3f00 	ldrex	r3, [r3]
 810abd4:	60bb      	str	r3, [r7, #8]
   return(result);
 810abd6:	68bb      	ldr	r3, [r7, #8]
 810abd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 810abdc:	633b      	str	r3, [r7, #48]	; 0x30
 810abde:	687b      	ldr	r3, [r7, #4]
 810abe0:	681b      	ldr	r3, [r3, #0]
 810abe2:	3308      	adds	r3, #8
 810abe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810abe6:	61ba      	str	r2, [r7, #24]
 810abe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810abea:	6979      	ldr	r1, [r7, #20]
 810abec:	69ba      	ldr	r2, [r7, #24]
 810abee:	e841 2300 	strex	r3, r2, [r1]
 810abf2:	613b      	str	r3, [r7, #16]
   return(result);
 810abf4:	693b      	ldr	r3, [r7, #16]
 810abf6:	2b00      	cmp	r3, #0
 810abf8:	d1e5      	bne.n	810abc6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810abfa:	687b      	ldr	r3, [r7, #4]
 810abfc:	2220      	movs	r2, #32
 810abfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 810ac02:	bf00      	nop
 810ac04:	373c      	adds	r7, #60	; 0x3c
 810ac06:	46bd      	mov	sp, r7
 810ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac0c:	4770      	bx	lr

0810ac0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810ac0e:	b480      	push	{r7}
 810ac10:	b095      	sub	sp, #84	; 0x54
 810ac12:	af00      	add	r7, sp, #0
 810ac14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810ac16:	687b      	ldr	r3, [r7, #4]
 810ac18:	681b      	ldr	r3, [r3, #0]
 810ac1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ac1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ac1e:	e853 3f00 	ldrex	r3, [r3]
 810ac22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810ac24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ac26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810ac2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 810ac2c:	687b      	ldr	r3, [r7, #4]
 810ac2e:	681b      	ldr	r3, [r3, #0]
 810ac30:	461a      	mov	r2, r3
 810ac32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810ac34:	643b      	str	r3, [r7, #64]	; 0x40
 810ac36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ac38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810ac3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 810ac3c:	e841 2300 	strex	r3, r2, [r1]
 810ac40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810ac42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ac44:	2b00      	cmp	r3, #0
 810ac46:	d1e6      	bne.n	810ac16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810ac48:	687b      	ldr	r3, [r7, #4]
 810ac4a:	681b      	ldr	r3, [r3, #0]
 810ac4c:	3308      	adds	r3, #8
 810ac4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ac50:	6a3b      	ldr	r3, [r7, #32]
 810ac52:	e853 3f00 	ldrex	r3, [r3]
 810ac56:	61fb      	str	r3, [r7, #28]
   return(result);
 810ac58:	69fb      	ldr	r3, [r7, #28]
 810ac5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810ac5e:	f023 0301 	bic.w	r3, r3, #1
 810ac62:	64bb      	str	r3, [r7, #72]	; 0x48
 810ac64:	687b      	ldr	r3, [r7, #4]
 810ac66:	681b      	ldr	r3, [r3, #0]
 810ac68:	3308      	adds	r3, #8
 810ac6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810ac6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 810ac6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ac70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810ac72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810ac74:	e841 2300 	strex	r3, r2, [r1]
 810ac78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ac7c:	2b00      	cmp	r3, #0
 810ac7e:	d1e3      	bne.n	810ac48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ac80:	687b      	ldr	r3, [r7, #4]
 810ac82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810ac84:	2b01      	cmp	r3, #1
 810ac86:	d118      	bne.n	810acba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ac88:	687b      	ldr	r3, [r7, #4]
 810ac8a:	681b      	ldr	r3, [r3, #0]
 810ac8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ac8e:	68fb      	ldr	r3, [r7, #12]
 810ac90:	e853 3f00 	ldrex	r3, [r3]
 810ac94:	60bb      	str	r3, [r7, #8]
   return(result);
 810ac96:	68bb      	ldr	r3, [r7, #8]
 810ac98:	f023 0310 	bic.w	r3, r3, #16
 810ac9c:	647b      	str	r3, [r7, #68]	; 0x44
 810ac9e:	687b      	ldr	r3, [r7, #4]
 810aca0:	681b      	ldr	r3, [r3, #0]
 810aca2:	461a      	mov	r2, r3
 810aca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810aca6:	61bb      	str	r3, [r7, #24]
 810aca8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810acaa:	6979      	ldr	r1, [r7, #20]
 810acac:	69ba      	ldr	r2, [r7, #24]
 810acae:	e841 2300 	strex	r3, r2, [r1]
 810acb2:	613b      	str	r3, [r7, #16]
   return(result);
 810acb4:	693b      	ldr	r3, [r7, #16]
 810acb6:	2b00      	cmp	r3, #0
 810acb8:	d1e6      	bne.n	810ac88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810acba:	687b      	ldr	r3, [r7, #4]
 810acbc:	2220      	movs	r2, #32
 810acbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810acc2:	687b      	ldr	r3, [r7, #4]
 810acc4:	2200      	movs	r2, #0
 810acc6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810acc8:	687b      	ldr	r3, [r7, #4]
 810acca:	2200      	movs	r2, #0
 810accc:	671a      	str	r2, [r3, #112]	; 0x70
}
 810acce:	bf00      	nop
 810acd0:	3754      	adds	r7, #84	; 0x54
 810acd2:	46bd      	mov	sp, r7
 810acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810acd8:	4770      	bx	lr

0810acda <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810acda:	b580      	push	{r7, lr}
 810acdc:	b09c      	sub	sp, #112	; 0x70
 810acde:	af00      	add	r7, sp, #0
 810ace0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810ace2:	687b      	ldr	r3, [r7, #4]
 810ace4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ace6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810ace8:	687b      	ldr	r3, [r7, #4]
 810acea:	69db      	ldr	r3, [r3, #28]
 810acec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810acf0:	d071      	beq.n	810add6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 810acf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810acf4:	2200      	movs	r2, #0
 810acf6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810acfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810acfc:	681b      	ldr	r3, [r3, #0]
 810acfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ad00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810ad02:	e853 3f00 	ldrex	r3, [r3]
 810ad06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 810ad08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810ad0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810ad0e:	66bb      	str	r3, [r7, #104]	; 0x68
 810ad10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810ad12:	681b      	ldr	r3, [r3, #0]
 810ad14:	461a      	mov	r2, r3
 810ad16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810ad18:	65bb      	str	r3, [r7, #88]	; 0x58
 810ad1a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ad1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 810ad1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 810ad20:	e841 2300 	strex	r3, r2, [r1]
 810ad24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 810ad26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810ad28:	2b00      	cmp	r3, #0
 810ad2a:	d1e6      	bne.n	810acfa <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ad2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810ad2e:	681b      	ldr	r3, [r3, #0]
 810ad30:	3308      	adds	r3, #8
 810ad32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ad34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ad36:	e853 3f00 	ldrex	r3, [r3]
 810ad3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 810ad3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ad3e:	f023 0301 	bic.w	r3, r3, #1
 810ad42:	667b      	str	r3, [r7, #100]	; 0x64
 810ad44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810ad46:	681b      	ldr	r3, [r3, #0]
 810ad48:	3308      	adds	r3, #8
 810ad4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 810ad4c:	647a      	str	r2, [r7, #68]	; 0x44
 810ad4e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ad50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 810ad52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810ad54:	e841 2300 	strex	r3, r2, [r1]
 810ad58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 810ad5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810ad5c:	2b00      	cmp	r3, #0
 810ad5e:	d1e5      	bne.n	810ad2c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810ad60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810ad62:	681b      	ldr	r3, [r3, #0]
 810ad64:	3308      	adds	r3, #8
 810ad66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ad6a:	e853 3f00 	ldrex	r3, [r3]
 810ad6e:	623b      	str	r3, [r7, #32]
   return(result);
 810ad70:	6a3b      	ldr	r3, [r7, #32]
 810ad72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810ad76:	663b      	str	r3, [r7, #96]	; 0x60
 810ad78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810ad7a:	681b      	ldr	r3, [r3, #0]
 810ad7c:	3308      	adds	r3, #8
 810ad7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810ad80:	633a      	str	r2, [r7, #48]	; 0x30
 810ad82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ad84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810ad86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810ad88:	e841 2300 	strex	r3, r2, [r1]
 810ad8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 810ad8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ad90:	2b00      	cmp	r3, #0
 810ad92:	d1e5      	bne.n	810ad60 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810ad94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810ad96:	2220      	movs	r2, #32
 810ad98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ad9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810ad9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810ada0:	2b01      	cmp	r3, #1
 810ada2:	d118      	bne.n	810add6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ada4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810ada6:	681b      	ldr	r3, [r3, #0]
 810ada8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810adaa:	693b      	ldr	r3, [r7, #16]
 810adac:	e853 3f00 	ldrex	r3, [r3]
 810adb0:	60fb      	str	r3, [r7, #12]
   return(result);
 810adb2:	68fb      	ldr	r3, [r7, #12]
 810adb4:	f023 0310 	bic.w	r3, r3, #16
 810adb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 810adba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810adbc:	681b      	ldr	r3, [r3, #0]
 810adbe:	461a      	mov	r2, r3
 810adc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 810adc2:	61fb      	str	r3, [r7, #28]
 810adc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810adc6:	69b9      	ldr	r1, [r7, #24]
 810adc8:	69fa      	ldr	r2, [r7, #28]
 810adca:	e841 2300 	strex	r3, r2, [r1]
 810adce:	617b      	str	r3, [r7, #20]
   return(result);
 810add0:	697b      	ldr	r3, [r7, #20]
 810add2:	2b00      	cmp	r3, #0
 810add4:	d1e6      	bne.n	810ada4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810add6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810add8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810adda:	2b01      	cmp	r3, #1
 810addc:	d107      	bne.n	810adee <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810adde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810ade0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810ade4:	4619      	mov	r1, r3
 810ade6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 810ade8:	f7fe fefe 	bl	8109be8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810adec:	e002      	b.n	810adf4 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 810adee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 810adf0:	f7fe fedc 	bl	8109bac <HAL_UART_RxCpltCallback>
}
 810adf4:	bf00      	nop
 810adf6:	3770      	adds	r7, #112	; 0x70
 810adf8:	46bd      	mov	sp, r7
 810adfa:	bd80      	pop	{r7, pc}

0810adfc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810adfc:	b580      	push	{r7, lr}
 810adfe:	b084      	sub	sp, #16
 810ae00:	af00      	add	r7, sp, #0
 810ae02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810ae04:	687b      	ldr	r3, [r7, #4]
 810ae06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ae08:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ae0a:	68fb      	ldr	r3, [r7, #12]
 810ae0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810ae0e:	2b01      	cmp	r3, #1
 810ae10:	d109      	bne.n	810ae26 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 810ae12:	68fb      	ldr	r3, [r7, #12]
 810ae14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810ae18:	085b      	lsrs	r3, r3, #1
 810ae1a:	b29b      	uxth	r3, r3
 810ae1c:	4619      	mov	r1, r3
 810ae1e:	68f8      	ldr	r0, [r7, #12]
 810ae20:	f7fe fee2 	bl	8109be8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810ae24:	e002      	b.n	810ae2c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 810ae26:	68f8      	ldr	r0, [r7, #12]
 810ae28:	f7fe feca 	bl	8109bc0 <HAL_UART_RxHalfCpltCallback>
}
 810ae2c:	bf00      	nop
 810ae2e:	3710      	adds	r7, #16
 810ae30:	46bd      	mov	sp, r7
 810ae32:	bd80      	pop	{r7, pc}

0810ae34 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810ae34:	b580      	push	{r7, lr}
 810ae36:	b086      	sub	sp, #24
 810ae38:	af00      	add	r7, sp, #0
 810ae3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810ae3c:	687b      	ldr	r3, [r7, #4]
 810ae3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ae40:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810ae42:	697b      	ldr	r3, [r7, #20]
 810ae44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ae48:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810ae4a:	697b      	ldr	r3, [r7, #20]
 810ae4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810ae50:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810ae52:	697b      	ldr	r3, [r7, #20]
 810ae54:	681b      	ldr	r3, [r3, #0]
 810ae56:	689b      	ldr	r3, [r3, #8]
 810ae58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810ae5c:	2b80      	cmp	r3, #128	; 0x80
 810ae5e:	d109      	bne.n	810ae74 <UART_DMAError+0x40>
 810ae60:	693b      	ldr	r3, [r7, #16]
 810ae62:	2b21      	cmp	r3, #33	; 0x21
 810ae64:	d106      	bne.n	810ae74 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810ae66:	697b      	ldr	r3, [r7, #20]
 810ae68:	2200      	movs	r2, #0
 810ae6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 810ae6e:	6978      	ldr	r0, [r7, #20]
 810ae70:	f7ff fe8c 	bl	810ab8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810ae74:	697b      	ldr	r3, [r7, #20]
 810ae76:	681b      	ldr	r3, [r3, #0]
 810ae78:	689b      	ldr	r3, [r3, #8]
 810ae7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810ae7e:	2b40      	cmp	r3, #64	; 0x40
 810ae80:	d109      	bne.n	810ae96 <UART_DMAError+0x62>
 810ae82:	68fb      	ldr	r3, [r7, #12]
 810ae84:	2b22      	cmp	r3, #34	; 0x22
 810ae86:	d106      	bne.n	810ae96 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810ae88:	697b      	ldr	r3, [r7, #20]
 810ae8a:	2200      	movs	r2, #0
 810ae8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810ae90:	6978      	ldr	r0, [r7, #20]
 810ae92:	f7ff febc 	bl	810ac0e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810ae96:	697b      	ldr	r3, [r7, #20]
 810ae98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810ae9c:	f043 0210 	orr.w	r2, r3, #16
 810aea0:	697b      	ldr	r3, [r7, #20]
 810aea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810aea6:	6978      	ldr	r0, [r7, #20]
 810aea8:	f7fe fe94 	bl	8109bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810aeac:	bf00      	nop
 810aeae:	3718      	adds	r7, #24
 810aeb0:	46bd      	mov	sp, r7
 810aeb2:	bd80      	pop	{r7, pc}

0810aeb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810aeb4:	b480      	push	{r7}
 810aeb6:	b085      	sub	sp, #20
 810aeb8:	af00      	add	r7, sp, #0
 810aeba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810aebc:	687b      	ldr	r3, [r7, #4]
 810aebe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810aec2:	2b01      	cmp	r3, #1
 810aec4:	d101      	bne.n	810aeca <HAL_UARTEx_DisableFifoMode+0x16>
 810aec6:	2302      	movs	r3, #2
 810aec8:	e027      	b.n	810af1a <HAL_UARTEx_DisableFifoMode+0x66>
 810aeca:	687b      	ldr	r3, [r7, #4]
 810aecc:	2201      	movs	r2, #1
 810aece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810aed2:	687b      	ldr	r3, [r7, #4]
 810aed4:	2224      	movs	r2, #36	; 0x24
 810aed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810aeda:	687b      	ldr	r3, [r7, #4]
 810aedc:	681b      	ldr	r3, [r3, #0]
 810aede:	681b      	ldr	r3, [r3, #0]
 810aee0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810aee2:	687b      	ldr	r3, [r7, #4]
 810aee4:	681b      	ldr	r3, [r3, #0]
 810aee6:	681a      	ldr	r2, [r3, #0]
 810aee8:	687b      	ldr	r3, [r7, #4]
 810aeea:	681b      	ldr	r3, [r3, #0]
 810aeec:	f022 0201 	bic.w	r2, r2, #1
 810aef0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810aef2:	68fb      	ldr	r3, [r7, #12]
 810aef4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810aef8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810aefa:	687b      	ldr	r3, [r7, #4]
 810aefc:	2200      	movs	r2, #0
 810aefe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810af00:	687b      	ldr	r3, [r7, #4]
 810af02:	681b      	ldr	r3, [r3, #0]
 810af04:	68fa      	ldr	r2, [r7, #12]
 810af06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810af08:	687b      	ldr	r3, [r7, #4]
 810af0a:	2220      	movs	r2, #32
 810af0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810af10:	687b      	ldr	r3, [r7, #4]
 810af12:	2200      	movs	r2, #0
 810af14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810af18:	2300      	movs	r3, #0
}
 810af1a:	4618      	mov	r0, r3
 810af1c:	3714      	adds	r7, #20
 810af1e:	46bd      	mov	sp, r7
 810af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af24:	4770      	bx	lr

0810af26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810af26:	b580      	push	{r7, lr}
 810af28:	b084      	sub	sp, #16
 810af2a:	af00      	add	r7, sp, #0
 810af2c:	6078      	str	r0, [r7, #4]
 810af2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810af30:	687b      	ldr	r3, [r7, #4]
 810af32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810af36:	2b01      	cmp	r3, #1
 810af38:	d101      	bne.n	810af3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810af3a:	2302      	movs	r3, #2
 810af3c:	e02d      	b.n	810af9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810af3e:	687b      	ldr	r3, [r7, #4]
 810af40:	2201      	movs	r2, #1
 810af42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810af46:	687b      	ldr	r3, [r7, #4]
 810af48:	2224      	movs	r2, #36	; 0x24
 810af4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810af4e:	687b      	ldr	r3, [r7, #4]
 810af50:	681b      	ldr	r3, [r3, #0]
 810af52:	681b      	ldr	r3, [r3, #0]
 810af54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810af56:	687b      	ldr	r3, [r7, #4]
 810af58:	681b      	ldr	r3, [r3, #0]
 810af5a:	681a      	ldr	r2, [r3, #0]
 810af5c:	687b      	ldr	r3, [r7, #4]
 810af5e:	681b      	ldr	r3, [r3, #0]
 810af60:	f022 0201 	bic.w	r2, r2, #1
 810af64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810af66:	687b      	ldr	r3, [r7, #4]
 810af68:	681b      	ldr	r3, [r3, #0]
 810af6a:	689b      	ldr	r3, [r3, #8]
 810af6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810af70:	687b      	ldr	r3, [r7, #4]
 810af72:	681b      	ldr	r3, [r3, #0]
 810af74:	683a      	ldr	r2, [r7, #0]
 810af76:	430a      	orrs	r2, r1
 810af78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810af7a:	6878      	ldr	r0, [r7, #4]
 810af7c:	f000 f850 	bl	810b020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810af80:	687b      	ldr	r3, [r7, #4]
 810af82:	681b      	ldr	r3, [r3, #0]
 810af84:	68fa      	ldr	r2, [r7, #12]
 810af86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810af88:	687b      	ldr	r3, [r7, #4]
 810af8a:	2220      	movs	r2, #32
 810af8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810af90:	687b      	ldr	r3, [r7, #4]
 810af92:	2200      	movs	r2, #0
 810af94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810af98:	2300      	movs	r3, #0
}
 810af9a:	4618      	mov	r0, r3
 810af9c:	3710      	adds	r7, #16
 810af9e:	46bd      	mov	sp, r7
 810afa0:	bd80      	pop	{r7, pc}

0810afa2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810afa2:	b580      	push	{r7, lr}
 810afa4:	b084      	sub	sp, #16
 810afa6:	af00      	add	r7, sp, #0
 810afa8:	6078      	str	r0, [r7, #4]
 810afaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810afac:	687b      	ldr	r3, [r7, #4]
 810afae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810afb2:	2b01      	cmp	r3, #1
 810afb4:	d101      	bne.n	810afba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810afb6:	2302      	movs	r3, #2
 810afb8:	e02d      	b.n	810b016 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810afba:	687b      	ldr	r3, [r7, #4]
 810afbc:	2201      	movs	r2, #1
 810afbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810afc2:	687b      	ldr	r3, [r7, #4]
 810afc4:	2224      	movs	r2, #36	; 0x24
 810afc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810afca:	687b      	ldr	r3, [r7, #4]
 810afcc:	681b      	ldr	r3, [r3, #0]
 810afce:	681b      	ldr	r3, [r3, #0]
 810afd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810afd2:	687b      	ldr	r3, [r7, #4]
 810afd4:	681b      	ldr	r3, [r3, #0]
 810afd6:	681a      	ldr	r2, [r3, #0]
 810afd8:	687b      	ldr	r3, [r7, #4]
 810afda:	681b      	ldr	r3, [r3, #0]
 810afdc:	f022 0201 	bic.w	r2, r2, #1
 810afe0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810afe2:	687b      	ldr	r3, [r7, #4]
 810afe4:	681b      	ldr	r3, [r3, #0]
 810afe6:	689b      	ldr	r3, [r3, #8]
 810afe8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810afec:	687b      	ldr	r3, [r7, #4]
 810afee:	681b      	ldr	r3, [r3, #0]
 810aff0:	683a      	ldr	r2, [r7, #0]
 810aff2:	430a      	orrs	r2, r1
 810aff4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810aff6:	6878      	ldr	r0, [r7, #4]
 810aff8:	f000 f812 	bl	810b020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810affc:	687b      	ldr	r3, [r7, #4]
 810affe:	681b      	ldr	r3, [r3, #0]
 810b000:	68fa      	ldr	r2, [r7, #12]
 810b002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b004:	687b      	ldr	r3, [r7, #4]
 810b006:	2220      	movs	r2, #32
 810b008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b00c:	687b      	ldr	r3, [r7, #4]
 810b00e:	2200      	movs	r2, #0
 810b010:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810b014:	2300      	movs	r3, #0
}
 810b016:	4618      	mov	r0, r3
 810b018:	3710      	adds	r7, #16
 810b01a:	46bd      	mov	sp, r7
 810b01c:	bd80      	pop	{r7, pc}
	...

0810b020 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810b020:	b480      	push	{r7}
 810b022:	b085      	sub	sp, #20
 810b024:	af00      	add	r7, sp, #0
 810b026:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810b028:	687b      	ldr	r3, [r7, #4]
 810b02a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b02c:	2b00      	cmp	r3, #0
 810b02e:	d108      	bne.n	810b042 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810b030:	687b      	ldr	r3, [r7, #4]
 810b032:	2201      	movs	r2, #1
 810b034:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810b038:	687b      	ldr	r3, [r7, #4]
 810b03a:	2201      	movs	r2, #1
 810b03c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810b040:	e031      	b.n	810b0a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810b042:	2310      	movs	r3, #16
 810b044:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810b046:	2310      	movs	r3, #16
 810b048:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810b04a:	687b      	ldr	r3, [r7, #4]
 810b04c:	681b      	ldr	r3, [r3, #0]
 810b04e:	689b      	ldr	r3, [r3, #8]
 810b050:	0e5b      	lsrs	r3, r3, #25
 810b052:	b2db      	uxtb	r3, r3
 810b054:	f003 0307 	and.w	r3, r3, #7
 810b058:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810b05a:	687b      	ldr	r3, [r7, #4]
 810b05c:	681b      	ldr	r3, [r3, #0]
 810b05e:	689b      	ldr	r3, [r3, #8]
 810b060:	0f5b      	lsrs	r3, r3, #29
 810b062:	b2db      	uxtb	r3, r3
 810b064:	f003 0307 	and.w	r3, r3, #7
 810b068:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b06a:	7bbb      	ldrb	r3, [r7, #14]
 810b06c:	7b3a      	ldrb	r2, [r7, #12]
 810b06e:	4911      	ldr	r1, [pc, #68]	; (810b0b4 <UARTEx_SetNbDataToProcess+0x94>)
 810b070:	5c8a      	ldrb	r2, [r1, r2]
 810b072:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810b076:	7b3a      	ldrb	r2, [r7, #12]
 810b078:	490f      	ldr	r1, [pc, #60]	; (810b0b8 <UARTEx_SetNbDataToProcess+0x98>)
 810b07a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b07c:	fb93 f3f2 	sdiv	r3, r3, r2
 810b080:	b29a      	uxth	r2, r3
 810b082:	687b      	ldr	r3, [r7, #4]
 810b084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b088:	7bfb      	ldrb	r3, [r7, #15]
 810b08a:	7b7a      	ldrb	r2, [r7, #13]
 810b08c:	4909      	ldr	r1, [pc, #36]	; (810b0b4 <UARTEx_SetNbDataToProcess+0x94>)
 810b08e:	5c8a      	ldrb	r2, [r1, r2]
 810b090:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810b094:	7b7a      	ldrb	r2, [r7, #13]
 810b096:	4908      	ldr	r1, [pc, #32]	; (810b0b8 <UARTEx_SetNbDataToProcess+0x98>)
 810b098:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b09a:	fb93 f3f2 	sdiv	r3, r3, r2
 810b09e:	b29a      	uxth	r2, r3
 810b0a0:	687b      	ldr	r3, [r7, #4]
 810b0a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810b0a6:	bf00      	nop
 810b0a8:	3714      	adds	r7, #20
 810b0aa:	46bd      	mov	sp, r7
 810b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b0b0:	4770      	bx	lr
 810b0b2:	bf00      	nop
 810b0b4:	0810bbb8 	.word	0x0810bbb8
 810b0b8:	0810bbc0 	.word	0x0810bbc0

0810b0bc <_ZNSaIcEC1Ev>:
 810b0bc:	4770      	bx	lr

0810b0be <_ZNSaIcED1Ev>:
 810b0be:	4770      	bx	lr

0810b0c0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 810b0c0:	b10a      	cbz	r2, 810b0c6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 810b0c2:	f000 bb43 	b.w	810b74c <memcpy>
 810b0c6:	4770      	bx	lr

0810b0c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 810b0c8:	b508      	push	{r3, lr}
 810b0ca:	680b      	ldr	r3, [r1, #0]
 810b0cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810b0d0:	d302      	bcc.n	810b0d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 810b0d2:	480d      	ldr	r0, [pc, #52]	; (810b108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 810b0d4:	f000 fa66 	bl	810b5a4 <_ZSt20__throw_length_errorPKc>
 810b0d8:	4293      	cmp	r3, r2
 810b0da:	d90b      	bls.n	810b0f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 810b0dc:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 810b0e0:	ea4f 0042 	mov.w	r0, r2, lsl #1
 810b0e4:	d206      	bcs.n	810b0f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 810b0e6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 810b0ea:	bf2a      	itet	cs
 810b0ec:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 810b0f0:	6008      	strcc	r0, [r1, #0]
 810b0f2:	600b      	strcs	r3, [r1, #0]
 810b0f4:	6808      	ldr	r0, [r1, #0]
 810b0f6:	3001      	adds	r0, #1
 810b0f8:	d501      	bpl.n	810b0fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 810b0fa:	f000 fa4d 	bl	810b598 <_ZSt17__throw_bad_allocv>
 810b0fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 810b102:	f000 ba38 	b.w	810b576 <_Znwj>
 810b106:	bf00      	nop
 810b108:	0810bbc8 	.word	0x0810bbc8

0810b10c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 810b10c:	f850 3b08 	ldr.w	r3, [r0], #8
 810b110:	4283      	cmp	r3, r0
 810b112:	d002      	beq.n	810b11a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 810b114:	4618      	mov	r0, r3
 810b116:	f000 ba2c 	b.w	810b572 <_ZdlPv>
 810b11a:	4770      	bx	lr

0810b11c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 810b11c:	6840      	ldr	r0, [r0, #4]
 810b11e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 810b122:	3901      	subs	r1, #1
 810b124:	1a09      	subs	r1, r1, r0
 810b126:	4291      	cmp	r1, r2
 810b128:	b508      	push	{r3, lr}
 810b12a:	d202      	bcs.n	810b132 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 810b12c:	4618      	mov	r0, r3
 810b12e:	f000 fa39 	bl	810b5a4 <_ZSt20__throw_length_errorPKc>
 810b132:	bd08      	pop	{r3, pc}

0810b134 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 810b134:	6803      	ldr	r3, [r0, #0]
 810b136:	428b      	cmp	r3, r1
 810b138:	d806      	bhi.n	810b148 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 810b13a:	6840      	ldr	r0, [r0, #4]
 810b13c:	4418      	add	r0, r3
 810b13e:	4281      	cmp	r1, r0
 810b140:	bf94      	ite	ls
 810b142:	2000      	movls	r0, #0
 810b144:	2001      	movhi	r0, #1
 810b146:	4770      	bx	lr
 810b148:	2001      	movs	r0, #1
 810b14a:	4770      	bx	lr

0810b14c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 810b14c:	2a01      	cmp	r2, #1
 810b14e:	b410      	push	{r4}
 810b150:	d104      	bne.n	810b15c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 810b152:	780a      	ldrb	r2, [r1, #0]
 810b154:	f85d 4b04 	ldr.w	r4, [sp], #4
 810b158:	7002      	strb	r2, [r0, #0]
 810b15a:	4770      	bx	lr
 810b15c:	f85d 4b04 	ldr.w	r4, [sp], #4
 810b160:	f7ff bfae 	b.w	810b0c0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0810b164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 810b164:	2a01      	cmp	r2, #1
 810b166:	b430      	push	{r4, r5}
 810b168:	d103      	bne.n	810b172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 810b16a:	780b      	ldrb	r3, [r1, #0]
 810b16c:	7003      	strb	r3, [r0, #0]
 810b16e:	bc30      	pop	{r4, r5}
 810b170:	4770      	bx	lr
 810b172:	2a00      	cmp	r2, #0
 810b174:	d0fb      	beq.n	810b16e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 810b176:	bc30      	pop	{r4, r5}
 810b178:	f000 baf6 	b.w	810b768 <memmove>

0810b17c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 810b17c:	460b      	mov	r3, r1
 810b17e:	2b01      	cmp	r3, #1
 810b180:	b410      	push	{r4}
 810b182:	4611      	mov	r1, r2
 810b184:	4604      	mov	r4, r0
 810b186:	d103      	bne.n	810b190 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 810b188:	7022      	strb	r2, [r4, #0]
 810b18a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810b18e:	4770      	bx	lr
 810b190:	2b00      	cmp	r3, #0
 810b192:	d0fa      	beq.n	810b18a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 810b194:	f85d 4b04 	ldr.w	r4, [sp], #4
 810b198:	461a      	mov	r2, r3
 810b19a:	f000 baff 	b.w	810b79c <memset>

0810b19e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 810b19e:	b508      	push	{r3, lr}
 810b1a0:	1a52      	subs	r2, r2, r1
 810b1a2:	f7ff ffd3 	bl	810b14c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 810b1a6:	bd08      	pop	{r3, pc}

0810b1a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 810b1a8:	b508      	push	{r3, lr}
 810b1aa:	1a52      	subs	r2, r2, r1
 810b1ac:	f7ff ffce 	bl	810b14c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 810b1b0:	bd08      	pop	{r3, pc}

0810b1b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 810b1b2:	4288      	cmp	r0, r1
 810b1b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810b1b6:	4604      	mov	r4, r0
 810b1b8:	460e      	mov	r6, r1
 810b1ba:	d01e      	beq.n	810b1fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 810b1bc:	4603      	mov	r3, r0
 810b1be:	684d      	ldr	r5, [r1, #4]
 810b1c0:	f853 2b08 	ldr.w	r2, [r3], #8
 810b1c4:	429a      	cmp	r2, r3
 810b1c6:	bf14      	ite	ne
 810b1c8:	6882      	ldrne	r2, [r0, #8]
 810b1ca:	220f      	moveq	r2, #15
 810b1cc:	42aa      	cmp	r2, r5
 810b1ce:	d20a      	bcs.n	810b1e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 810b1d0:	a901      	add	r1, sp, #4
 810b1d2:	9501      	str	r5, [sp, #4]
 810b1d4:	f7ff ff78 	bl	810b0c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 810b1d8:	4607      	mov	r7, r0
 810b1da:	4620      	mov	r0, r4
 810b1dc:	f7ff ff96 	bl	810b10c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 810b1e0:	9b01      	ldr	r3, [sp, #4]
 810b1e2:	6027      	str	r7, [r4, #0]
 810b1e4:	60a3      	str	r3, [r4, #8]
 810b1e6:	b125      	cbz	r5, 810b1f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 810b1e8:	6831      	ldr	r1, [r6, #0]
 810b1ea:	6820      	ldr	r0, [r4, #0]
 810b1ec:	462a      	mov	r2, r5
 810b1ee:	f7ff ffad 	bl	810b14c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 810b1f2:	6823      	ldr	r3, [r4, #0]
 810b1f4:	6065      	str	r5, [r4, #4]
 810b1f6:	2200      	movs	r2, #0
 810b1f8:	555a      	strb	r2, [r3, r5]
 810b1fa:	b003      	add	sp, #12
 810b1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810b1fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 810b1fe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 810b202:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 810b204:	461f      	mov	r7, r3
 810b206:	6843      	ldr	r3, [r0, #4]
 810b208:	eb01 0802 	add.w	r8, r1, r2
 810b20c:	1ab2      	subs	r2, r6, r2
 810b20e:	441a      	add	r2, r3
 810b210:	eba3 0908 	sub.w	r9, r3, r8
 810b214:	4603      	mov	r3, r0
 810b216:	9201      	str	r2, [sp, #4]
 810b218:	f853 2b08 	ldr.w	r2, [r3], #8
 810b21c:	429a      	cmp	r2, r3
 810b21e:	bf18      	it	ne
 810b220:	6882      	ldrne	r2, [r0, #8]
 810b222:	460d      	mov	r5, r1
 810b224:	bf08      	it	eq
 810b226:	220f      	moveq	r2, #15
 810b228:	a901      	add	r1, sp, #4
 810b22a:	4604      	mov	r4, r0
 810b22c:	f7ff ff4c 	bl	810b0c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 810b230:	4682      	mov	sl, r0
 810b232:	b11d      	cbz	r5, 810b23c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 810b234:	6821      	ldr	r1, [r4, #0]
 810b236:	462a      	mov	r2, r5
 810b238:	f7ff ff88 	bl	810b14c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 810b23c:	b137      	cbz	r7, 810b24c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 810b23e:	b12e      	cbz	r6, 810b24c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 810b240:	4632      	mov	r2, r6
 810b242:	4639      	mov	r1, r7
 810b244:	eb0a 0005 	add.w	r0, sl, r5
 810b248:	f7ff ff80 	bl	810b14c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 810b24c:	f1b9 0f00 	cmp.w	r9, #0
 810b250:	d007      	beq.n	810b262 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 810b252:	6821      	ldr	r1, [r4, #0]
 810b254:	4435      	add	r5, r6
 810b256:	464a      	mov	r2, r9
 810b258:	4441      	add	r1, r8
 810b25a:	eb0a 0005 	add.w	r0, sl, r5
 810b25e:	f7ff ff75 	bl	810b14c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 810b262:	4620      	mov	r0, r4
 810b264:	f7ff ff52 	bl	810b10c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 810b268:	9b01      	ldr	r3, [sp, #4]
 810b26a:	f8c4 a000 	str.w	sl, [r4]
 810b26e:	60a3      	str	r3, [r4, #8]
 810b270:	b002      	add	sp, #8
 810b272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0810b276 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 810b276:	b510      	push	{r4, lr}
 810b278:	4604      	mov	r4, r0
 810b27a:	f7ff ff47 	bl	810b10c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 810b27e:	4620      	mov	r0, r4
 810b280:	bd10      	pop	{r4, pc}

0810b282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 810b282:	b510      	push	{r4, lr}
 810b284:	4604      	mov	r4, r0
 810b286:	f7ff ff94 	bl	810b1b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 810b28a:	4620      	mov	r0, r4
 810b28c:	bd10      	pop	{r4, pc}

0810b28e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 810b28e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b290:	460d      	mov	r5, r1
 810b292:	f851 3b08 	ldr.w	r3, [r1], #8
 810b296:	686a      	ldr	r2, [r5, #4]
 810b298:	4299      	cmp	r1, r3
 810b29a:	4604      	mov	r4, r0
 810b29c:	6800      	ldr	r0, [r0, #0]
 810b29e:	d10d      	bne.n	810b2bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 810b2a0:	b10a      	cbz	r2, 810b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 810b2a2:	f7ff ff53 	bl	810b14c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 810b2a6:	686b      	ldr	r3, [r5, #4]
 810b2a8:	6822      	ldr	r2, [r4, #0]
 810b2aa:	6063      	str	r3, [r4, #4]
 810b2ac:	2100      	movs	r1, #0
 810b2ae:	54d1      	strb	r1, [r2, r3]
 810b2b0:	682a      	ldr	r2, [r5, #0]
 810b2b2:	2300      	movs	r3, #0
 810b2b4:	606b      	str	r3, [r5, #4]
 810b2b6:	7013      	strb	r3, [r2, #0]
 810b2b8:	4620      	mov	r0, r4
 810b2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b2bc:	e9c4 3200 	strd	r3, r2, [r4]
 810b2c0:	f104 0708 	add.w	r7, r4, #8
 810b2c4:	42b8      	cmp	r0, r7
 810b2c6:	68ab      	ldr	r3, [r5, #8]
 810b2c8:	bf18      	it	ne
 810b2ca:	68a6      	ldrne	r6, [r4, #8]
 810b2cc:	60a3      	str	r3, [r4, #8]
 810b2ce:	bf08      	it	eq
 810b2d0:	2000      	moveq	r0, #0
 810b2d2:	b110      	cbz	r0, 810b2da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 810b2d4:	6028      	str	r0, [r5, #0]
 810b2d6:	60ae      	str	r6, [r5, #8]
 810b2d8:	e7ea      	b.n	810b2b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 810b2da:	6029      	str	r1, [r5, #0]
 810b2dc:	e7e8      	b.n	810b2b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
	...

0810b2e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 810b2e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 810b2e4:	4616      	mov	r6, r2
 810b2e6:	461d      	mov	r5, r3
 810b2e8:	4604      	mov	r4, r0
 810b2ea:	4b1c      	ldr	r3, [pc, #112]	; (810b35c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x7c>)
 810b2ec:	462a      	mov	r2, r5
 810b2ee:	460f      	mov	r7, r1
 810b2f0:	4631      	mov	r1, r6
 810b2f2:	f7ff ff13 	bl	810b11c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 810b2f6:	4623      	mov	r3, r4
 810b2f8:	6862      	ldr	r2, [r4, #4]
 810b2fa:	f853 0b08 	ldr.w	r0, [r3], #8
 810b2fe:	4298      	cmp	r0, r3
 810b300:	bf18      	it	ne
 810b302:	68a3      	ldrne	r3, [r4, #8]
 810b304:	eba5 0806 	sub.w	r8, r5, r6
 810b308:	4490      	add	r8, r2
 810b30a:	bf08      	it	eq
 810b30c:	230f      	moveq	r3, #15
 810b30e:	4543      	cmp	r3, r8
 810b310:	d31b      	bcc.n	810b34a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x6a>
 810b312:	19f3      	adds	r3, r6, r7
 810b314:	1ad2      	subs	r2, r2, r3
 810b316:	d006      	beq.n	810b326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 810b318:	42ae      	cmp	r6, r5
 810b31a:	d004      	beq.n	810b326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 810b31c:	4438      	add	r0, r7
 810b31e:	1981      	adds	r1, r0, r6
 810b320:	4428      	add	r0, r5
 810b322:	f7ff ff1f 	bl	810b164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 810b326:	b135      	cbz	r5, 810b336 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x56>
 810b328:	6820      	ldr	r0, [r4, #0]
 810b32a:	f89d 2020 	ldrb.w	r2, [sp, #32]
 810b32e:	4629      	mov	r1, r5
 810b330:	4438      	add	r0, r7
 810b332:	f7ff ff23 	bl	810b17c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 810b336:	6823      	ldr	r3, [r4, #0]
 810b338:	f8c4 8004 	str.w	r8, [r4, #4]
 810b33c:	2200      	movs	r2, #0
 810b33e:	4620      	mov	r0, r4
 810b340:	f803 2008 	strb.w	r2, [r3, r8]
 810b344:	b002      	add	sp, #8
 810b346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b34a:	9500      	str	r5, [sp, #0]
 810b34c:	2300      	movs	r3, #0
 810b34e:	4632      	mov	r2, r6
 810b350:	4639      	mov	r1, r7
 810b352:	4620      	mov	r0, r4
 810b354:	f7ff ff53 	bl	810b1fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 810b358:	e7e5      	b.n	810b326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 810b35a:	bf00      	nop
 810b35c:	0810bbe0 	.word	0x0810bbe0

0810b360 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 810b360:	b507      	push	{r0, r1, r2, lr}
 810b362:	9200      	str	r2, [sp, #0]
 810b364:	460b      	mov	r3, r1
 810b366:	2200      	movs	r2, #0
 810b368:	6841      	ldr	r1, [r0, #4]
 810b36a:	f7ff ffb9 	bl	810b2e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 810b36e:	b003      	add	sp, #12
 810b370:	f85d fb04 	ldr.w	pc, [sp], #4

0810b374 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 810b374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b378:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810b37a:	4614      	mov	r4, r2
 810b37c:	4680      	mov	r8, r0
 810b37e:	462a      	mov	r2, r5
 810b380:	4689      	mov	r9, r1
 810b382:	461f      	mov	r7, r3
 810b384:	4621      	mov	r1, r4
 810b386:	4b39      	ldr	r3, [pc, #228]	; (810b46c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 810b388:	f7ff fec8 	bl	810b11c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 810b38c:	4642      	mov	r2, r8
 810b38e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810b392:	f852 6b08 	ldr.w	r6, [r2], #8
 810b396:	4296      	cmp	r6, r2
 810b398:	bf18      	it	ne
 810b39a:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 810b39e:	eba5 0b04 	sub.w	fp, r5, r4
 810b3a2:	eb03 0a0b 	add.w	sl, r3, fp
 810b3a6:	bf08      	it	eq
 810b3a8:	220f      	moveq	r2, #15
 810b3aa:	4552      	cmp	r2, sl
 810b3ac:	d351      	bcc.n	810b452 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 810b3ae:	444e      	add	r6, r9
 810b3b0:	4639      	mov	r1, r7
 810b3b2:	44a1      	add	r9, r4
 810b3b4:	4640      	mov	r0, r8
 810b3b6:	eba3 0909 	sub.w	r9, r3, r9
 810b3ba:	f7ff febb 	bl	810b134 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 810b3be:	b180      	cbz	r0, 810b3e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 810b3c0:	f1b9 0f00 	cmp.w	r9, #0
 810b3c4:	d006      	beq.n	810b3d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 810b3c6:	42ac      	cmp	r4, r5
 810b3c8:	d004      	beq.n	810b3d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 810b3ca:	464a      	mov	r2, r9
 810b3cc:	1931      	adds	r1, r6, r4
 810b3ce:	1970      	adds	r0, r6, r5
 810b3d0:	f7ff fec8 	bl	810b164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 810b3d4:	b315      	cbz	r5, 810b41c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 810b3d6:	462a      	mov	r2, r5
 810b3d8:	4639      	mov	r1, r7
 810b3da:	4630      	mov	r0, r6
 810b3dc:	f7ff feb6 	bl	810b14c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 810b3e0:	e01c      	b.n	810b41c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 810b3e2:	b135      	cbz	r5, 810b3f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 810b3e4:	42ac      	cmp	r4, r5
 810b3e6:	d33c      	bcc.n	810b462 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 810b3e8:	462a      	mov	r2, r5
 810b3ea:	4639      	mov	r1, r7
 810b3ec:	4630      	mov	r0, r6
 810b3ee:	f7ff feb9 	bl	810b164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 810b3f2:	f1b9 0f00 	cmp.w	r9, #0
 810b3f6:	d011      	beq.n	810b41c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 810b3f8:	42ac      	cmp	r4, r5
 810b3fa:	d00f      	beq.n	810b41c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 810b3fc:	464a      	mov	r2, r9
 810b3fe:	1931      	adds	r1, r6, r4
 810b400:	1970      	adds	r0, r6, r5
 810b402:	f7ff feaf 	bl	810b164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 810b406:	42ac      	cmp	r4, r5
 810b408:	d208      	bcs.n	810b41c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 810b40a:	4434      	add	r4, r6
 810b40c:	197b      	adds	r3, r7, r5
 810b40e:	429c      	cmp	r4, r3
 810b410:	d30f      	bcc.n	810b432 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 810b412:	462a      	mov	r2, r5
 810b414:	4639      	mov	r1, r7
 810b416:	4630      	mov	r0, r6
 810b418:	f7ff fea4 	bl	810b164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 810b41c:	f8d8 3000 	ldr.w	r3, [r8]
 810b420:	f8c8 a004 	str.w	sl, [r8, #4]
 810b424:	2200      	movs	r2, #0
 810b426:	4640      	mov	r0, r8
 810b428:	f803 200a 	strb.w	r2, [r3, sl]
 810b42c:	b003      	add	sp, #12
 810b42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b432:	42bc      	cmp	r4, r7
 810b434:	d803      	bhi.n	810b43e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 810b436:	462a      	mov	r2, r5
 810b438:	eb07 010b 	add.w	r1, r7, fp
 810b43c:	e7cd      	b.n	810b3da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 810b43e:	1be4      	subs	r4, r4, r7
 810b440:	4622      	mov	r2, r4
 810b442:	4639      	mov	r1, r7
 810b444:	4630      	mov	r0, r6
 810b446:	f7ff fe8d 	bl	810b164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 810b44a:	1b2a      	subs	r2, r5, r4
 810b44c:	1971      	adds	r1, r6, r5
 810b44e:	1930      	adds	r0, r6, r4
 810b450:	e7c4      	b.n	810b3dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 810b452:	9500      	str	r5, [sp, #0]
 810b454:	463b      	mov	r3, r7
 810b456:	4622      	mov	r2, r4
 810b458:	4649      	mov	r1, r9
 810b45a:	4640      	mov	r0, r8
 810b45c:	f7ff fecf 	bl	810b1fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 810b460:	e7dc      	b.n	810b41c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 810b462:	f1b9 0f00 	cmp.w	r9, #0
 810b466:	d0d0      	beq.n	810b40a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 810b468:	e7c8      	b.n	810b3fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 810b46a:	bf00      	nop
 810b46c:	0810bbfd 	.word	0x0810bbfd

0810b470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 810b470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810b472:	4604      	mov	r4, r0
 810b474:	4608      	mov	r0, r1
 810b476:	9103      	str	r1, [sp, #12]
 810b478:	f7f4 ff2e 	bl	81002d8 <strlen>
 810b47c:	9b03      	ldr	r3, [sp, #12]
 810b47e:	9000      	str	r0, [sp, #0]
 810b480:	6862      	ldr	r2, [r4, #4]
 810b482:	2100      	movs	r1, #0
 810b484:	4620      	mov	r0, r4
 810b486:	f7ff ff75 	bl	810b374 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 810b48a:	b004      	add	sp, #16
 810b48c:	bd10      	pop	{r4, pc}

0810b48e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 810b48e:	b508      	push	{r3, lr}
 810b490:	f7ff ffee 	bl	810b470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 810b494:	bd08      	pop	{r3, pc}
	...

0810b498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 810b498:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810b49a:	4604      	mov	r4, r0
 810b49c:	4616      	mov	r6, r2
 810b49e:	460d      	mov	r5, r1
 810b4a0:	b919      	cbnz	r1, 810b4aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 810b4a2:	b112      	cbz	r2, 810b4aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 810b4a4:	480d      	ldr	r0, [pc, #52]	; (810b4dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 810b4a6:	f000 f87a 	bl	810b59e <_ZSt19__throw_logic_errorPKc>
 810b4aa:	1b73      	subs	r3, r6, r5
 810b4ac:	2b0f      	cmp	r3, #15
 810b4ae:	9301      	str	r3, [sp, #4]
 810b4b0:	d907      	bls.n	810b4c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 810b4b2:	2200      	movs	r2, #0
 810b4b4:	a901      	add	r1, sp, #4
 810b4b6:	4620      	mov	r0, r4
 810b4b8:	f7ff fe06 	bl	810b0c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 810b4bc:	9b01      	ldr	r3, [sp, #4]
 810b4be:	6020      	str	r0, [r4, #0]
 810b4c0:	60a3      	str	r3, [r4, #8]
 810b4c2:	4632      	mov	r2, r6
 810b4c4:	4629      	mov	r1, r5
 810b4c6:	6820      	ldr	r0, [r4, #0]
 810b4c8:	f7ff fe69 	bl	810b19e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 810b4cc:	9b01      	ldr	r3, [sp, #4]
 810b4ce:	6822      	ldr	r2, [r4, #0]
 810b4d0:	6063      	str	r3, [r4, #4]
 810b4d2:	2100      	movs	r1, #0
 810b4d4:	54d1      	strb	r1, [r2, r3]
 810b4d6:	b002      	add	sp, #8
 810b4d8:	bd70      	pop	{r4, r5, r6, pc}
 810b4da:	bf00      	nop
 810b4dc:	0810bc16 	.word	0x0810bc16

0810b4e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 810b4e0:	b538      	push	{r3, r4, r5, lr}
 810b4e2:	f100 0308 	add.w	r3, r0, #8
 810b4e6:	6003      	str	r3, [r0, #0]
 810b4e8:	e9d1 5200 	ldrd	r5, r2, [r1]
 810b4ec:	4604      	mov	r4, r0
 810b4ee:	f04f 0300 	mov.w	r3, #0
 810b4f2:	442a      	add	r2, r5
 810b4f4:	4629      	mov	r1, r5
 810b4f6:	f7ff ffcf 	bl	810b498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 810b4fa:	4620      	mov	r0, r4
 810b4fc:	bd38      	pop	{r3, r4, r5, pc}
	...

0810b500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 810b500:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810b502:	4604      	mov	r4, r0
 810b504:	4616      	mov	r6, r2
 810b506:	460d      	mov	r5, r1
 810b508:	b919      	cbnz	r1, 810b512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 810b50a:	b112      	cbz	r2, 810b512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 810b50c:	480d      	ldr	r0, [pc, #52]	; (810b544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 810b50e:	f000 f846 	bl	810b59e <_ZSt19__throw_logic_errorPKc>
 810b512:	1b73      	subs	r3, r6, r5
 810b514:	2b0f      	cmp	r3, #15
 810b516:	9301      	str	r3, [sp, #4]
 810b518:	d907      	bls.n	810b52a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 810b51a:	2200      	movs	r2, #0
 810b51c:	a901      	add	r1, sp, #4
 810b51e:	4620      	mov	r0, r4
 810b520:	f7ff fdd2 	bl	810b0c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 810b524:	9b01      	ldr	r3, [sp, #4]
 810b526:	6020      	str	r0, [r4, #0]
 810b528:	60a3      	str	r3, [r4, #8]
 810b52a:	4632      	mov	r2, r6
 810b52c:	4629      	mov	r1, r5
 810b52e:	6820      	ldr	r0, [r4, #0]
 810b530:	f7ff fe3a 	bl	810b1a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 810b534:	9b01      	ldr	r3, [sp, #4]
 810b536:	6822      	ldr	r2, [r4, #0]
 810b538:	6063      	str	r3, [r4, #4]
 810b53a:	2100      	movs	r1, #0
 810b53c:	54d1      	strb	r1, [r2, r3]
 810b53e:	b002      	add	sp, #8
 810b540:	bd70      	pop	{r4, r5, r6, pc}
 810b542:	bf00      	nop
 810b544:	0810bc16 	.word	0x0810bc16

0810b548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 810b548:	b538      	push	{r3, r4, r5, lr}
 810b54a:	f100 0308 	add.w	r3, r0, #8
 810b54e:	4604      	mov	r4, r0
 810b550:	6003      	str	r3, [r0, #0]
 810b552:	460d      	mov	r5, r1
 810b554:	b159      	cbz	r1, 810b56e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 810b556:	4608      	mov	r0, r1
 810b558:	f7f4 febe 	bl	81002d8 <strlen>
 810b55c:	182a      	adds	r2, r5, r0
 810b55e:	4620      	mov	r0, r4
 810b560:	f04f 0300 	mov.w	r3, #0
 810b564:	4629      	mov	r1, r5
 810b566:	f7ff ffcb 	bl	810b500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 810b56a:	4620      	mov	r0, r4
 810b56c:	bd38      	pop	{r3, r4, r5, pc}
 810b56e:	2201      	movs	r2, #1
 810b570:	e7f5      	b.n	810b55e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0810b572 <_ZdlPv>:
 810b572:	f000 b8e3 	b.w	810b73c <free>

0810b576 <_Znwj>:
 810b576:	2801      	cmp	r0, #1
 810b578:	bf38      	it	cc
 810b57a:	2001      	movcc	r0, #1
 810b57c:	b510      	push	{r4, lr}
 810b57e:	4604      	mov	r4, r0
 810b580:	4620      	mov	r0, r4
 810b582:	f000 f8d3 	bl	810b72c <malloc>
 810b586:	b930      	cbnz	r0, 810b596 <_Znwj+0x20>
 810b588:	f000 f810 	bl	810b5ac <_ZSt15get_new_handlerv>
 810b58c:	b908      	cbnz	r0, 810b592 <_Znwj+0x1c>
 810b58e:	f000 f89b 	bl	810b6c8 <abort>
 810b592:	4780      	blx	r0
 810b594:	e7f4      	b.n	810b580 <_Znwj+0xa>
 810b596:	bd10      	pop	{r4, pc}

0810b598 <_ZSt17__throw_bad_allocv>:
 810b598:	b508      	push	{r3, lr}
 810b59a:	f000 f895 	bl	810b6c8 <abort>

0810b59e <_ZSt19__throw_logic_errorPKc>:
 810b59e:	b508      	push	{r3, lr}
 810b5a0:	f000 f892 	bl	810b6c8 <abort>

0810b5a4 <_ZSt20__throw_length_errorPKc>:
 810b5a4:	b508      	push	{r3, lr}
 810b5a6:	f000 f88f 	bl	810b6c8 <abort>
	...

0810b5ac <_ZSt15get_new_handlerv>:
 810b5ac:	4b02      	ldr	r3, [pc, #8]	; (810b5b8 <_ZSt15get_new_handlerv+0xc>)
 810b5ae:	6818      	ldr	r0, [r3, #0]
 810b5b0:	f3bf 8f5b 	dmb	ish
 810b5b4:	4770      	bx	lr
 810b5b6:	bf00      	nop
 810b5b8:	10000364 	.word	0x10000364
 810b5bc:	00000000 	.word	0x00000000

0810b5c0 <ceil>:
 810b5c0:	ec51 0b10 	vmov	r0, r1, d0
 810b5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b5c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 810b5cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 810b5d0:	2e13      	cmp	r6, #19
 810b5d2:	ee10 5a10 	vmov	r5, s0
 810b5d6:	ee10 8a10 	vmov	r8, s0
 810b5da:	460c      	mov	r4, r1
 810b5dc:	dc30      	bgt.n	810b640 <ceil+0x80>
 810b5de:	2e00      	cmp	r6, #0
 810b5e0:	da12      	bge.n	810b608 <ceil+0x48>
 810b5e2:	a335      	add	r3, pc, #212	; (adr r3, 810b6b8 <ceil+0xf8>)
 810b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b5e8:	f7f4 fe84 	bl	81002f4 <__adddf3>
 810b5ec:	2200      	movs	r2, #0
 810b5ee:	2300      	movs	r3, #0
 810b5f0:	f7f5 fac6 	bl	8100b80 <__aeabi_dcmpgt>
 810b5f4:	b128      	cbz	r0, 810b602 <ceil+0x42>
 810b5f6:	2c00      	cmp	r4, #0
 810b5f8:	db55      	blt.n	810b6a6 <ceil+0xe6>
 810b5fa:	432c      	orrs	r4, r5
 810b5fc:	d057      	beq.n	810b6ae <ceil+0xee>
 810b5fe:	4c30      	ldr	r4, [pc, #192]	; (810b6c0 <ceil+0x100>)
 810b600:	2500      	movs	r5, #0
 810b602:	4621      	mov	r1, r4
 810b604:	4628      	mov	r0, r5
 810b606:	e025      	b.n	810b654 <ceil+0x94>
 810b608:	4f2e      	ldr	r7, [pc, #184]	; (810b6c4 <ceil+0x104>)
 810b60a:	4137      	asrs	r7, r6
 810b60c:	ea01 0307 	and.w	r3, r1, r7
 810b610:	4303      	orrs	r3, r0
 810b612:	d01f      	beq.n	810b654 <ceil+0x94>
 810b614:	a328      	add	r3, pc, #160	; (adr r3, 810b6b8 <ceil+0xf8>)
 810b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b61a:	f7f4 fe6b 	bl	81002f4 <__adddf3>
 810b61e:	2200      	movs	r2, #0
 810b620:	2300      	movs	r3, #0
 810b622:	f7f5 faad 	bl	8100b80 <__aeabi_dcmpgt>
 810b626:	2800      	cmp	r0, #0
 810b628:	d0eb      	beq.n	810b602 <ceil+0x42>
 810b62a:	2c00      	cmp	r4, #0
 810b62c:	bfc2      	ittt	gt
 810b62e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 810b632:	fa43 f606 	asrgt.w	r6, r3, r6
 810b636:	19a4      	addgt	r4, r4, r6
 810b638:	ea24 0407 	bic.w	r4, r4, r7
 810b63c:	2500      	movs	r5, #0
 810b63e:	e7e0      	b.n	810b602 <ceil+0x42>
 810b640:	2e33      	cmp	r6, #51	; 0x33
 810b642:	dd0b      	ble.n	810b65c <ceil+0x9c>
 810b644:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 810b648:	d104      	bne.n	810b654 <ceil+0x94>
 810b64a:	ee10 2a10 	vmov	r2, s0
 810b64e:	460b      	mov	r3, r1
 810b650:	f7f4 fe50 	bl	81002f4 <__adddf3>
 810b654:	ec41 0b10 	vmov	d0, r0, r1
 810b658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b65c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 810b660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810b664:	fa23 f707 	lsr.w	r7, r3, r7
 810b668:	4207      	tst	r7, r0
 810b66a:	d0f3      	beq.n	810b654 <ceil+0x94>
 810b66c:	a312      	add	r3, pc, #72	; (adr r3, 810b6b8 <ceil+0xf8>)
 810b66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b672:	f7f4 fe3f 	bl	81002f4 <__adddf3>
 810b676:	2200      	movs	r2, #0
 810b678:	2300      	movs	r3, #0
 810b67a:	f7f5 fa81 	bl	8100b80 <__aeabi_dcmpgt>
 810b67e:	2800      	cmp	r0, #0
 810b680:	d0bf      	beq.n	810b602 <ceil+0x42>
 810b682:	2c00      	cmp	r4, #0
 810b684:	dd02      	ble.n	810b68c <ceil+0xcc>
 810b686:	2e14      	cmp	r6, #20
 810b688:	d103      	bne.n	810b692 <ceil+0xd2>
 810b68a:	3401      	adds	r4, #1
 810b68c:	ea25 0507 	bic.w	r5, r5, r7
 810b690:	e7b7      	b.n	810b602 <ceil+0x42>
 810b692:	2301      	movs	r3, #1
 810b694:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 810b698:	fa03 f606 	lsl.w	r6, r3, r6
 810b69c:	4435      	add	r5, r6
 810b69e:	4545      	cmp	r5, r8
 810b6a0:	bf38      	it	cc
 810b6a2:	18e4      	addcc	r4, r4, r3
 810b6a4:	e7f2      	b.n	810b68c <ceil+0xcc>
 810b6a6:	2500      	movs	r5, #0
 810b6a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 810b6ac:	e7a9      	b.n	810b602 <ceil+0x42>
 810b6ae:	4625      	mov	r5, r4
 810b6b0:	e7a7      	b.n	810b602 <ceil+0x42>
 810b6b2:	bf00      	nop
 810b6b4:	f3af 8000 	nop.w
 810b6b8:	8800759c 	.word	0x8800759c
 810b6bc:	7e37e43c 	.word	0x7e37e43c
 810b6c0:	3ff00000 	.word	0x3ff00000
 810b6c4:	000fffff 	.word	0x000fffff

0810b6c8 <abort>:
 810b6c8:	b508      	push	{r3, lr}
 810b6ca:	2006      	movs	r0, #6
 810b6cc:	f000 f986 	bl	810b9dc <raise>
 810b6d0:	2001      	movs	r0, #1
 810b6d2:	f7f9 fe59 	bl	8105388 <_exit>
	...

0810b6d8 <__errno>:
 810b6d8:	4b01      	ldr	r3, [pc, #4]	; (810b6e0 <__errno+0x8>)
 810b6da:	6818      	ldr	r0, [r3, #0]
 810b6dc:	4770      	bx	lr
 810b6de:	bf00      	nop
 810b6e0:	10000010 	.word	0x10000010

0810b6e4 <__libc_init_array>:
 810b6e4:	b570      	push	{r4, r5, r6, lr}
 810b6e6:	4d0d      	ldr	r5, [pc, #52]	; (810b71c <__libc_init_array+0x38>)
 810b6e8:	4c0d      	ldr	r4, [pc, #52]	; (810b720 <__libc_init_array+0x3c>)
 810b6ea:	1b64      	subs	r4, r4, r5
 810b6ec:	10a4      	asrs	r4, r4, #2
 810b6ee:	2600      	movs	r6, #0
 810b6f0:	42a6      	cmp	r6, r4
 810b6f2:	d109      	bne.n	810b708 <__libc_init_array+0x24>
 810b6f4:	4d0b      	ldr	r5, [pc, #44]	; (810b724 <__libc_init_array+0x40>)
 810b6f6:	4c0c      	ldr	r4, [pc, #48]	; (810b728 <__libc_init_array+0x44>)
 810b6f8:	f000 f99a 	bl	810ba30 <_init>
 810b6fc:	1b64      	subs	r4, r4, r5
 810b6fe:	10a4      	asrs	r4, r4, #2
 810b700:	2600      	movs	r6, #0
 810b702:	42a6      	cmp	r6, r4
 810b704:	d105      	bne.n	810b712 <__libc_init_array+0x2e>
 810b706:	bd70      	pop	{r4, r5, r6, pc}
 810b708:	f855 3b04 	ldr.w	r3, [r5], #4
 810b70c:	4798      	blx	r3
 810b70e:	3601      	adds	r6, #1
 810b710:	e7ee      	b.n	810b6f0 <__libc_init_array+0xc>
 810b712:	f855 3b04 	ldr.w	r3, [r5], #4
 810b716:	4798      	blx	r3
 810b718:	3601      	adds	r6, #1
 810b71a:	e7f2      	b.n	810b702 <__libc_init_array+0x1e>
 810b71c:	0810bc48 	.word	0x0810bc48
 810b720:	0810bc48 	.word	0x0810bc48
 810b724:	0810bc48 	.word	0x0810bc48
 810b728:	0810bc50 	.word	0x0810bc50

0810b72c <malloc>:
 810b72c:	4b02      	ldr	r3, [pc, #8]	; (810b738 <malloc+0xc>)
 810b72e:	4601      	mov	r1, r0
 810b730:	6818      	ldr	r0, [r3, #0]
 810b732:	f000 b8a7 	b.w	810b884 <_malloc_r>
 810b736:	bf00      	nop
 810b738:	10000010 	.word	0x10000010

0810b73c <free>:
 810b73c:	4b02      	ldr	r3, [pc, #8]	; (810b748 <free+0xc>)
 810b73e:	4601      	mov	r1, r0
 810b740:	6818      	ldr	r0, [r3, #0]
 810b742:	f000 b833 	b.w	810b7ac <_free_r>
 810b746:	bf00      	nop
 810b748:	10000010 	.word	0x10000010

0810b74c <memcpy>:
 810b74c:	440a      	add	r2, r1
 810b74e:	4291      	cmp	r1, r2
 810b750:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 810b754:	d100      	bne.n	810b758 <memcpy+0xc>
 810b756:	4770      	bx	lr
 810b758:	b510      	push	{r4, lr}
 810b75a:	f811 4b01 	ldrb.w	r4, [r1], #1
 810b75e:	f803 4f01 	strb.w	r4, [r3, #1]!
 810b762:	4291      	cmp	r1, r2
 810b764:	d1f9      	bne.n	810b75a <memcpy+0xe>
 810b766:	bd10      	pop	{r4, pc}

0810b768 <memmove>:
 810b768:	4288      	cmp	r0, r1
 810b76a:	b510      	push	{r4, lr}
 810b76c:	eb01 0402 	add.w	r4, r1, r2
 810b770:	d902      	bls.n	810b778 <memmove+0x10>
 810b772:	4284      	cmp	r4, r0
 810b774:	4623      	mov	r3, r4
 810b776:	d807      	bhi.n	810b788 <memmove+0x20>
 810b778:	1e43      	subs	r3, r0, #1
 810b77a:	42a1      	cmp	r1, r4
 810b77c:	d008      	beq.n	810b790 <memmove+0x28>
 810b77e:	f811 2b01 	ldrb.w	r2, [r1], #1
 810b782:	f803 2f01 	strb.w	r2, [r3, #1]!
 810b786:	e7f8      	b.n	810b77a <memmove+0x12>
 810b788:	4402      	add	r2, r0
 810b78a:	4601      	mov	r1, r0
 810b78c:	428a      	cmp	r2, r1
 810b78e:	d100      	bne.n	810b792 <memmove+0x2a>
 810b790:	bd10      	pop	{r4, pc}
 810b792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810b796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810b79a:	e7f7      	b.n	810b78c <memmove+0x24>

0810b79c <memset>:
 810b79c:	4402      	add	r2, r0
 810b79e:	4603      	mov	r3, r0
 810b7a0:	4293      	cmp	r3, r2
 810b7a2:	d100      	bne.n	810b7a6 <memset+0xa>
 810b7a4:	4770      	bx	lr
 810b7a6:	f803 1b01 	strb.w	r1, [r3], #1
 810b7aa:	e7f9      	b.n	810b7a0 <memset+0x4>

0810b7ac <_free_r>:
 810b7ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810b7ae:	2900      	cmp	r1, #0
 810b7b0:	d044      	beq.n	810b83c <_free_r+0x90>
 810b7b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b7b6:	9001      	str	r0, [sp, #4]
 810b7b8:	2b00      	cmp	r3, #0
 810b7ba:	f1a1 0404 	sub.w	r4, r1, #4
 810b7be:	bfb8      	it	lt
 810b7c0:	18e4      	addlt	r4, r4, r3
 810b7c2:	f000 f927 	bl	810ba14 <__malloc_lock>
 810b7c6:	4a1e      	ldr	r2, [pc, #120]	; (810b840 <_free_r+0x94>)
 810b7c8:	9801      	ldr	r0, [sp, #4]
 810b7ca:	6813      	ldr	r3, [r2, #0]
 810b7cc:	b933      	cbnz	r3, 810b7dc <_free_r+0x30>
 810b7ce:	6063      	str	r3, [r4, #4]
 810b7d0:	6014      	str	r4, [r2, #0]
 810b7d2:	b003      	add	sp, #12
 810b7d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810b7d8:	f000 b922 	b.w	810ba20 <__malloc_unlock>
 810b7dc:	42a3      	cmp	r3, r4
 810b7de:	d908      	bls.n	810b7f2 <_free_r+0x46>
 810b7e0:	6825      	ldr	r5, [r4, #0]
 810b7e2:	1961      	adds	r1, r4, r5
 810b7e4:	428b      	cmp	r3, r1
 810b7e6:	bf01      	itttt	eq
 810b7e8:	6819      	ldreq	r1, [r3, #0]
 810b7ea:	685b      	ldreq	r3, [r3, #4]
 810b7ec:	1949      	addeq	r1, r1, r5
 810b7ee:	6021      	streq	r1, [r4, #0]
 810b7f0:	e7ed      	b.n	810b7ce <_free_r+0x22>
 810b7f2:	461a      	mov	r2, r3
 810b7f4:	685b      	ldr	r3, [r3, #4]
 810b7f6:	b10b      	cbz	r3, 810b7fc <_free_r+0x50>
 810b7f8:	42a3      	cmp	r3, r4
 810b7fa:	d9fa      	bls.n	810b7f2 <_free_r+0x46>
 810b7fc:	6811      	ldr	r1, [r2, #0]
 810b7fe:	1855      	adds	r5, r2, r1
 810b800:	42a5      	cmp	r5, r4
 810b802:	d10b      	bne.n	810b81c <_free_r+0x70>
 810b804:	6824      	ldr	r4, [r4, #0]
 810b806:	4421      	add	r1, r4
 810b808:	1854      	adds	r4, r2, r1
 810b80a:	42a3      	cmp	r3, r4
 810b80c:	6011      	str	r1, [r2, #0]
 810b80e:	d1e0      	bne.n	810b7d2 <_free_r+0x26>
 810b810:	681c      	ldr	r4, [r3, #0]
 810b812:	685b      	ldr	r3, [r3, #4]
 810b814:	6053      	str	r3, [r2, #4]
 810b816:	4421      	add	r1, r4
 810b818:	6011      	str	r1, [r2, #0]
 810b81a:	e7da      	b.n	810b7d2 <_free_r+0x26>
 810b81c:	d902      	bls.n	810b824 <_free_r+0x78>
 810b81e:	230c      	movs	r3, #12
 810b820:	6003      	str	r3, [r0, #0]
 810b822:	e7d6      	b.n	810b7d2 <_free_r+0x26>
 810b824:	6825      	ldr	r5, [r4, #0]
 810b826:	1961      	adds	r1, r4, r5
 810b828:	428b      	cmp	r3, r1
 810b82a:	bf04      	itt	eq
 810b82c:	6819      	ldreq	r1, [r3, #0]
 810b82e:	685b      	ldreq	r3, [r3, #4]
 810b830:	6063      	str	r3, [r4, #4]
 810b832:	bf04      	itt	eq
 810b834:	1949      	addeq	r1, r1, r5
 810b836:	6021      	streq	r1, [r4, #0]
 810b838:	6054      	str	r4, [r2, #4]
 810b83a:	e7ca      	b.n	810b7d2 <_free_r+0x26>
 810b83c:	b003      	add	sp, #12
 810b83e:	bd30      	pop	{r4, r5, pc}
 810b840:	10000368 	.word	0x10000368

0810b844 <sbrk_aligned>:
 810b844:	b570      	push	{r4, r5, r6, lr}
 810b846:	4e0e      	ldr	r6, [pc, #56]	; (810b880 <sbrk_aligned+0x3c>)
 810b848:	460c      	mov	r4, r1
 810b84a:	6831      	ldr	r1, [r6, #0]
 810b84c:	4605      	mov	r5, r0
 810b84e:	b911      	cbnz	r1, 810b856 <sbrk_aligned+0x12>
 810b850:	f000 f88c 	bl	810b96c <_sbrk_r>
 810b854:	6030      	str	r0, [r6, #0]
 810b856:	4621      	mov	r1, r4
 810b858:	4628      	mov	r0, r5
 810b85a:	f000 f887 	bl	810b96c <_sbrk_r>
 810b85e:	1c43      	adds	r3, r0, #1
 810b860:	d00a      	beq.n	810b878 <sbrk_aligned+0x34>
 810b862:	1cc4      	adds	r4, r0, #3
 810b864:	f024 0403 	bic.w	r4, r4, #3
 810b868:	42a0      	cmp	r0, r4
 810b86a:	d007      	beq.n	810b87c <sbrk_aligned+0x38>
 810b86c:	1a21      	subs	r1, r4, r0
 810b86e:	4628      	mov	r0, r5
 810b870:	f000 f87c 	bl	810b96c <_sbrk_r>
 810b874:	3001      	adds	r0, #1
 810b876:	d101      	bne.n	810b87c <sbrk_aligned+0x38>
 810b878:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 810b87c:	4620      	mov	r0, r4
 810b87e:	bd70      	pop	{r4, r5, r6, pc}
 810b880:	1000036c 	.word	0x1000036c

0810b884 <_malloc_r>:
 810b884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b888:	1ccd      	adds	r5, r1, #3
 810b88a:	f025 0503 	bic.w	r5, r5, #3
 810b88e:	3508      	adds	r5, #8
 810b890:	2d0c      	cmp	r5, #12
 810b892:	bf38      	it	cc
 810b894:	250c      	movcc	r5, #12
 810b896:	2d00      	cmp	r5, #0
 810b898:	4607      	mov	r7, r0
 810b89a:	db01      	blt.n	810b8a0 <_malloc_r+0x1c>
 810b89c:	42a9      	cmp	r1, r5
 810b89e:	d905      	bls.n	810b8ac <_malloc_r+0x28>
 810b8a0:	230c      	movs	r3, #12
 810b8a2:	603b      	str	r3, [r7, #0]
 810b8a4:	2600      	movs	r6, #0
 810b8a6:	4630      	mov	r0, r6
 810b8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b8ac:	4e2e      	ldr	r6, [pc, #184]	; (810b968 <_malloc_r+0xe4>)
 810b8ae:	f000 f8b1 	bl	810ba14 <__malloc_lock>
 810b8b2:	6833      	ldr	r3, [r6, #0]
 810b8b4:	461c      	mov	r4, r3
 810b8b6:	bb34      	cbnz	r4, 810b906 <_malloc_r+0x82>
 810b8b8:	4629      	mov	r1, r5
 810b8ba:	4638      	mov	r0, r7
 810b8bc:	f7ff ffc2 	bl	810b844 <sbrk_aligned>
 810b8c0:	1c43      	adds	r3, r0, #1
 810b8c2:	4604      	mov	r4, r0
 810b8c4:	d14d      	bne.n	810b962 <_malloc_r+0xde>
 810b8c6:	6834      	ldr	r4, [r6, #0]
 810b8c8:	4626      	mov	r6, r4
 810b8ca:	2e00      	cmp	r6, #0
 810b8cc:	d140      	bne.n	810b950 <_malloc_r+0xcc>
 810b8ce:	6823      	ldr	r3, [r4, #0]
 810b8d0:	4631      	mov	r1, r6
 810b8d2:	4638      	mov	r0, r7
 810b8d4:	eb04 0803 	add.w	r8, r4, r3
 810b8d8:	f000 f848 	bl	810b96c <_sbrk_r>
 810b8dc:	4580      	cmp	r8, r0
 810b8de:	d13a      	bne.n	810b956 <_malloc_r+0xd2>
 810b8e0:	6821      	ldr	r1, [r4, #0]
 810b8e2:	3503      	adds	r5, #3
 810b8e4:	1a6d      	subs	r5, r5, r1
 810b8e6:	f025 0503 	bic.w	r5, r5, #3
 810b8ea:	3508      	adds	r5, #8
 810b8ec:	2d0c      	cmp	r5, #12
 810b8ee:	bf38      	it	cc
 810b8f0:	250c      	movcc	r5, #12
 810b8f2:	4629      	mov	r1, r5
 810b8f4:	4638      	mov	r0, r7
 810b8f6:	f7ff ffa5 	bl	810b844 <sbrk_aligned>
 810b8fa:	3001      	adds	r0, #1
 810b8fc:	d02b      	beq.n	810b956 <_malloc_r+0xd2>
 810b8fe:	6823      	ldr	r3, [r4, #0]
 810b900:	442b      	add	r3, r5
 810b902:	6023      	str	r3, [r4, #0]
 810b904:	e00e      	b.n	810b924 <_malloc_r+0xa0>
 810b906:	6822      	ldr	r2, [r4, #0]
 810b908:	1b52      	subs	r2, r2, r5
 810b90a:	d41e      	bmi.n	810b94a <_malloc_r+0xc6>
 810b90c:	2a0b      	cmp	r2, #11
 810b90e:	d916      	bls.n	810b93e <_malloc_r+0xba>
 810b910:	1961      	adds	r1, r4, r5
 810b912:	42a3      	cmp	r3, r4
 810b914:	6025      	str	r5, [r4, #0]
 810b916:	bf18      	it	ne
 810b918:	6059      	strne	r1, [r3, #4]
 810b91a:	6863      	ldr	r3, [r4, #4]
 810b91c:	bf08      	it	eq
 810b91e:	6031      	streq	r1, [r6, #0]
 810b920:	5162      	str	r2, [r4, r5]
 810b922:	604b      	str	r3, [r1, #4]
 810b924:	4638      	mov	r0, r7
 810b926:	f104 060b 	add.w	r6, r4, #11
 810b92a:	f000 f879 	bl	810ba20 <__malloc_unlock>
 810b92e:	f026 0607 	bic.w	r6, r6, #7
 810b932:	1d23      	adds	r3, r4, #4
 810b934:	1af2      	subs	r2, r6, r3
 810b936:	d0b6      	beq.n	810b8a6 <_malloc_r+0x22>
 810b938:	1b9b      	subs	r3, r3, r6
 810b93a:	50a3      	str	r3, [r4, r2]
 810b93c:	e7b3      	b.n	810b8a6 <_malloc_r+0x22>
 810b93e:	6862      	ldr	r2, [r4, #4]
 810b940:	42a3      	cmp	r3, r4
 810b942:	bf0c      	ite	eq
 810b944:	6032      	streq	r2, [r6, #0]
 810b946:	605a      	strne	r2, [r3, #4]
 810b948:	e7ec      	b.n	810b924 <_malloc_r+0xa0>
 810b94a:	4623      	mov	r3, r4
 810b94c:	6864      	ldr	r4, [r4, #4]
 810b94e:	e7b2      	b.n	810b8b6 <_malloc_r+0x32>
 810b950:	4634      	mov	r4, r6
 810b952:	6876      	ldr	r6, [r6, #4]
 810b954:	e7b9      	b.n	810b8ca <_malloc_r+0x46>
 810b956:	230c      	movs	r3, #12
 810b958:	603b      	str	r3, [r7, #0]
 810b95a:	4638      	mov	r0, r7
 810b95c:	f000 f860 	bl	810ba20 <__malloc_unlock>
 810b960:	e7a1      	b.n	810b8a6 <_malloc_r+0x22>
 810b962:	6025      	str	r5, [r4, #0]
 810b964:	e7de      	b.n	810b924 <_malloc_r+0xa0>
 810b966:	bf00      	nop
 810b968:	10000368 	.word	0x10000368

0810b96c <_sbrk_r>:
 810b96c:	b538      	push	{r3, r4, r5, lr}
 810b96e:	4d06      	ldr	r5, [pc, #24]	; (810b988 <_sbrk_r+0x1c>)
 810b970:	2300      	movs	r3, #0
 810b972:	4604      	mov	r4, r0
 810b974:	4608      	mov	r0, r1
 810b976:	602b      	str	r3, [r5, #0]
 810b978:	f7f9 fd10 	bl	810539c <_sbrk>
 810b97c:	1c43      	adds	r3, r0, #1
 810b97e:	d102      	bne.n	810b986 <_sbrk_r+0x1a>
 810b980:	682b      	ldr	r3, [r5, #0]
 810b982:	b103      	cbz	r3, 810b986 <_sbrk_r+0x1a>
 810b984:	6023      	str	r3, [r4, #0]
 810b986:	bd38      	pop	{r3, r4, r5, pc}
 810b988:	10000370 	.word	0x10000370

0810b98c <_raise_r>:
 810b98c:	291f      	cmp	r1, #31
 810b98e:	b538      	push	{r3, r4, r5, lr}
 810b990:	4604      	mov	r4, r0
 810b992:	460d      	mov	r5, r1
 810b994:	d904      	bls.n	810b9a0 <_raise_r+0x14>
 810b996:	2316      	movs	r3, #22
 810b998:	6003      	str	r3, [r0, #0]
 810b99a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810b99e:	bd38      	pop	{r3, r4, r5, pc}
 810b9a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810b9a2:	b112      	cbz	r2, 810b9aa <_raise_r+0x1e>
 810b9a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810b9a8:	b94b      	cbnz	r3, 810b9be <_raise_r+0x32>
 810b9aa:	4620      	mov	r0, r4
 810b9ac:	f000 f830 	bl	810ba10 <_getpid_r>
 810b9b0:	462a      	mov	r2, r5
 810b9b2:	4601      	mov	r1, r0
 810b9b4:	4620      	mov	r0, r4
 810b9b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b9ba:	f000 b817 	b.w	810b9ec <_kill_r>
 810b9be:	2b01      	cmp	r3, #1
 810b9c0:	d00a      	beq.n	810b9d8 <_raise_r+0x4c>
 810b9c2:	1c59      	adds	r1, r3, #1
 810b9c4:	d103      	bne.n	810b9ce <_raise_r+0x42>
 810b9c6:	2316      	movs	r3, #22
 810b9c8:	6003      	str	r3, [r0, #0]
 810b9ca:	2001      	movs	r0, #1
 810b9cc:	e7e7      	b.n	810b99e <_raise_r+0x12>
 810b9ce:	2400      	movs	r4, #0
 810b9d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810b9d4:	4628      	mov	r0, r5
 810b9d6:	4798      	blx	r3
 810b9d8:	2000      	movs	r0, #0
 810b9da:	e7e0      	b.n	810b99e <_raise_r+0x12>

0810b9dc <raise>:
 810b9dc:	4b02      	ldr	r3, [pc, #8]	; (810b9e8 <raise+0xc>)
 810b9de:	4601      	mov	r1, r0
 810b9e0:	6818      	ldr	r0, [r3, #0]
 810b9e2:	f7ff bfd3 	b.w	810b98c <_raise_r>
 810b9e6:	bf00      	nop
 810b9e8:	10000010 	.word	0x10000010

0810b9ec <_kill_r>:
 810b9ec:	b538      	push	{r3, r4, r5, lr}
 810b9ee:	4d07      	ldr	r5, [pc, #28]	; (810ba0c <_kill_r+0x20>)
 810b9f0:	2300      	movs	r3, #0
 810b9f2:	4604      	mov	r4, r0
 810b9f4:	4608      	mov	r0, r1
 810b9f6:	4611      	mov	r1, r2
 810b9f8:	602b      	str	r3, [r5, #0]
 810b9fa:	f7f9 fcb5 	bl	8105368 <_kill>
 810b9fe:	1c43      	adds	r3, r0, #1
 810ba00:	d102      	bne.n	810ba08 <_kill_r+0x1c>
 810ba02:	682b      	ldr	r3, [r5, #0]
 810ba04:	b103      	cbz	r3, 810ba08 <_kill_r+0x1c>
 810ba06:	6023      	str	r3, [r4, #0]
 810ba08:	bd38      	pop	{r3, r4, r5, pc}
 810ba0a:	bf00      	nop
 810ba0c:	10000370 	.word	0x10000370

0810ba10 <_getpid_r>:
 810ba10:	f7f9 bca2 	b.w	8105358 <_getpid>

0810ba14 <__malloc_lock>:
 810ba14:	4801      	ldr	r0, [pc, #4]	; (810ba1c <__malloc_lock+0x8>)
 810ba16:	f000 b809 	b.w	810ba2c <__retarget_lock_acquire_recursive>
 810ba1a:	bf00      	nop
 810ba1c:	10000374 	.word	0x10000374

0810ba20 <__malloc_unlock>:
 810ba20:	4801      	ldr	r0, [pc, #4]	; (810ba28 <__malloc_unlock+0x8>)
 810ba22:	f000 b804 	b.w	810ba2e <__retarget_lock_release_recursive>
 810ba26:	bf00      	nop
 810ba28:	10000374 	.word	0x10000374

0810ba2c <__retarget_lock_acquire_recursive>:
 810ba2c:	4770      	bx	lr

0810ba2e <__retarget_lock_release_recursive>:
 810ba2e:	4770      	bx	lr

0810ba30 <_init>:
 810ba30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ba32:	bf00      	nop
 810ba34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ba36:	bc08      	pop	{r3}
 810ba38:	469e      	mov	lr, r3
 810ba3a:	4770      	bx	lr

0810ba3c <_fini>:
 810ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ba3e:	bf00      	nop
 810ba40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ba42:	bc08      	pop	{r3}
 810ba44:	469e      	mov	lr, r3
 810ba46:	4770      	bx	lr
