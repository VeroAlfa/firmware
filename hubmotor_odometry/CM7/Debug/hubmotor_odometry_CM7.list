
hubmotor_odometry_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c144  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e84  0800c3e8  0800c3e8  0001c3e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d26c  0800d26c  00020158  2**0
                  CONTENTS
  4 .ARM          00000000  0800d26c  0800d26c  00020158  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d26c  0800d26c  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d26c  0800d26c  0001d26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d270  0800d270  0001d270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  0800d274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000098  0800d30c  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000f8  0800d36c  000200f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b04  24000160  0800d3cc  00020160  2**4
                  ALLOC
 12 ._user_heap_stack 00000604  24000c64  0800d3cc  00020c64  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 14 .debug_info   002166a1  00000000  00000000  00020186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004716  00000000  00000000  00236827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c90  00000000  00000000  0023af40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 0000fd48  00000000  00000000  0023cbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00042b38  00000000  00000000  0024c918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004448c  00000000  00000000  0028f450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    006b0c34  00000000  00000000  002d38dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00984510  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008900  00000000  00000000  00984560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0006ce68  00000000  00000000  0098ce60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000160 	.word	0x24000160
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c3cc 	.word	0x0800c3cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000164 	.word	0x24000164
 80002dc:	0800c3cc 	.word	0x0800c3cc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006fc:	4b3d      	ldr	r3, [pc, #244]	; (80007f4 <SystemInit+0xfc>)
 80006fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000702:	4a3c      	ldr	r2, [pc, #240]	; (80007f4 <SystemInit+0xfc>)
 8000704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800070c:	4b39      	ldr	r3, [pc, #228]	; (80007f4 <SystemInit+0xfc>)
 800070e:	691b      	ldr	r3, [r3, #16]
 8000710:	4a38      	ldr	r2, [pc, #224]	; (80007f4 <SystemInit+0xfc>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000718:	4b37      	ldr	r3, [pc, #220]	; (80007f8 <SystemInit+0x100>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f003 030f 	and.w	r3, r3, #15
 8000720:	2b06      	cmp	r3, #6
 8000722:	d807      	bhi.n	8000734 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000724:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <SystemInit+0x100>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f023 030f 	bic.w	r3, r3, #15
 800072c:	4a32      	ldr	r2, [pc, #200]	; (80007f8 <SystemInit+0x100>)
 800072e:	f043 0307 	orr.w	r3, r3, #7
 8000732:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000734:	4b31      	ldr	r3, [pc, #196]	; (80007fc <SystemInit+0x104>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a30      	ldr	r2, [pc, #192]	; (80007fc <SystemInit+0x104>)
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000740:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <SystemInit+0x104>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <SystemInit+0x104>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	492c      	ldr	r1, [pc, #176]	; (80007fc <SystemInit+0x104>)
 800074c:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <SystemInit+0x108>)
 800074e:	4013      	ands	r3, r2
 8000750:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000752:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <SystemInit+0x100>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	2b00      	cmp	r3, #0
 800075c:	d007      	beq.n	800076e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800075e:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <SystemInit+0x100>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f023 030f 	bic.w	r3, r3, #15
 8000766:	4a24      	ldr	r2, [pc, #144]	; (80007f8 <SystemInit+0x100>)
 8000768:	f043 0307 	orr.w	r3, r3, #7
 800076c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <SystemInit+0x104>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000774:	4b21      	ldr	r3, [pc, #132]	; (80007fc <SystemInit+0x104>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <SystemInit+0x104>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <SystemInit+0x104>)
 8000782:	4a20      	ldr	r2, [pc, #128]	; (8000804 <SystemInit+0x10c>)
 8000784:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <SystemInit+0x104>)
 8000788:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <SystemInit+0x110>)
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <SystemInit+0x104>)
 800078e:	4a1f      	ldr	r2, [pc, #124]	; (800080c <SystemInit+0x114>)
 8000790:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <SystemInit+0x104>)
 8000794:	2200      	movs	r2, #0
 8000796:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <SystemInit+0x104>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <SystemInit+0x114>)
 800079c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <SystemInit+0x104>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <SystemInit+0x104>)
 80007a6:	4a19      	ldr	r2, [pc, #100]	; (800080c <SystemInit+0x114>)
 80007a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <SystemInit+0x104>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <SystemInit+0x104>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a11      	ldr	r2, [pc, #68]	; (80007fc <SystemInit+0x104>)
 80007b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <SystemInit+0x104>)
 80007be:	2200      	movs	r2, #0
 80007c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <SystemInit+0x118>)
 80007c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <SystemInit+0x118>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <SystemInit+0x11c>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <SystemInit+0x120>)
 80007d4:	4013      	ands	r3, r2
 80007d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007da:	d202      	bcs.n	80007e2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <SystemInit+0x124>)
 80007de:	2201      	movs	r2, #1
 80007e0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <SystemInit+0x128>)
 80007e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007e8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00
 80007f8:	52002000 	.word	0x52002000
 80007fc:	58024400 	.word	0x58024400
 8000800:	eaf6ed7f 	.word	0xeaf6ed7f
 8000804:	02020200 	.word	0x02020200
 8000808:	01ff0000 	.word	0x01ff0000
 800080c:	01010280 	.word	0x01010280
 8000810:	580000c0 	.word	0x580000c0
 8000814:	5c001000 	.word	0x5c001000
 8000818:	ffff0000 	.word	0xffff0000
 800081c:	51008108 	.word	0x51008108
 8000820:	52004000 	.word	0x52004000

08000824 <UserCodeSetup>:
        && "Too many rows passed to comma initializer (operator<<)");
    }
    eigen_assert(m_col<m_xpr.cols()
      && "Too many coefficients passed to comma initializer (operator<<)");
    eigen_assert(m_currentBlockRows==1);
    m_xpr.coeffRef(m_row, m_col++) = s;
 8000824:	4b40      	ldr	r3, [pc, #256]	; (8000928 <UserCodeSetup+0x104>)
{
//	Q << 1000000;	// tunable past0.1
//	R << 0.00000001;	// tunable +0.01
//	C << 0,1,0;
	// Constant matrix declaration
	A << 1, Ts, Ts*Ts*0.5,
 8000826:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
			0, 1, Ts,
			0, 0, 1;
	B << 0,
			0,
			0;
	G << (Ts*Ts*Ts)/6,
 800082a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800092c <UserCodeSetup+0x108>
    m_xpr.coeffRef(0,0) = s;
 800082e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    m_xpr.coeffRef(m_row, m_col++) = s;
 8000832:	edd3 7a00 	vldr	s15, [r3]
 8000836:	2300      	movs	r3, #0
    m_xpr.coeffRef(0,0) = s;
 8000838:	4a3d      	ldr	r2, [pc, #244]	; (8000930 <UserCodeSetup+0x10c>)
	A << 1, Ts, Ts*Ts*0.5,
 800083a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800083e:	483d      	ldr	r0, [pc, #244]	; (8000934 <UserCodeSetup+0x110>)
	G << (Ts*Ts*Ts)/6,
 8000840:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000844:	f8df c134 	ldr.w	ip, [pc, #308]	; 800097c <UserCodeSetup+0x158>
	A << 1, Ts, Ts*Ts*0.5,
 8000848:	ee66 6a26 	vmul.f32	s13, s12, s13
	G << (Ts*Ts*Ts)/6,
 800084c:	ee27 7a06 	vmul.f32	s14, s14, s12
{
 8000850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000852:	4c39      	ldr	r4, [pc, #228]	; (8000938 <UserCodeSetup+0x114>)
 8000854:	6011      	str	r1, [r2, #0]
    m_xpr.coeffRef(m_row, m_col++) = s;
 8000856:	edc2 7a03 	vstr	s15, [r2, #12]
 800085a:	6053      	str	r3, [r2, #4]
 800085c:	6111      	str	r1, [r2, #16]
 800085e:	6093      	str	r3, [r2, #8]
 8000860:	6153      	str	r3, [r2, #20]
    m_xpr.coeffRef(0,0) = s;
 8000862:	ed80 7a00 	vstr	s14, [r0]
    m_xpr.coeffRef(m_row, m_col++) = s;
 8000866:	edc2 7a07 	vstr	s15, [r2, #28]
 800086a:	6211      	str	r1, [r2, #32]
 800086c:	edc0 7a02 	vstr	s15, [r0, #8]
    m_xpr.coeffRef(0,0) = s;
 8000870:	f8df e10c 	ldr.w	lr, [pc, #268]	; 8000980 <UserCodeSetup+0x15c>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8000874:	edc2 6a06 	vstr	s13, [r2, #24]
 8000878:	edc0 6a01 	vstr	s13, [r0, #4]
    m_xpr.coeffRef(0,0) = s;
 800087c:	4a2f      	ldr	r2, [pc, #188]	; (800093c <UserCodeSetup+0x118>)
 800087e:	4830      	ldr	r0, [pc, #192]	; (8000940 <UserCodeSetup+0x11c>)
 8000880:	4f30      	ldr	r7, [pc, #192]	; (8000944 <UserCodeSetup+0x120>)
 8000882:	4e31      	ldr	r6, [pc, #196]	; (8000948 <UserCodeSetup+0x124>)
 8000884:	4d31      	ldr	r5, [pc, #196]	; (800094c <UserCodeSetup+0x128>)
 8000886:	6023      	str	r3, [r4, #0]
    m_xpr.coeffRef(m_row, m_col++) = s;
 8000888:	6063      	str	r3, [r4, #4]
 800088a:	60a3      	str	r3, [r4, #8]
    m_xpr.coeffRef(0,0) = s;
 800088c:	6011      	str	r1, [r2, #0]
    m_xpr.coeffRef(m_row, m_col++) = s;
 800088e:	6093      	str	r3, [r2, #8]
 8000890:	6113      	str	r3, [r2, #16]
 8000892:	6053      	str	r3, [r2, #4]
 8000894:	60d1      	str	r1, [r2, #12]
 8000896:	6153      	str	r3, [r2, #20]
    m_xpr.coeffRef(0,0) = s;
 8000898:	492d      	ldr	r1, [pc, #180]	; (8000950 <UserCodeSetup+0x12c>)
 800089a:	4a2e      	ldr	r2, [pc, #184]	; (8000954 <UserCodeSetup+0x130>)
 800089c:	f8cc 3000 	str.w	r3, [ip]
    m_xpr.coeffRef(m_row, m_col++) = s;
 80008a0:	f8cc 3004 	str.w	r3, [ip, #4]
 80008a4:	f8cc 3008 	str.w	r3, [ip, #8]
    m_xpr.coeffRef(0,0) = s;
 80008a8:	4c2b      	ldr	r4, [pc, #172]	; (8000958 <UserCodeSetup+0x134>)
 80008aa:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8000984 <UserCodeSetup+0x160>
 80008ae:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800095c <UserCodeSetup+0x138>
    m_xpr.coeffRef(m_row, m_col++) = s;
 80008b2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8000960 <UserCodeSetup+0x13c>
    m_xpr.coeffRef(0,0) = s;
 80008b6:	f8c0 e000 	str.w	lr, [r0]
 80008ba:	482a      	ldr	r0, [pc, #168]	; (8000964 <UserCodeSetup+0x140>)
 80008bc:	6023      	str	r3, [r4, #0]
    m_xpr.coeffRef(m_row, m_col++) = s;
 80008be:	60bb      	str	r3, [r7, #8]
    m_xpr.coeffRef(0,0) = s;
 80008c0:	4c29      	ldr	r4, [pc, #164]	; (8000968 <UserCodeSetup+0x144>)
    m_xpr.coeffRef(m_row, m_col++) = s;
 80008c2:	607b      	str	r3, [r7, #4]
    m_xpr.coeffRef(0,0) = s;
 80008c4:	6008      	str	r0, [r1, #0]
 80008c6:	ed87 7a00 	vstr	s14, [r7]
    m_xpr.coeffRef(m_row, m_col++) = s;
 80008ca:	edc7 7a03 	vstr	s15, [r7, #12]
 80008ce:	60cb      	str	r3, [r1, #12]
 80008d0:	618b      	str	r3, [r1, #24]
 80008d2:	604b      	str	r3, [r1, #4]
 80008d4:	61cb      	str	r3, [r1, #28]
 80008d6:	608b      	str	r3, [r1, #8]
 80008d8:	614b      	str	r3, [r1, #20]
 80008da:	60d3      	str	r3, [r2, #12]
 80008dc:	6193      	str	r3, [r2, #24]
 80008de:	6053      	str	r3, [r2, #4]
 80008e0:	61d3      	str	r3, [r2, #28]
 80008e2:	6093      	str	r3, [r2, #8]
 80008e4:	6153      	str	r3, [r2, #20]
 80008e6:	60b3      	str	r3, [r6, #8]
 80008e8:	6073      	str	r3, [r6, #4]
    m_xpr.coeffRef(0,0) = s;
 80008ea:	f8cc 3000 	str.w	r3, [ip]
    m_xpr.coeffRef(m_row, m_col++) = s;
 80008ee:	f8cc 3004 	str.w	r3, [ip, #4]
 80008f2:	f8cc 3008 	str.w	r3, [ip, #8]
    m_xpr.coeffRef(0,0) = s;
 80008f6:	602b      	str	r3, [r5, #0]
    m_xpr.coeffRef(m_row, m_col++) = s;
 80008f8:	60ab      	str	r3, [r5, #8]
 80008fa:	606b      	str	r3, [r5, #4]
 80008fc:	60eb      	str	r3, [r5, #12]
 80008fe:	4b1b      	ldr	r3, [pc, #108]	; (800096c <UserCodeSetup+0x148>)
 8000900:	6108      	str	r0, [r1, #16]
 8000902:	6208      	str	r0, [r1, #32]
    m_xpr.coeffRef(0,0) = s;
 8000904:	6010      	str	r0, [r2, #0]
    m_xpr.coeffRef(m_row, m_col++) = s;
 8000906:	6110      	str	r0, [r2, #16]
 8000908:	6210      	str	r0, [r2, #32]
 800090a:	60e3      	str	r3, [r4, #12]
    m_xpr.coeffRef(0,0) = s;
 800090c:	4a18      	ldr	r2, [pc, #96]	; (8000970 <UserCodeSetup+0x14c>)
    m_xpr.coeffRef(m_row, m_col++) = s;
 800090e:	4919      	ldr	r1, [pc, #100]	; (8000974 <UserCodeSetup+0x150>)
    m_xpr.coeffRef(0,0) = s;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <UserCodeSetup+0x154>)
 8000912:	ed86 7a00 	vstr	s14, [r6]
    m_xpr.coeffRef(m_row, m_col++) = s;
 8000916:	edc6 7a03 	vstr	s15, [r6, #12]
    m_xpr.coeffRef(0,0) = s;
 800091a:	6022      	str	r2, [r4, #0]
    m_xpr.coeffRef(m_row, m_col++) = s;
 800091c:	60a2      	str	r2, [r4, #8]
 800091e:	6061      	str	r1, [r4, #4]
    m_xpr.coeffRef(0,0) = s;
 8000920:	f8c3 e000 	str.w	lr, [r3]
	// Twist covariance calculate
	speed_cov << 0,0,
				 0,0;
	forwardmatrix << 0.085*0.5, 0.085*0.5,						// r/2	r/2
					0.085/(2*0.39377), -0.085/(2*0.39377);		// r/2b -r/2b
}
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000926:	bf00      	nop
 8000928:	24000008 	.word	0x24000008
 800092c:	3e2aaaab 	.word	0x3e2aaaab
 8000930:	2400017c 	.word	0x2400017c
 8000934:	240001c4 	.word	0x240001c4
 8000938:	240001a0 	.word	0x240001a0
 800093c:	240001ac 	.word	0x240001ac
 8000940:	24000248 	.word	0x24000248
 8000944:	24000250 	.word	0x24000250
 8000948:	24000260 	.word	0x24000260
 800094c:	240002b0 	.word	0x240002b0
 8000950:	24000200 	.word	0x24000200
 8000954:	24000224 	.word	0x24000224
 8000958:	24000270 	.word	0x24000270
 800095c:	4cbebc20 	.word	0x4cbebc20
 8000960:	3e095440 	.word	0x3e095440
 8000964:	38d1b717 	.word	0x38d1b717
 8000968:	240002a0 	.word	0x240002a0
 800096c:	bddd0af1 	.word	0xbddd0af1
 8000970:	3d2e147b 	.word	0x3d2e147b
 8000974:	3ddd0af1 	.word	0x3ddd0af1
 8000978:	2400024c 	.word	0x2400024c
 800097c:	24000274 	.word	0x24000274
 8000980:	42c80000 	.word	0x42c80000
 8000984:	24000280 	.word	0x24000280

08000988 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKNS7_INS7_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi1ELi0ELi1ELi1EEELi0EEENS9_ISD_EELi0EEEEEEEvRT_RKT0_>:
// So this intermediate function removes everything related to "assume-aliasing" such that Assignment
// does not has to bother about these annoying details.

template<typename Dst, typename Src>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src)
 8000988:	b430      	push	{r4, r5}
    typedef typename internal::ref_selector<Rhs>::type RhsNested;
    typedef typename internal::remove_all<LhsNested>::type LhsNestedCleaned;
    typedef typename internal::remove_all<RhsNested>::type RhsNestedCleaned;

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800098a:	e9d1 4200 	ldrd	r4, r2, [r1]
 800098e:	ed2d 8b06 	vpush	{d8-d10}
  }

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  CoeffReturnType coeff(Index row, Index col) const
  {
    return m_data[col * colStride() + row * rowStride()];
 8000992:	edd4 5a05 	vldr	s11, [r4, #20]
 8000996:	b090      	sub	sp, #64	; 0x40
 8000998:	ed94 2a03 	vldr	s4, [r4, #12]
 800099c:	edd4 2a04 	vldr	s5, [r4, #16]
 80009a0:	edd2 7a04 	vldr	s15, [r2, #16]
 80009a4:	ed92 6a01 	vldr	s12, [r2, #4]
#else
  scalar_product_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80009a8:	ee62 6a27 	vmul.f32	s13, s4, s15
 80009ac:	edd4 4a00 	vldr	s9, [r4]
 80009b0:	ee22 7aa7 	vmul.f32	s14, s5, s15
 80009b4:	ed94 4a01 	vldr	s8, [r4, #4]
 80009b8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80009bc:	ed94 5a02 	vldr	s10, [r4, #8]
 80009c0:	edd2 3a03 	vldr	s7, [r2, #12]
 80009c4:	ee22 9a06 	vmul.f32	s18, s4, s12
 80009c8:	ee66 8a22 	vmul.f32	s17, s12, s5
 80009cc:	ed94 1a08 	vldr	s2, [r4, #32]
 80009d0:	ee26 6a25 	vmul.f32	s12, s12, s11
 80009d4:	ed94 8a06 	vldr	s16, [r4, #24]
 80009d8:	eee4 6aa3 	vfma.f32	s13, s9, s7
 80009dc:	ed94 0a07 	vldr	s0, [r4, #28]
 80009e0:	eea4 7a23 	vfma.f32	s14, s8, s7
 80009e4:	edd2 1a07 	vldr	s3, [r2, #28]
 80009e8:	eee5 7a23 	vfma.f32	s15, s10, s7
 80009ec:	edd2 3a00 	vldr	s7, [r2]
 80009f0:	ee22 2a21 	vmul.f32	s4, s4, s3
 80009f4:	688b      	ldr	r3, [r1, #8]
  CoeffReturnType coeff(Index row, Index col) const
 80009f6:	eea3 6a85 	vfma.f32	s12, s7, s10
 80009fa:	68cc      	ldr	r4, [r1, #12]
 80009fc:	eea4 9aa3 	vfma.f32	s18, s9, s7
    return m_data[col * colStride() + row * rowStride()];
 8000a00:	ed93 aa05 	vldr	s20, [r3, #20]
 8000a04:	eee3 8a84 	vfma.f32	s17, s7, s8
 8000a08:	edd2 3a02 	vldr	s7, [r2, #8]
 8000a0c:	ee62 2aa1 	vmul.f32	s5, s5, s3
 8000a10:	edd3 9a01 	vldr	s19, [r3, #4]
 8000a14:	ee65 1aa1 	vmul.f32	s3, s11, s3
 8000a18:	edd3 5a00 	vldr	s11, [r3]
 8000a1c:	690d      	ldr	r5, [r1, #16]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8000a1e:	eea3 6a81 	vfma.f32	s12, s7, s2
 8000a22:	edd3 0a06 	vldr	s1, [r3, #24]
 8000a26:	eea8 9a23 	vfma.f32	s18, s16, s7
 8000a2a:	eee3 8a80 	vfma.f32	s17, s7, s0
 8000a2e:	eeb0 3a46 	vmov.f32	s6, s12
 8000a32:	ed92 6a05 	vldr	s12, [r2, #20]
 8000a36:	eee8 6a06 	vfma.f32	s13, s16, s12
 8000a3a:	eea0 7a06 	vfma.f32	s14, s0, s12
 8000a3e:	eee1 7a06 	vfma.f32	s15, s2, s12
 8000a42:	ed92 6a06 	vldr	s12, [r2, #24]
  CoeffReturnType coeff(Index row, Index col) const
 8000a46:	eea4 2a86 	vfma.f32	s4, s9, s12
    return m_data[col * colStride() + row * rowStride()];
 8000a4a:	edd3 4a03 	vldr	s9, [r3, #12]
 8000a4e:	eee4 2a06 	vfma.f32	s5, s8, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8000a52:	ee66 3aa4 	vmul.f32	s7, s13, s9
 8000a56:	ee27 4a24 	vmul.f32	s8, s14, s9
 8000a5a:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8000a5e:	eee5 1a06 	vfma.f32	s3, s10, s12
 8000a62:	ed93 6a04 	vldr	s12, [r3, #16]
 8000a66:	eee9 3a25 	vfma.f32	s7, s18, s11
 8000a6a:	eea8 4aa5 	vfma.f32	s8, s17, s11
 8000a6e:	eee3 4a25 	vfma.f32	s9, s6, s11
 8000a72:	ee26 5a86 	vmul.f32	s10, s13, s12
 8000a76:	ee67 5a06 	vmul.f32	s11, s14, s12
 8000a7a:	ee27 6a86 	vmul.f32	s12, s15, s12
 8000a7e:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8000a82:	eea9 5a29 	vfma.f32	s10, s18, s19
 8000a86:	eee8 5aa9 	vfma.f32	s11, s17, s19
 8000a8a:	eea3 6a29 	vfma.f32	s12, s6, s19
 8000a8e:	edd3 9a02 	vldr	s19, [r3, #8]
 8000a92:	ee27 7a0a 	vmul.f32	s14, s14, s20
 8000a96:	eee3 7a29 	vfma.f32	s15, s6, s19
 8000a9a:	ee66 6a8a 	vmul.f32	s13, s13, s20
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8000a9e:	eeb0 3a61 	vmov.f32	s6, s3
 8000aa2:	eea8 7aa9 	vfma.f32	s14, s17, s19
 8000aa6:	edd2 8a08 	vldr	s17, [r2, #32]
 8000aaa:	eee9 6a29 	vfma.f32	s13, s18, s19
 8000aae:	eea8 2a28 	vfma.f32	s4, s16, s17
 8000ab2:	eee0 2a28 	vfma.f32	s5, s0, s17
 8000ab6:	eea1 3a28 	vfma.f32	s6, s2, s17
 8000aba:	edd3 8a07 	vldr	s17, [r3, #28]
 8000abe:	edd5 1a00 	vldr	s3, [r5]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8000ac2:	ed94 9a02 	vldr	s18, [r4, #8]
 8000ac6:	ed94 8a00 	vldr	s16, [r4]
 8000aca:	ed94 0a01 	vldr	s0, [r4, #4]
 8000ace:	ed93 1a08 	vldr	s2, [r3, #32]
 8000ad2:	ee21 8a88 	vmul.f32	s16, s3, s16
 8000ad6:	694b      	ldr	r3, [r1, #20]
 8000ad8:	ee21 0a80 	vmul.f32	s0, s3, s0
 8000adc:	ee61 1a89 	vmul.f32	s3, s3, s18
 8000ae0:	ed93 9a00 	vldr	s18, [r3]
 8000ae4:	eee8 3a09 	vfma.f32	s7, s16, s18
  *
  */
template<typename DstScalar,typename SrcScalar> struct add_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(add_assign_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 8000ae8:	eea0 4a09 	vfma.f32	s8, s0, s18
 8000aec:	eee1 4a89 	vfma.f32	s9, s3, s18
 8000af0:	eee2 3a20 	vfma.f32	s7, s4, s1
 8000af4:	eea2 4aa0 	vfma.f32	s8, s5, s1
 8000af8:	eee3 4a20 	vfma.f32	s9, s6, s1
 8000afc:	edd3 0a01 	vldr	s1, [r3, #4]
 8000b00:	eea8 5a20 	vfma.f32	s10, s16, s1
 8000b04:	eee0 5a20 	vfma.f32	s11, s0, s1
 8000b08:	eea1 6aa0 	vfma.f32	s12, s3, s1
 8000b0c:	edd3 0a02 	vldr	s1, [r3, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8000b10:	edc0 3a00 	vstr	s7, [r0]
 8000b14:	eee8 6a20 	vfma.f32	s13, s16, s1
 8000b18:	ed80 4a01 	vstr	s8, [r0, #4]
 8000b1c:	eea0 7a20 	vfma.f32	s14, s0, s1
 8000b20:	edc0 4a02 	vstr	s9, [r0, #8]
 8000b24:	eee1 7aa0 	vfma.f32	s15, s3, s1
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 8000b28:	eea2 5a28 	vfma.f32	s10, s4, s17
 8000b2c:	eee2 5aa8 	vfma.f32	s11, s5, s17
 8000b30:	eea3 6a28 	vfma.f32	s12, s6, s17
 8000b34:	eee2 6a01 	vfma.f32	s13, s4, s2
 8000b38:	eea2 7a81 	vfma.f32	s14, s5, s2
 8000b3c:	eee3 7a01 	vfma.f32	s15, s6, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8000b40:	ed80 5a03 	vstr	s10, [r0, #12]
 8000b44:	edc0 5a04 	vstr	s11, [r0, #16]
 8000b48:	ed80 6a05 	vstr	s12, [r0, #20]
 8000b4c:	edc0 6a06 	vstr	s13, [r0, #24]
 8000b50:	ed80 7a07 	vstr	s14, [r0, #28]
 8000b54:	edc0 7a08 	vstr	s15, [r0, #32]
{
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
}
 8000b58:	b010      	add	sp, #64	; 0x40
 8000b5a:	ecbd 8b06 	vpop	{d8-d10}
 8000b5e:	bc30      	pop	{r4, r5}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <_Z18Predict_RightWheelv>:
 8000b64:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <_Z18Predict_RightWheelv+0xa4>)
 8000b66:	4a29      	ldr	r2, [pc, #164]	; (8000c0c <_Z18Predict_RightWheelv+0xa8>)
 8000b68:	edd3 5a05 	vldr	s11, [r3, #20]
 8000b6c:	edd2 7a01 	vldr	s15, [r2, #4]
 8000b70:	edd3 6a03 	vldr	s13, [r3, #12]
 8000b74:	ed93 7a04 	vldr	s14, [r3, #16]
 8000b78:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000b7c:	ed92 6a00 	vldr	s12, [r2]
 8000b80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b84:	ed93 4a00 	vldr	s8, [r3]
 8000b88:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8000b8c:	edd3 4a01 	vldr	s9, [r3, #4]
 8000b90:	ed93 5a02 	vldr	s10, [r3, #8]
 8000b94:	eee4 6a06 	vfma.f32	s13, s8, s12
 8000b98:	eea6 7a24 	vfma.f32	s14, s12, s9
 8000b9c:	edd2 5a02 	vldr	s11, [r2, #8]
 8000ba0:	eee6 7a05 	vfma.f32	s15, s12, s10
 8000ba4:	edd3 2a06 	vldr	s5, [r3, #24]
 8000ba8:	ed93 3a07 	vldr	s6, [r3, #28]
 8000bac:	edd3 3a08 	vldr	s7, [r3, #32]
 8000bb0:	4917      	ldr	r1, [pc, #92]	; (8000c10 <_Z18Predict_RightWheelv+0xac>)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8000bb2:	eee2 6aa5 	vfma.f32	s13, s5, s11
 8000bb6:	4817      	ldr	r0, [pc, #92]	; (8000c14 <_Z18Predict_RightWheelv+0xb0>)
 8000bb8:	eea5 7a83 	vfma.f32	s14, s11, s6
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 8000bbc:	ed91 4a00 	vldr	s8, [r1]
 8000bc0:	eee5 7aa3 	vfma.f32	s15, s11, s7
 8000bc4:	ed90 6a00 	vldr	s12, [r0]
 8000bc8:	edd1 4a01 	vldr	s9, [r1, #4]
 8000bcc:	ed91 5a02 	vldr	s10, [r1, #8]
    CwiseBinaryOp(const CwiseBinaryOp<BinaryOp,LhsType,RhsType>&) = default;
#endif

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <_Z18Predict_RightWheelv+0xb4>)
 8000bd2:	eee4 6a06 	vfma.f32	s13, s8, s12
 8000bd6:	eea4 7a86 	vfma.f32	s14, s9, s12
 8000bda:	eee5 7a06 	vfma.f32	s15, s10, s12
}

// Kalman filter function
// X, P, Y, K
void Predict_RightWheel()
{
 8000bde:	b510      	push	{r4, lr}
 8000be0:	b088      	sub	sp, #32
 8000be2:	4c0e      	ldr	r4, [pc, #56]	; (8000c1c <_Z18Predict_RightWheelv+0xb8>)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8000be4:	edc2 6a00 	vstr	s13, [r2]
 8000be8:	9303      	str	r3, [sp, #12]
    // so at this stage we have to assume aliasing... and resising has to be done later.
    template<typename OtherDerived>
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
    {
      internal::call_assignment(this->derived(), other.derived());
 8000bea:	a901      	add	r1, sp, #4
 8000bec:	ed82 7a01 	vstr	s14, [r2, #4]
 8000bf0:	edc2 7a02 	vstr	s15, [r2, #8]
 8000bf4:	9406      	str	r4, [sp, #24]
 8000bf6:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <_Z18Predict_RightWheelv+0xbc>)
 8000bfc:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8000c00:	f7ff fec2 	bl	8000988 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKNS7_INS7_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi1ELi0ELi1ELi1EEELi0EEENS9_ISD_EELi0EEEEEEEvRT_RKT0_>
    X_R = A*X_R + B*U;
    P_R = A*P_R*(A.transpose()) + G*Q_R*(G.transpose());
}
 8000c04:	b008      	add	sp, #32
 8000c06:	bd10      	pop	{r4, pc}
 8000c08:	2400017c 	.word	0x2400017c
 8000c0c:	24000280 	.word	0x24000280
 8000c10:	240001a0 	.word	0x240001a0
 8000c14:	24000270 	.word	0x24000270
 8000c18:	24000224 	.word	0x24000224
 8000c1c:	240001c4 	.word	0x240001c4
 8000c20:	2400024c 	.word	0x2400024c

08000c24 <_Z17Predict_LeftWheelv>:
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <_Z17Predict_LeftWheelv+0xa4>)
 8000c26:	4a29      	ldr	r2, [pc, #164]	; (8000ccc <_Z17Predict_LeftWheelv+0xa8>)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8000c28:	edd3 5a05 	vldr	s11, [r3, #20]
 8000c2c:	edd2 7a01 	vldr	s15, [r2, #4]
 8000c30:	edd3 6a03 	vldr	s13, [r3, #12]
 8000c34:	ed93 7a04 	vldr	s14, [r3, #16]
 8000c38:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000c3c:	ed92 6a00 	vldr	s12, [r2]
 8000c40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c44:	ed93 4a00 	vldr	s8, [r3]
 8000c48:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8000c4c:	edd3 4a01 	vldr	s9, [r3, #4]
 8000c50:	ed93 5a02 	vldr	s10, [r3, #8]
 8000c54:	eee4 6a06 	vfma.f32	s13, s8, s12
 8000c58:	eea6 7a24 	vfma.f32	s14, s12, s9
 8000c5c:	edd2 5a02 	vldr	s11, [r2, #8]
 8000c60:	eee6 7a05 	vfma.f32	s15, s12, s10
 8000c64:	edd3 2a06 	vldr	s5, [r3, #24]
 8000c68:	ed93 3a07 	vldr	s6, [r3, #28]
 8000c6c:	edd3 3a08 	vldr	s7, [r3, #32]
 8000c70:	4917      	ldr	r1, [pc, #92]	; (8000cd0 <_Z17Predict_LeftWheelv+0xac>)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8000c72:	eee2 6aa5 	vfma.f32	s13, s5, s11
 8000c76:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <_Z17Predict_LeftWheelv+0xb0>)
 8000c78:	eea5 7a83 	vfma.f32	s14, s11, s6
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 8000c7c:	ed91 4a00 	vldr	s8, [r1]
 8000c80:	eee5 7aa3 	vfma.f32	s15, s11, s7
 8000c84:	ed90 6a00 	vldr	s12, [r0]
 8000c88:	edd1 4a01 	vldr	s9, [r1, #4]
 8000c8c:	ed91 5a02 	vldr	s10, [r1, #8]
 8000c90:	4811      	ldr	r0, [pc, #68]	; (8000cd8 <_Z17Predict_LeftWheelv+0xb4>)
 8000c92:	eee4 6a06 	vfma.f32	s13, s8, s12
 8000c96:	eea4 7a86 	vfma.f32	s14, s9, s12
 8000c9a:	eee5 7a06 	vfma.f32	s15, s10, s12
void Predict_LeftWheel()
{
 8000c9e:	b510      	push	{r4, lr}
 8000ca0:	b088      	sub	sp, #32
 8000ca2:	4c0e      	ldr	r4, [pc, #56]	; (8000cdc <_Z17Predict_LeftWheelv+0xb8>)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8000ca4:	edc2 6a00 	vstr	s13, [r2]
 8000ca8:	9303      	str	r3, [sp, #12]
 8000caa:	a901      	add	r1, sp, #4
 8000cac:	ed82 7a01 	vstr	s14, [r2, #4]
 8000cb0:	edc2 7a02 	vstr	s15, [r2, #8]
 8000cb4:	9406      	str	r4, [sp, #24]
 8000cb6:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <_Z17Predict_LeftWheelv+0xbc>)
 8000cbc:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8000cc0:	f7ff fe62 	bl	8000988 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKNS7_INS7_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi1ELi0ELi1ELi1EEELi0EEENS9_ISD_EELi0EEEEEEEvRT_RKT0_>
    X_L = A*X_L + B*U;
    P_L = A*P_L*(A.transpose()) + G*Q_L*(G.transpose());
}
 8000cc4:	b008      	add	sp, #32
 8000cc6:	bd10      	pop	{r4, pc}
 8000cc8:	2400017c 	.word	0x2400017c
 8000ccc:	24000274 	.word	0x24000274
 8000cd0:	240001a0 	.word	0x240001a0
 8000cd4:	24000270 	.word	0x24000270
 8000cd8:	24000200 	.word	0x24000200
 8000cdc:	240001c4 	.word	0x240001c4
 8000ce0:	24000248 	.word	0x24000248

08000ce4 <_ZN5Eigen6MatrixIfLi2ELi2ELi1ELi2ELi2EEC1INS_7ProductINS3_INS0_IfLi2ELi2ELi0ELi2ELi2EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEERKT_>:
  EIGEN_ALIGN_TO_BOUNDARY(16) T array[Size];

  EIGEN_DEVICE_FUNC
  plain_array()
  {
    EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(15);
 8000ce4:	0703      	lsls	r3, r0, #28
#ifndef EIGEN_PARSED_BY_DOXYGEN

    // This constructor is for both 1x1 matrices and dynamic vectors
    template<typename T>
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    explicit Matrix(const T& x)
 8000ce6:	b510      	push	{r4, lr}
 8000ce8:	b08e      	sub	sp, #56	; 0x38
 8000cea:	d14a      	bne.n	8000d82 <_ZN5Eigen6MatrixIfLi2ELi2ELi1ELi2ELi2EEC1INS_7ProductINS3_INS0_IfLi2ELi2ELi0ELi2ELi2EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEERKT_+0x9e>
 8000cec:	f10d 021f 	add.w	r2, sp, #31
 8000cf0:	f022 0c0f 	bic.w	ip, r2, #15
 8000cf4:	680a      	ldr	r2, [r1, #0]
 8000cf6:	edd2 5a03 	vldr	s11, [r2, #12]
 8000cfa:	ed92 4a00 	vldr	s8, [r2]
 8000cfe:	ed92 5a01 	vldr	s10, [r2, #4]
 8000d02:	ed92 6a02 	vldr	s12, [r2, #8]
 8000d06:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 8000d0a:	edd4 7a03 	vldr	s15, [r4, #12]
 8000d0e:	edd4 6a01 	vldr	s13, [r4, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8000d12:	ee26 7a27 	vmul.f32	s14, s12, s15
 8000d16:	ed94 3a02 	vldr	s6, [r4, #8]
 8000d1a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8000d1e:	edd4 4a00 	vldr	s9, [r4]
 8000d22:	ee26 6a26 	vmul.f32	s12, s12, s13
 8000d26:	edd2 3a03 	vldr	s7, [r2, #12]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8000d2a:	eea4 7a03 	vfma.f32	s14, s8, s6
    : m_lhs(xpr.lhs()),
      m_rhs(xpr.rhs()),
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
                            //       or perhaps declare them on the fly on the packet method... We have experiment to check what's best.
      m_innerDim(xpr.lhs().cols())
 8000d2e:	f8cc 2010 	str.w	r2, [ip, #16]
 8000d32:	eee5 7a03 	vfma.f32	s15, s10, s6
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8000d36:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8000d3a:	edd2 5a02 	vldr	s11, [r2, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8000d3e:	eea4 6a24 	vfma.f32	s12, s8, s9
 8000d42:	ed92 4a00 	vldr	s8, [r2]
 8000d46:	eee4 6a85 	vfma.f32	s13, s9, s10
 8000d4a:	edd2 4a01 	vldr	s9, [r2, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8000d4e:	ee27 5a25 	vmul.f32	s10, s14, s11
 8000d52:	ee27 7a23 	vmul.f32	s14, s14, s7
 8000d56:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8000d5a:	ee67 7aa3 	vmul.f32	s15, s15, s7
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8000d5e:	eea6 5a04 	vfma.f32	s10, s12, s8
 8000d62:	eea6 7a24 	vfma.f32	s14, s12, s9
 8000d66:	eee6 5a84 	vfma.f32	s11, s13, s8
 8000d6a:	eee6 7aa4 	vfma.f32	s15, s13, s9
 8000d6e:	ed80 5a00 	vstr	s10, [r0]
 8000d72:	ed80 7a01 	vstr	s14, [r0, #4]
 8000d76:	edc0 5a02 	vstr	s11, [r0, #8]
 8000d7a:	edc0 7a03 	vstr	s15, [r0, #12]
    {
      Base::_check_template_params();
      Base::template _init1<T>(x);
    }
 8000d7e:	b00e      	add	sp, #56	; 0x38
 8000d80:	bd10      	pop	{r4, pc}
 8000d82:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <_ZN5Eigen6MatrixIfLi2ELi2ELi1ELi2ELi2EEC1INS_7ProductINS3_INS0_IfLi2ELi2ELi0ELi2ELi2EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEERKT_+0xac>)
 8000d84:	216d      	movs	r1, #109	; 0x6d
 8000d86:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <_ZN5Eigen6MatrixIfLi2ELi2ELi1ELi2ELi2EEC1INS_7ProductINS3_INS0_IfLi2ELi2ELi0ELi2ELi2EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEERKT_+0xb0>)
 8000d88:	4803      	ldr	r0, [pc, #12]	; (8000d98 <_ZN5Eigen6MatrixIfLi2ELi2ELi1ELi2ELi2EEC1INS_7ProductINS3_INS0_IfLi2ELi2ELi0ELi2ELi2EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEERKT_+0xb4>)
 8000d8a:	f00a fa4f 	bl	800b22c <__assert_func>
 8000d8e:	bf00      	nop
 8000d90:	0800c680 	.word	0x0800c680
 8000d94:	0800c770 	.word	0x0800c770
 8000d98:	0800c7fc 	.word	0x0800c7fc
 8000d9c:	00000000 	.word	0x00000000

08000da0 <UserGetLinVelVariance>:
{
	return P_L(1,1);
}
float UserGetLinVelVariance()
{
	speed_cov(0,0) = P_R(1,1) * ((M_PI*M_PI)/(180*180)); 	// Var(DegSec) --> Var(radSec)
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <UserGetLinVelVariance+0x70>)
	speed_cov(1,1) = P_L(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <UserGetLinVelVariance+0x74>)
	speed_cov(0,0) = P_R(1,1) * ((M_PI*M_PI)/(180*180)); 	// Var(DegSec) --> Var(radSec)
 8000da4:	ed92 6a04 	vldr	s12, [r2, #16]
	speed_cov(1,1) = P_L(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000da8:	ed93 7a04 	vldr	s14, [r3, #16]
	speed_cov(0,0) = P_R(1,1) * ((M_PI*M_PI)/(180*180)); 	// Var(DegSec) --> Var(radSec)
 8000dac:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <UserGetLinVelVariance+0x78>)
	speed_cov(1,1) = P_L(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000db2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000db6:	4a19      	ldr	r2, [pc, #100]	; (8000e1c <UserGetLinVelVariance+0x7c>)
	speed_cov(0,0) = P_R(1,1) * ((M_PI*M_PI)/(180*180)); 	// Var(DegSec) --> Var(radSec)
 8000db8:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8000e08 <UserGetLinVelVariance+0x68>
{
 8000dbc:	b510      	push	{r4, lr}
	speed_cov(0,0) = P_R(1,1) * ((M_PI*M_PI)/(180*180)); 	// Var(DegSec) --> Var(radSec)
 8000dbe:	ee26 6b05 	vmul.f64	d6, d6, d5
{
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	f10d 041f 	add.w	r4, sp, #31
// Deal with "assume-aliasing"
template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
{
  typename plain_matrix_type<Src>::type tmp(src);
 8000dc8:	a901      	add	r1, sp, #4
	speed_cov(1,1) = P_L(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000dca:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000dce:	9302      	str	r3, [sp, #8]
{
 8000dd0:	f024 040f 	bic.w	r4, r4, #15
 8000dd4:	9201      	str	r2, [sp, #4]
 8000dd6:	9203      	str	r2, [sp, #12]
	speed_cov(0,0) = P_R(1,1) * ((M_PI*M_PI)/(180*180)); 	// Var(DegSec) --> Var(radSec)
 8000dd8:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8000ddc:	4620      	mov	r0, r4
	speed_cov(1,1) = P_L(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000dde:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	speed_cov(0,0) = P_R(1,1) * ((M_PI*M_PI)/(180*180)); 	// Var(DegSec) --> Var(radSec)
 8000de2:	ed83 6a00 	vstr	s12, [r3]
	speed_cov(1,1) = P_L(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000de6:	ed83 7a03 	vstr	s14, [r3, #12]
 8000dea:	f7ff ff7b 	bl	8000ce4 <_ZN5Eigen6MatrixIfLi2ELi2ELi1ELi2ELi2EEC1INS_7ProductINS3_INS0_IfLi2ELi2ELi0ELi2ELi2EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEERKT_>
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <UserGetLinVelVariance+0x80>)
 8000df0:	ed94 0a00 	vldr	s0, [r4]
 8000df4:	68a0      	ldr	r0, [r4, #8]
 8000df6:	6861      	ldr	r1, [r4, #4]
 8000df8:	68e2      	ldr	r2, [r4, #12]
 8000dfa:	ed83 0a00 	vstr	s0, [r3]
 8000dfe:	6058      	str	r0, [r3, #4]
 8000e00:	6099      	str	r1, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
	twist_cov = forwardmatrix*speed_cov*(forwardmatrix.transpose());
	return twist_cov(0,0);
}
 8000e04:	b00a      	add	sp, #40	; 0x28
 8000e06:	bd10      	pop	{r4, pc}
 8000e08:	db141fb9 	.word	0xdb141fb9
 8000e0c:	3f33f6a1 	.word	0x3f33f6a1
 8000e10:	24000224 	.word	0x24000224
 8000e14:	24000200 	.word	0x24000200
 8000e18:	240002b0 	.word	0x240002b0
 8000e1c:	240002a0 	.word	0x240002a0
 8000e20:	240002c0 	.word	0x240002c0
 8000e24:	00000000 	.word	0x00000000

08000e28 <UserGetAngVelVariance>:
float UserGetAngVelVariance()
{
	speed_cov(0,0) = P_R(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000e28:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <UserGetAngVelVariance+0x70>)
	speed_cov(1,1) = P_L(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <UserGetAngVelVariance+0x74>)
	speed_cov(0,0) = P_R(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000e2c:	ed92 6a04 	vldr	s12, [r2, #16]
	speed_cov(1,1) = P_L(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000e30:	ed93 7a04 	vldr	s14, [r3, #16]
	speed_cov(0,0) = P_R(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000e34:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <UserGetAngVelVariance+0x78>)
	speed_cov(1,1) = P_L(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000e3a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000e3e:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <UserGetAngVelVariance+0x7c>)
	speed_cov(0,0) = P_R(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000e40:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8000e90 <UserGetAngVelVariance+0x68>
{
 8000e44:	b510      	push	{r4, lr}
	speed_cov(0,0) = P_R(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000e46:	ee26 6b05 	vmul.f64	d6, d6, d5
{
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	f10d 041f 	add.w	r4, sp, #31
 8000e50:	a901      	add	r1, sp, #4
	speed_cov(1,1) = P_L(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000e52:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e56:	9302      	str	r3, [sp, #8]
{
 8000e58:	f024 040f 	bic.w	r4, r4, #15
 8000e5c:	9201      	str	r2, [sp, #4]
 8000e5e:	9203      	str	r2, [sp, #12]
	speed_cov(0,0) = P_R(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000e60:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8000e64:	4620      	mov	r0, r4
	speed_cov(1,1) = P_L(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000e66:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	speed_cov(0,0) = P_R(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000e6a:	ed83 6a00 	vstr	s12, [r3]
	speed_cov(1,1) = P_L(1,1) * ((M_PI*M_PI)/(180*180));	// Var(DegSec) --> Var(radSec)
 8000e6e:	ed83 7a03 	vstr	s14, [r3, #12]
 8000e72:	f7ff ff37 	bl	8000ce4 <_ZN5Eigen6MatrixIfLi2ELi2ELi1ELi2ELi2EEC1INS_7ProductINS3_INS0_IfLi2ELi2ELi0ELi2ELi2EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEERKT_>
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <UserGetAngVelVariance+0x80>)
 8000e78:	ed94 0a03 	vldr	s0, [r4, #12]
 8000e7c:	6820      	ldr	r0, [r4, #0]
 8000e7e:	68a1      	ldr	r1, [r4, #8]
 8000e80:	6862      	ldr	r2, [r4, #4]
 8000e82:	6018      	str	r0, [r3, #0]
 8000e84:	ed83 0a03 	vstr	s0, [r3, #12]
 8000e88:	6059      	str	r1, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
	twist_cov = forwardmatrix*speed_cov*(forwardmatrix.transpose());
	return twist_cov(1,1);
}
 8000e8c:	b00a      	add	sp, #40	; 0x28
 8000e8e:	bd10      	pop	{r4, pc}
 8000e90:	db141fb9 	.word	0xdb141fb9
 8000e94:	3f33f6a1 	.word	0x3f33f6a1
 8000e98:	24000224 	.word	0x24000224
 8000e9c:	24000200 	.word	0x24000200
 8000ea0:	240002b0 	.word	0x240002b0
 8000ea4:	240002a0 	.word	0x240002a0
 8000ea8:	240002c0 	.word	0x240002c0

08000eac <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8000eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
template<typename T> class variable_if_dynamic<T, Dynamic>
{
    T m_value;
  public:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T value = 0) EIGEN_NO_THROW : m_value(value) {}
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T value() const { return m_value; }
 8000eb0:	e9d1 4901 	ldrd	r4, r9, [r1, #4]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8000eb4:	ea54 0309 	orrs.w	r3, r4, r9
 8000eb8:	f000 81c0 	beq.w	800123c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x390>
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8000ebc:	2c00      	cmp	r4, #0
 8000ebe:	f2c0 81c5 	blt.w	800124c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x3a0>
 8000ec2:	f1b9 0f00 	cmp.w	r9, #0
 8000ec6:	f2c0 81c1 	blt.w	800124c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x3a0>
        m_storage.resize(rows*cols, rows, cols);
 8000eca:	fb09 f504 	mul.w	r5, r9, r4
    {
      m_data = internal::conditional_aligned_realloc_new_auto<T,(_Options&DontAlign)==0>(m_data, size, m_rows*m_cols);
      m_rows = rows;
      m_cols = cols;
    }
    EIGEN_DEVICE_FUNC void resize(Index size, Index rows, Index cols)
 8000ece:	4688      	mov	r8, r1
 8000ed0:	4607      	mov	r7, r0
    {
      if(size != m_rows*m_cols)
 8000ed2:	b15d      	cbz	r5, 8000eec <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x40>
template<typename T, bool Align> EIGEN_DEVICE_FUNC inline T* conditional_aligned_new_auto(std::size_t size)
{
  if(size==0)
    return 0; // short-cut. Also fixes Bug 884
  check_size_for_overflow<T>(size);
  T *result = reinterpret_cast<T*>(conditional_aligned_malloc<Align>(sizeof(T)*size));
 8000ed4:	00ad      	lsls	r5, r5, #2
  void *original = malloc(size+alignment);
 8000ed6:	f105 0010 	add.w	r0, r5, #16
 8000eda:	f00a fa01 	bl	800b2e0 <malloc>
  if (original == 0) return 0;
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	f000 81b2 	beq.w	8001248 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x39c>
  void *aligned = reinterpret_cast<void*>((reinterpret_cast<std::size_t>(original) & ~(std::size_t(alignment-1))) + alignment);
 8000ee4:	f020 050f 	bic.w	r5, r0, #15
  *(reinterpret_cast<void**>(aligned) - 1) = original;
 8000ee8:	60e8      	str	r0, [r5, #12]
  void *aligned = reinterpret_cast<void*>((reinterpret_cast<std::size_t>(original) & ~(std::size_t(alignment-1))) + alignment);
 8000eea:	3510      	adds	r5, #16
    for(Index outer = 0; outer < kernel.outerSize(); ++outer) {
 8000eec:	f1b9 0f00 	cmp.w	r9, #0
 8000ef0:	f000 81a4 	beq.w	800123c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x390>
 8000ef4:	b1b4      	cbz	r4, 8000f24 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x78>
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000efc:	f04f 0e00 	mov.w	lr, #0
 8000f00:	46b4      	mov	ip, r6
      for(Index inner = 0; inner < kernel.innerSize(); ++inner) {
 8000f02:	eb05 0286 	add.w	r2, r5, r6, lsl #2
 8000f06:	2300      	movs	r3, #0
         PacketAccess = packet_traits<Scalar>::Vectorizable, IsRepeatable = true }; };

template<typename Scalar> struct scalar_identity_op {
  EIGEN_EMPTY_STRUCT_CTOR(scalar_identity_op)
  template<typename IndexType>
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() (IndexType row, IndexType col) const { return row==col ? Scalar(1) : Scalar(0); }
 8000f08:	4563      	cmp	r3, ip
 8000f0a:	f103 0301 	add.w	r3, r3, #1
 8000f0e:	f000 816f 	beq.w	80011f0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x344>
 8000f12:	429c      	cmp	r4, r3
 8000f14:	f842 eb04 	str.w	lr, [r2], #4
 8000f18:	d1f6      	bne.n	8000f08 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x5c>
    for(Index outer = 0; outer < kernel.outerSize(); ++outer) {
 8000f1a:	f10c 0c01 	add.w	ip, ip, #1
 8000f1e:	4426      	add	r6, r4
 8000f20:	45e1      	cmp	r9, ip
 8000f22:	d1ee      	bne.n	8000f02 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x56>
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8000f24:	f1b9 0f03 	cmp.w	r9, #3
 8000f28:	f040 8188 	bne.w	800123c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x390>
 8000f2c:	2c03      	cmp	r4, #3
 8000f2e:	f040 8185 	bne.w	800123c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x390>
  *
  */
template<typename DstScalar,typename SrcScalar> struct sub_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(sub_assign_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 8000f32:	edd5 6a00 	vldr	s13, [r5]
 8000f36:	ed95 5a01 	vldr	s10, [r5, #4]
 8000f3a:	edd5 5a02 	vldr	s11, [r5, #8]
 8000f3e:	ed95 6a03 	vldr	s12, [r5, #12]
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const LhsNestedCleaned& lhs() const { return m_lhs; }
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8000f42:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8000f46:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f4a:	ed92 7a03 	vldr	s14, [r2, #12]
 8000f4e:	ed93 4a00 	vldr	s8, [r3]
 8000f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f56:	edd2 4a00 	vldr	s9, [r2]
 8000f5a:	ed95 7a04 	vldr	s14, [r5, #16]
 8000f5e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8000f62:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f66:	edc5 6a00 	vstr	s13, [r5]
 8000f6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f6e:	edd2 3a04 	vldr	s7, [r2, #16]
 8000f72:	ed93 4a00 	vldr	s8, [r3]
 8000f76:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8000f7a:	edd2 4a01 	vldr	s9, [r2, #4]
 8000f7e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8000f82:	ee75 7a67 	vsub.f32	s15, s10, s15
 8000f86:	edc5 7a01 	vstr	s15, [r5, #4]
 8000f8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f8e:	ed92 4a05 	vldr	s8, [r2, #20]
 8000f92:	edd3 4a00 	vldr	s9, [r3]
 8000f96:	ee67 7a84 	vmul.f32	s15, s15, s8
 8000f9a:	ed92 5a02 	vldr	s10, [r2, #8]
 8000f9e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8000fa2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8000fa6:	edc5 7a02 	vstr	s15, [r5, #8]
 8000faa:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fae:	edd2 4a03 	vldr	s9, [r2, #12]
 8000fb2:	ed93 5a02 	vldr	s10, [r3, #8]
 8000fb6:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8000fba:	edd2 5a00 	vldr	s11, [r2]
 8000fbe:	eee5 7a25 	vfma.f32	s15, s10, s11
 8000fc2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8000fc6:	ed85 6a03 	vstr	s12, [r5, #12]
 8000fca:	edd3 4a03 	vldr	s9, [r3, #12]
 8000fce:	edd2 7a04 	vldr	s15, [r2, #16]
 8000fd2:	ed93 5a02 	vldr	s10, [r3, #8]
 8000fd6:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8000fda:	edd2 5a01 	vldr	s11, [r2, #4]
 8000fde:	eee5 7a25 	vfma.f32	s15, s10, s11
 8000fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe6:	edc5 7a04 	vstr	s15, [r5, #16]
 8000fea:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fee:	ed92 7a05 	vldr	s14, [r2, #20]
 8000ff2:	edd3 3a02 	vldr	s7, [r3, #8]
 8000ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffa:	ed92 4a02 	vldr	s8, [r2, #8]
 8000ffe:	edd5 4a05 	vldr	s9, [r5, #20]
 8001002:	f8d8 401c 	ldr.w	r4, [r8, #28]
 8001006:	eee3 7a84 	vfma.f32	s15, s7, s8
 800100a:	ed95 7a06 	vldr	s14, [r5, #24]
 800100e:	ed95 5a07 	vldr	s10, [r5, #28]
 8001012:	edd5 5a08 	vldr	s11, [r5, #32]
 8001016:	ee74 7ae7 	vsub.f32	s15, s9, s15
 800101a:	edc5 7a05 	vstr	s15, [r5, #20]
 800101e:	edd3 3a05 	vldr	s7, [r3, #20]
 8001022:	edd2 7a03 	vldr	s15, [r2, #12]
 8001026:	edd3 4a04 	vldr	s9, [r3, #16]
 800102a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800102e:	ed92 4a00 	vldr	s8, [r2]
 8001032:	eee4 7a24 	vfma.f32	s15, s8, s9
 8001036:	ee37 7a67 	vsub.f32	s14, s14, s15
 800103a:	ed85 7a06 	vstr	s14, [r5, #24]
 800103e:	edd3 3a05 	vldr	s7, [r3, #20]
 8001042:	edd2 7a04 	vldr	s15, [r2, #16]
 8001046:	edd3 4a04 	vldr	s9, [r3, #16]
 800104a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800104e:	ed92 4a01 	vldr	s8, [r2, #4]
 8001052:	eee4 7a24 	vfma.f32	s15, s8, s9
 8001056:	ee75 7a67 	vsub.f32	s15, s10, s15
 800105a:	edc5 7a07 	vstr	s15, [r5, #28]
 800105e:	ed93 4a05 	vldr	s8, [r3, #20]
 8001062:	edd2 7a05 	vldr	s15, [r2, #20]
 8001066:	ed93 5a04 	vldr	s10, [r3, #16]
 800106a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800106e:	edd2 4a02 	vldr	s9, [r2, #8]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	eee4 7a85 	vfma.f32	s15, s9, s10
 8001078:	2b03      	cmp	r3, #3
    }
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void resize(Index size, Index rows, Index)
    {
      if(size != m_rows*_Cols)
      {
        internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, _Cols*m_rows);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001080:	edc5 7a08 	vstr	s15, [r5, #32]
 8001084:	f040 80c0 	bne.w	8001208 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x35c>
 8001088:	edd4 7a01 	vldr	s15, [r4, #4]
 800108c:	ed94 5a00 	vldr	s10, [r4]
 8001090:	ee67 7a86 	vmul.f32	s15, s15, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001094:	edd4 5a02 	vldr	s11, [r4, #8]
 8001098:	eee6 7a85 	vfma.f32	s15, s13, s10
 800109c:	eee5 7a87 	vfma.f32	s15, s11, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 80010a0:	edc3 7a00 	vstr	s15, [r3]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80010a4:	ed94 7a01 	vldr	s14, [r4, #4]
 80010a8:	edd5 7a04 	vldr	s15, [r5, #16]
 80010ac:	edd5 5a01 	vldr	s11, [r5, #4]
 80010b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b4:	ed94 6a00 	vldr	s12, [r4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80010b8:	edd4 6a02 	vldr	s13, [r4, #8]
 80010bc:	ed95 7a07 	vldr	s14, [r5, #28]
 80010c0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80010c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80010c8:	edc3 7a01 	vstr	s15, [r3, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80010cc:	ed95 7a05 	vldr	s14, [r5, #20]
 80010d0:	edd4 7a01 	vldr	s15, [r4, #4]
 80010d4:	edd5 5a02 	vldr	s11, [r5, #8]
 80010d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010dc:	ed94 6a00 	vldr	s12, [r4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80010e0:	edd5 6a08 	vldr	s13, [r5, #32]
 80010e4:	ed94 7a02 	vldr	s14, [r4, #8]
 80010e8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80010ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 80010f0:	edc3 7a02 	vstr	s15, [r3, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80010f4:	ed94 7a04 	vldr	s14, [r4, #16]
 80010f8:	edd5 7a03 	vldr	s15, [r5, #12]
 80010fc:	edd5 5a00 	vldr	s11, [r5]
 8001100:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001104:	ed94 6a03 	vldr	s12, [r4, #12]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001108:	edd5 6a06 	vldr	s13, [r5, #24]
 800110c:	ed94 7a05 	vldr	s14, [r4, #20]
 8001110:	eee5 7a86 	vfma.f32	s15, s11, s12
 8001114:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001118:	edc3 7a03 	vstr	s15, [r3, #12]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800111c:	ed94 7a04 	vldr	s14, [r4, #16]
 8001120:	edd5 7a04 	vldr	s15, [r5, #16]
 8001124:	edd5 5a01 	vldr	s11, [r5, #4]
 8001128:	ee67 7a87 	vmul.f32	s15, s15, s14
 800112c:	ed94 6a03 	vldr	s12, [r4, #12]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001130:	edd5 6a07 	vldr	s13, [r5, #28]
 8001134:	ed94 7a05 	vldr	s14, [r4, #20]
 8001138:	eee5 7a86 	vfma.f32	s15, s11, s12
 800113c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001140:	edc3 7a04 	vstr	s15, [r3, #16]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001144:	edd5 7a05 	vldr	s15, [r5, #20]
 8001148:	ed94 7a04 	vldr	s14, [r4, #16]
 800114c:	edd5 5a02 	vldr	s11, [r5, #8]
 8001150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001154:	ed94 6a03 	vldr	s12, [r4, #12]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001158:	edd5 6a08 	vldr	s13, [r5, #32]
 800115c:	ed94 7a05 	vldr	s14, [r4, #20]
 8001160:	eee5 7a86 	vfma.f32	s15, s11, s12
    free(*(reinterpret_cast<void**>(ptr) - 1));
 8001164:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8001168:	eee6 7a87 	vfma.f32	s15, s13, s14
 800116c:	edc3 7a05 	vstr	s15, [r3, #20]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001170:	ed95 7a03 	vldr	s14, [r5, #12]
 8001174:	edd4 7a07 	vldr	s15, [r4, #28]
 8001178:	edd4 5a06 	vldr	s11, [r4, #24]
 800117c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001180:	ed95 6a00 	vldr	s12, [r5]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001184:	edd5 6a06 	vldr	s13, [r5, #24]
 8001188:	ed94 7a08 	vldr	s14, [r4, #32]
 800118c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8001190:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001194:	edc3 7a06 	vstr	s15, [r3, #24]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001198:	ed95 7a04 	vldr	s14, [r5, #16]
 800119c:	edd4 7a07 	vldr	s15, [r4, #28]
 80011a0:	edd4 5a06 	vldr	s11, [r4, #24]
 80011a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a8:	ed95 6a01 	vldr	s12, [r5, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80011ac:	edd4 6a08 	vldr	s13, [r4, #32]
 80011b0:	ed95 7a07 	vldr	s14, [r5, #28]
 80011b4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80011b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80011bc:	edc3 7a07 	vstr	s15, [r3, #28]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80011c0:	ed95 7a05 	vldr	s14, [r5, #20]
 80011c4:	edd4 7a07 	vldr	s15, [r4, #28]
 80011c8:	edd5 5a02 	vldr	s11, [r5, #8]
 80011cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d0:	ed94 6a06 	vldr	s12, [r4, #24]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80011d4:	edd5 6a08 	vldr	s13, [r5, #32]
 80011d8:	ed94 7a08 	vldr	s14, [r4, #32]
 80011dc:	eee5 7a86 	vfma.f32	s15, s11, s12
 80011e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80011e4:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80011e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011ec:	f00a b880 	b.w	800b2f0 <free>
      for(Index inner = 0; inner < kernel.innerSize(); ++inner) {
 80011f0:	429c      	cmp	r4, r3
 80011f2:	ece2 7a01 	vstmia	r2!, {s15}
 80011f6:	f47f ae87 	bne.w	8000f08 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x5c>
    for(Index outer = 0; outer < kernel.outerSize(); ++outer) {
 80011fa:	f10c 0c01 	add.w	ip, ip, #1
 80011fe:	4426      	add	r6, r4
 8001200:	45e1      	cmp	r9, ip
 8001202:	f47f ae7e 	bne.w	8000f02 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x56>
 8001206:	e68d      	b.n	8000f24 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x78>
  if (ptr) {
 8001208:	b11b      	cbz	r3, 8001212 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x366>
    free(*(reinterpret_cast<void**>(ptr) - 1));
 800120a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800120e:	f00a f86f 	bl	800b2f0 <free>
  void *original = malloc(size+alignment);
 8001212:	2034      	movs	r0, #52	; 0x34
 8001214:	f00a f864 	bl	800b2e0 <malloc>
  if (original == 0) return 0;
 8001218:	b170      	cbz	r0, 8001238 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x38c>
  void *aligned = reinterpret_cast<void*>((reinterpret_cast<std::size_t>(original) & ~(std::size_t(alignment-1))) + alignment);
 800121a:	f020 030f 	bic.w	r3, r0, #15
 800121e:	3310      	adds	r3, #16
  *(reinterpret_cast<void**>(aligned) - 1) = original;
 8001220:	f843 0c04 	str.w	r0, [r3, #-4]
          m_data = internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size);
        else
          m_data = 0;
        EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
      }
      m_rows = rows;
 8001224:	2203      	movs	r2, #3
 8001226:	edd5 6a00 	vldr	s13, [r5]
 800122a:	ed95 6a03 	vldr	s12, [r5, #12]
 800122e:	ed95 7a06 	vldr	s14, [r5, #24]
 8001232:	e9c7 3200 	strd	r3, r2, [r7]
    }
 8001236:	e727      	b.n	8001088 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x1dc>
  if (original == 0) return 0;
 8001238:	4603      	mov	r3, r0
 800123a:	e7f3      	b.n	8001224 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x378>
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x3b0>)
 800123e:	21b0      	movs	r1, #176	; 0xb0
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x3b4>)
 8001242:	4808      	ldr	r0, [pc, #32]	; (8001264 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x3b8>)
 8001244:	f009 fff2 	bl	800b22c <__assert_func>
 8001248:	4605      	mov	r5, r0
 800124a:	e64f      	b.n	8000eec <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x40>
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x3bc>)
 800124e:	f240 1111 	movw	r1, #273	; 0x111
 8001252:	4a06      	ldr	r2, [pc, #24]	; (800126c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x3c0>)
 8001254:	4806      	ldr	r0, [pc, #24]	; (8001270 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_+0x3c4>)
 8001256:	f009 ffe9 	bl	800b22c <__assert_func>
 800125a:	bf00      	nop
 800125c:	0800caf8 	.word	0x0800caf8
 8001260:	0800cb30 	.word	0x0800cb30
 8001264:	0800ceac 	.word	0x0800ceac
 8001268:	0800c86c 	.word	0x0800c86c
 800126c:	0800c9fc 	.word	0x0800c9fc
 8001270:	0800ca88 	.word	0x0800ca88

08001274 <UserCodeUpdateLeftWheel>:
{
 8001274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001276:	4ca3      	ldr	r4, [pc, #652]	; (8001504 <UserCodeUpdateLeftWheel+0x290>)
 8001278:	4da3      	ldr	r5, [pc, #652]	; (8001508 <UserCodeUpdateLeftWheel+0x294>)
 800127a:	4fa4      	ldr	r7, [pc, #656]	; (800150c <UserCodeUpdateLeftWheel+0x298>)
 800127c:	4ea4      	ldr	r6, [pc, #656]	; (8001510 <UserCodeUpdateLeftWheel+0x29c>)
 800127e:	ed2d 8b08 	vpush	{d8-d11}
 8001282:	b08d      	sub	sp, #52	; 0x34
 8001284:	eef0 9a40 	vmov.f32	s19, s0
 8001288:	eeb0 aa60 	vmov.f32	s20, s1
	Predict_LeftWheel();
 800128c:	f7ff fcca 	bl	8000c24 <_Z17Predict_LeftWheelv>
 8001290:	edd5 2a02 	vldr	s5, [r5, #8]
  void *original = malloc(size+alignment);
 8001294:	2034      	movs	r0, #52	; 0x34
 8001296:	edd5 8a03 	vldr	s17, [r5, #12]
 800129a:	edd4 3a04 	vldr	s7, [r4, #16]
 800129e:	ed95 2a00 	vldr	s4, [r5]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80012a2:	ee22 8aa3 	vmul.f32	s16, s5, s7
 80012a6:	edd5 1a01 	vldr	s3, [r5, #4]
 80012aa:	ee63 3aa8 	vmul.f32	s7, s7, s17
 80012ae:	ed94 4a03 	vldr	s8, [r4, #12]
 80012b2:	ed94 1a00 	vldr	s2, [r4]
 80012b6:	eeb0 5a48 	vmov.f32	s10, s16
 80012ba:	edd4 7a01 	vldr	s15, [r4, #4]
 80012be:	eef0 6a63 	vmov.f32	s13, s7
 80012c2:	ed95 7a04 	vldr	s14, [r5, #16]
 80012c6:	ee24 9a22 	vmul.f32	s18, s8, s5
 80012ca:	ed94 6a06 	vldr	s12, [r4, #24]
 80012ce:	eea2 5a04 	vfma.f32	s10, s4, s8
 80012d2:	edd4 0a08 	vldr	s1, [r4, #32]
 80012d6:	eee4 6a21 	vfma.f32	s13, s8, s3
 80012da:	edd4 4a05 	vldr	s9, [r4, #20]
 80012de:	ee24 4a28 	vmul.f32	s8, s8, s17
 80012e2:	ed94 0a02 	vldr	s0, [r4, #8]
 80012e6:	eea1 9a02 	vfma.f32	s18, s2, s4
 80012ea:	ed94 3a07 	vldr	s6, [r4, #28]
 80012ee:	ee67 5aa8 	vmul.f32	s11, s15, s17
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80012f2:	4b88      	ldr	r3, [pc, #544]	; (8001514 <UserCodeUpdateLeftWheel+0x2a0>)
 80012f4:	eea1 4a21 	vfma.f32	s8, s2, s3
	Y_L(0,0) = position;	// assign value of encoder
 80012f8:	4a87      	ldr	r2, [pc, #540]	; (8001518 <UserCodeUpdateLeftWheel+0x2a4>)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80012fa:	ee22 baa7 	vmul.f32	s22, s5, s15
 80012fe:	eea2 8a27 	vfma.f32	s16, s4, s15
 8001302:	edc2 9a00 	vstr	s19, [r2]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8001306:	eee7 3aa1 	vfma.f32	s7, s15, s3
    return m_data[col * colStride() + row * rowStride()];
 800130a:	edd5 7a05 	vldr	s15, [r5, #20]
 800130e:	eee1 5a21 	vfma.f32	s11, s2, s3
	Y_L(1,0) = velocity;	// assign value of encoder
 8001312:	ed82 aa01 	vstr	s20, [r2, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001316:	eea6 9a07 	vfma.f32	s18, s12, s14
 800131a:	eea6 4a27 	vfma.f32	s8, s12, s15
 800131e:	eea1 ba02 	vfma.f32	s22, s2, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001322:	ee22 1a06 	vmul.f32	s2, s4, s12
 8001326:	ee26 6a21 	vmul.f32	s12, s12, s3
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 800132a:	eea7 5a24 	vfma.f32	s10, s14, s9
 800132e:	eea7 1a20 	vfma.f32	s2, s14, s1
 8001332:	eea0 6aa7 	vfma.f32	s12, s1, s15
 8001336:	eee4 6aa7 	vfma.f32	s13, s9, s15
 800133a:	eee0 5a27 	vfma.f32	s11, s0, s15
 800133e:	eea7 ba00 	vfma.f32	s22, s14, s0
 8001342:	eea7 8a03 	vfma.f32	s16, s14, s6
 8001346:	eea2 1a83 	vfma.f32	s2, s5, s6
 800134a:	eea3 6a28 	vfma.f32	s12, s6, s17
 800134e:	eee3 3a27 	vfma.f32	s7, s6, s15
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001352:	ee28 3a85 	vmul.f32	s6, s17, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001356:	eef0 aa65 	vmov.f32	s21, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800135a:	ee62 5aa6 	vmul.f32	s11, s5, s13
 800135e:	eea1 3a8b 	vfma.f32	s6, s3, s22
 8001362:	ee22 5a85 	vmul.f32	s10, s5, s10
 8001366:	ee68 6aa6 	vmul.f32	s13, s17, s13
 800136a:	eee2 5a2a 	vfma.f32	s11, s4, s21
 800136e:	eea2 5a0b 	vfma.f32	s10, s4, s22
 8001372:	eee1 6aaa 	vfma.f32	s13, s3, s21
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001376:	edd3 aa02 	vldr	s21, [r3, #8]
 800137a:	ee33 3a2a 	vadd.f32	s6, s6, s21
 800137e:	edd3 aa01 	vldr	s21, [r3, #4]
 8001382:	ee75 5aaa 	vadd.f32	s11, s11, s21
 8001386:	edd3 aa00 	vldr	s21, [r3]
 800138a:	eea7 3a81 	vfma.f32	s6, s15, s2
 800138e:	ee35 5a2a 	vadd.f32	s10, s10, s21
 8001392:	eee7 5a06 	vfma.f32	s11, s14, s12
{
  EIGEN_DEVICE_FUNC
  static inline void run(const MatrixType& matrix, ResultType& result)
  {
    typedef typename ResultType::Scalar Scalar;
    const Scalar invdet = typename MatrixType::Scalar(1) / matrix.determinant();
 8001396:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 800139a:	eea7 5a01 	vfma.f32	s10, s14, s2
 800139e:	ed93 1a03 	vldr	s2, [r3, #12]
 80013a2:	ee76 6a81 	vadd.f32	s13, s13, s2
 80013a6:	eee7 6a86 	vfma.f32	s13, s15, s12
template<typename Derived> struct determinant_impl<Derived, 2>
{
  static inline EIGEN_DEVICE_FUNC
  typename traits<Derived>::Scalar run(const Derived& m)
  {
    return m.coeff(0,0) * m.coeff(1,1) - m.coeff(1,0) * m.coeff(0,1);
 80013aa:	ee25 6ac3 	vnmul.f32	s12, s11, s6
 80013ae:	eea5 6a26 	vfma.f32	s12, s10, s13
 80013b2:	ee8a 1a86 	vdiv.f32	s2, s21, s12
  result.coeffRef(1,1) =  temp * invdet;
 80013b6:	ee21 6a05 	vmul.f32	s12, s2, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80013ba:	ee24 5aa8 	vmul.f32	s10, s9, s17
 80013be:	ee62 4aa4 	vmul.f32	s9, s5, s9
 80013c2:	ee65 5ac1 	vnmul.f32	s11, s11, s2
 80013c6:	eea0 5a21 	vfma.f32	s10, s0, s3
 80013ca:	eee2 4a00 	vfma.f32	s9, s4, s0
 80013ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80013d2:	ee23 3a41 	vnmul.f32	s6, s6, s2
  result.coeffRef(0,0) =  matrix.coeff(1,1) * invdet;
 80013d6:	ee21 1a26 	vmul.f32	s2, s2, s13
 80013da:	ee63 6a86 	vmul.f32	s13, s7, s12
 80013de:	ee63 3aa5 	vmul.f32	s7, s7, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80013e2:	eea0 5aa7 	vfma.f32	s10, s1, s15
 80013e6:	eee7 4a20 	vfma.f32	s9, s14, s1
 80013ea:	edd7 0a02 	vldr	s1, [r7, #8]
 80013ee:	eee8 6a03 	vfma.f32	s13, s16, s6
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80013f2:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80013f6:	ee20 7a87 	vmul.f32	s14, s1, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80013fa:	eee8 3a01 	vfma.f32	s7, s16, s2
 80013fe:	eee0 7a28 	vfma.f32	s15, s0, s17
 8001402:	edd7 8a00 	vldr	s17, [r7]
 8001406:	eea0 7a22 	vfma.f32	s14, s0, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800140a:	ee64 2a06 	vmul.f32	s5, s8, s12
 800140e:	edc6 6a04 	vstr	s13, [r6, #16]
 8001412:	ee25 6a06 	vmul.f32	s12, s10, s12
 8001416:	ee24 4a25 	vmul.f32	s8, s8, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 800141a:	eee9 2a03 	vfma.f32	s5, s18, s6
 800141e:	edc6 3a01 	vstr	s7, [r6, #4]
 8001422:	eee8 7aa1 	vfma.f32	s15, s17, s3
 8001426:	eea4 6a83 	vfma.f32	s12, s9, s6
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800142a:	ee25 5a25 	vmul.f32	s10, s10, s11
 800142e:	eea8 7a82 	vfma.f32	s14, s17, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001432:	eea9 4a01 	vfma.f32	s8, s18, s2
 8001436:	eea4 5a81 	vfma.f32	s10, s9, s2
 800143a:	edc6 2a03 	vstr	s5, [r6, #12]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 800143e:	ee7a 7a67 	vsub.f32	s15, s20, s15
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8001442:	ed86 6a05 	vstr	s12, [r6, #20]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001446:	ee66 5aa7 	vmul.f32	s11, s13, s15
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 800144a:	ee39 7ac7 	vsub.f32	s14, s19, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 800144e:	ed86 4a00 	vstr	s8, [r6]
 8001452:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8001456:	ed86 5a02 	vstr	s10, [r6, #8]
 800145a:	ee66 7a27 	vmul.f32	s15, s12, s15
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 800145e:	eef0 6a65 	vmov.f32	s13, s11
 8001462:	eee4 2a07 	vfma.f32	s5, s8, s14
 8001466:	eee5 7a07 	vfma.f32	s15, s10, s14
 800146a:	eee3 6a87 	vfma.f32	s13, s7, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 800146e:	ee78 2aa2 	vadd.f32	s5, s17, s5
 8001472:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8001476:	ee30 0a26 	vadd.f32	s0, s0, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 800147a:	edc7 2a00 	vstr	s5, [r7]
 800147e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001482:	edc7 7a02 	vstr	s15, [r7, #8]
 8001486:	f009 ff2b 	bl	800b2e0 <malloc>
  if (original == 0) return 0;
 800148a:	2800      	cmp	r0, #0
 800148c:	d030      	beq.n	80014f0 <UserCodeUpdateLeftWheel+0x27c>
  void *aligned = reinterpret_cast<void*>((reinterpret_cast<std::size_t>(original) & ~(std::size_t(alignment-1))) + alignment);
 800148e:	f020 030f 	bic.w	r3, r0, #15
  *(reinterpret_cast<void**>(aligned) - 1) = original;
 8001492:	60d8      	str	r0, [r3, #12]
  void *aligned = reinterpret_cast<void*>((reinterpret_cast<std::size_t>(original) & ~(std::size_t(alignment-1))) + alignment);
 8001494:	3310      	adds	r3, #16
          m_data = internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size);
 8001496:	9302      	str	r3, [sp, #8]
      m_rows = rows;
 8001498:	2303      	movs	r3, #3
  {
#ifndef EIGEN_NO_DEBUG
    internal::check_for_aliasing(dst, src);
#endif

    call_dense_assignment_loop(dst, src, func);
 800149a:	aa01      	add	r2, sp, #4
 800149c:	a904      	add	r1, sp, #16
 800149e:	a802      	add	r0, sp, #8
 80014a0:	9303      	str	r3, [sp, #12]
class CwiseBinaryOp :
 80014a2:	9608      	str	r6, [sp, #32]
 80014a4:	9509      	str	r5, [sp, #36]	; 0x24
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80014a6:	940b      	str	r4, [sp, #44]	; 0x2c
  * on the behavior of CwiseNullaryOp.
  *
  * \sa class CwiseUnaryOp, class CwiseBinaryOp, DenseBase::NullaryExpr
  */
template<typename NullaryOp, typename PlainObjectType>
class CwiseNullaryOp : public internal::dense_xpr_base< CwiseNullaryOp<NullaryOp, PlainObjectType> >::type, internal::no_assignment_operator
 80014a8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80014ac:	f7ff fcfe 	bl	8000eac <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    EIGEN_DEVICE_FUNC const T *data() const { return m_data; }
 80014b0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80014b4:	2a03      	cmp	r2, #3
 80014b6:	d11d      	bne.n	80014f4 <UserCodeUpdateLeftWheel+0x280>
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	6819      	ldr	r1, [r3, #0]
 80014bc:	6062      	str	r2, [r4, #4]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	6021      	str	r1, [r4, #0]
 80014c2:	6899      	ldr	r1, [r3, #8]
 80014c4:	60e2      	str	r2, [r4, #12]
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	60a1      	str	r1, [r4, #8]
 80014ca:	6919      	ldr	r1, [r3, #16]
 80014cc:	6162      	str	r2, [r4, #20]
 80014ce:	69da      	ldr	r2, [r3, #28]
 80014d0:	6121      	str	r1, [r4, #16]
 80014d2:	6999      	ldr	r1, [r3, #24]
 80014d4:	61e2      	str	r2, [r4, #28]
 80014d6:	6a1a      	ldr	r2, [r3, #32]
    free(*(reinterpret_cast<void**>(ptr) - 1));
 80014d8:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80014dc:	61a1      	str	r1, [r4, #24]
 80014de:	6222      	str	r2, [r4, #32]
 80014e0:	f009 ff06 	bl	800b2f0 <free>
}
 80014e4:	ed97 0a01 	vldr	s0, [r7, #4]
 80014e8:	b00d      	add	sp, #52	; 0x34
 80014ea:	ecbd 8b08 	vpop	{d8-d11}
 80014ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (original == 0) return 0;
 80014f0:	4603      	mov	r3, r0
 80014f2:	e7d0      	b.n	8001496 <UserCodeUpdateLeftWheel+0x222>
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <UserCodeUpdateLeftWheel+0x2a8>)
 80014f6:	f240 1111 	movw	r1, #273	; 0x111
 80014fa:	4a09      	ldr	r2, [pc, #36]	; (8001520 <UserCodeUpdateLeftWheel+0x2ac>)
 80014fc:	4809      	ldr	r0, [pc, #36]	; (8001524 <UserCodeUpdateLeftWheel+0x2b0>)
 80014fe:	f009 fe95 	bl	800b22c <__assert_func>
 8001502:	bf00      	nop
 8001504:	24000200 	.word	0x24000200
 8001508:	240001ac 	.word	0x240001ac
 800150c:	24000274 	.word	0x24000274
 8001510:	240001d0 	.word	0x240001d0
 8001514:	24000250 	.word	0x24000250
 8001518:	2400028c 	.word	0x2400028c
 800151c:	0800c86c 	.word	0x0800c86c
 8001520:	0800cf20 	.word	0x0800cf20
 8001524:	0800ca88 	.word	0x0800ca88

08001528 <UserCodeUpdateRightWheel>:
{
 8001528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152a:	4ca3      	ldr	r4, [pc, #652]	; (80017b8 <UserCodeUpdateRightWheel+0x290>)
 800152c:	4da3      	ldr	r5, [pc, #652]	; (80017bc <UserCodeUpdateRightWheel+0x294>)
 800152e:	4fa4      	ldr	r7, [pc, #656]	; (80017c0 <UserCodeUpdateRightWheel+0x298>)
 8001530:	4ea4      	ldr	r6, [pc, #656]	; (80017c4 <UserCodeUpdateRightWheel+0x29c>)
 8001532:	ed2d 8b08 	vpush	{d8-d11}
 8001536:	b08d      	sub	sp, #52	; 0x34
 8001538:	eef0 9a40 	vmov.f32	s19, s0
 800153c:	eeb0 aa60 	vmov.f32	s20, s1
	Predict_RightWheel();
 8001540:	f7ff fb10 	bl	8000b64 <_Z18Predict_RightWheelv>
 8001544:	edd5 2a02 	vldr	s5, [r5, #8]
  void *original = malloc(size+alignment);
 8001548:	2034      	movs	r0, #52	; 0x34
 800154a:	edd5 8a03 	vldr	s17, [r5, #12]
 800154e:	edd4 3a04 	vldr	s7, [r4, #16]
 8001552:	ed95 2a00 	vldr	s4, [r5]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001556:	ee22 8aa3 	vmul.f32	s16, s5, s7
 800155a:	edd5 1a01 	vldr	s3, [r5, #4]
 800155e:	ee63 3aa8 	vmul.f32	s7, s7, s17
 8001562:	ed94 4a03 	vldr	s8, [r4, #12]
 8001566:	ed94 1a00 	vldr	s2, [r4]
 800156a:	eeb0 5a48 	vmov.f32	s10, s16
 800156e:	edd4 7a01 	vldr	s15, [r4, #4]
 8001572:	eef0 6a63 	vmov.f32	s13, s7
 8001576:	ed95 7a04 	vldr	s14, [r5, #16]
 800157a:	ee24 9a22 	vmul.f32	s18, s8, s5
 800157e:	ed94 6a06 	vldr	s12, [r4, #24]
 8001582:	eea2 5a04 	vfma.f32	s10, s4, s8
 8001586:	edd4 0a08 	vldr	s1, [r4, #32]
 800158a:	eee4 6a21 	vfma.f32	s13, s8, s3
 800158e:	edd4 4a05 	vldr	s9, [r4, #20]
 8001592:	ee24 4a28 	vmul.f32	s8, s8, s17
 8001596:	ed94 0a02 	vldr	s0, [r4, #8]
 800159a:	eea1 9a02 	vfma.f32	s18, s2, s4
 800159e:	ed94 3a07 	vldr	s6, [r4, #28]
 80015a2:	ee67 5aa8 	vmul.f32	s11, s15, s17
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80015a6:	4b88      	ldr	r3, [pc, #544]	; (80017c8 <UserCodeUpdateRightWheel+0x2a0>)
 80015a8:	eea1 4a21 	vfma.f32	s8, s2, s3
	Y_R(0,0) = position;	// assign value of encoder
 80015ac:	4a87      	ldr	r2, [pc, #540]	; (80017cc <UserCodeUpdateRightWheel+0x2a4>)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80015ae:	ee22 baa7 	vmul.f32	s22, s5, s15
 80015b2:	eea2 8a27 	vfma.f32	s16, s4, s15
 80015b6:	edc2 9a00 	vstr	s19, [r2]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80015ba:	eee7 3aa1 	vfma.f32	s7, s15, s3
    return m_data[col * colStride() + row * rowStride()];
 80015be:	edd5 7a05 	vldr	s15, [r5, #20]
 80015c2:	eee1 5a21 	vfma.f32	s11, s2, s3
	Y_R(1,0) = velocity;	// assign value of encoder
 80015c6:	ed82 aa01 	vstr	s20, [r2, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80015ca:	eea6 9a07 	vfma.f32	s18, s12, s14
 80015ce:	eea6 4a27 	vfma.f32	s8, s12, s15
 80015d2:	eea1 ba02 	vfma.f32	s22, s2, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80015d6:	ee22 1a06 	vmul.f32	s2, s4, s12
 80015da:	ee26 6a21 	vmul.f32	s12, s12, s3
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80015de:	eea7 5a24 	vfma.f32	s10, s14, s9
 80015e2:	eea7 1a20 	vfma.f32	s2, s14, s1
 80015e6:	eea0 6aa7 	vfma.f32	s12, s1, s15
 80015ea:	eee4 6aa7 	vfma.f32	s13, s9, s15
 80015ee:	eee0 5a27 	vfma.f32	s11, s0, s15
 80015f2:	eea7 ba00 	vfma.f32	s22, s14, s0
 80015f6:	eea7 8a03 	vfma.f32	s16, s14, s6
 80015fa:	eea2 1a83 	vfma.f32	s2, s5, s6
 80015fe:	eea3 6a28 	vfma.f32	s12, s6, s17
 8001602:	eee3 3a27 	vfma.f32	s7, s6, s15
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 8001606:	ee28 3a85 	vmul.f32	s6, s17, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 800160a:	eef0 aa65 	vmov.f32	s21, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800160e:	ee62 5aa6 	vmul.f32	s11, s5, s13
 8001612:	eea1 3a8b 	vfma.f32	s6, s3, s22
 8001616:	ee22 5a85 	vmul.f32	s10, s5, s10
 800161a:	ee68 6aa6 	vmul.f32	s13, s17, s13
 800161e:	eee2 5a2a 	vfma.f32	s11, s4, s21
 8001622:	eea2 5a0b 	vfma.f32	s10, s4, s22
 8001626:	eee1 6aaa 	vfma.f32	s13, s3, s21
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 800162a:	edd3 aa02 	vldr	s21, [r3, #8]
 800162e:	ee33 3a2a 	vadd.f32	s6, s6, s21
 8001632:	edd3 aa01 	vldr	s21, [r3, #4]
 8001636:	ee75 5aaa 	vadd.f32	s11, s11, s21
 800163a:	edd3 aa00 	vldr	s21, [r3]
 800163e:	eea7 3a81 	vfma.f32	s6, s15, s2
 8001642:	ee35 5a2a 	vadd.f32	s10, s10, s21
 8001646:	eee7 5a06 	vfma.f32	s11, s14, s12
    const Scalar invdet = typename MatrixType::Scalar(1) / matrix.determinant();
 800164a:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 800164e:	eea7 5a01 	vfma.f32	s10, s14, s2
 8001652:	ed93 1a03 	vldr	s2, [r3, #12]
 8001656:	ee76 6a81 	vadd.f32	s13, s13, s2
 800165a:	eee7 6a86 	vfma.f32	s13, s15, s12
 800165e:	ee25 6ac3 	vnmul.f32	s12, s11, s6
 8001662:	eea5 6a26 	vfma.f32	s12, s10, s13
 8001666:	ee8a 1a86 	vdiv.f32	s2, s21, s12
  result.coeffRef(1,1) =  temp * invdet;
 800166a:	ee21 6a05 	vmul.f32	s12, s2, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800166e:	ee24 5aa8 	vmul.f32	s10, s9, s17
 8001672:	ee62 4aa4 	vmul.f32	s9, s5, s9
 8001676:	ee65 5ac1 	vnmul.f32	s11, s11, s2
 800167a:	eea0 5a21 	vfma.f32	s10, s0, s3
 800167e:	eee2 4a00 	vfma.f32	s9, s4, s0
 8001682:	ed97 0a01 	vldr	s0, [r7, #4]
 8001686:	ee23 3a41 	vnmul.f32	s6, s6, s2
  result.coeffRef(0,0) =  matrix.coeff(1,1) * invdet;
 800168a:	ee21 1a26 	vmul.f32	s2, s2, s13
 800168e:	ee63 6a86 	vmul.f32	s13, s7, s12
 8001692:	ee63 3aa5 	vmul.f32	s7, s7, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001696:	eea0 5aa7 	vfma.f32	s10, s1, s15
 800169a:	eee7 4a20 	vfma.f32	s9, s14, s1
 800169e:	edd7 0a02 	vldr	s1, [r7, #8]
 80016a2:	eee8 6a03 	vfma.f32	s13, s16, s6
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80016a6:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80016aa:	ee20 7a87 	vmul.f32	s14, s1, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80016ae:	eee8 3a01 	vfma.f32	s7, s16, s2
 80016b2:	eee0 7a28 	vfma.f32	s15, s0, s17
 80016b6:	edd7 8a00 	vldr	s17, [r7]
 80016ba:	eea0 7a22 	vfma.f32	s14, s0, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80016be:	ee64 2a06 	vmul.f32	s5, s8, s12
 80016c2:	edc6 6a04 	vstr	s13, [r6, #16]
 80016c6:	ee25 6a06 	vmul.f32	s12, s10, s12
 80016ca:	ee24 4a25 	vmul.f32	s8, s8, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80016ce:	eee9 2a03 	vfma.f32	s5, s18, s6
 80016d2:	edc6 3a01 	vstr	s7, [r6, #4]
 80016d6:	eee8 7aa1 	vfma.f32	s15, s17, s3
 80016da:	eea4 6a83 	vfma.f32	s12, s9, s6
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80016de:	ee25 5a25 	vmul.f32	s10, s10, s11
 80016e2:	eea8 7a82 	vfma.f32	s14, s17, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80016e6:	eea9 4a01 	vfma.f32	s8, s18, s2
 80016ea:	eea4 5a81 	vfma.f32	s10, s9, s2
 80016ee:	edc6 2a03 	vstr	s5, [r6, #12]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 80016f2:	ee7a 7a67 	vsub.f32	s15, s20, s15
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 80016f6:	ed86 6a05 	vstr	s12, [r6, #20]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 80016fa:	ee66 5aa7 	vmul.f32	s11, s13, s15
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 80016fe:	ee39 7ac7 	vsub.f32	s14, s19, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8001702:	ed86 4a00 	vstr	s8, [r6]
 8001706:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800170a:	ed86 5a02 	vstr	s10, [r6, #8]
 800170e:	ee66 7a27 	vmul.f32	s15, s12, s15
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8001712:	eef0 6a65 	vmov.f32	s13, s11
 8001716:	eee4 2a07 	vfma.f32	s5, s8, s14
 800171a:	eee5 7a07 	vfma.f32	s15, s10, s14
 800171e:	eee3 6a87 	vfma.f32	s13, s7, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 8001722:	ee78 2aa2 	vadd.f32	s5, s17, s5
 8001726:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800172a:	ee30 0a26 	vadd.f32	s0, s0, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 800172e:	edc7 2a00 	vstr	s5, [r7]
 8001732:	ed87 0a01 	vstr	s0, [r7, #4]
 8001736:	edc7 7a02 	vstr	s15, [r7, #8]
 800173a:	f009 fdd1 	bl	800b2e0 <malloc>
  if (original == 0) return 0;
 800173e:	2800      	cmp	r0, #0
 8001740:	d030      	beq.n	80017a4 <UserCodeUpdateRightWheel+0x27c>
  void *aligned = reinterpret_cast<void*>((reinterpret_cast<std::size_t>(original) & ~(std::size_t(alignment-1))) + alignment);
 8001742:	f020 030f 	bic.w	r3, r0, #15
  *(reinterpret_cast<void**>(aligned) - 1) = original;
 8001746:	60d8      	str	r0, [r3, #12]
  void *aligned = reinterpret_cast<void*>((reinterpret_cast<std::size_t>(original) & ~(std::size_t(alignment-1))) + alignment);
 8001748:	3310      	adds	r3, #16
          m_data = internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size);
 800174a:	9302      	str	r3, [sp, #8]
      m_rows = rows;
 800174c:	2303      	movs	r3, #3
    call_dense_assignment_loop(dst, src, func);
 800174e:	aa01      	add	r2, sp, #4
 8001750:	a904      	add	r1, sp, #16
 8001752:	a802      	add	r0, sp, #8
 8001754:	9303      	str	r3, [sp, #12]
 8001756:	9608      	str	r6, [sp, #32]
 8001758:	9509      	str	r5, [sp, #36]	; 0x24
 800175a:	940b      	str	r4, [sp, #44]	; 0x2c
 800175c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001760:	f7ff fba4 	bl	8000eac <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLin1ELi3ELi0ELin1ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_14CwiseNullaryOpINS0_18scalar_identity_opIfEENS2_IfLin1ELin1ELi0ELin1ELin1EEEEEKNS4_INS2_IfLi3ELi2ELi0ELi3ELi2EEENS2_IfLi2ELi3ELi0ELi2ELi3EEELi0EEEEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    EIGEN_DEVICE_FUNC const T *data() const { return m_data; }
 8001764:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8001768:	2a03      	cmp	r2, #3
 800176a:	d11d      	bne.n	80017a8 <UserCodeUpdateRightWheel+0x280>
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	6819      	ldr	r1, [r3, #0]
 8001770:	6062      	str	r2, [r4, #4]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	6021      	str	r1, [r4, #0]
 8001776:	6899      	ldr	r1, [r3, #8]
 8001778:	60e2      	str	r2, [r4, #12]
 800177a:	695a      	ldr	r2, [r3, #20]
 800177c:	60a1      	str	r1, [r4, #8]
 800177e:	6919      	ldr	r1, [r3, #16]
 8001780:	6162      	str	r2, [r4, #20]
 8001782:	69da      	ldr	r2, [r3, #28]
 8001784:	6121      	str	r1, [r4, #16]
 8001786:	6999      	ldr	r1, [r3, #24]
 8001788:	61e2      	str	r2, [r4, #28]
 800178a:	6a1a      	ldr	r2, [r3, #32]
    free(*(reinterpret_cast<void**>(ptr) - 1));
 800178c:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8001790:	61a1      	str	r1, [r4, #24]
 8001792:	6222      	str	r2, [r4, #32]
 8001794:	f009 fdac 	bl	800b2f0 <free>
}
 8001798:	ed97 0a01 	vldr	s0, [r7, #4]
 800179c:	b00d      	add	sp, #52	; 0x34
 800179e:	ecbd 8b08 	vpop	{d8-d11}
 80017a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (original == 0) return 0;
 80017a4:	4603      	mov	r3, r0
 80017a6:	e7d0      	b.n	800174a <UserCodeUpdateRightWheel+0x222>
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <UserCodeUpdateRightWheel+0x2a8>)
 80017aa:	f240 1111 	movw	r1, #273	; 0x111
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <UserCodeUpdateRightWheel+0x2ac>)
 80017b0:	4809      	ldr	r0, [pc, #36]	; (80017d8 <UserCodeUpdateRightWheel+0x2b0>)
 80017b2:	f009 fd3b 	bl	800b22c <__assert_func>
 80017b6:	bf00      	nop
 80017b8:	24000224 	.word	0x24000224
 80017bc:	240001ac 	.word	0x240001ac
 80017c0:	24000280 	.word	0x24000280
 80017c4:	240001e8 	.word	0x240001e8
 80017c8:	24000260 	.word	0x24000260
 80017cc:	24000294 	.word	0x24000294
 80017d0:	0800c86c 	.word	0x0800c86c
 80017d4:	0800cf20 	.word	0x0800cf20
 80017d8:	0800ca88 	.word	0x0800ca88

080017dc <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	4619      	mov	r1, r3
 80017ea:	2007      	movs	r0, #7
 80017ec:	f000 fa84 	bl	8001cf8 <bno055_writeData>
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	4619      	mov	r1, r3
 8001806:	203d      	movs	r0, #61	; 0x3d
 8001808:	f000 fa76 	bl	8001cf8 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d103      	bne.n	800181a <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001812:	2013      	movs	r0, #19
 8001814:	f000 fa64 	bl	8001ce0 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001818:	e002      	b.n	8001820 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800181a:	2007      	movs	r0, #7
 800181c:	f000 fa60 	bl	8001ce0 <bno055_delay>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff ffe3 	bl	80017f8 <bno055_setOperationMode>
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}

08001836 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800183a:	200c      	movs	r0, #12
 800183c:	f7ff ffdc 	bl	80017f8 <bno055_setOperationMode>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001848:	2120      	movs	r1, #32
 800184a:	203f      	movs	r0, #63	; 0x3f
 800184c:	f000 fa54 	bl	8001cf8 <bno055_writeData>
  bno055_delay(700);
 8001850:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001854:	f000 fa44 	bl	8001ce0 <bno055_delay>
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
  bno055_reset();
 8001862:	f7ff ffef 	bl	8001844 <bno055_reset>

  uint8_t id = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	2201      	movs	r2, #1
 800186e:	4619      	mov	r1, r3
 8001870:	2000      	movs	r0, #0
 8001872:	f000 fb2d 	bl	8001ed0 <bno055_readData>
  if (id != BNO055_ID) {
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2ba0      	cmp	r3, #160	; 0xa0
 800187a:	d004      	beq.n	8001886 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	4619      	mov	r1, r3
 8001880:	4809      	ldr	r0, [pc, #36]	; (80018a8 <bno055_setup+0x4c>)
 8001882:	f00a f921 	bl	800bac8 <iprintf>
  }
  bno055_setPage(0);
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff ffa8 	bl	80017dc <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800188c:	2100      	movs	r1, #0
 800188e:	203f      	movs	r0, #63	; 0x3f
 8001890:	f000 fa32 	bl	8001cf8 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001894:	f7ff ffc8 	bl	8001828 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001898:	200a      	movs	r0, #10
 800189a:	f000 fa21 	bl	8001ce0 <bno055_delay>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	0800c3e8 	.word	0x0800c3e8

080018ac <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80018ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018b0:	b09e      	sub	sp, #120	; 0x78
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80018ba:	2000      	movs	r0, #0
 80018bc:	f7ff ff8e 	bl	80017dc <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80018c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018c4:	2b20      	cmp	r3, #32
 80018c6:	d108      	bne.n	80018da <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80018c8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80018cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018d0:	2208      	movs	r2, #8
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 fafc 	bl	8001ed0 <bno055_readData>
 80018d8:	e007      	b.n	80018ea <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80018da:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80018de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018e2:	2206      	movs	r2, #6
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 faf3 	bl	8001ed0 <bno055_readData>

  double scale = 1;
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	4b81      	ldr	r3, [pc, #516]	; (8001af4 <bno055_getVector+0x248>)
 80018f0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80018f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018f8:	2b0e      	cmp	r3, #14
 80018fa:	d108      	bne.n	800190e <bno055_getVector+0x62>
    scale = magScale;
 80018fc:	4b7e      	ldr	r3, [pc, #504]	; (8001af8 <bno055_getVector+0x24c>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001908:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800190c:	e03a      	b.n	8001984 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800190e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001912:	2b08      	cmp	r3, #8
 8001914:	d007      	beq.n	8001926 <bno055_getVector+0x7a>
 8001916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800191a:	2b28      	cmp	r3, #40	; 0x28
 800191c:	d003      	beq.n	8001926 <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 800191e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001922:	2b2e      	cmp	r3, #46	; 0x2e
 8001924:	d108      	bne.n	8001938 <bno055_getVector+0x8c>
    scale = accelScale;
 8001926:	4b75      	ldr	r3, [pc, #468]	; (8001afc <bno055_getVector+0x250>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001932:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8001936:	e025      	b.n	8001984 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800193c:	2b14      	cmp	r3, #20
 800193e:	d108      	bne.n	8001952 <bno055_getVector+0xa6>
    scale = angularRateScale;
 8001940:	4b6f      	ldr	r3, [pc, #444]	; (8001b00 <bno055_getVector+0x254>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800194c:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8001950:	e018      	b.n	8001984 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001956:	2b1a      	cmp	r3, #26
 8001958:	d108      	bne.n	800196c <bno055_getVector+0xc0>
    scale = eulerScale;
 800195a:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <bno055_getVector+0x258>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001966:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800196a:	e00b      	b.n	8001984 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 800196c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001970:	2b20      	cmp	r3, #32
 8001972:	d107      	bne.n	8001984 <bno055_getVector+0xd8>
    scale = quaScale;
 8001974:	4b64      	ldr	r3, [pc, #400]	; (8001b08 <bno055_getVector+0x25c>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001980:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001988:	2220      	movs	r2, #32
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f009 fcc5 	bl	800b31c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001996:	2b20      	cmp	r3, #32
 8001998:	d14c      	bne.n	8001a34 <bno055_getVector+0x188>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800199a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80019b4:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80019b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80019bc:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80019c0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	4313      	orrs	r3, r2
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80019da:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80019de:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80019e2:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80019e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	4313      	orrs	r3, r2
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001a00:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8001a04:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a08:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001a0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	b21a      	sxth	r2, r3
 8001a14:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	ee07 3a90 	vmov	s15, r3
 8001a22:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001a26:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8001a2a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a2e:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 8001a32:	e038      	b.n	8001aa6 <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001a34:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b21a      	sxth	r2, r3
 8001a3c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	4313      	orrs	r3, r2
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	ee07 3a90 	vmov	s15, r3
 8001a4a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001a4e:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8001a52:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a56:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001a5a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001a5e:	021b      	lsls	r3, r3, #8
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001a74:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8001a78:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a7c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001a80:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	b21a      	sxth	r2, r3
 8001a88:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001a9a:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8001a9e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001aa2:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  }

  return xyz;
 8001aa6:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001aaa:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ab6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001aba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001abe:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001ac2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ac6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001aca:	ec49 8b14 	vmov	d4, r8, r9
 8001ace:	ec45 4b15 	vmov	d5, r4, r5
 8001ad2:	ec41 0b16 	vmov	d6, r0, r1
 8001ad6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ada:	eeb0 0b44 	vmov.f64	d0, d4
 8001ade:	eeb0 1b45 	vmov.f64	d1, d5
 8001ae2:	eeb0 2b46 	vmov.f64	d2, d6
 8001ae6:	eeb0 3b47 	vmov.f64	d3, d7
 8001aea:	3778      	adds	r7, #120	; 0x78
 8001aec:	46bd      	mov	sp, r7
 8001aee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001af2:	bf00      	nop
 8001af4:	3ff00000 	.word	0x3ff00000
 8001af8:	24000012 	.word	0x24000012
 8001afc:	2400000c 	.word	0x2400000c
 8001b00:	2400000e 	.word	0x2400000e
 8001b04:	24000010 	.word	0x24000010
 8001b08:	24000014 	.word	0x24000014

08001b0c <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8001b0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b10:	b090      	sub	sp, #64	; 0x40
 8001b12:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8001b14:	2014      	movs	r0, #20
 8001b16:	f7ff fec9 	bl	80018ac <bno055_getVector>
 8001b1a:	eeb0 4b40 	vmov.f64	d4, d0
 8001b1e:	eeb0 5b41 	vmov.f64	d5, d1
 8001b22:	eeb0 6b42 	vmov.f64	d6, d2
 8001b26:	eeb0 7b43 	vmov.f64	d7, d3
 8001b2a:	ed87 4b08 	vstr	d4, [r7, #32]
 8001b2e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001b32:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001b36:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001b3a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b3e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001b42:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b4a:	ec49 8b14 	vmov	d4, r8, r9
 8001b4e:	ec45 4b15 	vmov	d5, r4, r5
 8001b52:	ec41 0b16 	vmov	d6, r0, r1
 8001b56:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b5a:	eeb0 0b44 	vmov.f64	d0, d4
 8001b5e:	eeb0 1b45 	vmov.f64	d1, d5
 8001b62:	eeb0 2b46 	vmov.f64	d2, d6
 8001b66:	eeb0 3b47 	vmov.f64	d3, d7
 8001b6a:	3740      	adds	r7, #64	; 0x40
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001b72 <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorEuler() {
  return bno055_getVector(BNO055_VECTOR_EULER);
}
bno055_vector_t bno055_getVectorLinearAccel() {
 8001b72:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b76:	b090      	sub	sp, #64	; 0x40
 8001b78:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 8001b7a:	2028      	movs	r0, #40	; 0x28
 8001b7c:	f7ff fe96 	bl	80018ac <bno055_getVector>
 8001b80:	eeb0 4b40 	vmov.f64	d4, d0
 8001b84:	eeb0 5b41 	vmov.f64	d5, d1
 8001b88:	eeb0 6b42 	vmov.f64	d6, d2
 8001b8c:	eeb0 7b43 	vmov.f64	d7, d3
 8001b90:	ed87 4b08 	vstr	d4, [r7, #32]
 8001b94:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001b98:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001b9c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001ba0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ba4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001ba8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001bb0:	ec49 8b14 	vmov	d4, r8, r9
 8001bb4:	ec45 4b15 	vmov	d5, r4, r5
 8001bb8:	ec41 0b16 	vmov	d6, r0, r1
 8001bbc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bc0:	eeb0 0b44 	vmov.f64	d0, d4
 8001bc4:	eeb0 1b45 	vmov.f64	d1, d5
 8001bc8:	eeb0 2b46 	vmov.f64	d2, d6
 8001bcc:	eeb0 3b47 	vmov.f64	d3, d7
 8001bd0:	3740      	adds	r7, #64	; 0x40
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001bd8 <bno055_getVectorQuaternion>:
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8001bd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bdc:	b090      	sub	sp, #64	; 0x40
 8001bde:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8001be0:	2020      	movs	r0, #32
 8001be2:	f7ff fe63 	bl	80018ac <bno055_getVector>
 8001be6:	eeb0 4b40 	vmov.f64	d4, d0
 8001bea:	eeb0 5b41 	vmov.f64	d5, d1
 8001bee:	eeb0 6b42 	vmov.f64	d6, d2
 8001bf2:	eeb0 7b43 	vmov.f64	d7, d3
 8001bf6:	ed87 4b08 	vstr	d4, [r7, #32]
 8001bfa:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001bfe:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001c02:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001c06:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c0a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001c0e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c16:	ec49 8b14 	vmov	d4, r8, r9
 8001c1a:	ec45 4b15 	vmov	d5, r4, r5
 8001c1e:	ec41 0b16 	vmov	d6, r0, r1
 8001c22:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c26:	eeb0 0b44 	vmov.f64	d0, d4
 8001c2a:	eeb0 1b45 	vmov.f64	d1, d5
 8001c2e:	eeb0 2b46 	vmov.f64	d2, d6
 8001c32:	eeb0 3b47 	vmov.f64	d3, d7
 8001c36:	3740      	adds	r7, #64	; 0x40
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001c3e <setup>:
float UserGetLWSpeedVariance();
float UserGetLinVelVariance();
float UserGetAngVelVariance();

void setup()
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0
	// Call c++ domain
	UserCodeSetup();
 8001c42:	f7fe fdef 	bl	8000824 <UserCodeSetup>
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <update_rightwheel>:
	// Call c++ domain
	UserCodeLoop();
}

float update_rightwheel(float position, float velocity)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c54:	edc7 0a00 	vstr	s1, [r7]
	// Call c++ domain
	return UserCodeUpdateRightWheel(position, velocity);
 8001c58:	edd7 0a00 	vldr	s1, [r7]
 8001c5c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c60:	f7ff fc62 	bl	8001528 <UserCodeUpdateRightWheel>
 8001c64:	eef0 7a40 	vmov.f32	s15, s0
}
 8001c68:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <update_leftwheel>:

float update_leftwheel(float position, float velocity)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c7c:	edc7 0a00 	vstr	s1, [r7]
	return UserCodeUpdateLeftWheel(position, velocity);
 8001c80:	edd7 0a00 	vldr	s1, [r7]
 8001c84:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c88:	f7ff faf4 	bl	8001274 <UserCodeUpdateLeftWheel>
 8001c8c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001c90:	eeb0 0a67 	vmov.f32	s0, s15
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <get_lin_vel_variance>:
{
	return UserGetLWSpeedVariance();
}

float get_lin_vel_variance()
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	af00      	add	r7, sp, #0
	return UserGetLinVelVariance();
 8001c9e:	f7ff f87f 	bl	8000da0 <UserGetLinVelVariance>
 8001ca2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8001caa:	bd80      	pop	{r7, pc}

08001cac <get_ang_vel_variance>:

float get_ang_vel_variance()
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	return UserGetAngVelVariance();
 8001cb0:	f7ff f8ba 	bl	8000e28 <UserGetAngVelVariance>
 8001cb4:	eef0 7a40 	vmov.f32	s15, s0
}
 8001cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001cc8:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <bno055_assignI2C+0x1c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6013      	str	r3, [r2, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	240002d0 	.word	0x240002d0

08001ce0 <bno055_delay>:

void bno055_delay(int time) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f002 fb54 	bl	8004398 <HAL_Delay>
#endif
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	4603      	mov	r3, r0
 8001d00:	460a      	mov	r2, r1
 8001d02:	71fb      	strb	r3, [r7, #7]
 8001d04:	4613      	mov	r3, r2
 8001d06:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	733b      	strb	r3, [r7, #12]
 8001d0c:	79bb      	ldrb	r3, [r7, #6]
 8001d0e:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR_LO << 1,
 8001d10:	4b5a      	ldr	r3, [pc, #360]	; (8001e7c <bno055_writeData+0x184>)
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	f107 020c 	add.w	r2, r7, #12
 8001d18:	230a      	movs	r3, #10
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	2150      	movs	r1, #80	; 0x50
 8001d20:	f004 fd46 	bl	80067b0 <HAL_I2C_Master_Transmit>
 8001d24:	4603      	mov	r3, r0
 8001d26:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80a0 	beq.w	8001e70 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d103      	bne.n	8001d3e <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001d36:	4852      	ldr	r0, [pc, #328]	; (8001e80 <bno055_writeData+0x188>)
 8001d38:	f009 ff4c 	bl	800bbd4 <puts>
 8001d3c:	e012      	b.n	8001d64 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d103      	bne.n	8001d4c <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001d44:	484f      	ldr	r0, [pc, #316]	; (8001e84 <bno055_writeData+0x18c>)
 8001d46:	f009 ff45 	bl	800bbd4 <puts>
 8001d4a:	e00b      	b.n	8001d64 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d103      	bne.n	8001d5a <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001d52:	484d      	ldr	r0, [pc, #308]	; (8001e88 <bno055_writeData+0x190>)
 8001d54:	f009 ff3e 	bl	800bbd4 <puts>
 8001d58:	e004      	b.n	8001d64 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001d5a:	7dfb      	ldrb	r3, [r7, #23]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	484b      	ldr	r0, [pc, #300]	; (8001e8c <bno055_writeData+0x194>)
 8001d60:	f009 feb2 	bl	800bac8 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001d64:	4b45      	ldr	r3, [pc, #276]	; (8001e7c <bno055_writeData+0x184>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 ff19 	bl	8006ba0 <HAL_I2C_GetError>
 8001d6e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d07e      	beq.n	8001e74 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d103      	bne.n	8001d84 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001d7c:	4844      	ldr	r0, [pc, #272]	; (8001e90 <bno055_writeData+0x198>)
 8001d7e:	f009 ff29 	bl	800bbd4 <puts>
 8001d82:	e021      	b.n	8001dc8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d103      	bne.n	8001d92 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001d8a:	4842      	ldr	r0, [pc, #264]	; (8001e94 <bno055_writeData+0x19c>)
 8001d8c:	f009 ff22 	bl	800bbd4 <puts>
 8001d90:	e01a      	b.n	8001dc8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d103      	bne.n	8001da0 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001d98:	483f      	ldr	r0, [pc, #252]	; (8001e98 <bno055_writeData+0x1a0>)
 8001d9a:	f009 ff1b 	bl	800bbd4 <puts>
 8001d9e:	e013      	b.n	8001dc8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d103      	bne.n	8001dae <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001da6:	483d      	ldr	r0, [pc, #244]	; (8001e9c <bno055_writeData+0x1a4>)
 8001da8:	f009 ff14 	bl	800bbd4 <puts>
 8001dac:	e00c      	b.n	8001dc8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d103      	bne.n	8001dbc <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001db4:	483a      	ldr	r0, [pc, #232]	; (8001ea0 <bno055_writeData+0x1a8>)
 8001db6:	f009 ff0d 	bl	800bbd4 <puts>
 8001dba:	e005      	b.n	8001dc8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d102      	bne.n	8001dc8 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001dc2:	4838      	ldr	r0, [pc, #224]	; (8001ea4 <bno055_writeData+0x1ac>)
 8001dc4:	f009 ff06 	bl	800bbd4 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001dc8:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <bno055_writeData+0x184>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f004 fed9 	bl	8006b84 <HAL_I2C_GetState>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d103      	bne.n	8001de4 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001ddc:	4832      	ldr	r0, [pc, #200]	; (8001ea8 <bno055_writeData+0x1b0>)
 8001dde:	f009 fef9 	bl	800bbd4 <puts>
 8001de2:	e048      	b.n	8001e76 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d103      	bne.n	8001df2 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001dea:	482f      	ldr	r0, [pc, #188]	; (8001ea8 <bno055_writeData+0x1b0>)
 8001dec:	f009 fef2 	bl	800bbd4 <puts>
 8001df0:	e041      	b.n	8001e76 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	2b24      	cmp	r3, #36	; 0x24
 8001df6:	d103      	bne.n	8001e00 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001df8:	482c      	ldr	r0, [pc, #176]	; (8001eac <bno055_writeData+0x1b4>)
 8001dfa:	f009 feeb 	bl	800bbd4 <puts>
 8001dfe:	e03a      	b.n	8001e76 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	2b21      	cmp	r3, #33	; 0x21
 8001e04:	d103      	bne.n	8001e0e <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001e06:	482a      	ldr	r0, [pc, #168]	; (8001eb0 <bno055_writeData+0x1b8>)
 8001e08:	f009 fee4 	bl	800bbd4 <puts>
 8001e0c:	e033      	b.n	8001e76 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	2b22      	cmp	r3, #34	; 0x22
 8001e12:	d103      	bne.n	8001e1c <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001e14:	4827      	ldr	r0, [pc, #156]	; (8001eb4 <bno055_writeData+0x1bc>)
 8001e16:	f009 fedd 	bl	800bbd4 <puts>
 8001e1a:	e02c      	b.n	8001e76 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b28      	cmp	r3, #40	; 0x28
 8001e20:	d103      	bne.n	8001e2a <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001e22:	4825      	ldr	r0, [pc, #148]	; (8001eb8 <bno055_writeData+0x1c0>)
 8001e24:	f009 fed6 	bl	800bbd4 <puts>
 8001e28:	e025      	b.n	8001e76 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	2b29      	cmp	r3, #41	; 0x29
 8001e2e:	d103      	bne.n	8001e38 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001e30:	4822      	ldr	r0, [pc, #136]	; (8001ebc <bno055_writeData+0x1c4>)
 8001e32:	f009 fecf 	bl	800bbd4 <puts>
 8001e36:	e01e      	b.n	8001e76 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8001e3c:	d103      	bne.n	8001e46 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001e3e:	4820      	ldr	r0, [pc, #128]	; (8001ec0 <bno055_writeData+0x1c8>)
 8001e40:	f009 fec8 	bl	800bbd4 <puts>
 8001e44:	e017      	b.n	8001e76 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	2b60      	cmp	r3, #96	; 0x60
 8001e4a:	d103      	bne.n	8001e54 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001e4c:	481d      	ldr	r0, [pc, #116]	; (8001ec4 <bno055_writeData+0x1cc>)
 8001e4e:	f009 fec1 	bl	800bbd4 <puts>
 8001e52:	e010      	b.n	8001e76 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	2ba0      	cmp	r3, #160	; 0xa0
 8001e58:	d103      	bne.n	8001e62 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001e5a:	481b      	ldr	r0, [pc, #108]	; (8001ec8 <bno055_writeData+0x1d0>)
 8001e5c:	f009 feba 	bl	800bbd4 <puts>
 8001e60:	e009      	b.n	8001e76 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	2be0      	cmp	r3, #224	; 0xe0
 8001e66:	d106      	bne.n	8001e76 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001e68:	4818      	ldr	r0, [pc, #96]	; (8001ecc <bno055_writeData+0x1d4>)
 8001e6a:	f009 feb3 	bl	800bbd4 <puts>
 8001e6e:	e002      	b.n	8001e76 <bno055_writeData+0x17e>
    return;
 8001e70:	bf00      	nop
 8001e72:	e000      	b.n	8001e76 <bno055_writeData+0x17e>
    return;
 8001e74:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	240002d0 	.word	0x240002d0
 8001e80:	0800c424 	.word	0x0800c424
 8001e84:	0800c448 	.word	0x0800c448
 8001e88:	0800c470 	.word	0x0800c470
 8001e8c:	0800c494 	.word	0x0800c494
 8001e90:	0800c4ac 	.word	0x0800c4ac
 8001e94:	0800c4c0 	.word	0x0800c4c0
 8001e98:	0800c4d4 	.word	0x0800c4d4
 8001e9c:	0800c4e8 	.word	0x0800c4e8
 8001ea0:	0800c4fc 	.word	0x0800c4fc
 8001ea4:	0800c510 	.word	0x0800c510
 8001ea8:	0800c528 	.word	0x0800c528
 8001eac:	0800c540 	.word	0x0800c540
 8001eb0:	0800c554 	.word	0x0800c554
 8001eb4:	0800c56c 	.word	0x0800c56c
 8001eb8:	0800c584 	.word	0x0800c584
 8001ebc:	0800c59c 	.word	0x0800c59c
 8001ec0:	0800c5bc 	.word	0x0800c5bc
 8001ec4:	0800c5dc 	.word	0x0800c5dc
 8001ec8:	0800c5f4 	.word	0x0800c5f4
 8001ecc:	0800c60c 	.word	0x0800c60c

08001ed0 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
 8001edc:	4613      	mov	r3, r2
 8001ede:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR_LO << 1, &reg, 1,
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <bno055_readData+0x40>)
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	1dfa      	adds	r2, r7, #7
 8001ee6:	230a      	movs	r3, #10
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2301      	movs	r3, #1
 8001eec:	2150      	movs	r1, #80	; 0x50
 8001eee:	f004 fc5f 	bl	80067b0 <HAL_I2C_Master_Transmit>
                          10);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR_LO << 1, data, len,
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <bno055_readData+0x40>)
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	220a      	movs	r2, #10
 8001efc:	9200      	str	r2, [sp, #0]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	2150      	movs	r1, #80	; 0x50
 8001f02:	f004 fd49 	bl	8006998 <HAL_I2C_Master_Receive>
                         10);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	240002d0 	.word	0x240002d0
 8001f14:	00000000 	.word	0x00000000

08001f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f1c:	b095      	sub	sp, #84	; 0x54
 8001f1e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint64_t dubugStamp;
	setup();
 8001f20:	f7ff fe8d 	bl	8001c3e <setup>
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001f24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001f2a:	bf00      	nop
 8001f2c:	4b7a      	ldr	r3, [pc, #488]	; (8002118 <main+0x200>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d004      	beq.n	8001f42 <main+0x2a>
 8001f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f3a:	1e5a      	subs	r2, r3, #1
 8001f3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	dcf4      	bgt.n	8001f2c <main+0x14>
  if ( timeout < 0 )
 8001f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	da01      	bge.n	8001f4c <main+0x34>
  {
  Error_Handler();
 8001f48:	f001 fd82 	bl	8003a50 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f4c:	f002 f992 	bl	8004274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f50:	f000 fb4e 	bl	80025f0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001f54:	4b70      	ldr	r3, [pc, #448]	; (8002118 <main+0x200>)
 8001f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5a:	4a6f      	ldr	r2, [pc, #444]	; (8002118 <main+0x200>)
 8001f5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f64:	4b6c      	ldr	r3, [pc, #432]	; (8002118 <main+0x200>)
 8001f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f004 fb5e 	bl	8006634 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001f78:	2100      	movs	r1, #0
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f004 fb74 	bl	8006668 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f84:	63fb      	str	r3, [r7, #60]	; 0x3c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001f86:	bf00      	nop
 8001f88:	4b63      	ldr	r3, [pc, #396]	; (8002118 <main+0x200>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d104      	bne.n	8001f9e <main+0x86>
 8001f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f96:	1e5a      	subs	r2, r3, #1
 8001f98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	dcf4      	bgt.n	8001f88 <main+0x70>
if ( timeout < 0 )
 8001f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	da01      	bge.n	8001fa8 <main+0x90>
{
Error_Handler();
 8001fa4:	f001 fd54 	bl	8003a50 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fa8:	f000 fdda 	bl	8002b60 <MX_GPIO_Init>
  MX_ETH_Init();
 8001fac:	f000 fba6 	bl	80026fc <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001fb0:	f000 fd8a 	bl	8002ac8 <MX_USB_OTG_FS_PCD_Init>
  MX_FDCAN1_Init();
 8001fb4:	f000 fbee 	bl	8002794 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001fb8:	f000 fc72 	bl	80028a0 <MX_FDCAN2_Init>
  MX_DMA_Init();
 8001fbc:	f000 fdb6 	bl	8002b2c <MX_DMA_Init>
  MX_TIM2_Init();
 8001fc0:	f000 fd34 	bl	8002a2c <MX_TIM2_Init>
  MX_I2C1_Init();
 8001fc4:	f000 fcf2 	bl	80029ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	//Timer2 for micros
    HAL_TIM_Base_Start_IT(&htim2);
 8001fc8:	4854      	ldr	r0, [pc, #336]	; (800211c <main+0x204>)
 8001fca:	f007 fb47 	bl	800965c <HAL_TIM_Base_Start_IT>

    // Configure global filter to reject all non-matching frames
    HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8001fce:	2301      	movs	r3, #1
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	4851      	ldr	r0, [pc, #324]	; (8002120 <main+0x208>)
 8001fda:	f003 f9a9 	bl	8005330 <HAL_FDCAN_ConfigGlobalFilter>
    HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8001fde:	2301      	movs	r3, #1
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	484e      	ldr	r0, [pc, #312]	; (8002124 <main+0x20c>)
 8001fea:	f003 f9a1 	bl	8005330 <HAL_FDCAN_ConfigGlobalFilter>

    // Start FDCAN1
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001fee:	484c      	ldr	r0, [pc, #304]	; (8002120 <main+0x208>)
 8001ff0:	f003 f9cb 	bl	800538a <HAL_FDCAN_Start>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <main+0xe6>
    {
  	  Error_Handler();
 8001ffa:	f001 fd29 	bl	8003a50 <Error_Handler>
    }
    // Start FDCAN2
    if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 8001ffe:	4849      	ldr	r0, [pc, #292]	; (8002124 <main+0x20c>)
 8002000:	f003 f9c3 	bl	800538a <HAL_FDCAN_Start>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <main+0xf6>
    {
  	  Error_Handler();
 800200a:	f001 fd21 	bl	8003a50 <Error_Handler>
    }
    // Activate the notification for new data in FIFO0 for FDCAN1
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800200e:	2200      	movs	r2, #0
 8002010:	2101      	movs	r1, #1
 8002012:	4843      	ldr	r0, [pc, #268]	; (8002120 <main+0x208>)
 8002014:	f003 fbae 	bl	8005774 <HAL_FDCAN_ActivateNotification>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <main+0x10a>
    {
  	  Error_Handler();
 800201e:	f001 fd17 	bl	8003a50 <Error_Handler>
    }
    // Activate the notification for new data in FIFO1 for FDCAN2
    if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 8002022:	2200      	movs	r2, #0
 8002024:	2110      	movs	r1, #16
 8002026:	483f      	ldr	r0, [pc, #252]	; (8002124 <main+0x20c>)
 8002028:	f003 fba4 	bl	8005774 <HAL_FDCAN_ActivateNotification>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <main+0x11e>
    {
  	  Error_Handler();
 8002032:	f001 fd0d 	bl	8003a50 <Error_Handler>
    }

    // Configure TX Header for FDCAN1 (left motor)
    TxHeader1.Identifier = 0x11;
 8002036:	4b3c      	ldr	r3, [pc, #240]	; (8002128 <main+0x210>)
 8002038:	2211      	movs	r2, #17
 800203a:	601a      	str	r2, [r3, #0]
    TxHeader1.IdType = FDCAN_STANDARD_ID;
 800203c:	4b3a      	ldr	r3, [pc, #232]	; (8002128 <main+0x210>)
 800203e:	2200      	movs	r2, #0
 8002040:	605a      	str	r2, [r3, #4]
    TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 8002042:	4b39      	ldr	r3, [pc, #228]	; (8002128 <main+0x210>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
    TxHeader1.DataLength = FDCAN_DLC_BYTES_8;
 8002048:	4b37      	ldr	r3, [pc, #220]	; (8002128 <main+0x210>)
 800204a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800204e:	60da      	str	r2, [r3, #12]
    TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002050:	4b35      	ldr	r3, [pc, #212]	; (8002128 <main+0x210>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
    TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 8002056:	4b34      	ldr	r3, [pc, #208]	; (8002128 <main+0x210>)
 8002058:	2200      	movs	r2, #0
 800205a:	615a      	str	r2, [r3, #20]
    TxHeader1.FDFormat = FDCAN_CLASSIC_CAN;
 800205c:	4b32      	ldr	r3, [pc, #200]	; (8002128 <main+0x210>)
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
    TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002062:	4b31      	ldr	r3, [pc, #196]	; (8002128 <main+0x210>)
 8002064:	2200      	movs	r2, #0
 8002066:	61da      	str	r2, [r3, #28]
    TxHeader1.MessageMarker = 0;
 8002068:	4b2f      	ldr	r3, [pc, #188]	; (8002128 <main+0x210>)
 800206a:	2200      	movs	r2, #0
 800206c:	621a      	str	r2, [r3, #32]

    // Configure TX Header for FDCAN2 (right motor)
    TxHeader2.Identifier = 0x22;
 800206e:	4b2f      	ldr	r3, [pc, #188]	; (800212c <main+0x214>)
 8002070:	2222      	movs	r2, #34	; 0x22
 8002072:	601a      	str	r2, [r3, #0]
    TxHeader2.IdType = FDCAN_STANDARD_ID;
 8002074:	4b2d      	ldr	r3, [pc, #180]	; (800212c <main+0x214>)
 8002076:	2200      	movs	r2, #0
 8002078:	605a      	str	r2, [r3, #4]
    TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 800207a:	4b2c      	ldr	r3, [pc, #176]	; (800212c <main+0x214>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
    TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 8002080:	4b2a      	ldr	r3, [pc, #168]	; (800212c <main+0x214>)
 8002082:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002086:	60da      	str	r2, [r3, #12]
    TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002088:	4b28      	ldr	r3, [pc, #160]	; (800212c <main+0x214>)
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
    TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 800208e:	4b27      	ldr	r3, [pc, #156]	; (800212c <main+0x214>)
 8002090:	2200      	movs	r2, #0
 8002092:	615a      	str	r2, [r3, #20]
    TxHeader2.FDFormat = FDCAN_CLASSIC_CAN;
 8002094:	4b25      	ldr	r3, [pc, #148]	; (800212c <main+0x214>)
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
    TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800209a:	4b24      	ldr	r3, [pc, #144]	; (800212c <main+0x214>)
 800209c:	2200      	movs	r2, #0
 800209e:	61da      	str	r2, [r3, #28]
    TxHeader2.MessageMarker = 0;
 80020a0:	4b22      	ldr	r3, [pc, #136]	; (800212c <main+0x214>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	621a      	str	r2, [r3, #32]

    bno055_assignI2C(&hi2c1);
 80020a6:	4822      	ldr	r0, [pc, #136]	; (8002130 <main+0x218>)
 80020a8:	f7ff fe0a 	bl	8001cc0 <bno055_assignI2C>
    bno055_setup();
 80020ac:	f7ff fbd6 	bl	800185c <bno055_setup>
    bno055_setOperationModeNDOF();
 80020b0:	f7ff fbc1 	bl	8001836 <bno055_setOperationModeNDOF>

    BothMotor_Set_SpeedMode(10, 10, 1, 1);
 80020b4:	2101      	movs	r1, #1
 80020b6:	2001      	movs	r0, #1
 80020b8:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80020bc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80020c0:	f001 fa02 	bl	80034c8 <BothMotor_Set_SpeedMode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // 100Hz Control loop
	  if (micros() - timeStamp > 10000) {	// timestep = 10ms
 80020c4:	f001 fc90 	bl	80039e8 <micros>
 80020c8:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <main+0x21c>)
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	1a84      	subs	r4, r0, r2
 80020d0:	eb61 0503 	sbc.w	r5, r1, r3
 80020d4:	f242 7311 	movw	r3, #10001	; 0x2711
 80020d8:	429c      	cmp	r4, r3
 80020da:	f175 0300 	sbcs.w	r3, r5, #0
 80020de:	f0c0 8252 	bcc.w	8002586 <main+0x66e>
		  timeStamp = micros();
 80020e2:	f001 fc81 	bl	80039e8 <micros>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4912      	ldr	r1, [pc, #72]	; (8002134 <main+0x21c>)
 80020ec:	e9c1 2300 	strd	r2, r3, [r1]
		  runstarttime = micros();
 80020f0:	f001 fc7a 	bl	80039e8 <micros>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	490f      	ldr	r1, [pc, #60]	; (8002138 <main+0x220>)
 80020fa:	e9c1 2300 	strd	r2, r3, [r1]
		  isMain++;
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <main+0x224>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	4a0d      	ldr	r2, [pc, #52]	; (800213c <main+0x224>)
 8002106:	6013      	str	r3, [r2, #0]
		  if (run == 0){
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <main+0x228>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d119      	bne.n	8002144 <main+0x22c>
//			  BothMotor_Release();
//			  BothMotor_Enable();	//used only after release brake
			  BothMotor_EmergencyBrake();
 8002110:	f001 fb2e 	bl	8003770 <BothMotor_EmergencyBrake>
 8002114:	e150      	b.n	80023b8 <main+0x4a0>
 8002116:	bf00      	nop
 8002118:	58024400 	.word	0x58024400
 800211c:	24000548 	.word	0x24000548
 8002120:	240003bc 	.word	0x240003bc
 8002124:	2400045c 	.word	0x2400045c
 8002128:	24000ac8 	.word	0x24000ac8
 800212c:	24000b1c 	.word	0x24000b1c
 8002130:	240004fc 	.word	0x240004fc
 8002134:	24000aa8 	.word	0x24000aa8
 8002138:	24000ab8 	.word	0x24000ab8
 800213c:	24000be8 	.word	0x24000be8
 8002140:	24000028 	.word	0x24000028
		  }
		  else if (run == 1) {
 8002144:	4bc2      	ldr	r3, [pc, #776]	; (8002450 <main+0x538>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	f040 8135 	bne.w	80023b8 <main+0x4a0>
//			  Motor Read Position & Speed
			  BothMotor_Get_Position();
 800214e:	f001 fba5 	bl	800389c <BothMotor_Get_Position>
			  BothMotor_Get_Speed();
 8002152:	f001 fb43 	bl	80037dc <BothMotor_Get_Speed>
			  runtime = micros() - runstarttime;
 8002156:	f001 fc47 	bl	80039e8 <micros>
 800215a:	4bbe      	ldr	r3, [pc, #760]	; (8002454 <main+0x53c>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	1a86      	subs	r6, r0, r2
 8002162:	613e      	str	r6, [r7, #16]
 8002164:	eb61 0303 	sbc.w	r3, r1, r3
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	4bbb      	ldr	r3, [pc, #748]	; (8002458 <main+0x540>)
 800216c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002170:	e9c3 1200 	strd	r1, r2, [r3]
			  Pulse2Position();
 8002174:	f000 fd78 	bl	8002c68 <Pulse2Position>
			  estimated_rightvel = update_rightwheel(Right_DegRel, Right_DegSec)*(M_PI/180)*0.085;	// DegSec to m/s
 8002178:	4bb8      	ldr	r3, [pc, #736]	; (800245c <main+0x544>)
 800217a:	edd3 7a00 	vldr	s15, [r3]
 800217e:	4bb8      	ldr	r3, [pc, #736]	; (8002460 <main+0x548>)
 8002180:	ed93 7a00 	vldr	s14, [r3]
 8002184:	eef0 0a47 	vmov.f32	s1, s14
 8002188:	eeb0 0a67 	vmov.f32	s0, s15
 800218c:	f7ff fd5d 	bl	8001c4a <update_rightwheel>
 8002190:	eef0 7a40 	vmov.f32	s15, s0
 8002194:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002198:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8002438 <main+0x520>
 800219c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80021a0:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8002440 <main+0x528>
 80021a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80021a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021ac:	4bad      	ldr	r3, [pc, #692]	; (8002464 <main+0x54c>)
 80021ae:	edc3 7a00 	vstr	s15, [r3]
			  estimated_leftvel = update_leftwheel(Left_DegRel, Left_DegSec)*(M_PI/180)*0.085;		// DegSec to m/s
 80021b2:	4bad      	ldr	r3, [pc, #692]	; (8002468 <main+0x550>)
 80021b4:	edd3 7a00 	vldr	s15, [r3]
 80021b8:	4bac      	ldr	r3, [pc, #688]	; (800246c <main+0x554>)
 80021ba:	ed93 7a00 	vldr	s14, [r3]
 80021be:	eef0 0a47 	vmov.f32	s1, s14
 80021c2:	eeb0 0a67 	vmov.f32	s0, s15
 80021c6:	f7ff fd54 	bl	8001c72 <update_leftwheel>
 80021ca:	eef0 7a40 	vmov.f32	s15, s0
 80021ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021d2:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8002438 <main+0x520>
 80021d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80021da:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8002440 <main+0x528>
 80021de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80021e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021e6:	4ba2      	ldr	r3, [pc, #648]	; (8002470 <main+0x558>)
 80021e8:	edc3 7a00 	vstr	s15, [r3]
			  ForwardKinematic(estimated_rightvel, estimated_leftvel, 0.39377);
 80021ec:	4b9d      	ldr	r3, [pc, #628]	; (8002464 <main+0x54c>)
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	4b9f      	ldr	r3, [pc, #636]	; (8002470 <main+0x558>)
 80021f4:	ed93 7a00 	vldr	s14, [r3]
 80021f8:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8002474 <main+0x55c>
 80021fc:	eef0 0a47 	vmov.f32	s1, s14
 8002200:	eeb0 0a67 	vmov.f32	s0, s15
 8002204:	f000 fd7c 	bl	8002d00 <ForwardKinematic>
			  /*------------------------------*/
			  timestep = (micros() - starttime) * 0.000001;
 8002208:	f001 fbee 	bl	80039e8 <micros>
 800220c:	4b9a      	ldr	r3, [pc, #616]	; (8002478 <main+0x560>)
 800220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002212:	1a86      	subs	r6, r0, r2
 8002214:	60be      	str	r6, [r7, #8]
 8002216:	eb61 0303 	sbc.w	r3, r1, r3
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002220:	f7fe fa34 	bl	800068c <__aeabi_ul2d>
 8002224:	ec41 0b16 	vmov	d6, r0, r1
 8002228:	ed9f 7b87 	vldr	d7, [pc, #540]	; 8002448 <main+0x530>
 800222c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002230:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002234:	4b91      	ldr	r3, [pc, #580]	; (800247c <main+0x564>)
 8002236:	edc3 7a00 	vstr	s15, [r3]
			  starttime = micros();
 800223a:	f001 fbd5 	bl	80039e8 <micros>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	498d      	ldr	r1, [pc, #564]	; (8002478 <main+0x560>)
 8002244:	e9c1 2300 	strd	r2, r3, [r1]
			  /*------------------------------*/
			  WheelOdometry(Robot_LinVel, Robot_AngVel, timestep);
 8002248:	4b8d      	ldr	r3, [pc, #564]	; (8002480 <main+0x568>)
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	4b8d      	ldr	r3, [pc, #564]	; (8002484 <main+0x56c>)
 8002250:	ed93 7a00 	vldr	s14, [r3]
 8002254:	4b89      	ldr	r3, [pc, #548]	; (800247c <main+0x564>)
 8002256:	edd3 6a00 	vldr	s13, [r3]
 800225a:	eeb0 1a66 	vmov.f32	s2, s13
 800225e:	eef0 0a47 	vmov.f32	s1, s14
 8002262:	eeb0 0a67 	vmov.f32	s0, s15
 8002266:	f000 fe61 	bl	8002f2c <WheelOdometry>
			  Robot_LinVel_Var = get_lin_vel_variance();
 800226a:	f7ff fd16 	bl	8001c9a <get_lin_vel_variance>
 800226e:	eef0 7a40 	vmov.f32	s15, s0
 8002272:	4b85      	ldr	r3, [pc, #532]	; (8002488 <main+0x570>)
 8002274:	edc3 7a00 	vstr	s15, [r3]
			  Robot_AngVel_Var = get_ang_vel_variance();
 8002278:	f7ff fd18 	bl	8001cac <get_ang_vel_variance>
 800227c:	eef0 7a40 	vmov.f32	s15, s0
 8002280:	4b82      	ldr	r3, [pc, #520]	; (800248c <main+0x574>)
 8002282:	edc3 7a00 	vstr	s15, [r3]
			  RPY2Quaternion(0.0, 0.0, Robot_Yaw);
 8002286:	4b82      	ldr	r3, [pc, #520]	; (8002490 <main+0x578>)
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	eeb0 1a67 	vmov.f32	s2, s15
 8002290:	eddf 0a80 	vldr	s1, [pc, #512]	; 8002494 <main+0x57c>
 8002294:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8002494 <main+0x57c>
 8002298:	f000 fec8 	bl	800302c <RPY2Quaternion>

			  cmd_vel_linear = shared_ptr->cmd_vel_linear;
 800229c:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80022a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a2:	4a7d      	ldr	r2, [pc, #500]	; (8002498 <main+0x580>)
 80022a4:	6013      	str	r3, [r2, #0]
			  cmd_vel_angular = shared_ptr->cmd_vel_angular;
 80022a6:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	4a7b      	ldr	r2, [pc, #492]	; (800249c <main+0x584>)
 80022ae:	6013      	str	r3, [r2, #0]
			  InverseKinematic(cmd_vel_linear, cmd_vel_angular, 0.39377, 0.085);
 80022b0:	4b79      	ldr	r3, [pc, #484]	; (8002498 <main+0x580>)
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	4b79      	ldr	r3, [pc, #484]	; (800249c <main+0x584>)
 80022b8:	ed93 7a00 	vldr	s14, [r3]
 80022bc:	eddf 1a78 	vldr	s3, [pc, #480]	; 80024a0 <main+0x588>
 80022c0:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8002474 <main+0x55c>
 80022c4:	eef0 0a47 	vmov.f32	s1, s14
 80022c8:	eeb0 0a67 	vmov.f32	s0, s15
 80022cc:	f000 fd48 	bl	8002d60 <InverseKinematic>

			  Motor_Set_TargetSpeed(RightMotor_CmdVel, LeftMotor_CmdVel);
 80022d0:	4b74      	ldr	r3, [pc, #464]	; (80024a4 <main+0x58c>)
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	4b74      	ldr	r3, [pc, #464]	; (80024a8 <main+0x590>)
 80022d8:	ed93 7a00 	vldr	s14, [r3]
 80022dc:	eef0 0a47 	vmov.f32	s1, s14
 80022e0:	eeb0 0a67 	vmov.f32	s0, s15
 80022e4:	f001 f964 	bl	80035b0 <Motor_Set_TargetSpeed>
//			  Motor_Set_TargetSpeed(10, 10);

//			  Motor_Set_TargetSpeed((0.08901179185 * 60) / (0.085 * 2 * M_PI), (0.08901179185* 60) / (0.085 * 2 * M_PI));

			  // BNO055 Read Raw IMU Data
			  bno055_vector_t v = bno055_getVectorQuaternion();
 80022e8:	f7ff fc76 	bl	8001bd8 <bno055_getVectorQuaternion>
 80022ec:	eeb0 4b40 	vmov.f64	d4, d0
 80022f0:	eeb0 5b41 	vmov.f64	d5, d1
 80022f4:	eeb0 6b42 	vmov.f64	d6, d2
 80022f8:	eeb0 7b43 	vmov.f64	d7, d3
 80022fc:	ed87 4b06 	vstr	d4, [r7, #24]
 8002300:	ed87 5b08 	vstr	d5, [r7, #32]
 8002304:	ed87 6b0a 	vstr	d6, [r7, #40]	; 0x28
 8002308:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
			  qw = v.w;
 800230c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002310:	4966      	ldr	r1, [pc, #408]	; (80024ac <main+0x594>)
 8002312:	e9c1 2300 	strd	r2, r3, [r1]
			  qx = v.x;
 8002316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800231a:	4965      	ldr	r1, [pc, #404]	; (80024b0 <main+0x598>)
 800231c:	e9c1 2300 	strd	r2, r3, [r1]
			  qy = v.y;
 8002320:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002324:	4963      	ldr	r1, [pc, #396]	; (80024b4 <main+0x59c>)
 8002326:	e9c1 2300 	strd	r2, r3, [r1]
			  qz = v.z;
 800232a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800232e:	4962      	ldr	r1, [pc, #392]	; (80024b8 <main+0x5a0>)
 8002330:	e9c1 2300 	strd	r2, r3, [r1]
			  v = bno055_getVectorLinearAccel();
 8002334:	f7ff fc1d 	bl	8001b72 <bno055_getVectorLinearAccel>
 8002338:	eeb0 4b40 	vmov.f64	d4, d0
 800233c:	eeb0 5b41 	vmov.f64	d5, d1
 8002340:	eeb0 6b42 	vmov.f64	d6, d2
 8002344:	eeb0 7b43 	vmov.f64	d7, d3
 8002348:	ed87 4b06 	vstr	d4, [r7, #24]
 800234c:	ed87 5b08 	vstr	d5, [r7, #32]
 8002350:	ed87 6b0a 	vstr	d6, [r7, #40]	; 0x28
 8002354:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
			  ax = v.x;
 8002358:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800235c:	4957      	ldr	r1, [pc, #348]	; (80024bc <main+0x5a4>)
 800235e:	e9c1 2300 	strd	r2, r3, [r1]
			  ay = v.y;
 8002362:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002366:	4956      	ldr	r1, [pc, #344]	; (80024c0 <main+0x5a8>)
 8002368:	e9c1 2300 	strd	r2, r3, [r1]
			  az = v.z;
 800236c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002370:	4954      	ldr	r1, [pc, #336]	; (80024c4 <main+0x5ac>)
 8002372:	e9c1 2300 	strd	r2, r3, [r1]
			  v = bno055_getVectorGyroscope();
 8002376:	f7ff fbc9 	bl	8001b0c <bno055_getVectorGyroscope>
 800237a:	eeb0 4b40 	vmov.f64	d4, d0
 800237e:	eeb0 5b41 	vmov.f64	d5, d1
 8002382:	eeb0 6b42 	vmov.f64	d6, d2
 8002386:	eeb0 7b43 	vmov.f64	d7, d3
 800238a:	ed87 4b06 	vstr	d4, [r7, #24]
 800238e:	ed87 5b08 	vstr	d5, [r7, #32]
 8002392:	ed87 6b0a 	vstr	d6, [r7, #40]	; 0x28
 8002396:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
			  gx = v.x;
 800239a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800239e:	494a      	ldr	r1, [pc, #296]	; (80024c8 <main+0x5b0>)
 80023a0:	e9c1 2300 	strd	r2, r3, [r1]
			  gy = v.y;
 80023a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023a8:	4948      	ldr	r1, [pc, #288]	; (80024cc <main+0x5b4>)
 80023aa:	e9c1 2300 	strd	r2, r3, [r1]
			  gz = v.z;
 80023ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023b2:	4947      	ldr	r1, [pc, #284]	; (80024d0 <main+0x5b8>)
 80023b4:	e9c1 2300 	strd	r2, r3, [r1]
		  }

		  shared_ptr->robot_x = Robot_X;
 80023b8:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 80023bc:	4b45      	ldr	r3, [pc, #276]	; (80024d4 <main+0x5bc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6013      	str	r3, [r2, #0]
		  shared_ptr->robot_y = Robot_Y;
 80023c2:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 80023c6:	4b44      	ldr	r3, [pc, #272]	; (80024d8 <main+0x5c0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6053      	str	r3, [r2, #4]
		  shared_ptr->robot_qx = Robot_qx;
 80023cc:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 80023d0:	4b42      	ldr	r3, [pc, #264]	; (80024dc <main+0x5c4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6093      	str	r3, [r2, #8]
		  shared_ptr->robot_qy = Robot_qy;
 80023d6:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <main+0x5c8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60d3      	str	r3, [r2, #12]
		  shared_ptr->robot_qz = Robot_qz;
 80023e0:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 80023e4:	4b3f      	ldr	r3, [pc, #252]	; (80024e4 <main+0x5cc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6113      	str	r3, [r2, #16]
		  shared_ptr->robot_qw = Robot_qw;
 80023ea:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 80023ee:	4b3e      	ldr	r3, [pc, #248]	; (80024e8 <main+0x5d0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6153      	str	r3, [r2, #20]
		  shared_ptr->robot_linvel = Robot_LinVel;
 80023f4:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 80023f8:	4b21      	ldr	r3, [pc, #132]	; (8002480 <main+0x568>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6193      	str	r3, [r2, #24]
		  shared_ptr->robot_angvel = Robot_AngVel;
 80023fe:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 8002402:	4b20      	ldr	r3, [pc, #128]	; (8002484 <main+0x56c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	61d3      	str	r3, [r2, #28]
		  shared_ptr->nav_pub_flag = 1;
 8002408:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 800240c:	2301      	movs	r3, #1
 800240e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50

		  shared_ptr->imu_qx = qx;
 8002412:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <main+0x598>)
 8002414:	ed93 7b00 	vldr	d7, [r3]
 8002418:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800241c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002420:	edc3 7a08 	vstr	s15, [r3, #32]
		  shared_ptr->imu_qy = qy;
 8002424:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <main+0x59c>)
 8002426:	ed93 7b00 	vldr	d7, [r3]
 800242a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800242e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002432:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8002436:	e059      	b.n	80024ec <main+0x5d4>
 8002438:	a2529d39 	.word	0xa2529d39
 800243c:	3f91df46 	.word	0x3f91df46
 8002440:	5c28f5c3 	.word	0x5c28f5c3
 8002444:	3fb5c28f 	.word	0x3fb5c28f
 8002448:	a0b5ed8d 	.word	0xa0b5ed8d
 800244c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002450:	24000028 	.word	0x24000028
 8002454:	24000ab8 	.word	0x24000ab8
 8002458:	24000ac0 	.word	0x24000ac0
 800245c:	24000b8c 	.word	0x24000b8c
 8002460:	24000b94 	.word	0x24000b94
 8002464:	24000b9c 	.word	0x24000b9c
 8002468:	24000b90 	.word	0x24000b90
 800246c:	24000b98 	.word	0x24000b98
 8002470:	24000ba0 	.word	0x24000ba0
 8002474:	3ec99c39 	.word	0x3ec99c39
 8002478:	24000ab0 	.word	0x24000ab0
 800247c:	24000bb8 	.word	0x24000bb8
 8002480:	24000ba4 	.word	0x24000ba4
 8002484:	24000ba8 	.word	0x24000ba8
 8002488:	24000bbc 	.word	0x24000bbc
 800248c:	24000bc0 	.word	0x24000bc0
 8002490:	24000bb4 	.word	0x24000bb4
 8002494:	00000000 	.word	0x00000000
 8002498:	24000bd4 	.word	0x24000bd4
 800249c:	24000bd8 	.word	0x24000bd8
 80024a0:	3dae147b 	.word	0x3dae147b
 80024a4:	24000bdc 	.word	0x24000bdc
 80024a8:	24000be0 	.word	0x24000be0
 80024ac:	24000bf0 	.word	0x24000bf0
 80024b0:	24000bf8 	.word	0x24000bf8
 80024b4:	24000c00 	.word	0x24000c00
 80024b8:	24000c08 	.word	0x24000c08
 80024bc:	24000c10 	.word	0x24000c10
 80024c0:	24000c18 	.word	0x24000c18
 80024c4:	24000c20 	.word	0x24000c20
 80024c8:	24000c28 	.word	0x24000c28
 80024cc:	24000c30 	.word	0x24000c30
 80024d0:	24000c38 	.word	0x24000c38
 80024d4:	24000bac 	.word	0x24000bac
 80024d8:	24000bb0 	.word	0x24000bb0
 80024dc:	24000bc4 	.word	0x24000bc4
 80024e0:	24000bc8 	.word	0x24000bc8
 80024e4:	24000bcc 	.word	0x24000bcc
 80024e8:	24000bd0 	.word	0x24000bd0
		  shared_ptr->imu_qz = qz;
 80024ec:	4b37      	ldr	r3, [pc, #220]	; (80025cc <main+0x6b4>)
 80024ee:	ed93 7b00 	vldr	d7, [r3]
 80024f2:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80024f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024fa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		  shared_ptr->imu_qw = qw;
 80024fe:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <main+0x6b8>)
 8002500:	ed93 7b00 	vldr	d7, [r3]
 8002504:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002508:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800250c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		  shared_ptr->imu_gx = gx;
 8002510:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <main+0x6bc>)
 8002512:	ed93 7b00 	vldr	d7, [r3]
 8002516:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800251a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800251e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		  shared_ptr->imu_gy = gy;
 8002522:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <main+0x6c0>)
 8002524:	ed93 7b00 	vldr	d7, [r3]
 8002528:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800252c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002530:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		  shared_ptr->imu_gz = gz;
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <main+0x6c4>)
 8002536:	ed93 7b00 	vldr	d7, [r3]
 800253a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800253e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002542:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		  shared_ptr->imu_ax = ax;
 8002546:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <main+0x6c8>)
 8002548:	ed93 7b00 	vldr	d7, [r3]
 800254c:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002550:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002554:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		  shared_ptr->imu_ay = ay;
 8002558:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <main+0x6cc>)
 800255a:	ed93 7b00 	vldr	d7, [r3]
 800255e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002562:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002566:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		  shared_ptr->imu_az = az;
 800256a:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <main+0x6d0>)
 800256c:	ed93 7b00 	vldr	d7, [r3]
 8002570:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002574:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002578:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		  shared_ptr->imu_pub_flag = 1;
 800257c:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 8002580:	2301      	movs	r3, #1
 8002582:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51

	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GetTick() - dubugStamp > 500)
 8002586:	f001 fefb 	bl	8004380 <HAL_GetTick>
 800258a:	4603      	mov	r3, r0
 800258c:	2200      	movs	r2, #0
 800258e:	469a      	mov	sl, r3
 8002590:	4693      	mov	fp, r2
 8002592:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002596:	ebba 0802 	subs.w	r8, sl, r2
 800259a:	eb6b 0903 	sbc.w	r9, fp, r3
 800259e:	f240 13f5 	movw	r3, #501	; 0x1f5
 80025a2:	4598      	cmp	r8, r3
 80025a4:	f179 0300 	sbcs.w	r3, r9, #0
 80025a8:	f4ff ad8c 	bcc.w	80020c4 <main+0x1ac>
	  {
		  dubugStamp = HAL_GetTick();
 80025ac:	f001 fee8 	bl	8004380 <HAL_GetTick>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2200      	movs	r2, #0
 80025b4:	603b      	str	r3, [r7, #0]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80025c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025c4:	4809      	ldr	r0, [pc, #36]	; (80025ec <main+0x6d4>)
 80025c6:	f004 f81a 	bl	80065fe <HAL_GPIO_TogglePin>
	  if (micros() - timeStamp > 10000) {	// timestep = 10ms
 80025ca:	e57b      	b.n	80020c4 <main+0x1ac>
 80025cc:	24000c08 	.word	0x24000c08
 80025d0:	24000bf0 	.word	0x24000bf0
 80025d4:	24000c28 	.word	0x24000c28
 80025d8:	24000c30 	.word	0x24000c30
 80025dc:	24000c38 	.word	0x24000c38
 80025e0:	24000c10 	.word	0x24000c10
 80025e4:	24000c18 	.word	0x24000c18
 80025e8:	24000c20 	.word	0x24000c20
 80025ec:	58020400 	.word	0x58020400

080025f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b09c      	sub	sp, #112	; 0x70
 80025f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025fa:	224c      	movs	r2, #76	; 0x4c
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f008 fe8c 	bl	800b31c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	2220      	movs	r2, #32
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f008 fe86 	bl	800b31c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002610:	2004      	movs	r0, #4
 8002612:	f004 ff29 	bl	8007468 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002616:	2300      	movs	r3, #0
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <SystemClock_Config+0x100>)
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	4a34      	ldr	r2, [pc, #208]	; (80026f0 <SystemClock_Config+0x100>)
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002626:	4b32      	ldr	r3, [pc, #200]	; (80026f0 <SystemClock_Config+0x100>)
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <SystemClock_Config+0x104>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002638:	4a2e      	ldr	r2, [pc, #184]	; (80026f4 <SystemClock_Config+0x104>)
 800263a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800263e:	6193      	str	r3, [r2, #24]
 8002640:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <SystemClock_Config+0x104>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800264c:	bf00      	nop
 800264e:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <SystemClock_Config+0x104>)
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265a:	d1f8      	bne.n	800264e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800265c:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <SystemClock_Config+0x108>)
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	f023 0303 	bic.w	r3, r3, #3
 8002664:	4a24      	ldr	r2, [pc, #144]	; (80026f8 <SystemClock_Config+0x108>)
 8002666:	f043 0302 	orr.w	r3, r3, #2
 800266a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800266c:	2301      	movs	r3, #1
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002670:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002676:	2302      	movs	r3, #2
 8002678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800267a:	2302      	movs	r3, #2
 800267c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800267e:	2301      	movs	r3, #1
 8002680:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8002682:	2319      	movs	r3, #25
 8002684:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002686:	2302      	movs	r3, #2
 8002688:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800268a:	2302      	movs	r3, #2
 800268c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800268e:	2302      	movs	r3, #2
 8002690:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002692:	230c      	movs	r3, #12
 8002694:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002696:	2300      	movs	r3, #0
 8002698:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800269e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a2:	4618      	mov	r0, r3
 80026a4:	f004 ff4a 	bl	800753c <HAL_RCC_OscConfig>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80026ae:	f001 f9cf 	bl	8003a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026b2:	233f      	movs	r3, #63	; 0x3f
 80026b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026b6:	2303      	movs	r3, #3
 80026b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80026c2:	2340      	movs	r3, #64	; 0x40
 80026c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80026c6:	2340      	movs	r3, #64	; 0x40
 80026c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80026ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80026d0:	2340      	movs	r3, #64	; 0x40
 80026d2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	2102      	movs	r1, #2
 80026d8:	4618      	mov	r0, r3
 80026da:	f005 fb5d 	bl	8007d98 <HAL_RCC_ClockConfig>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80026e4:	f001 f9b4 	bl	8003a50 <Error_Handler>
  }
}
 80026e8:	bf00      	nop
 80026ea:	3770      	adds	r7, #112	; 0x70
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	58000400 	.word	0x58000400
 80026f4:	58024800 	.word	0x58024800
 80026f8:	58024400 	.word	0x58024400

080026fc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002700:	4b1e      	ldr	r3, [pc, #120]	; (800277c <MX_ETH_Init+0x80>)
 8002702:	4a1f      	ldr	r2, [pc, #124]	; (8002780 <MX_ETH_Init+0x84>)
 8002704:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002706:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <MX_ETH_Init+0x88>)
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800270c:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <MX_ETH_Init+0x88>)
 800270e:	2280      	movs	r2, #128	; 0x80
 8002710:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <MX_ETH_Init+0x88>)
 8002714:	22e1      	movs	r2, #225	; 0xe1
 8002716:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002718:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <MX_ETH_Init+0x88>)
 800271a:	2200      	movs	r2, #0
 800271c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <MX_ETH_Init+0x88>)
 8002720:	2200      	movs	r2, #0
 8002722:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002724:	4b17      	ldr	r3, [pc, #92]	; (8002784 <MX_ETH_Init+0x88>)
 8002726:	2200      	movs	r2, #0
 8002728:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800272a:	4b14      	ldr	r3, [pc, #80]	; (800277c <MX_ETH_Init+0x80>)
 800272c:	4a15      	ldr	r2, [pc, #84]	; (8002784 <MX_ETH_Init+0x88>)
 800272e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <MX_ETH_Init+0x80>)
 8002732:	2201      	movs	r2, #1
 8002734:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002736:	4b11      	ldr	r3, [pc, #68]	; (800277c <MX_ETH_Init+0x80>)
 8002738:	4a13      	ldr	r2, [pc, #76]	; (8002788 <MX_ETH_Init+0x8c>)
 800273a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800273c:	4b0f      	ldr	r3, [pc, #60]	; (800277c <MX_ETH_Init+0x80>)
 800273e:	4a13      	ldr	r2, [pc, #76]	; (800278c <MX_ETH_Init+0x90>)
 8002740:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <MX_ETH_Init+0x80>)
 8002744:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002748:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800274a:	480c      	ldr	r0, [pc, #48]	; (800277c <MX_ETH_Init+0x80>)
 800274c:	f001 ff78 	bl	8004640 <HAL_ETH_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002756:	f001 f97b 	bl	8003a50 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800275a:	2238      	movs	r2, #56	; 0x38
 800275c:	2100      	movs	r1, #0
 800275e:	480c      	ldr	r0, [pc, #48]	; (8002790 <MX_ETH_Init+0x94>)
 8002760:	f008 fddc 	bl	800b31c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <MX_ETH_Init+0x94>)
 8002766:	2221      	movs	r2, #33	; 0x21
 8002768:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <MX_ETH_Init+0x94>)
 800276c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002770:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <MX_ETH_Init+0x94>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}
 800277c:	2400030c 	.word	0x2400030c
 8002780:	40028000 	.word	0x40028000
 8002784:	24000c40 	.word	0x24000c40
 8002788:	240000f8 	.word	0x240000f8
 800278c:	24000098 	.word	0x24000098
 8002790:	240002d4 	.word	0x240002d4

08002794 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800279a:	4b3e      	ldr	r3, [pc, #248]	; (8002894 <MX_FDCAN1_Init+0x100>)
 800279c:	4a3e      	ldr	r2, [pc, #248]	; (8002898 <MX_FDCAN1_Init+0x104>)
 800279e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80027a0:	4b3c      	ldr	r3, [pc, #240]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80027a6:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80027ac:	4b39      	ldr	r3, [pc, #228]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80027b2:	4b38      	ldr	r3, [pc, #224]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80027b8:	4b36      	ldr	r3, [pc, #216]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80027be:	4b35      	ldr	r3, [pc, #212]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80027c4:	4b33      	ldr	r3, [pc, #204]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027c6:	2202      	movs	r2, #2
 80027c8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80027ca:	4b32      	ldr	r3, [pc, #200]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027cc:	220d      	movs	r2, #13
 80027ce:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80027d0:	4b30      	ldr	r3, [pc, #192]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027d2:	2202      	movs	r2, #2
 80027d4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80027d6:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027d8:	2201      	movs	r2, #1
 80027da:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 7;
 80027dc:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027de:	2207      	movs	r2, #7
 80027e0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 8;
 80027e2:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027e4:	2208      	movs	r2, #8
 80027e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 7;
 80027e8:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027ea:	2207      	movs	r2, #7
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80027ee:	4b29      	ldr	r3, [pc, #164]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80027f4:	4b27      	ldr	r3, [pc, #156]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80027fa:	4b26      	ldr	r3, [pc, #152]	; (8002894 <MX_FDCAN1_Init+0x100>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8002800:	4b24      	ldr	r3, [pc, #144]	; (8002894 <MX_FDCAN1_Init+0x100>)
 8002802:	2201      	movs	r2, #1
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002806:	4b23      	ldr	r3, [pc, #140]	; (8002894 <MX_FDCAN1_Init+0x100>)
 8002808:	2204      	movs	r2, #4
 800280a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800280c:	4b21      	ldr	r3, [pc, #132]	; (8002894 <MX_FDCAN1_Init+0x100>)
 800280e:	2200      	movs	r2, #0
 8002810:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <MX_FDCAN1_Init+0x100>)
 8002814:	2204      	movs	r2, #4
 8002816:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8002818:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <MX_FDCAN1_Init+0x100>)
 800281a:	2200      	movs	r2, #0
 800281c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <MX_FDCAN1_Init+0x100>)
 8002820:	2204      	movs	r2, #4
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <MX_FDCAN1_Init+0x100>)
 8002826:	2200      	movs	r2, #0
 8002828:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800282a:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <MX_FDCAN1_Init+0x100>)
 800282c:	2200      	movs	r2, #0
 800282e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 10;
 8002830:	4b18      	ldr	r3, [pc, #96]	; (8002894 <MX_FDCAN1_Init+0x100>)
 8002832:	220a      	movs	r2, #10
 8002834:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002836:	4b17      	ldr	r3, [pc, #92]	; (8002894 <MX_FDCAN1_Init+0x100>)
 8002838:	2200      	movs	r2, #0
 800283a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <MX_FDCAN1_Init+0x100>)
 800283e:	2204      	movs	r2, #4
 8002840:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002842:	4814      	ldr	r0, [pc, #80]	; (8002894 <MX_FDCAN1_Init+0x100>)
 8002844:	f002 fb20 	bl	8004e88 <HAL_FDCAN_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800284e:	f001 f8ff 	bl	8003a50 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002852:	2300      	movs	r3, #0
 8002854:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800285a:	2302      	movs	r3, #2
 800285c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800285e:	2301      	movs	r3, #1
 8002860:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x11;
 8002862:	2311      	movs	r3, #17
 8002864:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;	/* For acceptance, MessageID and FilterID1 must match exactly 0x7FF*/
 8002866:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800286a:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 8002870:	463b      	mov	r3, r7
 8002872:	4619      	mov	r1, r3
 8002874:	4807      	ldr	r0, [pc, #28]	; (8002894 <MX_FDCAN1_Init+0x100>)
 8002876:	f002 fce5 	bl	8005244 <HAL_FDCAN_ConfigFilter>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d004      	beq.n	800288a <MX_FDCAN1_Init+0xf6>

	  /* Filter configuration Error */
	  error = 4;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <MX_FDCAN1_Init+0x108>)
 8002882:	2204      	movs	r2, #4
 8002884:	701a      	strb	r2, [r3, #0]
	  Error_Handler();
 8002886:	f001 f8e3 	bl	8003a50 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 800288a:	bf00      	nop
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	240003bc 	.word	0x240003bc
 8002898:	4000a000 	.word	0x4000a000
 800289c:	24000be4 	.word	0x24000be4

080028a0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80028a6:	4b3e      	ldr	r3, [pc, #248]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 80028a8:	4a3e      	ldr	r2, [pc, #248]	; (80029a4 <MX_FDCAN2_Init+0x104>)
 80028aa:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80028ac:	4b3c      	ldr	r3, [pc, #240]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80028b2:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 80028b8:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80028be:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80028c4:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80028ca:	4b35      	ldr	r3, [pc, #212]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 2;
 80028d0:	4b33      	ldr	r3, [pc, #204]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 80028d2:	2202      	movs	r2, #2
 80028d4:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 80028d6:	4b32      	ldr	r3, [pc, #200]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 80028d8:	220d      	movs	r2, #13
 80028da:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80028dc:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 80028de:	2202      	movs	r2, #2
 80028e0:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80028e2:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 7;
 80028e8:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 80028ea:	2207      	movs	r2, #7
 80028ec:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 8;
 80028ee:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 80028f0:	2208      	movs	r2, #8
 80028f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 7;
 80028f4:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 80028f6:	2207      	movs	r2, #7
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 1280;
 80028fa:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 80028fc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002900:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8002902:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 8002904:	2201      	movs	r2, #1
 8002906:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 800290a:	2200      	movs	r2, #0
 800290c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800290e:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 8002910:	2200      	movs	r2, #0
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 8002916:	2204      	movs	r2, #4
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 800291a:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 800291c:	2201      	movs	r2, #1
 800291e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002920:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 8002922:	2204      	movs	r2, #4
 8002924:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 8002928:	2200      	movs	r2, #0
 800292a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800292c:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 800292e:	2204      	movs	r2, #4
 8002930:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8002932:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 8002934:	2200      	movs	r2, #0
 8002936:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 800293a:	2200      	movs	r2, #0
 800293c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 10;
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 8002940:	220a      	movs	r2, #10
 8002942:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002944:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 8002946:	2200      	movs	r2, #0
 8002948:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 800294c:	2204      	movs	r2, #4
 800294e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002950:	4813      	ldr	r0, [pc, #76]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 8002952:	f002 fa99 	bl	8004e88 <HAL_FDCAN_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_FDCAN2_Init+0xc0>
  {
    Error_Handler();
 800295c:	f001 f878 	bl	8003a50 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002960:	2300      	movs	r3, #0
 8002962:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002968:	2302      	movs	r3, #2
 800296a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 800296c:	2302      	movs	r3, #2
 800296e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x22;
 8002970:	2322      	movs	r3, #34	; 0x22
 8002972:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;	/* For acceptance, MessageID and FilterID1 must match exactly */
 8002974:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002978:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK){
 800297e:	463b      	mov	r3, r7
 8002980:	4619      	mov	r1, r3
 8002982:	4807      	ldr	r0, [pc, #28]	; (80029a0 <MX_FDCAN2_Init+0x100>)
 8002984:	f002 fc5e 	bl	8005244 <HAL_FDCAN_ConfigFilter>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d004      	beq.n	8002998 <MX_FDCAN2_Init+0xf8>

	  /* Filter configuration Error */
	  error = 5;
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <MX_FDCAN2_Init+0x108>)
 8002990:	2205      	movs	r2, #5
 8002992:	701a      	strb	r2, [r3, #0]
	  Error_Handler();
 8002994:	f001 f85c 	bl	8003a50 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 8002998:	bf00      	nop
 800299a:	3720      	adds	r7, #32
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	2400045c 	.word	0x2400045c
 80029a4:	4000a400 	.word	0x4000a400
 80029a8:	24000be4 	.word	0x24000be4

080029ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029b2:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <MX_I2C1_Init+0x78>)
 80029b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80029b6:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029b8:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <MX_I2C1_Init+0x7c>)
 80029ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029bc:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029c2:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029ce:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029dc:	2200      	movs	r2, #0
 80029de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029e6:	480e      	ldr	r0, [pc, #56]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029e8:	f003 fe52 	bl	8006690 <HAL_I2C_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029f2:	f001 f82d 	bl	8003a50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029f6:	2100      	movs	r1, #0
 80029f8:	4809      	ldr	r0, [pc, #36]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029fa:	f004 fb55 	bl	80070a8 <HAL_I2CEx_ConfigAnalogFilter>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a04:	f001 f824 	bl	8003a50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4805      	ldr	r0, [pc, #20]	; (8002a20 <MX_I2C1_Init+0x74>)
 8002a0c:	f004 fb97 	bl	800713e <HAL_I2CEx_ConfigDigitalFilter>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a16:	f001 f81b 	bl	8003a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	240004fc 	.word	0x240004fc
 8002a24:	40005400 	.word	0x40005400
 8002a28:	00c0eaff 	.word	0x00c0eaff

08002a2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a32:	f107 0310 	add.w	r3, r7, #16
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <MX_TIM2_Init+0x98>)
 8002a4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8002a52:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <MX_TIM2_Init+0x98>)
 8002a54:	2263      	movs	r2, #99	; 0x63
 8002a56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a58:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <MX_TIM2_Init+0x98>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a5e:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <MX_TIM2_Init+0x98>)
 8002a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a66:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <MX_TIM2_Init+0x98>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a6c:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <MX_TIM2_Init+0x98>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a72:	4814      	ldr	r0, [pc, #80]	; (8002ac4 <MX_TIM2_Init+0x98>)
 8002a74:	f006 fd9a 	bl	80095ac <HAL_TIM_Base_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002a7e:	f000 ffe7 	bl	8003a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a88:	f107 0310 	add.w	r3, r7, #16
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	480d      	ldr	r0, [pc, #52]	; (8002ac4 <MX_TIM2_Init+0x98>)
 8002a90:	f006 ff7c 	bl	800998c <HAL_TIM_ConfigClockSource>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002a9a:	f000 ffd9 	bl	8003a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <MX_TIM2_Init+0x98>)
 8002aac:	f007 f9c6 	bl	8009e3c <HAL_TIMEx_MasterConfigSynchronization>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002ab6:	f000 ffcb 	bl	8003a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002aba:	bf00      	nop
 8002abc:	3720      	adds	r7, #32
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	24000548 	.word	0x24000548

08002ac8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002acc:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ace:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002ad0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002ad2:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ad4:	2209      	movs	r2, #9
 8002ad6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ada:	2202      	movs	r2, #2
 8002adc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002ade:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002aea:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002b0e:	4805      	ldr	r0, [pc, #20]	; (8002b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002b10:	f004 fb61 	bl	80071d6 <HAL_PCD_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002b1a:	f000 ff99 	bl	8003a50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	24000594 	.word	0x24000594
 8002b28:	40080000 	.word	0x40080000

08002b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <MX_DMA_Init+0x30>)
 8002b34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b38:	4a08      	ldr	r2, [pc, #32]	; (8002b5c <MX_DMA_Init+0x30>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <MX_DMA_Init+0x30>)
 8002b44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]

}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	58024400 	.word	0x58024400

08002b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	; 0x30
 8002b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b66:	f107 031c 	add.w	r3, r7, #28
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	609a      	str	r2, [r3, #8]
 8002b72:	60da      	str	r2, [r3, #12]
 8002b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b76:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7c:	4a37      	ldr	r2, [pc, #220]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b86:	4b35      	ldr	r3, [pc, #212]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b94:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b9a:	4a30      	ldr	r2, [pc, #192]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ba4:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb8:	4a28      	ldr	r2, [pc, #160]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bc2:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd0:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd6:	4a21      	ldr	r2, [pc, #132]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002be0:	4b1e      	ldr	r3, [pc, #120]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bee:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf4:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002bf6:	f043 0308 	orr.w	r3, r3, #8
 8002bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bfe:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c12:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <MX_GPIO_Init+0xfc>)
 8002c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	607b      	str	r3, [r7, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c30:	480b      	ldr	r0, [pc, #44]	; (8002c60 <MX_GPIO_Init+0x100>)
 8002c32:	f003 fccb 	bl	80065cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002c36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002c48:	f107 031c 	add.w	r3, r7, #28
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4804      	ldr	r0, [pc, #16]	; (8002c60 <MX_GPIO_Init+0x100>)
 8002c50:	f003 fb0c 	bl	800626c <HAL_GPIO_Init>

}
 8002c54:	bf00      	nop
 8002c56:	3730      	adds	r7, #48	; 0x30
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	58024400 	.word	0x58024400
 8002c60:	58020400 	.word	0x58020400
 8002c64:	00000000 	.word	0x00000000

08002c68 <Pulse2Position>:

/* USER CODE BEGIN 4 */
void Pulse2Position()
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
	Right_DegRel = RightMotor_PulseFeedback * 0.0878;
 8002c6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <Pulse2Position+0x78>)
 8002c6e:	edd3 7a00 	vldr	s15, [r3]
 8002c72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c76:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8002cd8 <Pulse2Position+0x70>
 8002c7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c7e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c82:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <Pulse2Position+0x7c>)
 8002c84:	edc3 7a00 	vstr	s15, [r3]
	Left_DegRel = LeftMotor_PulseFeedback * 0.0878;
 8002c88:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <Pulse2Position+0x80>)
 8002c8a:	edd3 7a00 	vldr	s15, [r3]
 8002c8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c92:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8002cd8 <Pulse2Position+0x70>
 8002c96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c9a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c9e:	4b13      	ldr	r3, [pc, #76]	; (8002cec <Pulse2Position+0x84>)
 8002ca0:	edc3 7a00 	vstr	s15, [r3]
	Right_DegSec = RightMotor_SpeedFeedback * 6.0;
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <Pulse2Position+0x88>)
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <Pulse2Position+0x8c>)
 8002cb4:	edc3 7a00 	vstr	s15, [r3]
	Left_DegSec = LeftMotor_SpeedFeedback * 6.0;
 8002cb8:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <Pulse2Position+0x90>)
 8002cba:	edd3 7a00 	vldr	s15, [r3]
 8002cbe:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <Pulse2Position+0x94>)
 8002cc8:	edc3 7a00 	vstr	s15, [r3]
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	9096bb99 	.word	0x9096bb99
 8002cdc:	3fb67a0f 	.word	0x3fb67a0f
 8002ce0:	24000b74 	.word	0x24000b74
 8002ce4:	24000b8c 	.word	0x24000b8c
 8002ce8:	24000b80 	.word	0x24000b80
 8002cec:	24000b90 	.word	0x24000b90
 8002cf0:	24000b78 	.word	0x24000b78
 8002cf4:	24000b94 	.word	0x24000b94
 8002cf8:	24000b84 	.word	0x24000b84
 8002cfc:	24000b98 	.word	0x24000b98

08002d00 <ForwardKinematic>:

void ForwardKinematic(float right_linvel, float left_linvel, float wheel_distance)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	ed87 0a03 	vstr	s0, [r7, #12]
 8002d0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8002d0e:	ed87 1a01 	vstr	s2, [r7, #4]
	Robot_LinVel = (right_linvel + left_linvel)*0.5;
 8002d12:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d16:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <ForwardKinematic+0x54>)
 8002d28:	edc3 7a00 	vstr	s15, [r3]
	Robot_AngVel = (right_linvel - left_linvel)/wheel_distance;
 8002d2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d30:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d34:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002d38:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <ForwardKinematic+0x58>)
 8002d42:	edc3 7a00 	vstr	s15, [r3]

}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	24000ba4 	.word	0x24000ba4
 8002d58:	24000ba8 	.word	0x24000ba8
 8002d5c:	00000000 	.word	0x00000000

08002d60 <InverseKinematic>:

void InverseKinematic(float cmd_linvel, float cmd_angvel, float wheel_distance, float wheel_radius)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	ed87 0a03 	vstr	s0, [r7, #12]
 8002d6a:	edc7 0a02 	vstr	s1, [r7, #8]
 8002d6e:	ed87 1a01 	vstr	s2, [r7, #4]
 8002d72:	edc7 1a00 	vstr	s3, [r7]
	float right_speed, left_speed;	// unit: m/s
	right_speed = cmd_linvel + cmd_angvel*wheel_distance*0.5;
 8002d76:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d7a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002d7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d82:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d8e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8002d92:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002d96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d9a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d9e:	edc7 7a07 	vstr	s15, [r7, #28]
	left_speed = cmd_linvel - cmd_angvel*wheel_distance*0.5;
 8002da2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002da6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002daa:	ed97 7a02 	vldr	s14, [r7, #8]
 8002dae:	edd7 7a01 	vldr	s15, [r7, #4]
 8002db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dba:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8002dbe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002dc2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002dc6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002dca:	edc7 7a06 	vstr	s15, [r7, #24]
	// m/s to rpm
	RightMotor_CmdVel = (right_speed * 60) / (wheel_radius * 2 * M_PI);
 8002dce:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dd2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002f20 <InverseKinematic+0x1c0>
 8002dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dda:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002dde:	edd7 7a00 	vldr	s15, [r7]
 8002de2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002de6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dea:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8002f18 <InverseKinematic+0x1b8>
 8002dee:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002df2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002df6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002dfa:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <InverseKinematic+0x1c4>)
 8002dfc:	edc3 7a00 	vstr	s15, [r3]
	LeftMotor_CmdVel = (left_speed * 60) / (wheel_radius * 2 * M_PI);
 8002e00:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e04:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002f20 <InverseKinematic+0x1c0>
 8002e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e0c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e10:	edd7 7a00 	vldr	s15, [r7]
 8002e14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e1c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002f18 <InverseKinematic+0x1b8>
 8002e20:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002e24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002e28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e2c:	4b3e      	ldr	r3, [pc, #248]	; (8002f28 <InverseKinematic+0x1c8>)
 8002e2e:	edc3 7a00 	vstr	s15, [r3]
	// Saturate motor if speed is too much
	uint8_t sat_value = 15;
 8002e32:	230f      	movs	r3, #15
 8002e34:	75fb      	strb	r3, [r7, #23]
	if (fabs(RightMotor_CmdVel) > sat_value){
 8002e36:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <InverseKinematic+0x1c4>)
 8002e38:	edd3 7a00 	vldr	s15, [r3]
 8002e3c:	eef0 7ae7 	vabs.f32	s15, s15
 8002e40:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002e4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e56:	dd21      	ble.n	8002e9c <InverseKinematic+0x13c>
		if (RightMotor_CmdVel > 0){
 8002e58:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <InverseKinematic+0x1c4>)
 8002e5a:	edd3 7a00 	vldr	s15, [r3]
 8002e5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e66:	dd08      	ble.n	8002e7a <InverseKinematic+0x11a>
			RightMotor_CmdVel = sat_value;
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e72:	4b2c      	ldr	r3, [pc, #176]	; (8002f24 <InverseKinematic+0x1c4>)
 8002e74:	edc3 7a00 	vstr	s15, [r3]
 8002e78:	e010      	b.n	8002e9c <InverseKinematic+0x13c>
		}
		else if (RightMotor_CmdVel < 0){
 8002e7a:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <InverseKinematic+0x1c4>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e88:	d508      	bpl.n	8002e9c <InverseKinematic+0x13c>
			RightMotor_CmdVel = -sat_value;
 8002e8a:	7dfb      	ldrb	r3, [r7, #23]
 8002e8c:	425b      	negs	r3, r3
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e96:	4b23      	ldr	r3, [pc, #140]	; (8002f24 <InverseKinematic+0x1c4>)
 8002e98:	edc3 7a00 	vstr	s15, [r3]
		}
	}
	if (fabs(LeftMotor_CmdVel) > sat_value){
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <InverseKinematic+0x1c8>)
 8002e9e:	edd3 7a00 	vldr	s15, [r3]
 8002ea2:	eef0 7ae7 	vabs.f32	s15, s15
 8002ea6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002eb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebc:	dc00      	bgt.n	8002ec0 <InverseKinematic+0x160>
		}
		else if (LeftMotor_CmdVel < 0){
			LeftMotor_CmdVel = -sat_value;
		}
	}
}
 8002ebe:	e022      	b.n	8002f06 <InverseKinematic+0x1a6>
		if (LeftMotor_CmdVel > 0){
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <InverseKinematic+0x1c8>)
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ece:	dd08      	ble.n	8002ee2 <InverseKinematic+0x182>
			LeftMotor_CmdVel = sat_value;
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <InverseKinematic+0x1c8>)
 8002edc:	edc3 7a00 	vstr	s15, [r3]
}
 8002ee0:	e011      	b.n	8002f06 <InverseKinematic+0x1a6>
		else if (LeftMotor_CmdVel < 0){
 8002ee2:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <InverseKinematic+0x1c8>)
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef0:	d400      	bmi.n	8002ef4 <InverseKinematic+0x194>
}
 8002ef2:	e008      	b.n	8002f06 <InverseKinematic+0x1a6>
			LeftMotor_CmdVel = -sat_value;
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
 8002ef6:	425b      	negs	r3, r3
 8002ef8:	ee07 3a90 	vmov	s15, r3
 8002efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <InverseKinematic+0x1c8>)
 8002f02:	edc3 7a00 	vstr	s15, [r3]
}
 8002f06:	bf00      	nop
 8002f08:	3724      	adds	r7, #36	; 0x24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	f3af 8000 	nop.w
 8002f18:	54442d18 	.word	0x54442d18
 8002f1c:	400921fb 	.word	0x400921fb
 8002f20:	42700000 	.word	0x42700000
 8002f24:	24000bdc 	.word	0x24000bdc
 8002f28:	24000be0 	.word	0x24000be0

08002f2c <WheelOdometry>:

void WheelOdometry(float linear_velocity, float angular_velocity, float time_step)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	ed2d 8b02 	vpush	{d8}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	ed87 0a03 	vstr	s0, [r7, #12]
 8002f3a:	edc7 0a02 	vstr	s1, [r7, #8]
 8002f3e:	ed87 1a01 	vstr	s2, [r7, #4]
	float temp_tetra = Robot_Yaw + (angular_velocity*time_step*0.5);
 8002f42:	4b37      	ldr	r3, [pc, #220]	; (8003020 <WheelOdometry+0xf4>)
 8002f44:	edd3 7a00 	vldr	s15, [r3]
 8002f48:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002f4c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f50:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f5c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8002f60:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002f64:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002f68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002f6c:	edc7 7a05 	vstr	s15, [r7, #20]
	Robot_X = Robot_X + cos(temp_tetra)*linear_velocity*time_step;
 8002f70:	4b2c      	ldr	r3, [pc, #176]	; (8003024 <WheelOdometry+0xf8>)
 8002f72:	edd3 7a00 	vldr	s15, [r3]
 8002f76:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002f7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f82:	eeb0 0b47 	vmov.f64	d0, d7
 8002f86:	f007 fb0f 	bl	800a5a8 <cos>
 8002f8a:	eeb0 6b40 	vmov.f64	d6, d0
 8002f8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f96:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002f9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fa2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002fa6:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002faa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002fae:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <WheelOdometry+0xf8>)
 8002fb0:	edc3 7a00 	vstr	s15, [r3]
	Robot_Y = Robot_Y + sin(temp_tetra)*linear_velocity*time_step;
 8002fb4:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <WheelOdometry+0xfc>)
 8002fb6:	edd3 7a00 	vldr	s15, [r3]
 8002fba:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002fbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fc6:	eeb0 0b47 	vmov.f64	d0, d7
 8002fca:	f007 fb39 	bl	800a640 <sin>
 8002fce:	eeb0 6b40 	vmov.f64	d6, d0
 8002fd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fda:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fe2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fe6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002fea:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002fee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <WheelOdometry+0xfc>)
 8002ff4:	edc3 7a00 	vstr	s15, [r3]
	Robot_Yaw = Robot_Yaw + angular_velocity*time_step;
 8002ff8:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ffc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <WheelOdometry+0xf4>)
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300e:	4b04      	ldr	r3, [pc, #16]	; (8003020 <WheelOdometry+0xf4>)
 8003010:	edc3 7a00 	vstr	s15, [r3]
}
 8003014:	bf00      	nop
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	ecbd 8b02 	vpop	{d8}
 800301e:	bd80      	pop	{r7, pc}
 8003020:	24000bb4 	.word	0x24000bb4
 8003024:	24000bac 	.word	0x24000bac
 8003028:	24000bb0 	.word	0x24000bb0

0800302c <RPY2Quaternion>:

// heading - y - pitch
// attitude - z - yaw
// bank - x - row
void RPY2Quaternion(float roll, float pitch, float yaw)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af00      	add	r7, sp, #0
 8003032:	ed87 0a03 	vstr	s0, [r7, #12]
 8003036:	edc7 0a02 	vstr	s1, [r7, #8]
 800303a:	ed87 1a01 	vstr	s2, [r7, #4]
	float c1 = cos(pitch*0.5); //cp
 800303e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003042:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003046:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800304a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800304e:	eeb0 0b47 	vmov.f64	d0, d7
 8003052:	f007 faa9 	bl	800a5a8 <cos>
 8003056:	eeb0 7b40 	vmov.f64	d7, d0
 800305a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800305e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float s1 = sin(pitch*0.5);	//sp
 8003062:	edd7 7a02 	vldr	s15, [r7, #8]
 8003066:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800306a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800306e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003072:	eeb0 0b47 	vmov.f64	d0, d7
 8003076:	f007 fae3 	bl	800a640 <sin>
 800307a:	eeb0 7b40 	vmov.f64	d7, d0
 800307e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003082:	edc7 7a08 	vstr	s15, [r7, #32]
	float c2 = cos(yaw*0.5);	//cy
 8003086:	edd7 7a01 	vldr	s15, [r7, #4]
 800308a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800308e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003092:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003096:	eeb0 0b47 	vmov.f64	d0, d7
 800309a:	f007 fa85 	bl	800a5a8 <cos>
 800309e:	eeb0 7b40 	vmov.f64	d7, d0
 80030a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030a6:	edc7 7a07 	vstr	s15, [r7, #28]
	float s2 = sin(yaw*0.5);	//sy
 80030aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80030ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030b2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80030b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80030ba:	eeb0 0b47 	vmov.f64	d0, d7
 80030be:	f007 fabf 	bl	800a640 <sin>
 80030c2:	eeb0 7b40 	vmov.f64	d7, d0
 80030c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030ca:	edc7 7a06 	vstr	s15, [r7, #24]
	float c3 = cos(roll*0.5);	//cr
 80030ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80030d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030d6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80030da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80030de:	eeb0 0b47 	vmov.f64	d0, d7
 80030e2:	f007 fa61 	bl	800a5a8 <cos>
 80030e6:	eeb0 7b40 	vmov.f64	d7, d0
 80030ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030ee:	edc7 7a05 	vstr	s15, [r7, #20]
	float s3 = sin(roll*0.5);	//sr
 80030f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80030f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030fa:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80030fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003102:	eeb0 0b47 	vmov.f64	d0, d7
 8003106:	f007 fa9b 	bl	800a640 <sin>
 800310a:	eeb0 7b40 	vmov.f64	d7, d0
 800310e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003112:	edc7 7a04 	vstr	s15, [r7, #16]

	Robot_qw =c1*c2*c3 - s1*s2*s3;	//cp*cy*cr + sp*sy*sr
 8003116:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800311a:	edd7 7a07 	vldr	s15, [r7, #28]
 800311e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003122:	edd7 7a05 	vldr	s15, [r7, #20]
 8003126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800312a:	edd7 6a08 	vldr	s13, [r7, #32]
 800312e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003132:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003136:	edd7 7a04 	vldr	s15, [r7, #16]
 800313a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800313e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003142:	4b29      	ldr	r3, [pc, #164]	; (80031e8 <RPY2Quaternion+0x1bc>)
 8003144:	edc3 7a00 	vstr	s15, [r3]
	Robot_qx =c1*c2*s3 + s1*s2*c3;	//cp*cy*sr + sp*sy*cr
 8003148:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800314c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003154:	edd7 7a04 	vldr	s15, [r7, #16]
 8003158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800315c:	edd7 6a08 	vldr	s13, [r7, #32]
 8003160:	edd7 7a06 	vldr	s15, [r7, #24]
 8003164:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003168:	edd7 7a05 	vldr	s15, [r7, #20]
 800316c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003174:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <RPY2Quaternion+0x1c0>)
 8003176:	edc3 7a00 	vstr	s15, [r3]
	Robot_qy =s1*c2*c3 + c1*s2*s3;	//sp*cy*cr + cp*sy*sr
 800317a:	ed97 7a08 	vldr	s14, [r7, #32]
 800317e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003186:	edd7 7a05 	vldr	s15, [r7, #20]
 800318a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800318e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003192:	edd7 7a06 	vldr	s15, [r7, #24]
 8003196:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800319a:	edd7 7a04 	vldr	s15, [r7, #16]
 800319e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a6:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <RPY2Quaternion+0x1c4>)
 80031a8:	edc3 7a00 	vstr	s15, [r3]
	Robot_qz =c1*s2*c3 - s1*c2*s3;	//cp*sy*cr + sp*cy*sr
 80031ac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80031b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80031b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80031bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031c0:	edd7 6a08 	vldr	s13, [r7, #32]
 80031c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80031c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80031d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <RPY2Quaternion+0x1c8>)
 80031da:	edc3 7a00 	vstr	s15, [r3]
}
 80031de:	bf00      	nop
 80031e0:	3728      	adds	r7, #40	; 0x28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	24000bd0 	.word	0x24000bd0
 80031ec:	24000bc4 	.word	0x24000bc4
 80031f0:	24000bc8 	.word	0x24000bc8
 80031f4:	24000bcc 	.word	0x24000bcc

080031f8 <HAL_FDCAN_RxFifo0Callback>:
// FDCAN1 Callback
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
	error = 9;
 8003202:	4b4f      	ldr	r3, [pc, #316]	; (8003340 <HAL_FDCAN_RxFifo0Callback+0x148>)
 8003204:	2209      	movs	r2, #9
 8003206:	701a      	strb	r2, [r3, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 8086 	beq.w	8003320 <HAL_FDCAN_RxFifo0Callback+0x128>
	{
		/* Retreive Rx message from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK)
 8003214:	4b4b      	ldr	r3, [pc, #300]	; (8003344 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8003216:	4a4c      	ldr	r2, [pc, #304]	; (8003348 <HAL_FDCAN_RxFifo0Callback+0x150>)
 8003218:	2140      	movs	r1, #64	; 0x40
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f002 f93c 	bl	8005498 <HAL_FDCAN_GetRxMessage>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_FDCAN_RxFifo0Callback+0x32>
		{
			/* Reception Error */
			Error_Handler();
 8003226:	f000 fc13 	bl	8003a50 <Error_Handler>
		}
		// Check if Rx message is return message
		if (RxData1[1] == 0xDB){
 800322a:	4b46      	ldr	r3, [pc, #280]	; (8003344 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 800322c:	785b      	ldrb	r3, [r3, #1]
 800322e:	2bdb      	cmp	r3, #219	; 0xdb
 8003230:	d16c      	bne.n	800330c <HAL_FDCAN_RxFifo0Callback+0x114>
//			TxWriteMsg1_isReturn = compareTxRxMessage(TxData1, RxData1);
			// Check if Rx message is Tx write command return message
			if (TxData1[1] == 0xDA){
 8003232:	4b46      	ldr	r3, [pc, #280]	; (800334c <HAL_FDCAN_RxFifo0Callback+0x154>)
 8003234:	785b      	ldrb	r3, [r3, #1]
 8003236:	2bda      	cmp	r3, #218	; 0xda
 8003238:	d108      	bne.n	800324c <HAL_FDCAN_RxFifo0Callback+0x54>
				TxWriteMsg1_isReturn = compareTxRxMessage(TxData1, RxData1);
 800323a:	4942      	ldr	r1, [pc, #264]	; (8003344 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 800323c:	4843      	ldr	r0, [pc, #268]	; (800334c <HAL_FDCAN_RxFifo0Callback+0x154>)
 800323e:	f000 fbaf 	bl	80039a0 <compareTxRxMessage>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	4b42      	ldr	r3, [pc, #264]	; (8003350 <HAL_FDCAN_RxFifo0Callback+0x158>)
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e05f      	b.n	800330c <HAL_FDCAN_RxFifo0Callback+0x114>
			}
			// Check if Rx message is Tx read command return message
			else if ((TxData1[1] == 0xDC)){
 800324c:	4b3f      	ldr	r3, [pc, #252]	; (800334c <HAL_FDCAN_RxFifo0Callback+0x154>)
 800324e:	785b      	ldrb	r3, [r3, #1]
 8003250:	2bdc      	cmp	r3, #220	; 0xdc
 8003252:	d15b      	bne.n	800330c <HAL_FDCAN_RxFifo0Callback+0x114>
				// read current
				if (RxData1[3] == 0xE2){
 8003254:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8003256:	78db      	ldrb	r3, [r3, #3]
 8003258:	2be2      	cmp	r3, #226	; 0xe2
 800325a:	d116      	bne.n	800328a <HAL_FDCAN_RxFifo0Callback+0x92>
					RightMotor_CurrentFeedback = ((RxData1[6]<<8) | (RxData1[7])) / 100.0;
 800325c:	4b39      	ldr	r3, [pc, #228]	; (8003344 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 800325e:	799b      	ldrb	r3, [r3, #6]
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	4a38      	ldr	r2, [pc, #224]	; (8003344 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8003264:	79d2      	ldrb	r2, [r2, #7]
 8003266:	4313      	orrs	r3, r2
 8003268:	ee07 3a90 	vmov	s15, r3
 800326c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003270:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8003328 <HAL_FDCAN_RxFifo0Callback+0x130>
 8003274:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003278:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800327c:	4b35      	ldr	r3, [pc, #212]	; (8003354 <HAL_FDCAN_RxFifo0Callback+0x15c>)
 800327e:	edc3 7a00 	vstr	s15, [r3]
					TxWriteMsg1_isReturn = 1;
 8003282:	4b33      	ldr	r3, [pc, #204]	; (8003350 <HAL_FDCAN_RxFifo0Callback+0x158>)
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
 8003288:	e040      	b.n	800330c <HAL_FDCAN_RxFifo0Callback+0x114>
				}
				// read speed
				else if (RxData1[3] == 0xE4){
 800328a:	4b2e      	ldr	r3, [pc, #184]	; (8003344 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 800328c:	78db      	ldrb	r3, [r3, #3]
 800328e:	2be4      	cmp	r3, #228	; 0xe4
 8003290:	d11f      	bne.n	80032d2 <HAL_FDCAN_RxFifo0Callback+0xda>
					RightMotor_SpeedFeedback = -(((int16_t)((RxData1[6]<<8) | (RxData1[7])) / 8192.0) * 3000.0);
 8003292:	4b2c      	ldr	r3, [pc, #176]	; (8003344 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8003294:	799b      	ldrb	r3, [r3, #6]
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	b21a      	sxth	r2, r3
 800329a:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 800329c:	79db      	ldrb	r3, [r3, #7]
 800329e:	b21b      	sxth	r3, r3
 80032a0:	4313      	orrs	r3, r2
 80032a2:	b21b      	sxth	r3, r3
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80032ac:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8003330 <HAL_FDCAN_RxFifo0Callback+0x138>
 80032b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80032b4:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8003338 <HAL_FDCAN_RxFifo0Callback+0x140>
 80032b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80032bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032c0:	eef1 7a67 	vneg.f32	s15, s15
 80032c4:	4b24      	ldr	r3, [pc, #144]	; (8003358 <HAL_FDCAN_RxFifo0Callback+0x160>)
 80032c6:	edc3 7a00 	vstr	s15, [r3]
					TxWriteMsg1_isReturn = 1;
 80032ca:	4b21      	ldr	r3, [pc, #132]	; (8003350 <HAL_FDCAN_RxFifo0Callback+0x158>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
 80032d0:	e01c      	b.n	800330c <HAL_FDCAN_RxFifo0Callback+0x114>
				}
				// read position
				else if (RxData1[3] == 0xE8){
 80032d2:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 80032d4:	78db      	ldrb	r3, [r3, #3]
 80032d6:	2be8      	cmp	r3, #232	; 0xe8
 80032d8:	d118      	bne.n	800330c <HAL_FDCAN_RxFifo0Callback+0x114>
					RightMotor_PulseFeedback = -((RxData1[4]<<24) | (RxData1[5]<<16) | (RxData1[6]<<8) | (RxData1[7]));
 80032da:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 80032dc:	791b      	ldrb	r3, [r3, #4]
 80032de:	061a      	lsls	r2, r3, #24
 80032e0:	4b18      	ldr	r3, [pc, #96]	; (8003344 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 80032e2:	795b      	ldrb	r3, [r3, #5]
 80032e4:	041b      	lsls	r3, r3, #16
 80032e6:	431a      	orrs	r2, r3
 80032e8:	4b16      	ldr	r3, [pc, #88]	; (8003344 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 80032ea:	799b      	ldrb	r3, [r3, #6]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	4313      	orrs	r3, r2
 80032f0:	4a14      	ldr	r2, [pc, #80]	; (8003344 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 80032f2:	79d2      	ldrb	r2, [r2, #7]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	425b      	negs	r3, r3
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003300:	4b16      	ldr	r3, [pc, #88]	; (800335c <HAL_FDCAN_RxFifo0Callback+0x164>)
 8003302:	edc3 7a00 	vstr	s15, [r3]
					TxWriteMsg1_isReturn = 1;
 8003306:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_FDCAN_RxFifo0Callback+0x158>)
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
//			else if (RxData1[3] == 0x21){
//				RightMotor_CurrentFeedback = ((RxData1[4]<<8) | (RxData1[5])) / 100.0;
//				RightMotor_SpeedFeedback = (((RxData1[6]<<8) | (RxData1[7])) / 8192.0) * 3000.0;
//			}
//		}
		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800330c:	2200      	movs	r2, #0
 800330e:	2101      	movs	r1, #1
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f002 fa2f 	bl	8005774 <HAL_FDCAN_ActivateNotification>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_FDCAN_RxFifo0Callback+0x128>
		{
			/* Reception Error */
			Error_Handler();
 800331c:	f000 fb98 	bl	8003a50 <Error_Handler>
		}
	}
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	00000000 	.word	0x00000000
 800332c:	40590000 	.word	0x40590000
 8003330:	00000000 	.word	0x00000000
 8003334:	40c00000 	.word	0x40c00000
 8003338:	00000000 	.word	0x00000000
 800333c:	40a77000 	.word	0x40a77000
 8003340:	24000be4 	.word	0x24000be4
 8003344:	24000b14 	.word	0x24000b14
 8003348:	24000aec 	.word	0x24000aec
 800334c:	24000018 	.word	0x24000018
 8003350:	24000b70 	.word	0x24000b70
 8003354:	24000b7c 	.word	0x24000b7c
 8003358:	24000b78 	.word	0x24000b78
 800335c:	24000b74 	.word	0x24000b74

08003360 <HAL_FDCAN_RxFifo1Callback>:
// FDCAN2 Callback
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
	error = 10;
 800336a:	4b4f      	ldr	r3, [pc, #316]	; (80034a8 <HAL_FDCAN_RxFifo1Callback+0x148>)
 800336c:	220a      	movs	r2, #10
 800336e:	701a      	strb	r2, [r3, #0]
	if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	f003 0310 	and.w	r3, r3, #16
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8083 	beq.w	8003482 <HAL_FDCAN_RxFifo1Callback+0x122>
	{
		/* Retreive Rx message from RX FIFO1 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader2, RxData2) != HAL_OK)
 800337c:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <HAL_FDCAN_RxFifo1Callback+0x14c>)
 800337e:	4a4c      	ldr	r2, [pc, #304]	; (80034b0 <HAL_FDCAN_RxFifo1Callback+0x150>)
 8003380:	2141      	movs	r1, #65	; 0x41
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f002 f888 	bl	8005498 <HAL_FDCAN_GetRxMessage>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_FDCAN_RxFifo1Callback+0x32>
		{
			/* Reception Error */
			Error_Handler();
 800338e:	f000 fb5f 	bl	8003a50 <Error_Handler>
		}
		// Check if Rx message is return message
		if (RxData2[1] == 0xDB){
 8003392:	4b46      	ldr	r3, [pc, #280]	; (80034ac <HAL_FDCAN_RxFifo1Callback+0x14c>)
 8003394:	785b      	ldrb	r3, [r3, #1]
 8003396:	2bdb      	cmp	r3, #219	; 0xdb
 8003398:	d169      	bne.n	800346e <HAL_FDCAN_RxFifo1Callback+0x10e>
//			TxWriteMsg2_isReturn = compareTxRxMessage(TxData2, RxData2);
			// Check if Rx message is Tx write command return message
			if (TxData2[1] == 0xDA){
 800339a:	4b46      	ldr	r3, [pc, #280]	; (80034b4 <HAL_FDCAN_RxFifo1Callback+0x154>)
 800339c:	785b      	ldrb	r3, [r3, #1]
 800339e:	2bda      	cmp	r3, #218	; 0xda
 80033a0:	d108      	bne.n	80033b4 <HAL_FDCAN_RxFifo1Callback+0x54>
				TxWriteMsg2_isReturn = compareTxRxMessage(TxData2, RxData2);
 80033a2:	4942      	ldr	r1, [pc, #264]	; (80034ac <HAL_FDCAN_RxFifo1Callback+0x14c>)
 80033a4:	4843      	ldr	r0, [pc, #268]	; (80034b4 <HAL_FDCAN_RxFifo1Callback+0x154>)
 80033a6:	f000 fafb 	bl	80039a0 <compareTxRxMessage>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b42      	ldr	r3, [pc, #264]	; (80034b8 <HAL_FDCAN_RxFifo1Callback+0x158>)
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	e05c      	b.n	800346e <HAL_FDCAN_RxFifo1Callback+0x10e>
			}
			// Check if Rx message is Tx read command return message
			else if ((TxData2[1] == 0xDC)){
 80033b4:	4b3f      	ldr	r3, [pc, #252]	; (80034b4 <HAL_FDCAN_RxFifo1Callback+0x154>)
 80033b6:	785b      	ldrb	r3, [r3, #1]
 80033b8:	2bdc      	cmp	r3, #220	; 0xdc
 80033ba:	d158      	bne.n	800346e <HAL_FDCAN_RxFifo1Callback+0x10e>
				// read current
				if (RxData2[3] == 0xE2){
 80033bc:	4b3b      	ldr	r3, [pc, #236]	; (80034ac <HAL_FDCAN_RxFifo1Callback+0x14c>)
 80033be:	78db      	ldrb	r3, [r3, #3]
 80033c0:	2be2      	cmp	r3, #226	; 0xe2
 80033c2:	d116      	bne.n	80033f2 <HAL_FDCAN_RxFifo1Callback+0x92>
					LeftMotor_CurrentFeedback = ((RxData2[6]<<8) | (RxData2[7])) / 100.0;
 80033c4:	4b39      	ldr	r3, [pc, #228]	; (80034ac <HAL_FDCAN_RxFifo1Callback+0x14c>)
 80033c6:	799b      	ldrb	r3, [r3, #6]
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	4a38      	ldr	r2, [pc, #224]	; (80034ac <HAL_FDCAN_RxFifo1Callback+0x14c>)
 80033cc:	79d2      	ldrb	r2, [r2, #7]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80033d8:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8003490 <HAL_FDCAN_RxFifo1Callback+0x130>
 80033dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80033e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80033e4:	4b35      	ldr	r3, [pc, #212]	; (80034bc <HAL_FDCAN_RxFifo1Callback+0x15c>)
 80033e6:	edc3 7a00 	vstr	s15, [r3]
					TxWriteMsg2_isReturn = 1;
 80033ea:	4b33      	ldr	r3, [pc, #204]	; (80034b8 <HAL_FDCAN_RxFifo1Callback+0x158>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	e03d      	b.n	800346e <HAL_FDCAN_RxFifo1Callback+0x10e>
				}
				// read speed
				else if (RxData2[3] == 0xE4){
 80033f2:	4b2e      	ldr	r3, [pc, #184]	; (80034ac <HAL_FDCAN_RxFifo1Callback+0x14c>)
 80033f4:	78db      	ldrb	r3, [r3, #3]
 80033f6:	2be4      	cmp	r3, #228	; 0xe4
 80033f8:	d11d      	bne.n	8003436 <HAL_FDCAN_RxFifo1Callback+0xd6>
					LeftMotor_SpeedFeedback = ((int16_t)((RxData2[6]<<8) | (RxData2[7])) / 8192.0) * 3000.0;
 80033fa:	4b2c      	ldr	r3, [pc, #176]	; (80034ac <HAL_FDCAN_RxFifo1Callback+0x14c>)
 80033fc:	799b      	ldrb	r3, [r3, #6]
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	b21a      	sxth	r2, r3
 8003402:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <HAL_FDCAN_RxFifo1Callback+0x14c>)
 8003404:	79db      	ldrb	r3, [r3, #7]
 8003406:	b21b      	sxth	r3, r3
 8003408:	4313      	orrs	r3, r2
 800340a:	b21b      	sxth	r3, r3
 800340c:	ee07 3a90 	vmov	s15, r3
 8003410:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003414:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8003498 <HAL_FDCAN_RxFifo1Callback+0x138>
 8003418:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800341c:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80034a0 <HAL_FDCAN_RxFifo1Callback+0x140>
 8003420:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003424:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003428:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <HAL_FDCAN_RxFifo1Callback+0x160>)
 800342a:	edc3 7a00 	vstr	s15, [r3]
					TxWriteMsg2_isReturn = 1;
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <HAL_FDCAN_RxFifo1Callback+0x158>)
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
 8003434:	e01b      	b.n	800346e <HAL_FDCAN_RxFifo1Callback+0x10e>
				}
				// read position
				else if (RxData2[3] == 0xE8){
 8003436:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <HAL_FDCAN_RxFifo1Callback+0x14c>)
 8003438:	78db      	ldrb	r3, [r3, #3]
 800343a:	2be8      	cmp	r3, #232	; 0xe8
 800343c:	d117      	bne.n	800346e <HAL_FDCAN_RxFifo1Callback+0x10e>
					LeftMotor_PulseFeedback = (RxData2[4]<<24) | (RxData2[5]<<16) | (RxData2[6]<<8) | (RxData2[7]);
 800343e:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <HAL_FDCAN_RxFifo1Callback+0x14c>)
 8003440:	791b      	ldrb	r3, [r3, #4]
 8003442:	061a      	lsls	r2, r3, #24
 8003444:	4b19      	ldr	r3, [pc, #100]	; (80034ac <HAL_FDCAN_RxFifo1Callback+0x14c>)
 8003446:	795b      	ldrb	r3, [r3, #5]
 8003448:	041b      	lsls	r3, r3, #16
 800344a:	431a      	orrs	r2, r3
 800344c:	4b17      	ldr	r3, [pc, #92]	; (80034ac <HAL_FDCAN_RxFifo1Callback+0x14c>)
 800344e:	799b      	ldrb	r3, [r3, #6]
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	4313      	orrs	r3, r2
 8003454:	4a15      	ldr	r2, [pc, #84]	; (80034ac <HAL_FDCAN_RxFifo1Callback+0x14c>)
 8003456:	79d2      	ldrb	r2, [r2, #7]
 8003458:	4313      	orrs	r3, r2
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003462:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <HAL_FDCAN_RxFifo1Callback+0x164>)
 8003464:	edc3 7a00 	vstr	s15, [r3]
					TxWriteMsg2_isReturn = 1;
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <HAL_FDCAN_RxFifo1Callback+0x158>)
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
//			else if (RxData2[3] == 0x21){
//				LeftMotor_CurrentFeedback = ((RxData2[4]<<8) | (RxData2[5])) / 100.0;
//				LeftMotor_SpeedFeedback = (((RxData2[6]<<8) | (RxData2[7])) / 8192.0) * 3000.0;
//			}
//		}
		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 800346e:	2200      	movs	r2, #0
 8003470:	2110      	movs	r1, #16
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f002 f97e 	bl	8005774 <HAL_FDCAN_ActivateNotification>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_FDCAN_RxFifo1Callback+0x122>
		{
			/* Reception Error */
			Error_Handler();
 800347e:	f000 fae7 	bl	8003a50 <Error_Handler>
		}
	}
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	f3af 8000 	nop.w
 8003490:	00000000 	.word	0x00000000
 8003494:	40590000 	.word	0x40590000
 8003498:	00000000 	.word	0x00000000
 800349c:	40c00000 	.word	0x40c00000
 80034a0:	00000000 	.word	0x00000000
 80034a4:	40a77000 	.word	0x40a77000
 80034a8:	24000be4 	.word	0x24000be4
 80034ac:	24000b68 	.word	0x24000b68
 80034b0:	24000b40 	.word	0x24000b40
 80034b4:	24000020 	.word	0x24000020
 80034b8:	24000b71 	.word	0x24000b71
 80034bc:	24000b88 	.word	0x24000b88
 80034c0:	24000b84 	.word	0x24000b84
 80034c4:	24000b80 	.word	0x24000b80

080034c8 <BothMotor_Set_SpeedMode>:
	TxWriteMsg2_isReturn = 0;
	while (!TxWriteMsg2_isReturn);
}

void BothMotor_Set_SpeedMode(float initial_right_speed_rpm, float initial_left_speed_rpm, uint8_t acc_time, uint8_t dec_time)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80034d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80034d6:	4603      	mov	r3, r0
 80034d8:	460a      	mov	r2, r1
 80034da:	71fb      	strb	r3, [r7, #7]
 80034dc:	4613      	mov	r3, r2
 80034de:	71bb      	strb	r3, [r7, #6]
	// Clear Tx data
	TxData_Clear(TxData1);
 80034e0:	482c      	ldr	r0, [pc, #176]	; (8003594 <BothMotor_Set_SpeedMode+0xcc>)
 80034e2:	f000 fa3b 	bl	800395c <TxData_Clear>
	TxData_Clear(TxData2);
 80034e6:	482c      	ldr	r0, [pc, #176]	; (8003598 <BothMotor_Set_SpeedMode+0xd0>)
 80034e8:	f000 fa38 	bl	800395c <TxData_Clear>

	// Set Working mode to Speed mode for right motor
	TxData1[3] = 0x19;		// internal address
 80034ec:	4b29      	ldr	r3, [pc, #164]	; (8003594 <BothMotor_Set_SpeedMode+0xcc>)
 80034ee:	2219      	movs	r2, #25
 80034f0:	70da      	strb	r2, [r3, #3]
	TxData1[7] = 0x2F;		// set speed mode value
 80034f2:	4b28      	ldr	r3, [pc, #160]	; (8003594 <BothMotor_Set_SpeedMode+0xcc>)
 80034f4:	222f      	movs	r2, #47	; 0x2f
 80034f6:	71da      	strb	r2, [r3, #7]
	// Set Working mode to Speed mode for left motor
	TxData2[3] = 0x19;		// internal address
 80034f8:	4b27      	ldr	r3, [pc, #156]	; (8003598 <BothMotor_Set_SpeedMode+0xd0>)
 80034fa:	2219      	movs	r2, #25
 80034fc:	70da      	strb	r2, [r3, #3]
	TxData2[7] = 0x2F;		// set speed mode value
 80034fe:	4b26      	ldr	r3, [pc, #152]	; (8003598 <BothMotor_Set_SpeedMode+0xd0>)
 8003500:	222f      	movs	r2, #47	; 0x2f
 8003502:	71da      	strb	r2, [r3, #7]
	// Sent command to ZLAC706-CAN motor driver
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1) != HAL_OK)	{Error_Handler();}	// declare more than 1
 8003504:	4a23      	ldr	r2, [pc, #140]	; (8003594 <BothMotor_Set_SpeedMode+0xcc>)
 8003506:	4925      	ldr	r1, [pc, #148]	; (800359c <BothMotor_Set_SpeedMode+0xd4>)
 8003508:	4825      	ldr	r0, [pc, #148]	; (80035a0 <BothMotor_Set_SpeedMode+0xd8>)
 800350a:	f001 ff69 	bl	80053e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <BothMotor_Set_SpeedMode+0x50>
 8003514:	f000 fa9c 	bl	8003a50 <Error_Handler>
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2) != HAL_OK)	{Error_Handler();}
 8003518:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <BothMotor_Set_SpeedMode+0xd0>)
 800351a:	4922      	ldr	r1, [pc, #136]	; (80035a4 <BothMotor_Set_SpeedMode+0xdc>)
 800351c:	4822      	ldr	r0, [pc, #136]	; (80035a8 <BothMotor_Set_SpeedMode+0xe0>)
 800351e:	f001 ff5f 	bl	80053e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <BothMotor_Set_SpeedMode+0x64>
 8003528:	f000 fa92 	bl	8003a50 <Error_Handler>

	// Set Acceleration and Deceleration for right motor
	TxData1[3] = 0x13;		// internal address
 800352c:	4b19      	ldr	r3, [pc, #100]	; (8003594 <BothMotor_Set_SpeedMode+0xcc>)
 800352e:	2213      	movs	r2, #19
 8003530:	70da      	strb	r2, [r3, #3]
	TxData1[6] = acc_time;	// set acceleration = acc_time x 100ms
 8003532:	4a18      	ldr	r2, [pc, #96]	; (8003594 <BothMotor_Set_SpeedMode+0xcc>)
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	7193      	strb	r3, [r2, #6]
	TxData1[7] = dec_time;	// set deceleration = dec_time x 100ms
 8003538:	4a16      	ldr	r2, [pc, #88]	; (8003594 <BothMotor_Set_SpeedMode+0xcc>)
 800353a:	79bb      	ldrb	r3, [r7, #6]
 800353c:	71d3      	strb	r3, [r2, #7]
	// Set Acceleration and Deceleration for left motor
	TxData2[3] = 0x13;		// internal address
 800353e:	4b16      	ldr	r3, [pc, #88]	; (8003598 <BothMotor_Set_SpeedMode+0xd0>)
 8003540:	2213      	movs	r2, #19
 8003542:	70da      	strb	r2, [r3, #3]
	TxData2[6] = acc_time;	// set acceleration = acc_time x 100ms
 8003544:	4a14      	ldr	r2, [pc, #80]	; (8003598 <BothMotor_Set_SpeedMode+0xd0>)
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	7193      	strb	r3, [r2, #6]
	TxData2[7] = dec_time;	// set deceleration = dec_time x 100ms
 800354a:	4a13      	ldr	r2, [pc, #76]	; (8003598 <BothMotor_Set_SpeedMode+0xd0>)
 800354c:	79bb      	ldrb	r3, [r7, #6]
 800354e:	71d3      	strb	r3, [r2, #7]
	// Sent command to ZLAC706-CAN motor driver
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1) != HAL_OK)	{Error_Handler();}
 8003550:	4a10      	ldr	r2, [pc, #64]	; (8003594 <BothMotor_Set_SpeedMode+0xcc>)
 8003552:	4912      	ldr	r1, [pc, #72]	; (800359c <BothMotor_Set_SpeedMode+0xd4>)
 8003554:	4812      	ldr	r0, [pc, #72]	; (80035a0 <BothMotor_Set_SpeedMode+0xd8>)
 8003556:	f001 ff43 	bl	80053e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <BothMotor_Set_SpeedMode+0x9c>
 8003560:	f000 fa76 	bl	8003a50 <Error_Handler>
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2) != HAL_OK)	{Error_Handler();}
 8003564:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <BothMotor_Set_SpeedMode+0xd0>)
 8003566:	490f      	ldr	r1, [pc, #60]	; (80035a4 <BothMotor_Set_SpeedMode+0xdc>)
 8003568:	480f      	ldr	r0, [pc, #60]	; (80035a8 <BothMotor_Set_SpeedMode+0xe0>)
 800356a:	f001 ff39 	bl	80053e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <BothMotor_Set_SpeedMode+0xb0>
 8003574:	f000 fa6c 	bl	8003a50 <Error_Handler>

	Motor_Set_TargetSpeed(initial_right_speed_rpm, initial_left_speed_rpm);
 8003578:	edd7 0a02 	vldr	s1, [r7, #8]
 800357c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003580:	f000 f816 	bl	80035b0 <Motor_Set_TargetSpeed>
	BothMotor_Enable();
 8003584:	f000 f8be 	bl	8003704 <BothMotor_Enable>
	BothMotor_EmergencyBrake();
 8003588:	f000 f8f2 	bl	8003770 <BothMotor_EmergencyBrake>
}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	24000018 	.word	0x24000018
 8003598:	24000020 	.word	0x24000020
 800359c:	24000ac8 	.word	0x24000ac8
 80035a0:	240003bc 	.word	0x240003bc
 80035a4:	24000b1c 	.word	0x24000b1c
 80035a8:	2400045c 	.word	0x2400045c
 80035ac:	00000000 	.word	0x00000000

080035b0 <Motor_Set_TargetSpeed>:

void Motor_Set_TargetSpeed(float right_speed_rpm, float left_speed_rpm)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80035ba:	edc7 0a00 	vstr	s1, [r7]
	// Clear Tx data
	TxData_Clear(TxData1);
 80035be:	484a      	ldr	r0, [pc, #296]	; (80036e8 <Motor_Set_TargetSpeed+0x138>)
 80035c0:	f000 f9cc 	bl	800395c <TxData_Clear>
	TxData_Clear(TxData2);
 80035c4:	4849      	ldr	r0, [pc, #292]	; (80036ec <Motor_Set_TargetSpeed+0x13c>)
 80035c6:	f000 f9c9 	bl	800395c <TxData_Clear>

	// Set Right motor target speed
	TxData1[3] = 0x11;		// internal address
 80035ca:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <Motor_Set_TargetSpeed+0x138>)
 80035cc:	2211      	movs	r2, #17
 80035ce:	70da      	strb	r2, [r3, #3]
	uint32_t set_value = (fabs(right_speed_rpm) * 8192.0) / 3000;	// calculate 32 bit set value from actual speed
 80035d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80035d4:	eef0 7ae7 	vabs.f32	s15, s15
 80035d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035dc:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 80036d8 <Motor_Set_TargetSpeed+0x128>
 80035e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80035e4:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 80036e0 <Motor_Set_TargetSpeed+0x130>
 80035e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80035ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035f0:	ee17 3a90 	vmov	r3, s15
 80035f4:	60fb      	str	r3, [r7, #12]
	if (right_speed_rpm >= 0){
 80035f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80035fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003602:	db02      	blt.n	800360a <Motor_Set_TargetSpeed+0x5a>
		set_value = ~set_value + 1;	// reverse (two complement)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	425b      	negs	r3, r3
 8003608:	60fb      	str	r3, [r7, #12]
	} else {
		set_value = set_value;	// forward
	}
	TxData1[4] = (set_value >> 24) & 0xFF;	// set Byte4
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	0e1b      	lsrs	r3, r3, #24
 800360e:	b2da      	uxtb	r2, r3
 8003610:	4b35      	ldr	r3, [pc, #212]	; (80036e8 <Motor_Set_TargetSpeed+0x138>)
 8003612:	711a      	strb	r2, [r3, #4]
	TxData1[5] = (set_value >> 16) & 0xFF; 	// set Byte5
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	0c1b      	lsrs	r3, r3, #16
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4b33      	ldr	r3, [pc, #204]	; (80036e8 <Motor_Set_TargetSpeed+0x138>)
 800361c:	715a      	strb	r2, [r3, #5]
	TxData1[6] = (set_value >> 8) & 0xFF;	// set Byte6
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	b2da      	uxtb	r2, r3
 8003624:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <Motor_Set_TargetSpeed+0x138>)
 8003626:	719a      	strb	r2, [r3, #6]
	TxData1[7] = set_value & 0xFF;			// set Byte7
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	4b2e      	ldr	r3, [pc, #184]	; (80036e8 <Motor_Set_TargetSpeed+0x138>)
 800362e:	71da      	strb	r2, [r3, #7]

	// Set Left motor target speed
	TxData2[3] = 0x11;		// internal address
 8003630:	4b2e      	ldr	r3, [pc, #184]	; (80036ec <Motor_Set_TargetSpeed+0x13c>)
 8003632:	2211      	movs	r2, #17
 8003634:	70da      	strb	r2, [r3, #3]
	set_value = (fabs(left_speed_rpm) * 8192.0) / 3000;	// calculate 32 bit set value from actual speed
 8003636:	edd7 7a00 	vldr	s15, [r7]
 800363a:	eef0 7ae7 	vabs.f32	s15, s15
 800363e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003642:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80036d8 <Motor_Set_TargetSpeed+0x128>
 8003646:	ee27 6b06 	vmul.f64	d6, d7, d6
 800364a:	ed9f 5b25 	vldr	d5, [pc, #148]	; 80036e0 <Motor_Set_TargetSpeed+0x130>
 800364e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003652:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003656:	ee17 3a90 	vmov	r3, s15
 800365a:	60fb      	str	r3, [r7, #12]
	if (left_speed_rpm >= 0){
 800365c:	edd7 7a00 	vldr	s15, [r7]
 8003660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003668:	da02      	bge.n	8003670 <Motor_Set_TargetSpeed+0xc0>
		set_value = set_value;	// forward
	} else {
		set_value = ~set_value + 1;	// reverse (two complement)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	425b      	negs	r3, r3
 800366e:	60fb      	str	r3, [r7, #12]
	}
	TxData2[4] = (set_value >> 24) & 0xFF;	// set Byte4
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	0e1b      	lsrs	r3, r3, #24
 8003674:	b2da      	uxtb	r2, r3
 8003676:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <Motor_Set_TargetSpeed+0x13c>)
 8003678:	711a      	strb	r2, [r3, #4]
	TxData2[5] = (set_value >> 16) & 0xFF; 	// set Byte5
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	0c1b      	lsrs	r3, r3, #16
 800367e:	b2da      	uxtb	r2, r3
 8003680:	4b1a      	ldr	r3, [pc, #104]	; (80036ec <Motor_Set_TargetSpeed+0x13c>)
 8003682:	715a      	strb	r2, [r3, #5]
	TxData2[6] = (set_value >> 8) & 0xFF;	// set Byte6
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	b2da      	uxtb	r2, r3
 800368a:	4b18      	ldr	r3, [pc, #96]	; (80036ec <Motor_Set_TargetSpeed+0x13c>)
 800368c:	719a      	strb	r2, [r3, #6]
	TxData2[7] = set_value & 0xFF;			// set Byte7
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4b16      	ldr	r3, [pc, #88]	; (80036ec <Motor_Set_TargetSpeed+0x13c>)
 8003694:	71da      	strb	r2, [r3, #7]

	// Sent command to ZLAC706-CAN motor driver
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1) != HAL_OK)	{error = 2; Error_Handler();}
 8003696:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <Motor_Set_TargetSpeed+0x138>)
 8003698:	4915      	ldr	r1, [pc, #84]	; (80036f0 <Motor_Set_TargetSpeed+0x140>)
 800369a:	4816      	ldr	r0, [pc, #88]	; (80036f4 <Motor_Set_TargetSpeed+0x144>)
 800369c:	f001 fea0 	bl	80053e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <Motor_Set_TargetSpeed+0x100>
 80036a6:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <Motor_Set_TargetSpeed+0x148>)
 80036a8:	2202      	movs	r2, #2
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	f000 f9d0 	bl	8003a50 <Error_Handler>
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2) != HAL_OK)	{error = 3; Error_Handler();}
 80036b0:	4a0e      	ldr	r2, [pc, #56]	; (80036ec <Motor_Set_TargetSpeed+0x13c>)
 80036b2:	4912      	ldr	r1, [pc, #72]	; (80036fc <Motor_Set_TargetSpeed+0x14c>)
 80036b4:	4812      	ldr	r0, [pc, #72]	; (8003700 <Motor_Set_TargetSpeed+0x150>)
 80036b6:	f001 fe93 	bl	80053e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d004      	beq.n	80036ca <Motor_Set_TargetSpeed+0x11a>
 80036c0:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <Motor_Set_TargetSpeed+0x148>)
 80036c2:	2203      	movs	r2, #3
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	f000 f9c3 	bl	8003a50 <Error_Handler>
}
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	f3af 8000 	nop.w
 80036d8:	00000000 	.word	0x00000000
 80036dc:	40c00000 	.word	0x40c00000
 80036e0:	00000000 	.word	0x00000000
 80036e4:	40a77000 	.word	0x40a77000
 80036e8:	24000018 	.word	0x24000018
 80036ec:	24000020 	.word	0x24000020
 80036f0:	24000ac8 	.word	0x24000ac8
 80036f4:	240003bc 	.word	0x240003bc
 80036f8:	24000be4 	.word	0x24000be4
 80036fc:	24000b1c 	.word	0x24000b1c
 8003700:	2400045c 	.word	0x2400045c

08003704 <BothMotor_Enable>:

void BothMotor_Enable()
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
	// Clear Tx data
	TxData_Clear(TxData1);
 8003708:	4813      	ldr	r0, [pc, #76]	; (8003758 <BothMotor_Enable+0x54>)
 800370a:	f000 f927 	bl	800395c <TxData_Clear>
	TxData_Clear(TxData2);
 800370e:	4813      	ldr	r0, [pc, #76]	; (800375c <BothMotor_Enable+0x58>)
 8003710:	f000 f924 	bl	800395c <TxData_Clear>

	// Enable the right motor
	TxData1[3] = 0x10;	// internal address
 8003714:	4b10      	ldr	r3, [pc, #64]	; (8003758 <BothMotor_Enable+0x54>)
 8003716:	2210      	movs	r2, #16
 8003718:	70da      	strb	r2, [r3, #3]
	TxData1[7] = 0x1F;	// set enable motor value
 800371a:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <BothMotor_Enable+0x54>)
 800371c:	221f      	movs	r2, #31
 800371e:	71da      	strb	r2, [r3, #7]
	// Enable the left motor
	TxData2[3] = 0x10;	// internal address
 8003720:	4b0e      	ldr	r3, [pc, #56]	; (800375c <BothMotor_Enable+0x58>)
 8003722:	2210      	movs	r2, #16
 8003724:	70da      	strb	r2, [r3, #3]
	TxData2[7] = 0x1F;	// set enable motor value
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <BothMotor_Enable+0x58>)
 8003728:	221f      	movs	r2, #31
 800372a:	71da      	strb	r2, [r3, #7]
	// Sent command to ZLAC706-CAN motor driver
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1) != HAL_OK)	{Error_Handler();}
 800372c:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <BothMotor_Enable+0x54>)
 800372e:	490c      	ldr	r1, [pc, #48]	; (8003760 <BothMotor_Enable+0x5c>)
 8003730:	480c      	ldr	r0, [pc, #48]	; (8003764 <BothMotor_Enable+0x60>)
 8003732:	f001 fe55 	bl	80053e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <BothMotor_Enable+0x3c>
 800373c:	f000 f988 	bl	8003a50 <Error_Handler>
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2) != HAL_OK)	{Error_Handler();}
 8003740:	4a06      	ldr	r2, [pc, #24]	; (800375c <BothMotor_Enable+0x58>)
 8003742:	4909      	ldr	r1, [pc, #36]	; (8003768 <BothMotor_Enable+0x64>)
 8003744:	4809      	ldr	r0, [pc, #36]	; (800376c <BothMotor_Enable+0x68>)
 8003746:	f001 fe4b 	bl	80053e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <BothMotor_Enable+0x50>
 8003750:	f000 f97e 	bl	8003a50 <Error_Handler>
}
 8003754:	bf00      	nop
 8003756:	bd80      	pop	{r7, pc}
 8003758:	24000018 	.word	0x24000018
 800375c:	24000020 	.word	0x24000020
 8003760:	24000ac8 	.word	0x24000ac8
 8003764:	240003bc 	.word	0x240003bc
 8003768:	24000b1c 	.word	0x24000b1c
 800376c:	2400045c 	.word	0x2400045c

08003770 <BothMotor_EmergencyBrake>:
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1) != HAL_OK)	{Error_Handler();}
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2) != HAL_OK)	{Error_Handler();}
}

void BothMotor_EmergencyBrake()
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
	// Clear Tx data
	TxData_Clear(TxData1);
 8003774:	4813      	ldr	r0, [pc, #76]	; (80037c4 <BothMotor_EmergencyBrake+0x54>)
 8003776:	f000 f8f1 	bl	800395c <TxData_Clear>
	TxData_Clear(TxData2);
 800377a:	4813      	ldr	r0, [pc, #76]	; (80037c8 <BothMotor_EmergencyBrake+0x58>)
 800377c:	f000 f8ee 	bl	800395c <TxData_Clear>

	// Emergency stop the right motor
	TxData1[3] = 0x30;	// internal address
 8003780:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <BothMotor_EmergencyBrake+0x54>)
 8003782:	2230      	movs	r2, #48	; 0x30
 8003784:	70da      	strb	r2, [r3, #3]
	TxData1[7] = 0x1F;	// set emergency stop value
 8003786:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <BothMotor_EmergencyBrake+0x54>)
 8003788:	221f      	movs	r2, #31
 800378a:	71da      	strb	r2, [r3, #7]
	// Emergency stop the left motor
	TxData2[3] = 0x30;	// internal address
 800378c:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <BothMotor_EmergencyBrake+0x58>)
 800378e:	2230      	movs	r2, #48	; 0x30
 8003790:	70da      	strb	r2, [r3, #3]
	TxData2[7] = 0x1F;	// set emergency stop value
 8003792:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <BothMotor_EmergencyBrake+0x58>)
 8003794:	221f      	movs	r2, #31
 8003796:	71da      	strb	r2, [r3, #7]
	// Sent command to ZLAC706-CAN motor driver
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1) != HAL_OK)	{Error_Handler();}
 8003798:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <BothMotor_EmergencyBrake+0x54>)
 800379a:	490c      	ldr	r1, [pc, #48]	; (80037cc <BothMotor_EmergencyBrake+0x5c>)
 800379c:	480c      	ldr	r0, [pc, #48]	; (80037d0 <BothMotor_EmergencyBrake+0x60>)
 800379e:	f001 fe1f 	bl	80053e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <BothMotor_EmergencyBrake+0x3c>
 80037a8:	f000 f952 	bl	8003a50 <Error_Handler>
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2) != HAL_OK)	{Error_Handler();}
 80037ac:	4a06      	ldr	r2, [pc, #24]	; (80037c8 <BothMotor_EmergencyBrake+0x58>)
 80037ae:	4909      	ldr	r1, [pc, #36]	; (80037d4 <BothMotor_EmergencyBrake+0x64>)
 80037b0:	4809      	ldr	r0, [pc, #36]	; (80037d8 <BothMotor_EmergencyBrake+0x68>)
 80037b2:	f001 fe15 	bl	80053e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <BothMotor_EmergencyBrake+0x50>
 80037bc:	f000 f948 	bl	8003a50 <Error_Handler>
}
 80037c0:	bf00      	nop
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	24000018 	.word	0x24000018
 80037c8:	24000020 	.word	0x24000020
 80037cc:	24000ac8 	.word	0x24000ac8
 80037d0:	240003bc 	.word	0x240003bc
 80037d4:	24000b1c 	.word	0x24000b1c
 80037d8:	2400045c 	.word	0x2400045c

080037dc <BothMotor_Get_Speed>:
		}
	}
}

void BothMotor_Get_Speed()
{
 80037dc:	b5b0      	push	{r4, r5, r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
	// Clear Tx data
	TxData_Clear(TxData1);
 80037e2:	4826      	ldr	r0, [pc, #152]	; (800387c <BothMotor_Get_Speed+0xa0>)
 80037e4:	f000 f8ba 	bl	800395c <TxData_Clear>
	TxData_Clear(TxData2);
 80037e8:	4825      	ldr	r0, [pc, #148]	; (8003880 <BothMotor_Get_Speed+0xa4>)
 80037ea:	f000 f8b7 	bl	800395c <TxData_Clear>

	// Get right motor speed
	TxData1[1] = 0xDC;	// set tx read command
 80037ee:	4b23      	ldr	r3, [pc, #140]	; (800387c <BothMotor_Get_Speed+0xa0>)
 80037f0:	22dc      	movs	r2, #220	; 0xdc
 80037f2:	705a      	strb	r2, [r3, #1]
	TxData1[3] = 0xE4;	// internal address
 80037f4:	4b21      	ldr	r3, [pc, #132]	; (800387c <BothMotor_Get_Speed+0xa0>)
 80037f6:	22e4      	movs	r2, #228	; 0xe4
 80037f8:	70da      	strb	r2, [r3, #3]
	// Get left motor speed
	TxData2[1] = 0xDC;	// set tx read command
 80037fa:	4b21      	ldr	r3, [pc, #132]	; (8003880 <BothMotor_Get_Speed+0xa4>)
 80037fc:	22dc      	movs	r2, #220	; 0xdc
 80037fe:	705a      	strb	r2, [r3, #1]
	TxData2[3] = 0xE4;	// internal address
 8003800:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <BothMotor_Get_Speed+0xa4>)
 8003802:	22e4      	movs	r2, #228	; 0xe4
 8003804:	70da      	strb	r2, [r3, #3]
	// Sent command to ZLAC706-CAN motor driver
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1) != HAL_OK)	{Error_Handler();}
 8003806:	4a1d      	ldr	r2, [pc, #116]	; (800387c <BothMotor_Get_Speed+0xa0>)
 8003808:	491e      	ldr	r1, [pc, #120]	; (8003884 <BothMotor_Get_Speed+0xa8>)
 800380a:	481f      	ldr	r0, [pc, #124]	; (8003888 <BothMotor_Get_Speed+0xac>)
 800380c:	f001 fde8 	bl	80053e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <BothMotor_Get_Speed+0x3e>
 8003816:	f000 f91b 	bl	8003a50 <Error_Handler>
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2) != HAL_OK)	{Error_Handler();}
 800381a:	4a19      	ldr	r2, [pc, #100]	; (8003880 <BothMotor_Get_Speed+0xa4>)
 800381c:	491b      	ldr	r1, [pc, #108]	; (800388c <BothMotor_Get_Speed+0xb0>)
 800381e:	481c      	ldr	r0, [pc, #112]	; (8003890 <BothMotor_Get_Speed+0xb4>)
 8003820:	f001 fdde 	bl	80053e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <BothMotor_Get_Speed+0x52>
 800382a:	f000 f911 	bl	8003a50 <Error_Handler>
	// Wait until tx message is received at the rx
	TxWriteMsg1_isReturn = 0;
 800382e:	4b19      	ldr	r3, [pc, #100]	; (8003894 <BothMotor_Get_Speed+0xb8>)
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
	TxWriteMsg2_isReturn = 0;
 8003834:	4b18      	ldr	r3, [pc, #96]	; (8003898 <BothMotor_Get_Speed+0xbc>)
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
	uint64_t timeout = micros();
 800383a:	f000 f8d5 	bl	80039e8 <micros>
 800383e:	e9c7 0100 	strd	r0, r1, [r7]
	while (!(TxWriteMsg1_isReturn && TxWriteMsg2_isReturn)){
 8003842:	e00c      	b.n	800385e <BothMotor_Get_Speed+0x82>
		// 1 ms request timeout
		if (micros() - timeout > 1000){
 8003844:	f000 f8d0 	bl	80039e8 <micros>
 8003848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800384c:	1a84      	subs	r4, r0, r2
 800384e:	eb61 0503 	sbc.w	r5, r1, r3
 8003852:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8003856:	429c      	cmp	r4, r3
 8003858:	f175 0300 	sbcs.w	r3, r5, #0
 800385c:	d208      	bcs.n	8003870 <BothMotor_Get_Speed+0x94>
	while (!(TxWriteMsg1_isReturn && TxWriteMsg2_isReturn)){
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <BothMotor_Get_Speed+0xb8>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0ee      	beq.n	8003844 <BothMotor_Get_Speed+0x68>
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <BothMotor_Get_Speed+0xbc>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0ea      	beq.n	8003844 <BothMotor_Get_Speed+0x68>
			break;
		}
	}
}
 800386e:	e000      	b.n	8003872 <BothMotor_Get_Speed+0x96>
			break;
 8003870:	bf00      	nop
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bdb0      	pop	{r4, r5, r7, pc}
 800387a:	bf00      	nop
 800387c:	24000018 	.word	0x24000018
 8003880:	24000020 	.word	0x24000020
 8003884:	24000ac8 	.word	0x24000ac8
 8003888:	240003bc 	.word	0x240003bc
 800388c:	24000b1c 	.word	0x24000b1c
 8003890:	2400045c 	.word	0x2400045c
 8003894:	24000b70 	.word	0x24000b70
 8003898:	24000b71 	.word	0x24000b71

0800389c <BothMotor_Get_Position>:

void BothMotor_Get_Position()
{
 800389c:	b5b0      	push	{r4, r5, r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
	// Clear Tx data
	TxData_Clear(TxData1);
 80038a2:	4826      	ldr	r0, [pc, #152]	; (800393c <BothMotor_Get_Position+0xa0>)
 80038a4:	f000 f85a 	bl	800395c <TxData_Clear>
	TxData_Clear(TxData2);
 80038a8:	4825      	ldr	r0, [pc, #148]	; (8003940 <BothMotor_Get_Position+0xa4>)
 80038aa:	f000 f857 	bl	800395c <TxData_Clear>

	// Get right motor pulse
	TxData1[1] = 0xDC;	// set tx read command
 80038ae:	4b23      	ldr	r3, [pc, #140]	; (800393c <BothMotor_Get_Position+0xa0>)
 80038b0:	22dc      	movs	r2, #220	; 0xdc
 80038b2:	705a      	strb	r2, [r3, #1]
	TxData1[3] = 0xE8;	// internal address
 80038b4:	4b21      	ldr	r3, [pc, #132]	; (800393c <BothMotor_Get_Position+0xa0>)
 80038b6:	22e8      	movs	r2, #232	; 0xe8
 80038b8:	70da      	strb	r2, [r3, #3]
	// Get left motor pulse
	TxData2[1] = 0xDC;	// set tx read command
 80038ba:	4b21      	ldr	r3, [pc, #132]	; (8003940 <BothMotor_Get_Position+0xa4>)
 80038bc:	22dc      	movs	r2, #220	; 0xdc
 80038be:	705a      	strb	r2, [r3, #1]
	TxData2[3] = 0xE8;	// internal address
 80038c0:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <BothMotor_Get_Position+0xa4>)
 80038c2:	22e8      	movs	r2, #232	; 0xe8
 80038c4:	70da      	strb	r2, [r3, #3]
	// Sent command to ZLAC706-CAN motor driver
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1) != HAL_OK)	{Error_Handler();}
 80038c6:	4a1d      	ldr	r2, [pc, #116]	; (800393c <BothMotor_Get_Position+0xa0>)
 80038c8:	491e      	ldr	r1, [pc, #120]	; (8003944 <BothMotor_Get_Position+0xa8>)
 80038ca:	481f      	ldr	r0, [pc, #124]	; (8003948 <BothMotor_Get_Position+0xac>)
 80038cc:	f001 fd88 	bl	80053e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <BothMotor_Get_Position+0x3e>
 80038d6:	f000 f8bb 	bl	8003a50 <Error_Handler>
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2) != HAL_OK)	{Error_Handler();}
 80038da:	4a19      	ldr	r2, [pc, #100]	; (8003940 <BothMotor_Get_Position+0xa4>)
 80038dc:	491b      	ldr	r1, [pc, #108]	; (800394c <BothMotor_Get_Position+0xb0>)
 80038de:	481c      	ldr	r0, [pc, #112]	; (8003950 <BothMotor_Get_Position+0xb4>)
 80038e0:	f001 fd7e 	bl	80053e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <BothMotor_Get_Position+0x52>
 80038ea:	f000 f8b1 	bl	8003a50 <Error_Handler>
	// Wait until tx message is received at the rx
	TxWriteMsg1_isReturn = 0;
 80038ee:	4b19      	ldr	r3, [pc, #100]	; (8003954 <BothMotor_Get_Position+0xb8>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
	TxWriteMsg2_isReturn = 0;
 80038f4:	4b18      	ldr	r3, [pc, #96]	; (8003958 <BothMotor_Get_Position+0xbc>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	701a      	strb	r2, [r3, #0]
	uint64_t timeout = micros();
 80038fa:	f000 f875 	bl	80039e8 <micros>
 80038fe:	e9c7 0100 	strd	r0, r1, [r7]
	while (!(TxWriteMsg1_isReturn && TxWriteMsg2_isReturn)){
 8003902:	e00c      	b.n	800391e <BothMotor_Get_Position+0x82>
		// 1 ms request timeout
		if (micros() - timeout > 1000){
 8003904:	f000 f870 	bl	80039e8 <micros>
 8003908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800390c:	1a84      	subs	r4, r0, r2
 800390e:	eb61 0503 	sbc.w	r5, r1, r3
 8003912:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8003916:	429c      	cmp	r4, r3
 8003918:	f175 0300 	sbcs.w	r3, r5, #0
 800391c:	d208      	bcs.n	8003930 <BothMotor_Get_Position+0x94>
	while (!(TxWriteMsg1_isReturn && TxWriteMsg2_isReturn)){
 800391e:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <BothMotor_Get_Position+0xb8>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0ee      	beq.n	8003904 <BothMotor_Get_Position+0x68>
 8003926:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <BothMotor_Get_Position+0xbc>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0ea      	beq.n	8003904 <BothMotor_Get_Position+0x68>
			break;
		}
	}
}
 800392e:	e000      	b.n	8003932 <BothMotor_Get_Position+0x96>
			break;
 8003930:	bf00      	nop
}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bdb0      	pop	{r4, r5, r7, pc}
 800393a:	bf00      	nop
 800393c:	24000018 	.word	0x24000018
 8003940:	24000020 	.word	0x24000020
 8003944:	24000ac8 	.word	0x24000ac8
 8003948:	240003bc 	.word	0x240003bc
 800394c:	24000b1c 	.word	0x24000b1c
 8003950:	2400045c 	.word	0x2400045c
 8003954:	24000b70 	.word	0x24000b70
 8003958:	24000b71 	.word	0x24000b71

0800395c <TxData_Clear>:

void TxData_Clear(uint8_t* TxData)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	// reset Tx data to {00, [DA/DC], 00, 00, 00, 00, 00, 00}
	for (int i=0; i<8; i++){
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	e010      	b.n	800398c <TxData_Clear+0x30>
		if (i == 1){
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d105      	bne.n	800397c <TxData_Clear+0x20>
			TxData[i] = 0xDA;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	4413      	add	r3, r2
 8003976:	22da      	movs	r2, #218	; 0xda
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e004      	b.n	8003986 <TxData_Clear+0x2a>
		}
		else {
			TxData[i] = 0;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++){
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3301      	adds	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b07      	cmp	r3, #7
 8003990:	ddeb      	ble.n	800396a <TxData_Clear+0xe>
		}
	}
}
 8003992:	bf00      	nop
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <compareTxRxMessage>:

// compare Tx buffer to Rx buffer after write command
char compareTxRxMessage(uint8_t* TxData,uint8_t* RxData)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
	// compare every element except second element(DA,DB)
	for(int i=0;i<8;i++){
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	e011      	b.n	80039d4 <compareTxRxMessage+0x34>
		if(i != 1){
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d00b      	beq.n	80039ce <compareTxRxMessage+0x2e>
			if(TxData[i] != RxData[i])
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	4413      	add	r3, r2
 80039bc:	781a      	ldrb	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6839      	ldr	r1, [r7, #0]
 80039c2:	440b      	add	r3, r1
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d001      	beq.n	80039ce <compareTxRxMessage+0x2e>
				return 0;	// not equal
 80039ca:	2300      	movs	r3, #0
 80039cc:	e006      	b.n	80039dc <compareTxRxMessage+0x3c>
	for(int i=0;i<8;i++){
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	3301      	adds	r3, #1
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b07      	cmp	r3, #7
 80039d8:	ddea      	ble.n	80039b0 <compareTxRxMessage+0x10>
		}
	}
	return 1;
 80039da:	2301      	movs	r3, #1
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <micros>:

uint64_t micros()
{
 80039e8:	b4b0      	push	{r4, r5, r7}
 80039ea:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <micros+0x2c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	2200      	movs	r2, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	4611      	mov	r1, r2
 80039f8:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <micros+0x30>)
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	1884      	adds	r4, r0, r2
 8003a00:	eb41 0503 	adc.w	r5, r1, r3
 8003a04:	4622      	mov	r2, r4
 8003a06:	462b      	mov	r3, r5
}
 8003a08:	4610      	mov	r0, r2
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bcb0      	pop	{r4, r5, r7}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	24000548 	.word	0x24000548
 8003a18:	24000aa0 	.word	0x24000aa0

08003a1c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a1c:	b4b0      	push	{r4, r5, r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d108      	bne.n	8003a3e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 4294967295;
 8003a2c:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	1e54      	subs	r4, r2, #1
 8003a34:	f143 0500 	adc.w	r5, r3, #0
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003a3a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bcb0      	pop	{r4, r5, r7}
 8003a46:	4770      	bx	lr
 8003a48:	24000548 	.word	0x24000548
 8003a4c:	24000aa0 	.word	0x24000aa0

08003a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a54:	b672      	cpsid	i
}
 8003a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a58:	e7fe      	b.n	8003a58 <Error_Handler+0x8>
	...

08003a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <HAL_MspInit+0x30>)
 8003a64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a68:	4a08      	ldr	r2, [pc, #32]	; (8003a8c <HAL_MspInit+0x30>)
 8003a6a:	f043 0302 	orr.w	r3, r3, #2
 8003a6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <HAL_MspInit+0x30>)
 8003a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	58024400 	.word	0x58024400

08003a90 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08e      	sub	sp, #56	; 0x38
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a59      	ldr	r2, [pc, #356]	; (8003c14 <HAL_ETH_MspInit+0x184>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	f040 80ab 	bne.w	8003c0a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003ab4:	4b58      	ldr	r3, [pc, #352]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003ab6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003aba:	4a57      	ldr	r2, [pc, #348]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003ac4:	4b54      	ldr	r3, [pc, #336]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003ac6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ace:	623b      	str	r3, [r7, #32]
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003ad2:	4b51      	ldr	r3, [pc, #324]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003ad4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ad8:	4a4f      	ldr	r2, [pc, #316]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ade:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003ae2:	4b4d      	ldr	r3, [pc, #308]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003ae4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003af0:	4b49      	ldr	r3, [pc, #292]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003af2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003af6:	4a48      	ldr	r2, [pc, #288]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003afc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003b00:	4b45      	ldr	r3, [pc, #276]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003b02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b0e:	4b42      	ldr	r3, [pc, #264]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b14:	4a40      	ldr	r2, [pc, #256]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003b16:	f043 0304 	orr.w	r3, r3, #4
 8003b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b1e:	4b3e      	ldr	r3, [pc, #248]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b2c:	4b3a      	ldr	r3, [pc, #232]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b32:	4a39      	ldr	r2, [pc, #228]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b3c:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b4a:	4b33      	ldr	r3, [pc, #204]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b50:	4a31      	ldr	r2, [pc, #196]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003b52:	f043 0302 	orr.w	r3, r3, #2
 8003b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b5a:	4b2f      	ldr	r3, [pc, #188]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b68:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b6e:	4a2a      	ldr	r2, [pc, #168]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b78:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <HAL_ETH_MspInit+0x188>)
 8003b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003b86:	2332      	movs	r3, #50	; 0x32
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b92:	2300      	movs	r3, #0
 8003b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b96:	230b      	movs	r3, #11
 8003b98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	481e      	ldr	r0, [pc, #120]	; (8003c1c <HAL_ETH_MspInit+0x18c>)
 8003ba2:	f002 fb63 	bl	800626c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003ba6:	2386      	movs	r3, #134	; 0x86
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003baa:	2302      	movs	r3, #2
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bb6:	230b      	movs	r3, #11
 8003bb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4817      	ldr	r0, [pc, #92]	; (8003c20 <HAL_ETH_MspInit+0x190>)
 8003bc2:	f002 fb53 	bl	800626c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bd8:	230b      	movs	r3, #11
 8003bda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003be0:	4619      	mov	r1, r3
 8003be2:	4810      	ldr	r0, [pc, #64]	; (8003c24 <HAL_ETH_MspInit+0x194>)
 8003be4:	f002 fb42 	bl	800626c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003be8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bfa:	230b      	movs	r3, #11
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c02:	4619      	mov	r1, r3
 8003c04:	4808      	ldr	r0, [pc, #32]	; (8003c28 <HAL_ETH_MspInit+0x198>)
 8003c06:	f002 fb31 	bl	800626c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003c0a:	bf00      	nop
 8003c0c:	3738      	adds	r7, #56	; 0x38
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40028000 	.word	0x40028000
 8003c18:	58024400 	.word	0x58024400
 8003c1c:	58020800 	.word	0x58020800
 8003c20:	58020000 	.word	0x58020000
 8003c24:	58020400 	.word	0x58020400
 8003c28:	58021800 	.word	0x58021800

08003c2c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b0ba      	sub	sp, #232	; 0xe8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	60da      	str	r2, [r3, #12]
 8003c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c44:	f107 0318 	add.w	r3, r7, #24
 8003c48:	22bc      	movs	r2, #188	; 0xbc
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f007 fb65 	bl	800b31c <memset>
  if(hfdcan->Instance==FDCAN1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a5a      	ldr	r2, [pc, #360]	; (8003dc0 <HAL_FDCAN_MspInit+0x194>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d154      	bne.n	8003d06 <HAL_FDCAN_MspInit+0xda>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c60:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c68:	f107 0318 	add.w	r3, r7, #24
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f004 fbf3 	bl	8008458 <HAL_RCCEx_PeriphCLKConfig>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003c78:	f7ff feea 	bl	8003a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003c7c:	4b51      	ldr	r3, [pc, #324]	; (8003dc4 <HAL_FDCAN_MspInit+0x198>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	4a50      	ldr	r2, [pc, #320]	; (8003dc4 <HAL_FDCAN_MspInit+0x198>)
 8003c84:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003c86:	4b4f      	ldr	r3, [pc, #316]	; (8003dc4 <HAL_FDCAN_MspInit+0x198>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d10e      	bne.n	8003cac <HAL_FDCAN_MspInit+0x80>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003c8e:	4b4e      	ldr	r3, [pc, #312]	; (8003dc8 <HAL_FDCAN_MspInit+0x19c>)
 8003c90:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003c94:	4a4c      	ldr	r2, [pc, #304]	; (8003dc8 <HAL_FDCAN_MspInit+0x19c>)
 8003c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003c9e:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <HAL_FDCAN_MspInit+0x19c>)
 8003ca0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cac:	4b46      	ldr	r3, [pc, #280]	; (8003dc8 <HAL_FDCAN_MspInit+0x19c>)
 8003cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cb2:	4a45      	ldr	r2, [pc, #276]	; (8003dc8 <HAL_FDCAN_MspInit+0x19c>)
 8003cb4:	f043 0308 	orr.w	r3, r3, #8
 8003cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cbc:	4b42      	ldr	r3, [pc, #264]	; (8003dc8 <HAL_FDCAN_MspInit+0x19c>)
 8003cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003ce2:	2309      	movs	r3, #9
 8003ce4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ce8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4837      	ldr	r0, [pc, #220]	; (8003dcc <HAL_FDCAN_MspInit+0x1a0>)
 8003cf0:	f002 fabc 	bl	800626c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	2013      	movs	r0, #19
 8003cfa:	f000 fc6c 	bl	80045d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003cfe:	2013      	movs	r0, #19
 8003d00:	f000 fc83 	bl	800460a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8003d04:	e058      	b.n	8003db8 <HAL_FDCAN_MspInit+0x18c>
  else if(hfdcan->Instance==FDCAN2)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a31      	ldr	r2, [pc, #196]	; (8003dd0 <HAL_FDCAN_MspInit+0x1a4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d153      	bne.n	8003db8 <HAL_FDCAN_MspInit+0x18c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d14:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d1c:	f107 0318 	add.w	r3, r7, #24
 8003d20:	4618      	mov	r0, r3
 8003d22:	f004 fb99 	bl	8008458 <HAL_RCCEx_PeriphCLKConfig>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_FDCAN_MspInit+0x104>
      Error_Handler();
 8003d2c:	f7ff fe90 	bl	8003a50 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003d30:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <HAL_FDCAN_MspInit+0x198>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3301      	adds	r3, #1
 8003d36:	4a23      	ldr	r2, [pc, #140]	; (8003dc4 <HAL_FDCAN_MspInit+0x198>)
 8003d38:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003d3a:	4b22      	ldr	r3, [pc, #136]	; (8003dc4 <HAL_FDCAN_MspInit+0x198>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d10e      	bne.n	8003d60 <HAL_FDCAN_MspInit+0x134>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003d42:	4b21      	ldr	r3, [pc, #132]	; (8003dc8 <HAL_FDCAN_MspInit+0x19c>)
 8003d44:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d48:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <HAL_FDCAN_MspInit+0x19c>)
 8003d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003d52:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <HAL_FDCAN_MspInit+0x19c>)
 8003d54:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d60:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <HAL_FDCAN_MspInit+0x19c>)
 8003d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d66:	4a18      	ldr	r2, [pc, #96]	; (8003dc8 <HAL_FDCAN_MspInit+0x19c>)
 8003d68:	f043 0302 	orr.w	r3, r3, #2
 8003d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d70:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <HAL_FDCAN_MspInit+0x19c>)
 8003d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003d7e:	2360      	movs	r3, #96	; 0x60
 8003d80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d84:	2302      	movs	r3, #2
 8003d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d90:	2300      	movs	r3, #0
 8003d92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003d96:	2309      	movs	r3, #9
 8003d98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003da0:	4619      	mov	r1, r3
 8003da2:	480c      	ldr	r0, [pc, #48]	; (8003dd4 <HAL_FDCAN_MspInit+0x1a8>)
 8003da4:	f002 fa62 	bl	800626c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8003da8:	2200      	movs	r2, #0
 8003daa:	2100      	movs	r1, #0
 8003dac:	2014      	movs	r0, #20
 8003dae:	f000 fc12 	bl	80045d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8003db2:	2014      	movs	r0, #20
 8003db4:	f000 fc29 	bl	800460a <HAL_NVIC_EnableIRQ>
}
 8003db8:	bf00      	nop
 8003dba:	37e8      	adds	r7, #232	; 0xe8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	4000a000 	.word	0x4000a000
 8003dc4:	24000c48 	.word	0x24000c48
 8003dc8:	58024400 	.word	0x58024400
 8003dcc:	58020c00 	.word	0x58020c00
 8003dd0:	4000a400 	.word	0x4000a400
 8003dd4:	58020400 	.word	0x58020400

08003dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b0b8      	sub	sp, #224	; 0xe0
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	60da      	str	r2, [r3, #12]
 8003dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003df0:	f107 0310 	add.w	r3, r7, #16
 8003df4:	22bc      	movs	r2, #188	; 0xbc
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f007 fa8f 	bl	800b31c <memset>
  if(hi2c->Instance==I2C1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a25      	ldr	r2, [pc, #148]	; (8003e98 <HAL_I2C_MspInit+0xc0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d142      	bne.n	8003e8e <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003e08:	2308      	movs	r3, #8
 8003e0a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e12:	f107 0310 	add.w	r3, r7, #16
 8003e16:	4618      	mov	r0, r3
 8003e18:	f004 fb1e 	bl	8008458 <HAL_RCCEx_PeriphCLKConfig>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003e22:	f7ff fe15 	bl	8003a50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e26:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <HAL_I2C_MspInit+0xc4>)
 8003e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e2c:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <HAL_I2C_MspInit+0xc4>)
 8003e2e:	f043 0302 	orr.w	r3, r3, #2
 8003e32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e36:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <HAL_I2C_MspInit+0xc4>)
 8003e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e4c:	2312      	movs	r3, #18
 8003e4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e52:	2300      	movs	r3, #0
 8003e54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e5e:	2304      	movs	r3, #4
 8003e60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003e68:	4619      	mov	r1, r3
 8003e6a:	480d      	ldr	r0, [pc, #52]	; (8003ea0 <HAL_I2C_MspInit+0xc8>)
 8003e6c:	f002 f9fe 	bl	800626c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <HAL_I2C_MspInit+0xc4>)
 8003e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e76:	4a09      	ldr	r2, [pc, #36]	; (8003e9c <HAL_I2C_MspInit+0xc4>)
 8003e78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_I2C_MspInit+0xc4>)
 8003e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e8e:	bf00      	nop
 8003e90:	37e0      	adds	r7, #224	; 0xe0
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40005400 	.word	0x40005400
 8003e9c:	58024400 	.word	0x58024400
 8003ea0:	58020400 	.word	0x58020400

08003ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb4:	d116      	bne.n	8003ee4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003eb6:	4b0d      	ldr	r3, [pc, #52]	; (8003eec <HAL_TIM_Base_MspInit+0x48>)
 8003eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ebc:	4a0b      	ldr	r2, [pc, #44]	; (8003eec <HAL_TIM_Base_MspInit+0x48>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ec6:	4b09      	ldr	r3, [pc, #36]	; (8003eec <HAL_TIM_Base_MspInit+0x48>)
 8003ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	201c      	movs	r0, #28
 8003eda:	f000 fb7c 	bl	80045d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ede:	201c      	movs	r0, #28
 8003ee0:	f000 fb93 	bl	800460a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	58024400 	.word	0x58024400

08003ef0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b0b8      	sub	sp, #224	; 0xe0
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f08:	f107 0310 	add.w	r3, r7, #16
 8003f0c:	22bc      	movs	r2, #188	; 0xbc
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f007 fa03 	bl	800b31c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a37      	ldr	r2, [pc, #220]	; (8003ff8 <HAL_PCD_MspInit+0x108>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d166      	bne.n	8003fee <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003f20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8003f26:	2301      	movs	r3, #1
 8003f28:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8003f2a:	2312      	movs	r3, #18
 8003f2c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8003f32:	2303      	movs	r3, #3
 8003f34:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8003f36:	2302      	movs	r3, #2
 8003f38:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003f3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f3e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8003f40:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003f44:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8003f46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f4e:	f107 0310 	add.w	r3, r7, #16
 8003f52:	4618      	mov	r0, r3
 8003f54:	f004 fa80 	bl	8008458 <HAL_RCCEx_PeriphCLKConfig>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8003f5e:	f7ff fd77 	bl	8003a50 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003f62:	f003 fadb 	bl	800751c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f66:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <HAL_PCD_MspInit+0x10c>)
 8003f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f6c:	4a23      	ldr	r2, [pc, #140]	; (8003ffc <HAL_PCD_MspInit+0x10c>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f76:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <HAL_PCD_MspInit+0x10c>)
 8003f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003f84:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003f88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003f9e:	230a      	movs	r3, #10
 8003fa0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4815      	ldr	r0, [pc, #84]	; (8004000 <HAL_PCD_MspInit+0x110>)
 8003fac:	f002 f95e 	bl	800626c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003fc8:	4619      	mov	r1, r3
 8003fca:	480d      	ldr	r0, [pc, #52]	; (8004000 <HAL_PCD_MspInit+0x110>)
 8003fcc:	f002 f94e 	bl	800626c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <HAL_PCD_MspInit+0x10c>)
 8003fd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003fd6:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <HAL_PCD_MspInit+0x10c>)
 8003fd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fdc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <HAL_PCD_MspInit+0x10c>)
 8003fe2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003fe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003fee:	bf00      	nop
 8003ff0:	37e0      	adds	r7, #224	; 0xe0
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40080000 	.word	0x40080000
 8003ffc:	58024400 	.word	0x58024400
 8004000:	58020000 	.word	0x58020000

08004004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004008:	e7fe      	b.n	8004008 <NMI_Handler+0x4>

0800400a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800400e:	e7fe      	b.n	800400e <HardFault_Handler+0x4>

08004010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004014:	e7fe      	b.n	8004014 <MemManage_Handler+0x4>

08004016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004016:	b480      	push	{r7}
 8004018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800401a:	e7fe      	b.n	800401a <BusFault_Handler+0x4>

0800401c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004020:	e7fe      	b.n	8004020 <UsageFault_Handler+0x4>

08004022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004022:	b480      	push	{r7}
 8004024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004034:	bf00      	nop
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800403e:	b480      	push	{r7}
 8004040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004042:	bf00      	nop
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004050:	f000 f982 	bl	8004358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004054:	bf00      	nop
 8004056:	bd80      	pop	{r7, pc}

08004058 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800405c:	4802      	ldr	r0, [pc, #8]	; (8004068 <FDCAN1_IT0_IRQHandler+0x10>)
 800405e:	f001 fc03 	bl	8005868 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	240003bc 	.word	0x240003bc

0800406c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004070:	4802      	ldr	r0, [pc, #8]	; (800407c <FDCAN2_IT0_IRQHandler+0x10>)
 8004072:	f001 fbf9 	bl	8005868 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8004076:	bf00      	nop
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	2400045c 	.word	0x2400045c

08004080 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004084:	4802      	ldr	r0, [pc, #8]	; (8004090 <TIM2_IRQHandler+0x10>)
 8004086:	f005 fb61 	bl	800974c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	24000548 	.word	0x24000548

08004094 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
	return 1;
 8004098:	2301      	movs	r3, #1
}
 800409a:	4618      	mov	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <_kill>:

int _kill(int pid, int sig)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80040ae:	f007 f8db 	bl	800b268 <__errno>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2216      	movs	r2, #22
 80040b6:	601a      	str	r2, [r3, #0]
	return -1;
 80040b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <_exit>:

void _exit (int status)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff ffe7 	bl	80040a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80040d6:	e7fe      	b.n	80040d6 <_exit+0x12>

080040d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	e00a      	b.n	8004100 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040ea:	f3af 8000 	nop.w
 80040ee:	4601      	mov	r1, r0
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	60ba      	str	r2, [r7, #8]
 80040f6:	b2ca      	uxtb	r2, r1
 80040f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	3301      	adds	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	429a      	cmp	r2, r3
 8004106:	dbf0      	blt.n	80040ea <_read+0x12>
	}

return len;
 8004108:	687b      	ldr	r3, [r7, #4]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	e009      	b.n	8004138 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	60ba      	str	r2, [r7, #8]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	3301      	adds	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	dbf1      	blt.n	8004124 <_write+0x12>
	}
	return len;
 8004140:	687b      	ldr	r3, [r7, #4]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <_close>:

int _close(int file)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
	return -1;
 8004152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004156:	4618      	mov	r0, r3
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004172:	605a      	str	r2, [r3, #4]
	return 0;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <_isatty>:

int _isatty(int file)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
	return 1;
 800418a:	2301      	movs	r3, #1
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
	return 0;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041bc:	4a14      	ldr	r2, [pc, #80]	; (8004210 <_sbrk+0x5c>)
 80041be:	4b15      	ldr	r3, [pc, #84]	; (8004214 <_sbrk+0x60>)
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041c8:	4b13      	ldr	r3, [pc, #76]	; (8004218 <_sbrk+0x64>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041d0:	4b11      	ldr	r3, [pc, #68]	; (8004218 <_sbrk+0x64>)
 80041d2:	4a12      	ldr	r2, [pc, #72]	; (800421c <_sbrk+0x68>)
 80041d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041d6:	4b10      	ldr	r3, [pc, #64]	; (8004218 <_sbrk+0x64>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4413      	add	r3, r2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d207      	bcs.n	80041f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041e4:	f007 f840 	bl	800b268 <__errno>
 80041e8:	4603      	mov	r3, r0
 80041ea:	220c      	movs	r2, #12
 80041ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041f2:	e009      	b.n	8004208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041f4:	4b08      	ldr	r3, [pc, #32]	; (8004218 <_sbrk+0x64>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041fa:	4b07      	ldr	r3, [pc, #28]	; (8004218 <_sbrk+0x64>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	4a05      	ldr	r2, [pc, #20]	; (8004218 <_sbrk+0x64>)
 8004204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004206:	68fb      	ldr	r3, [r7, #12]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	24080000 	.word	0x24080000
 8004214:	00000400 	.word	0x00000400
 8004218:	24000c4c 	.word	0x24000c4c
 800421c:	24000c68 	.word	0x24000c68

08004220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004258 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004224:	f7fc fa68 	bl	80006f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004228:	480c      	ldr	r0, [pc, #48]	; (800425c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800422a:	490d      	ldr	r1, [pc, #52]	; (8004260 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800422c:	4a0d      	ldr	r2, [pc, #52]	; (8004264 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800422e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004230:	e002      	b.n	8004238 <LoopCopyDataInit>

08004232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004236:	3304      	adds	r3, #4

08004238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800423a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800423c:	d3f9      	bcc.n	8004232 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800423e:	4a0a      	ldr	r2, [pc, #40]	; (8004268 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004240:	4c0a      	ldr	r4, [pc, #40]	; (800426c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004244:	e001      	b.n	800424a <LoopFillZerobss>

08004246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004248:	3204      	adds	r2, #4

0800424a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800424a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800424c:	d3fb      	bcc.n	8004246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800424e:	f007 f823 	bl	800b298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004252:	f7fd fe61 	bl	8001f18 <main>
  bx  lr
 8004256:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004258:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800425c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004260:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8004264:	0800d274 	.word	0x0800d274
  ldr r2, =_sbss
 8004268:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 800426c:	24000c64 	.word	0x24000c64

08004270 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004270:	e7fe      	b.n	8004270 <ADC3_IRQHandler>
	...

08004274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800427a:	2003      	movs	r0, #3
 800427c:	f000 f9a0 	bl	80045c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004280:	f003 ff40 	bl	8008104 <HAL_RCC_GetSysClockFreq>
 8004284:	4602      	mov	r2, r0
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <HAL_Init+0x68>)
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	4913      	ldr	r1, [pc, #76]	; (80042e0 <HAL_Init+0x6c>)
 8004292:	5ccb      	ldrb	r3, [r1, r3]
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
 800429c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <HAL_Init+0x68>)
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	4a0e      	ldr	r2, [pc, #56]	; (80042e0 <HAL_Init+0x6c>)
 80042a8:	5cd3      	ldrb	r3, [r2, r3]
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
 80042b4:	4a0b      	ldr	r2, [pc, #44]	; (80042e4 <HAL_Init+0x70>)
 80042b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042b8:	4a0b      	ldr	r2, [pc, #44]	; (80042e8 <HAL_Init+0x74>)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042be:	2000      	movs	r0, #0
 80042c0:	f000 f814 	bl	80042ec <HAL_InitTick>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e002      	b.n	80042d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80042ce:	f7ff fbc5 	bl	8003a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	58024400 	.word	0x58024400
 80042e0:	0800c670 	.word	0x0800c670
 80042e4:	24000004 	.word	0x24000004
 80042e8:	24000000 	.word	0x24000000

080042ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80042f4:	4b15      	ldr	r3, [pc, #84]	; (800434c <HAL_InitTick+0x60>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e021      	b.n	8004344 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004300:	4b13      	ldr	r3, [pc, #76]	; (8004350 <HAL_InitTick+0x64>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4b11      	ldr	r3, [pc, #68]	; (800434c <HAL_InitTick+0x60>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	4619      	mov	r1, r3
 800430a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800430e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004312:	fbb2 f3f3 	udiv	r3, r2, r3
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f985 	bl	8004626 <HAL_SYSTICK_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e00e      	b.n	8004344 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b0f      	cmp	r3, #15
 800432a:	d80a      	bhi.n	8004342 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800432c:	2200      	movs	r2, #0
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004334:	f000 f94f 	bl	80045d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004338:	4a06      	ldr	r2, [pc, #24]	; (8004354 <HAL_InitTick+0x68>)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	e000      	b.n	8004344 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	24000030 	.word	0x24000030
 8004350:	24000000 	.word	0x24000000
 8004354:	2400002c 	.word	0x2400002c

08004358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_IncTick+0x20>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_IncTick+0x24>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4413      	add	r3, r2
 8004368:	4a04      	ldr	r2, [pc, #16]	; (800437c <HAL_IncTick+0x24>)
 800436a:	6013      	str	r3, [r2, #0]
}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	24000030 	.word	0x24000030
 800437c:	24000c50 	.word	0x24000c50

08004380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  return uwTick;
 8004384:	4b03      	ldr	r3, [pc, #12]	; (8004394 <HAL_GetTick+0x14>)
 8004386:	681b      	ldr	r3, [r3, #0]
}
 8004388:	4618      	mov	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	24000c50 	.word	0x24000c50

08004398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043a0:	f7ff ffee 	bl	8004380 <HAL_GetTick>
 80043a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043b0:	d005      	beq.n	80043be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043b2:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <HAL_Delay+0x44>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043be:	bf00      	nop
 80043c0:	f7ff ffde 	bl	8004380 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d8f7      	bhi.n	80043c0 <HAL_Delay+0x28>
  {
  }
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	24000030 	.word	0x24000030

080043e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_GetREVID+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	0c1b      	lsrs	r3, r3, #16
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	5c001000 	.word	0x5c001000

080043f8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004408:	4904      	ldr	r1, [pc, #16]	; (800441c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4313      	orrs	r3, r2
 800440e:	604b      	str	r3, [r1, #4]
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	58000400 	.word	0x58000400

08004420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <__NVIC_SetPriorityGrouping+0x40>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800443c:	4013      	ands	r3, r2
 800443e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <__NVIC_SetPriorityGrouping+0x44>)
 800444a:	4313      	orrs	r3, r2
 800444c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800444e:	4a04      	ldr	r2, [pc, #16]	; (8004460 <__NVIC_SetPriorityGrouping+0x40>)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	60d3      	str	r3, [r2, #12]
}
 8004454:	bf00      	nop
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	e000ed00 	.word	0xe000ed00
 8004464:	05fa0000 	.word	0x05fa0000

08004468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <__NVIC_GetPriorityGrouping+0x18>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	f003 0307 	and.w	r3, r3, #7
}
 8004476:	4618      	mov	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800448e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004492:	2b00      	cmp	r3, #0
 8004494:	db0b      	blt.n	80044ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	f003 021f 	and.w	r2, r3, #31
 800449c:	4907      	ldr	r1, [pc, #28]	; (80044bc <__NVIC_EnableIRQ+0x38>)
 800449e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	2001      	movs	r0, #1
 80044a6:	fa00 f202 	lsl.w	r2, r0, r2
 80044aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	e000e100 	.word	0xe000e100

080044c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	6039      	str	r1, [r7, #0]
 80044ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	db0a      	blt.n	80044ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	490c      	ldr	r1, [pc, #48]	; (800450c <__NVIC_SetPriority+0x4c>)
 80044da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044de:	0112      	lsls	r2, r2, #4
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	440b      	add	r3, r1
 80044e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044e8:	e00a      	b.n	8004500 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	4908      	ldr	r1, [pc, #32]	; (8004510 <__NVIC_SetPriority+0x50>)
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	3b04      	subs	r3, #4
 80044f8:	0112      	lsls	r2, r2, #4
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	440b      	add	r3, r1
 80044fe:	761a      	strb	r2, [r3, #24]
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	e000e100 	.word	0xe000e100
 8004510:	e000ed00 	.word	0xe000ed00

08004514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004514:	b480      	push	{r7}
 8004516:	b089      	sub	sp, #36	; 0x24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f1c3 0307 	rsb	r3, r3, #7
 800452e:	2b04      	cmp	r3, #4
 8004530:	bf28      	it	cs
 8004532:	2304      	movcs	r3, #4
 8004534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	3304      	adds	r3, #4
 800453a:	2b06      	cmp	r3, #6
 800453c:	d902      	bls.n	8004544 <NVIC_EncodePriority+0x30>
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	3b03      	subs	r3, #3
 8004542:	e000      	b.n	8004546 <NVIC_EncodePriority+0x32>
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43da      	mvns	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	401a      	ands	r2, r3
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800455c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	fa01 f303 	lsl.w	r3, r1, r3
 8004566:	43d9      	mvns	r1, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800456c:	4313      	orrs	r3, r2
         );
}
 800456e:	4618      	mov	r0, r3
 8004570:	3724      	adds	r7, #36	; 0x24
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
	...

0800457c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3b01      	subs	r3, #1
 8004588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800458c:	d301      	bcc.n	8004592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800458e:	2301      	movs	r3, #1
 8004590:	e00f      	b.n	80045b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004592:	4a0a      	ldr	r2, [pc, #40]	; (80045bc <SysTick_Config+0x40>)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3b01      	subs	r3, #1
 8004598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800459a:	210f      	movs	r1, #15
 800459c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045a0:	f7ff ff8e 	bl	80044c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <SysTick_Config+0x40>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045aa:	4b04      	ldr	r3, [pc, #16]	; (80045bc <SysTick_Config+0x40>)
 80045ac:	2207      	movs	r2, #7
 80045ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	e000e010 	.word	0xe000e010

080045c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ff29 	bl	8004420 <__NVIC_SetPriorityGrouping>
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b086      	sub	sp, #24
 80045da:	af00      	add	r7, sp, #0
 80045dc:	4603      	mov	r3, r0
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045e4:	f7ff ff40 	bl	8004468 <__NVIC_GetPriorityGrouping>
 80045e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	6978      	ldr	r0, [r7, #20]
 80045f0:	f7ff ff90 	bl	8004514 <NVIC_EncodePriority>
 80045f4:	4602      	mov	r2, r0
 80045f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff ff5f 	bl	80044c0 <__NVIC_SetPriority>
}
 8004602:	bf00      	nop
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	4603      	mov	r3, r0
 8004612:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff ff33 	bl	8004484 <__NVIC_EnableIRQ>
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff ffa4 	bl	800457c <SysTick_Config>
 8004634:	4603      	mov	r3, r0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e0cf      	b.n	80047f2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004658:	2b00      	cmp	r3, #0
 800465a:	d106      	bne.n	800466a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2223      	movs	r2, #35	; 0x23
 8004660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff fa13 	bl	8003a90 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800466a:	4b64      	ldr	r3, [pc, #400]	; (80047fc <HAL_ETH_Init+0x1bc>)
 800466c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004670:	4a62      	ldr	r2, [pc, #392]	; (80047fc <HAL_ETH_Init+0x1bc>)
 8004672:	f043 0302 	orr.w	r3, r3, #2
 8004676:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800467a:	4b60      	ldr	r3, [pc, #384]	; (80047fc <HAL_ETH_Init+0x1bc>)
 800467c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	7a1b      	ldrb	r3, [r3, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d103      	bne.n	8004698 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004690:	2000      	movs	r0, #0
 8004692:	f7ff feb1 	bl	80043f8 <HAL_SYSCFG_ETHInterfaceSelect>
 8004696:	e003      	b.n	80046a0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004698:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800469c:	f7ff feac 	bl	80043f8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80046a0:	4b57      	ldr	r3, [pc, #348]	; (8004800 <HAL_ETH_Init+0x1c0>)
 80046a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046bc:	f7ff fe60 	bl	8004380 <HAL_GetTick>
 80046c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80046c2:	e011      	b.n	80046e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80046c4:	f7ff fe5c 	bl	8004380 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80046d2:	d909      	bls.n	80046e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2204      	movs	r2, #4
 80046d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	22e0      	movs	r2, #224	; 0xe0
 80046e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e084      	b.n	80047f2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e4      	bne.n	80046c4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f886 	bl	800480c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004700:	f003 fe7a 	bl	80083f8 <HAL_RCC_GetHCLKFreq>
 8004704:	4603      	mov	r3, r0
 8004706:	4a3f      	ldr	r2, [pc, #252]	; (8004804 <HAL_ETH_Init+0x1c4>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	0c9a      	lsrs	r2, r3, #18
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3a01      	subs	r2, #1
 8004714:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fa71 	bl	8004c00 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004726:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800472a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004736:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800473a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d009      	beq.n	800475e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	22e0      	movs	r2, #224	; 0xe0
 8004756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e049      	b.n	80047f2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004766:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800476a:	4b27      	ldr	r3, [pc, #156]	; (8004808 <HAL_ETH_Init+0x1c8>)
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6952      	ldr	r2, [r2, #20]
 8004772:	0051      	lsls	r1, r2, #1
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	430b      	orrs	r3, r1
 800477a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800477e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fad9 	bl	8004d3a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fb1f 	bl	8004dcc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	3305      	adds	r3, #5
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	021a      	lsls	r2, r3, #8
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	3304      	adds	r3, #4
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	4619      	mov	r1, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	3303      	adds	r3, #3
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	061a      	lsls	r2, r3, #24
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	3302      	adds	r3, #2
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	041b      	lsls	r3, r3, #16
 80047c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	3301      	adds	r3, #1
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80047cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80047da:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80047dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2210      	movs	r2, #16
 80047ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	58024400 	.word	0x58024400
 8004800:	58000400 	.word	0x58000400
 8004804:	431bde83 	.word	0x431bde83
 8004808:	ffff8001 	.word	0xffff8001

0800480c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800481c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004824:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004826:	f003 fde7 	bl	80083f8 <HAL_RCC_GetHCLKFreq>
 800482a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4a1e      	ldr	r2, [pc, #120]	; (80048a8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d908      	bls.n	8004846 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4a1d      	ldr	r2, [pc, #116]	; (80048ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d804      	bhi.n	8004846 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e027      	b.n	8004896 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4a18      	ldr	r2, [pc, #96]	; (80048ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d908      	bls.n	8004860 <HAL_ETH_SetMDIOClockRange+0x54>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d204      	bcs.n	8004860 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	e01a      	b.n	8004896 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d303      	bcc.n	8004870 <HAL_ETH_SetMDIOClockRange+0x64>
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4a12      	ldr	r2, [pc, #72]	; (80048b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d911      	bls.n	8004894 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4a10      	ldr	r2, [pc, #64]	; (80048b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d908      	bls.n	800488a <HAL_ETH_SetMDIOClockRange+0x7e>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4a0f      	ldr	r2, [pc, #60]	; (80048b8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d804      	bhi.n	800488a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	e005      	b.n	8004896 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	e000      	b.n	8004896 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004894:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	01312cff 	.word	0x01312cff
 80048ac:	02160ebf 	.word	0x02160ebf
 80048b0:	03938700 	.word	0x03938700
 80048b4:	05f5e0ff 	.word	0x05f5e0ff
 80048b8:	08f0d17f 	.word	0x08f0d17f

080048bc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80048ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	791b      	ldrb	r3, [r3, #4]
 80048d4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80048d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	7b1b      	ldrb	r3, [r3, #12]
 80048dc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80048de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	7b5b      	ldrb	r3, [r3, #13]
 80048e4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80048e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	7b9b      	ldrb	r3, [r3, #14]
 80048ec:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80048ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	7bdb      	ldrb	r3, [r3, #15]
 80048f4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80048f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	7c12      	ldrb	r2, [r2, #16]
 80048fc:	2a00      	cmp	r2, #0
 80048fe:	d102      	bne.n	8004906 <ETH_SetMACConfig+0x4a>
 8004900:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004904:	e000      	b.n	8004908 <ETH_SetMACConfig+0x4c>
 8004906:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004908:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	7c52      	ldrb	r2, [r2, #17]
 800490e:	2a00      	cmp	r2, #0
 8004910:	d102      	bne.n	8004918 <ETH_SetMACConfig+0x5c>
 8004912:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004916:	e000      	b.n	800491a <ETH_SetMACConfig+0x5e>
 8004918:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800491a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	7c9b      	ldrb	r3, [r3, #18]
 8004920:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004922:	431a      	orrs	r2, r3
               macconf->Speed |
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004928:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800492e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	7f1b      	ldrb	r3, [r3, #28]
 8004934:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004936:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	7f5b      	ldrb	r3, [r3, #29]
 800493c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800493e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	7f92      	ldrb	r2, [r2, #30]
 8004944:	2a00      	cmp	r2, #0
 8004946:	d102      	bne.n	800494e <ETH_SetMACConfig+0x92>
 8004948:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800494c:	e000      	b.n	8004950 <ETH_SetMACConfig+0x94>
 800494e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004950:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	7fdb      	ldrb	r3, [r3, #31]
 8004956:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004958:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004960:	2a00      	cmp	r2, #0
 8004962:	d102      	bne.n	800496a <ETH_SetMACConfig+0xae>
 8004964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004968:	e000      	b.n	800496c <ETH_SetMACConfig+0xb0>
 800496a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800496c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004972:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800497a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800497c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b56      	ldr	r3, [pc, #344]	; (8004ae8 <ETH_SetMACConfig+0x22c>)
 800498e:	4013      	ands	r3, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	68f9      	ldr	r1, [r7, #12]
 8004996:	430b      	orrs	r3, r1
 8004998:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049a6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80049a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049b0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80049b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049ba:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80049bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80049c4:	2a00      	cmp	r2, #0
 80049c6:	d102      	bne.n	80049ce <ETH_SetMACConfig+0x112>
 80049c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049cc:	e000      	b.n	80049d0 <ETH_SetMACConfig+0x114>
 80049ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80049d0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	4b42      	ldr	r3, [pc, #264]	; (8004aec <ETH_SetMACConfig+0x230>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	68f9      	ldr	r1, [r7, #12]
 80049ea:	430b      	orrs	r3, r1
 80049ec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049f4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	4b3a      	ldr	r3, [pc, #232]	; (8004af0 <ETH_SetMACConfig+0x234>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	68f9      	ldr	r1, [r7, #12]
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004a18:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004a1e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004a26:	2a00      	cmp	r2, #0
 8004a28:	d101      	bne.n	8004a2e <ETH_SetMACConfig+0x172>
 8004a2a:	2280      	movs	r2, #128	; 0x80
 8004a2c:	e000      	b.n	8004a30 <ETH_SetMACConfig+0x174>
 8004a2e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004a30:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a36:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a42:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004a46:	4013      	ands	r3, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6812      	ldr	r2, [r2, #0]
 8004a4c:	68f9      	ldr	r1, [r7, #12]
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004a58:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004a60:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6e:	f023 0103 	bic.w	r1, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004a86:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004aa2:	2a00      	cmp	r2, #0
 8004aa4:	d101      	bne.n	8004aaa <ETH_SetMACConfig+0x1ee>
 8004aa6:	2240      	movs	r2, #64	; 0x40
 8004aa8:	e000      	b.n	8004aac <ETH_SetMACConfig+0x1f0>
 8004aaa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004aac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004ab4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004ab6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004abe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004acc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	00048083 	.word	0x00048083
 8004aec:	c0f88000 	.word	0xc0f88000
 8004af0:	fffffef0 	.word	0xfffffef0

08004af4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	4b38      	ldr	r3, [pc, #224]	; (8004bec <ETH_SetDMAConfig+0xf8>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	6811      	ldr	r1, [r2, #0]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	430b      	orrs	r3, r1
 8004b16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b1a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	791b      	ldrb	r3, [r3, #4]
 8004b20:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004b26:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	7b1b      	ldrb	r3, [r3, #12]
 8004b2c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	4b2c      	ldr	r3, [pc, #176]	; (8004bf0 <ETH_SetDMAConfig+0xfc>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	68f9      	ldr	r1, [r7, #12]
 8004b46:	430b      	orrs	r3, r1
 8004b48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b4c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	7b5b      	ldrb	r3, [r3, #13]
 8004b52:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b64:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004b68:	4b22      	ldr	r3, [pc, #136]	; (8004bf4 <ETH_SetDMAConfig+0x100>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	68f9      	ldr	r1, [r7, #12]
 8004b72:	430b      	orrs	r3, r1
 8004b74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b78:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	7d1b      	ldrb	r3, [r3, #20]
 8004b84:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004b86:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	7f5b      	ldrb	r3, [r3, #29]
 8004b8c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004b9e:	4b16      	ldr	r3, [pc, #88]	; (8004bf8 <ETH_SetDMAConfig+0x104>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	68f9      	ldr	r1, [r7, #12]
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	7f1b      	ldrb	r3, [r3, #28]
 8004bb6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <ETH_SetDMAConfig+0x108>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	68f9      	ldr	r1, [r7, #12]
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bdc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004be0:	bf00      	nop
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	ffff87fd 	.word	0xffff87fd
 8004bf0:	ffff2ffe 	.word	0xffff2ffe
 8004bf4:	fffec000 	.word	0xfffec000
 8004bf8:	ffc0efef 	.word	0xffc0efef
 8004bfc:	7fc0ffff 	.word	0x7fc0ffff

08004c00 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b0a4      	sub	sp, #144	; 0x90
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004c24:	2301      	movs	r3, #1
 8004c26:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004c30:	2300      	movs	r3, #0
 8004c32:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c40:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004c52:	2300      	movs	r3, #0
 8004c54:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004c58:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004c5c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004c64:	2300      	movs	r3, #0
 8004c66:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004c74:	2300      	movs	r3, #0
 8004c76:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004c82:	2300      	movs	r3, #0
 8004c84:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004c86:	2300      	movs	r3, #0
 8004c88:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004c92:	2301      	movs	r3, #1
 8004c94:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004c98:	2320      	movs	r3, #32
 8004c9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004caa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004cb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cb4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004ce4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ce8:	4619      	mov	r1, r3
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff fde6 	bl	80048bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004d0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d0e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004d14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d18:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004d20:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004d26:	f107 0308 	add.w	r3, r7, #8
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff fee1 	bl	8004af4 <ETH_SetDMAConfig>
}
 8004d32:	bf00      	nop
 8004d34:	3790      	adds	r7, #144	; 0x90
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	e01d      	b.n	8004d84 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68d9      	ldr	r1, [r3, #12]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	4413      	add	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	440b      	add	r3, r1
 8004d58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2200      	movs	r2, #0
 8004d64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	3206      	adds	r2, #6
 8004d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3301      	adds	r3, #1
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d9de      	bls.n	8004d48 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dbc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004dc0:	bf00      	nop
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	e023      	b.n	8004e22 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6919      	ldr	r1, [r3, #16]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4613      	mov	r3, r2
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	4413      	add	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	440b      	add	r3, r1
 8004dea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2200      	movs	r2, #0
 8004df6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2200      	movs	r2, #0
 8004e02:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2200      	movs	r2, #0
 8004e08:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	3212      	adds	r2, #18
 8004e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d9d8      	bls.n	8004dda <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e4e:	461a      	mov	r2, r3
 8004e50:	2303      	movs	r3, #3
 8004e52:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e62:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e76:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b098      	sub	sp, #96	; 0x60
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004e90:	4a84      	ldr	r2, [pc, #528]	; (80050a4 <HAL_FDCAN_Init+0x21c>)
 8004e92:	f107 030c 	add.w	r3, r7, #12
 8004e96:	4611      	mov	r1, r2
 8004e98:	224c      	movs	r2, #76	; 0x4c
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f006 fa30 	bl	800b300 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e1c6      	b.n	8005238 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a7e      	ldr	r2, [pc, #504]	; (80050a8 <HAL_FDCAN_Init+0x220>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d106      	bne.n	8004ec2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fe fea8 	bl	8003c2c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0210 	bic.w	r2, r2, #16
 8004eea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004eec:	f7ff fa48 	bl	8004380 <HAL_GetTick>
 8004ef0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004ef2:	e014      	b.n	8004f1e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ef4:	f7ff fa44 	bl	8004380 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b0a      	cmp	r3, #10
 8004f00:	d90d      	bls.n	8004f1e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f08:	f043 0201 	orr.w	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2203      	movs	r2, #3
 8004f16:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e18c      	b.n	8005238 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d0e3      	beq.n	8004ef4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f3c:	f7ff fa20 	bl	8004380 <HAL_GetTick>
 8004f40:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004f42:	e014      	b.n	8004f6e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004f44:	f7ff fa1c 	bl	8004380 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b0a      	cmp	r3, #10
 8004f50:	d90d      	bls.n	8004f6e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f58:	f043 0201 	orr.w	r2, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2203      	movs	r2, #3
 8004f66:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e164      	b.n	8005238 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0e3      	beq.n	8004f44 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0202 	orr.w	r2, r2, #2
 8004f8a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	7c1b      	ldrb	r3, [r3, #16]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d108      	bne.n	8004fa6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa2:	619a      	str	r2, [r3, #24]
 8004fa4:	e007      	b.n	8004fb6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699a      	ldr	r2, [r3, #24]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	7c5b      	ldrb	r3, [r3, #17]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d108      	bne.n	8004fd0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699a      	ldr	r2, [r3, #24]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fcc:	619a      	str	r2, [r3, #24]
 8004fce:	e007      	b.n	8004fe0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fde:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	7c9b      	ldrb	r3, [r3, #18]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d108      	bne.n	8004ffa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699a      	ldr	r2, [r3, #24]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ff6:	619a      	str	r2, [r3, #24]
 8004ff8:	e007      	b.n	800500a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699a      	ldr	r2, [r3, #24]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005008:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800502e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0210 	bic.w	r2, r2, #16
 800503e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d108      	bne.n	800505a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0204 	orr.w	r2, r2, #4
 8005056:	619a      	str	r2, [r3, #24]
 8005058:	e030      	b.n	80050bc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d02c      	beq.n	80050bc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d020      	beq.n	80050ac <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699a      	ldr	r2, [r3, #24]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005078:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0210 	orr.w	r2, r2, #16
 8005088:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	2b03      	cmp	r3, #3
 8005090:	d114      	bne.n	80050bc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699a      	ldr	r2, [r3, #24]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0220 	orr.w	r2, r2, #32
 80050a0:	619a      	str	r2, [r3, #24]
 80050a2:	e00b      	b.n	80050bc <HAL_FDCAN_Init+0x234>
 80050a4:	0800c624 	.word	0x0800c624
 80050a8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0220 	orr.w	r2, r2, #32
 80050ba:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050cc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80050d4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	3b01      	subs	r3, #1
 80050de:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80050e4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050e6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050f0:	d115      	bne.n	800511e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	3b01      	subs	r3, #1
 80050fe:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005100:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	3b01      	subs	r3, #1
 8005108:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800510a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	3b01      	subs	r3, #1
 8005114:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800511a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800511c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005144:	4413      	add	r3, r2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d011      	beq.n	800516e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005152:	f023 0107 	bic.w	r1, r3, #7
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	3360      	adds	r3, #96	; 0x60
 800515e:	443b      	add	r3, r7
 8005160:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d011      	beq.n	800519a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800517e:	f023 0107 	bic.w	r1, r3, #7
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	3360      	adds	r3, #96	; 0x60
 800518a:	443b      	add	r3, r7
 800518c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d012      	beq.n	80051c8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80051aa:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	3360      	adds	r3, #96	; 0x60
 80051b6:	443b      	add	r3, r7
 80051b8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80051bc:	011a      	lsls	r2, r3, #4
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d012      	beq.n	80051f6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80051d8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	3360      	adds	r3, #96	; 0x60
 80051e4:	443b      	add	r3, r7
 80051e6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80051ea:	021a      	lsls	r2, r3, #8
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a11      	ldr	r2, [pc, #68]	; (8005240 <HAL_FDCAN_Init+0x3b8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d107      	bne.n	8005210 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f022 0203 	bic.w	r2, r2, #3
 800520e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fe1b 	bl	8005e64 <FDCAN_CalcultateRamBlockAddresses>
 800522e:	4603      	mov	r3, r0
 8005230:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005234:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005238:	4618      	mov	r0, r3
 800523a:	3760      	adds	r7, #96	; 0x60
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	4000a000 	.word	0x4000a000

08005244 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005254:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d002      	beq.n	8005262 <HAL_FDCAN_ConfigFilter+0x1e>
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d157      	bne.n	8005312 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d12b      	bne.n	80052c2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b07      	cmp	r3, #7
 8005270:	d10d      	bne.n	800528e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800527e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005284:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005286:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	e00e      	b.n	80052ac <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800529a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80052a2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	e025      	b.n	800530e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	075a      	lsls	r2, r3, #29
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	2b07      	cmp	r3, #7
 80052d6:	d103      	bne.n	80052e0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	e006      	b.n	80052ee <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	079a      	lsls	r2, r3, #30
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	4413      	add	r3, r2
 80052fa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	3304      	adds	r3, #4
 8005306:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	e008      	b.n	8005324 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005318:	f043 0202 	orr.w	r2, r3, #2
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
  }
}
 8005324:	4618      	mov	r0, r3
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b01      	cmp	r3, #1
 8005348:	d110      	bne.n	800536c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005352:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005358:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	e008      	b.n	800537e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005372:	f043 0204 	orr.w	r2, r3, #4
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
  }
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b01      	cmp	r3, #1
 800539c:	d111      	bne.n	80053c2 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2202      	movs	r2, #2
 80053a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699a      	ldr	r2, [r3, #24]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0201 	bic.w	r2, r2, #1
 80053b4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	e008      	b.n	80053d4 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053c8:	f043 0204 	orr.w	r2, r3, #4
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
  }
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d141      	bne.n	800547c <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005400:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d109      	bne.n	800541c <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800540e:	f043 0220 	orr.w	r2, r3, #32
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e038      	b.n	800548e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d009      	beq.n	8005440 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005432:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e026      	b.n	800548e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005448:	0c1b      	lsrs	r3, r3, #16
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 fe8a 	bl	8006170 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2101      	movs	r1, #1
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	fa01 f202 	lsl.w	r2, r1, r2
 8005468:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800546c:	2201      	movs	r2, #1
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	409a      	lsls	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	e008      	b.n	800548e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005482:	f043 0208 	orr.w	r2, r3, #8
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
  }
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005498:	b480      	push	{r7}
 800549a:	b08b      	sub	sp, #44	; 0x2c
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80054b0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80054b2:	7efb      	ldrb	r3, [r7, #27]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	f040 814b 	bne.w	8005750 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b40      	cmp	r3, #64	; 0x40
 80054be:	d14d      	bne.n	800555c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80054c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d109      	bne.n	80054e4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054d6:	f043 0220 	orr.w	r2, r3, #32
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e13e      	b.n	8005762 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80054ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d109      	bne.n	8005508 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e12c      	b.n	8005762 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005510:	0e1b      	lsrs	r3, r3, #24
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b01      	cmp	r3, #1
 8005518:	d10b      	bne.n	8005532 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005522:	0fdb      	lsrs	r3, r3, #31
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800552c:	d101      	bne.n	8005532 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800552e:	2301      	movs	r3, #1
 8005530:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005540:	69fa      	ldr	r2, [r7, #28]
 8005542:	4413      	add	r3, r2
 8005544:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	69f9      	ldr	r1, [r7, #28]
 8005550:	fb01 f303 	mul.w	r3, r1, r3
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
 800555a:	e069      	b.n	8005630 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b41      	cmp	r3, #65	; 0x41
 8005560:	d14d      	bne.n	80055fe <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800556a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005578:	f043 0220 	orr.w	r2, r3, #32
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e0ed      	b.n	8005762 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800558e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800559c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e0db      	b.n	8005762 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80055b2:	0e1b      	lsrs	r3, r3, #24
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d10b      	bne.n	80055d4 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055c4:	0fdb      	lsrs	r3, r3, #31
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ce:	d101      	bne.n	80055d4 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80055d0:	2301      	movs	r3, #1
 80055d2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	4413      	add	r3, r2
 80055e6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f0:	69f9      	ldr	r1, [r7, #28]
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
 80055fc:	e018      	b.n	8005630 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	429a      	cmp	r2, r3
 8005606:	d309      	bcc.n	800561c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e0a2      	b.n	8005762 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	fb01 f303 	mul.w	r3, r1, r3
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d107      	bne.n	8005654 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	0c9b      	lsrs	r3, r3, #18
 800564a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	e005      	b.n	8005660 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	3304      	adds	r3, #4
 800567c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	0e1b      	lsrs	r3, r3, #24
 80056b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	0fda      	lsrs	r2, r3, #31
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	3304      	adds	r3, #4
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80056ce:	2300      	movs	r3, #0
 80056d0:	623b      	str	r3, [r7, #32]
 80056d2:	e00a      	b.n	80056ea <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	441a      	add	r2, r3
 80056da:	6839      	ldr	r1, [r7, #0]
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	440b      	add	r3, r1
 80056e0:	7812      	ldrb	r2, [r2, #0]
 80056e2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	3301      	adds	r3, #1
 80056e8:	623b      	str	r3, [r7, #32]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	0c1b      	lsrs	r3, r3, #16
 80056f0:	4a1f      	ldr	r2, [pc, #124]	; (8005770 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80056f2:	5cd3      	ldrb	r3, [r2, r3]
 80056f4:	461a      	mov	r2, r3
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d3eb      	bcc.n	80056d4 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b40      	cmp	r3, #64	; 0x40
 8005700:	d105      	bne.n	800570e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800570c:	e01e      	b.n	800574c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b41      	cmp	r3, #65	; 0x41
 8005712:	d105      	bne.n	8005720 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800571e:	e015      	b.n	800574c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b1f      	cmp	r3, #31
 8005724:	d808      	bhi.n	8005738 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2101      	movs	r1, #1
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	fa01 f202 	lsl.w	r2, r1, r2
 8005732:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8005736:	e009      	b.n	800574c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 021f 	and.w	r2, r3, #31
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2101      	movs	r1, #1
 8005744:	fa01 f202 	lsl.w	r2, r1, r2
 8005748:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	e008      	b.n	8005762 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005756:	f043 0208 	orr.w	r2, r3, #8
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
  }
}
 8005762:	4618      	mov	r0, r3
 8005764:	372c      	adds	r7, #44	; 0x2c
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	0800cfac 	.word	0x0800cfac

08005774 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005786:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d002      	beq.n	8005794 <HAL_FDCAN_ActivateNotification+0x20>
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d155      	bne.n	8005840 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	4013      	ands	r3, r2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d108      	bne.n	80057b4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0201 	orr.w	r2, r2, #1
 80057b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80057b2:	e014      	b.n	80057de <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	4013      	ands	r3, r2
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d108      	bne.n	80057d6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0202 	orr.w	r2, r2, #2
 80057d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80057d4:	e003      	b.n	80057de <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2203      	movs	r2, #3
 80057dc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	430a      	orrs	r2, r1
 8005816:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <HAL_FDCAN_ActivateNotification+0xec>)
 8005824:	4013      	ands	r3, r2
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	6812      	ldr	r2, [r2, #0]
 800582a:	430b      	orrs	r3, r1
 800582c:	6553      	str	r3, [r2, #84]	; 0x54
 800582e:	4b0d      	ldr	r3, [pc, #52]	; (8005864 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005830:	695a      	ldr	r2, [r3, #20]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	0f9b      	lsrs	r3, r3, #30
 8005836:	490b      	ldr	r1, [pc, #44]	; (8005864 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005838:	4313      	orrs	r3, r2
 800583a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	e008      	b.n	8005852 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005846:	f043 0202 	orr.w	r2, r3, #2
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
  }
}
 8005852:	4618      	mov	r0, r3
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	3fcfffff 	.word	0x3fcfffff
 8005864:	4000a800 	.word	0x4000a800

08005868 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b096      	sub	sp, #88	; 0x58
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005870:	4b9a      	ldr	r3, [pc, #616]	; (8005adc <HAL_FDCAN_IRQHandler+0x274>)
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	079b      	lsls	r3, r3, #30
 8005876:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005878:	4b98      	ldr	r3, [pc, #608]	; (8005adc <HAL_FDCAN_IRQHandler+0x274>)
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	079b      	lsls	r3, r3, #30
 800587e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005880:	4013      	ands	r3, r2
 8005882:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800588e:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005896:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005898:	4013      	ands	r3, r2
 800589a:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058b0:	4013      	ands	r3, r2
 80058b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058be:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058c8:	4013      	ands	r3, r2
 80058ca:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80058d6:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058e0:	4013      	ands	r3, r2
 80058e2:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ea:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80058ee:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058f8:	4013      	ands	r3, r2
 80058fa:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005902:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800590a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800590c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590e:	0a1b      	lsrs	r3, r3, #8
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d010      	beq.n	800593a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591a:	0a1b      	lsrs	r3, r3, #8
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800592c:	651a      	str	r2, [r3, #80]	; 0x50
 800592e:	4b6b      	ldr	r3, [pc, #428]	; (8005adc <HAL_FDCAN_IRQHandler+0x274>)
 8005930:	2200      	movs	r2, #0
 8005932:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fa49 	bl	8005dcc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800593a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593c:	0a9b      	lsrs	r3, r3, #10
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01d      	beq.n	8005982 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	0a9b      	lsrs	r3, r3, #10
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d017      	beq.n	8005982 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800595a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005964:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005966:	4013      	ands	r3, r2
 8005968:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005972:	651a      	str	r2, [r3, #80]	; 0x50
 8005974:	4b59      	ldr	r3, [pc, #356]	; (8005adc <HAL_FDCAN_IRQHandler+0x274>)
 8005976:	2200      	movs	r2, #0
 8005978:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800597a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f9fc 	bl	8005d7a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00d      	beq.n	80059a4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800598e:	4b54      	ldr	r3, [pc, #336]	; (8005ae0 <HAL_FDCAN_IRQHandler+0x278>)
 8005990:	400b      	ands	r3, r1
 8005992:	6513      	str	r3, [r2, #80]	; 0x50
 8005994:	4a51      	ldr	r2, [pc, #324]	; (8005adc <HAL_FDCAN_IRQHandler+0x274>)
 8005996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005998:	0f9b      	lsrs	r3, r3, #30
 800599a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800599c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f9c0 	bl	8005d24 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80059a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00d      	beq.n	80059c6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059b0:	4b4b      	ldr	r3, [pc, #300]	; (8005ae0 <HAL_FDCAN_IRQHandler+0x278>)
 80059b2:	400b      	ands	r3, r1
 80059b4:	6513      	str	r3, [r2, #80]	; 0x50
 80059b6:	4a49      	ldr	r2, [pc, #292]	; (8005adc <HAL_FDCAN_IRQHandler+0x274>)
 80059b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ba:	0f9b      	lsrs	r3, r3, #30
 80059bc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80059be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f9ba 	bl	8005d3a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80059c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00d      	beq.n	80059e8 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80059d2:	4b43      	ldr	r3, [pc, #268]	; (8005ae0 <HAL_FDCAN_IRQHandler+0x278>)
 80059d4:	400b      	ands	r3, r1
 80059d6:	6513      	str	r3, [r2, #80]	; 0x50
 80059d8:	4a40      	ldr	r2, [pc, #256]	; (8005adc <HAL_FDCAN_IRQHandler+0x274>)
 80059da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059dc:	0f9b      	lsrs	r3, r3, #30
 80059de:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80059e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fd fc08 	bl	80031f8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80059e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00d      	beq.n	8005a0a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80059f4:	4b3a      	ldr	r3, [pc, #232]	; (8005ae0 <HAL_FDCAN_IRQHandler+0x278>)
 80059f6:	400b      	ands	r3, r1
 80059f8:	6513      	str	r3, [r2, #80]	; 0x50
 80059fa:	4a38      	ldr	r2, [pc, #224]	; (8005adc <HAL_FDCAN_IRQHandler+0x274>)
 80059fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059fe:	0f9b      	lsrs	r3, r3, #30
 8005a00:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005a02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fd fcab 	bl	8003360 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0c:	0adb      	lsrs	r3, r3, #11
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d010      	beq.n	8005a38 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	0adb      	lsrs	r3, r3, #11
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a2a:	651a      	str	r2, [r3, #80]	; 0x50
 8005a2c:	4b2b      	ldr	r3, [pc, #172]	; (8005adc <HAL_FDCAN_IRQHandler+0x274>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f98c 	bl	8005d50 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3a:	0a5b      	lsrs	r3, r3, #9
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d01d      	beq.n	8005a80 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a46:	0a5b      	lsrs	r3, r3, #9
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d017      	beq.n	8005a80 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005a58:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a64:	4013      	ands	r3, r2
 8005a66:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a70:	651a      	str	r2, [r3, #80]	; 0x50
 8005a72:	4b1a      	ldr	r3, [pc, #104]	; (8005adc <HAL_FDCAN_IRQHandler+0x274>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f972 	bl	8005d64 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a82:	0cdb      	lsrs	r3, r3, #19
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d010      	beq.n	8005aae <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	0cdb      	lsrs	r3, r3, #19
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005aa0:	651a      	str	r2, [r3, #80]	; 0x50
 8005aa2:	4b0e      	ldr	r3, [pc, #56]	; (8005adc <HAL_FDCAN_IRQHandler+0x274>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f971 	bl	8005d90 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab0:	0c1b      	lsrs	r3, r3, #16
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d016      	beq.n	8005ae8 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abc:	0c1b      	lsrs	r3, r3, #16
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d010      	beq.n	8005ae8 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005ace:	651a      	str	r2, [r3, #80]	; 0x50
 8005ad0:	4b02      	ldr	r3, [pc, #8]	; (8005adc <HAL_FDCAN_IRQHandler+0x274>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	e004      	b.n	8005ae4 <HAL_FDCAN_IRQHandler+0x27c>
 8005ada:	bf00      	nop
 8005adc:	4000a800 	.word	0x4000a800
 8005ae0:	3fcfffff 	.word	0x3fcfffff
 8005ae4:	f000 f95e 	bl	8005da4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aea:	0c9b      	lsrs	r3, r3, #18
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d010      	beq.n	8005b16 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af6:	0c9b      	lsrs	r3, r3, #18
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005b08:	651a      	str	r2, [r3, #80]	; 0x50
 8005b0a:	4b83      	ldr	r3, [pc, #524]	; (8005d18 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f951 	bl	8005db8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b18:	0c5b      	lsrs	r3, r3, #17
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d015      	beq.n	8005b4e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	0c5b      	lsrs	r3, r3, #17
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00f      	beq.n	8005b4e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b36:	651a      	str	r2, [r3, #80]	; 0x50
 8005b38:	4b77      	ldr	r3, [pc, #476]	; (8005d18 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00d      	beq.n	8005b70 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b5a:	4b70      	ldr	r3, [pc, #448]	; (8005d1c <HAL_FDCAN_IRQHandler+0x4b4>)
 8005b5c:	400b      	ands	r3, r1
 8005b5e:	6513      	str	r3, [r2, #80]	; 0x50
 8005b60:	4a6d      	ldr	r2, [pc, #436]	; (8005d18 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b64:	0f9b      	lsrs	r3, r3, #30
 8005b66:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005b68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f942 	bl	8005df4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d011      	beq.n	8005b9a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b7c:	4b67      	ldr	r3, [pc, #412]	; (8005d1c <HAL_FDCAN_IRQHandler+0x4b4>)
 8005b7e:	400b      	ands	r3, r1
 8005b80:	6513      	str	r3, [r2, #80]	; 0x50
 8005b82:	4a65      	ldr	r2, [pc, #404]	; (8005d18 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b86:	0f9b      	lsrs	r3, r3, #30
 8005b88:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a60      	ldr	r2, [pc, #384]	; (8005d20 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	f040 80ac 	bne.w	8005cfe <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 80a4 	beq.w	8005cfe <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bca:	4013      	ands	r3, r2
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bd8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005be2:	4013      	ands	r3, r2
 8005be4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8005c08:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	6a3a      	ldr	r2, [r7, #32]
 8005c12:	4013      	ands	r3, r2
 8005c14:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8005c20:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d007      	beq.n	8005c54 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c4a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005c4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f8db 	bl	8005e0a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c60:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f8db 	bl	8005e20 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	099b      	lsrs	r3, r3, #6
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d01a      	beq.n	8005cac <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	099b      	lsrs	r3, r3, #6
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d014      	beq.n	8005cac <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c88:	0c1b      	lsrs	r3, r3, #16
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c98:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2240      	movs	r2, #64	; 0x40
 8005ca0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	6939      	ldr	r1, [r7, #16]
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f8c5 	bl	8005e36 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005cba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f8c6 	bl	8005e4e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	6a3a      	ldr	r2, [r7, #32]
 8005cce:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00b      	beq.n	8005cfe <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f869 	bl	8005de0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005d0e:	bf00      	nop
 8005d10:	3758      	adds	r7, #88	; 0x58
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	4000a800 	.word	0x4000a800
 8005d1c:	3fcfffff 	.word	0x3fcfffff
 8005d20:	4000a000 	.word	0x4000a000

08005d24 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005e42:	bf00      	nop
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e70:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005e7a:	4ba7      	ldr	r3, [pc, #668]	; (8006118 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	0091      	lsls	r1, r2, #2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	430b      	orrs	r3, r1
 8005e88:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e94:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	041a      	lsls	r2, r3, #16
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	4413      	add	r3, r2
 8005eb0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005eba:	4b97      	ldr	r3, [pc, #604]	; (8006118 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	0091      	lsls	r1, r2, #2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005edc:	041a      	lsls	r2, r3, #16
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005efc:	4b86      	ldr	r3, [pc, #536]	; (8006118 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005efe:	4013      	ands	r3, r2
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	0091      	lsls	r1, r2, #2
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	6812      	ldr	r2, [r2, #0]
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f16:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	041a      	lsls	r2, r3, #16
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	4413      	add	r3, r2
 8005f3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005f44:	4b74      	ldr	r3, [pc, #464]	; (8006118 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005f46:	4013      	ands	r3, r2
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	0091      	lsls	r1, r2, #2
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6812      	ldr	r2, [r2, #0]
 8005f50:	430b      	orrs	r3, r1
 8005f52:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f5e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f66:	041a      	lsls	r2, r3, #16
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005f7a:	fb02 f303 	mul.w	r3, r2, r3
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	4413      	add	r3, r2
 8005f82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005f8c:	4b62      	ldr	r3, [pc, #392]	; (8006118 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	0091      	lsls	r1, r2, #2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6812      	ldr	r2, [r2, #0]
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	4413      	add	r3, r2
 8005fae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005fb8:	4b57      	ldr	r3, [pc, #348]	; (8006118 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005fba:	4013      	ands	r3, r2
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	0091      	lsls	r1, r2, #2
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	6812      	ldr	r2, [r2, #0]
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fd2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fda:	041a      	lsls	r2, r3, #16
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	4413      	add	r3, r2
 8005ff0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005ffa:	4b47      	ldr	r3, [pc, #284]	; (8006118 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	0091      	lsls	r1, r2, #2
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	6812      	ldr	r2, [r2, #0]
 8006006:	430b      	orrs	r3, r1
 8006008:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006014:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601c:	041a      	lsls	r2, r3, #16
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006030:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006038:	061a      	lsls	r2, r3, #24
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006048:	4b34      	ldr	r3, [pc, #208]	; (800611c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800604a:	4413      	add	r3, r2
 800604c:	009a      	lsls	r2, r3, #2
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	441a      	add	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	441a      	add	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800607e:	fb01 f303 	mul.w	r3, r1, r3
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	441a      	add	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006096:	fb01 f303 	mul.w	r3, r1, r3
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	441a      	add	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060aa:	6879      	ldr	r1, [r7, #4]
 80060ac:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80060ae:	fb01 f303 	mul.w	r3, r1, r3
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	441a      	add	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	441a      	add	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80060de:	fb01 f303 	mul.w	r3, r1, r3
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	441a      	add	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80060fa:	fb01 f303 	mul.w	r3, r1, r3
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	441a      	add	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610e:	4a04      	ldr	r2, [pc, #16]	; (8006120 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d915      	bls.n	8006140 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006114:	e006      	b.n	8006124 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006116:	bf00      	nop
 8006118:	ffff0003 	.word	0xffff0003
 800611c:	10002b00 	.word	0x10002b00
 8006120:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2203      	movs	r2, #3
 8006138:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e010      	b.n	8006162 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	e005      	b.n	8006154 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3304      	adds	r3, #4
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	429a      	cmp	r2, r3
 800615e:	d3f3      	bcc.n	8006148 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop

08006170 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8006170:	b480      	push	{r7}
 8006172:	b089      	sub	sp, #36	; 0x24
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
 800617c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800618e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006196:	4313      	orrs	r3, r2
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	e00a      	b.n	80061b2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80061a4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80061aa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80061ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061b0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80061bc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80061c2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80061c8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061dc:	6839      	ldr	r1, [r7, #0]
 80061de:	fb01 f303 	mul.w	r3, r1, r3
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	3304      	adds	r3, #4
 80061f2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	3304      	adds	r3, #4
 80061fe:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	e020      	b.n	8006248 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	3303      	adds	r3, #3
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	4413      	add	r3, r2
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	3302      	adds	r3, #2
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	440b      	add	r3, r1
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800621e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	3301      	adds	r3, #1
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	440b      	add	r3, r1
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800622c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	440a      	add	r2, r1
 8006234:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8006236:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	3304      	adds	r3, #4
 8006240:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	3304      	adds	r3, #4
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	0c1b      	lsrs	r3, r3, #16
 800624e:	4a06      	ldr	r2, [pc, #24]	; (8006268 <FDCAN_CopyMessageToRAM+0xf8>)
 8006250:	5cd3      	ldrb	r3, [r2, r3]
 8006252:	461a      	mov	r2, r3
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4293      	cmp	r3, r2
 8006258:	d3d5      	bcc.n	8006206 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800625a:	bf00      	nop
 800625c:	bf00      	nop
 800625e:	3724      	adds	r7, #36	; 0x24
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	0800cfac 	.word	0x0800cfac

0800626c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800626c:	b480      	push	{r7}
 800626e:	b089      	sub	sp, #36	; 0x24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006276:	2300      	movs	r3, #0
 8006278:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800627a:	4b89      	ldr	r3, [pc, #548]	; (80064a0 <HAL_GPIO_Init+0x234>)
 800627c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800627e:	e194      	b.n	80065aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	2101      	movs	r1, #1
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	fa01 f303 	lsl.w	r3, r1, r3
 800628c:	4013      	ands	r3, r2
 800628e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 8186 	beq.w	80065a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d005      	beq.n	80062b0 <HAL_GPIO_Init+0x44>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d130      	bne.n	8006312 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	2203      	movs	r2, #3
 80062bc:	fa02 f303 	lsl.w	r3, r2, r3
 80062c0:	43db      	mvns	r3, r3
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	4013      	ands	r3, r2
 80062c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80062e6:	2201      	movs	r2, #1
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	43db      	mvns	r3, r3
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	4013      	ands	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	091b      	lsrs	r3, r3, #4
 80062fc:	f003 0201 	and.w	r2, r3, #1
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	4313      	orrs	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	2b03      	cmp	r3, #3
 800631c:	d017      	beq.n	800634e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	2203      	movs	r2, #3
 800632a:	fa02 f303 	lsl.w	r3, r2, r3
 800632e:	43db      	mvns	r3, r3
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	4013      	ands	r3, r2
 8006334:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4313      	orrs	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d123      	bne.n	80063a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	08da      	lsrs	r2, r3, #3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3208      	adds	r2, #8
 8006362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	220f      	movs	r2, #15
 8006372:	fa02 f303 	lsl.w	r3, r2, r3
 8006376:	43db      	mvns	r3, r3
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	4013      	ands	r3, r2
 800637c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	4313      	orrs	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	08da      	lsrs	r2, r3, #3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3208      	adds	r2, #8
 800639c:	69b9      	ldr	r1, [r7, #24]
 800639e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	2203      	movs	r2, #3
 80063ae:	fa02 f303 	lsl.w	r3, r2, r3
 80063b2:	43db      	mvns	r3, r3
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	4013      	ands	r3, r2
 80063b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f003 0203 	and.w	r2, r3, #3
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 80e0 	beq.w	80065a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063e4:	4b2f      	ldr	r3, [pc, #188]	; (80064a4 <HAL_GPIO_Init+0x238>)
 80063e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063ea:	4a2e      	ldr	r2, [pc, #184]	; (80064a4 <HAL_GPIO_Init+0x238>)
 80063ec:	f043 0302 	orr.w	r3, r3, #2
 80063f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80063f4:	4b2b      	ldr	r3, [pc, #172]	; (80064a4 <HAL_GPIO_Init+0x238>)
 80063f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006402:	4a29      	ldr	r2, [pc, #164]	; (80064a8 <HAL_GPIO_Init+0x23c>)
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	089b      	lsrs	r3, r3, #2
 8006408:	3302      	adds	r3, #2
 800640a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	220f      	movs	r2, #15
 800641a:	fa02 f303 	lsl.w	r3, r2, r3
 800641e:	43db      	mvns	r3, r3
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	4013      	ands	r3, r2
 8006424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a20      	ldr	r2, [pc, #128]	; (80064ac <HAL_GPIO_Init+0x240>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d052      	beq.n	80064d4 <HAL_GPIO_Init+0x268>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a1f      	ldr	r2, [pc, #124]	; (80064b0 <HAL_GPIO_Init+0x244>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d031      	beq.n	800649a <HAL_GPIO_Init+0x22e>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a1e      	ldr	r2, [pc, #120]	; (80064b4 <HAL_GPIO_Init+0x248>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d02b      	beq.n	8006496 <HAL_GPIO_Init+0x22a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a1d      	ldr	r2, [pc, #116]	; (80064b8 <HAL_GPIO_Init+0x24c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d025      	beq.n	8006492 <HAL_GPIO_Init+0x226>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a1c      	ldr	r2, [pc, #112]	; (80064bc <HAL_GPIO_Init+0x250>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d01f      	beq.n	800648e <HAL_GPIO_Init+0x222>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a1b      	ldr	r2, [pc, #108]	; (80064c0 <HAL_GPIO_Init+0x254>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d019      	beq.n	800648a <HAL_GPIO_Init+0x21e>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a1a      	ldr	r2, [pc, #104]	; (80064c4 <HAL_GPIO_Init+0x258>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <HAL_GPIO_Init+0x21a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a19      	ldr	r2, [pc, #100]	; (80064c8 <HAL_GPIO_Init+0x25c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00d      	beq.n	8006482 <HAL_GPIO_Init+0x216>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a18      	ldr	r2, [pc, #96]	; (80064cc <HAL_GPIO_Init+0x260>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d007      	beq.n	800647e <HAL_GPIO_Init+0x212>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a17      	ldr	r2, [pc, #92]	; (80064d0 <HAL_GPIO_Init+0x264>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d101      	bne.n	800647a <HAL_GPIO_Init+0x20e>
 8006476:	2309      	movs	r3, #9
 8006478:	e02d      	b.n	80064d6 <HAL_GPIO_Init+0x26a>
 800647a:	230a      	movs	r3, #10
 800647c:	e02b      	b.n	80064d6 <HAL_GPIO_Init+0x26a>
 800647e:	2308      	movs	r3, #8
 8006480:	e029      	b.n	80064d6 <HAL_GPIO_Init+0x26a>
 8006482:	2307      	movs	r3, #7
 8006484:	e027      	b.n	80064d6 <HAL_GPIO_Init+0x26a>
 8006486:	2306      	movs	r3, #6
 8006488:	e025      	b.n	80064d6 <HAL_GPIO_Init+0x26a>
 800648a:	2305      	movs	r3, #5
 800648c:	e023      	b.n	80064d6 <HAL_GPIO_Init+0x26a>
 800648e:	2304      	movs	r3, #4
 8006490:	e021      	b.n	80064d6 <HAL_GPIO_Init+0x26a>
 8006492:	2303      	movs	r3, #3
 8006494:	e01f      	b.n	80064d6 <HAL_GPIO_Init+0x26a>
 8006496:	2302      	movs	r3, #2
 8006498:	e01d      	b.n	80064d6 <HAL_GPIO_Init+0x26a>
 800649a:	2301      	movs	r3, #1
 800649c:	e01b      	b.n	80064d6 <HAL_GPIO_Init+0x26a>
 800649e:	bf00      	nop
 80064a0:	58000080 	.word	0x58000080
 80064a4:	58024400 	.word	0x58024400
 80064a8:	58000400 	.word	0x58000400
 80064ac:	58020000 	.word	0x58020000
 80064b0:	58020400 	.word	0x58020400
 80064b4:	58020800 	.word	0x58020800
 80064b8:	58020c00 	.word	0x58020c00
 80064bc:	58021000 	.word	0x58021000
 80064c0:	58021400 	.word	0x58021400
 80064c4:	58021800 	.word	0x58021800
 80064c8:	58021c00 	.word	0x58021c00
 80064cc:	58022000 	.word	0x58022000
 80064d0:	58022400 	.word	0x58022400
 80064d4:	2300      	movs	r3, #0
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	f002 0203 	and.w	r2, r2, #3
 80064dc:	0092      	lsls	r2, r2, #2
 80064de:	4093      	lsls	r3, r2
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064e6:	4938      	ldr	r1, [pc, #224]	; (80065c8 <HAL_GPIO_Init+0x35c>)
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	089b      	lsrs	r3, r3, #2
 80064ec:	3302      	adds	r3, #2
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	43db      	mvns	r3, r3
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	4013      	ands	r3, r2
 8006504:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	4313      	orrs	r3, r2
 8006518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800651a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	43db      	mvns	r3, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4013      	ands	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006548:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	43db      	mvns	r3, r3
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	4013      	ands	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	4313      	orrs	r3, r2
 8006572:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	43db      	mvns	r3, r3
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	4013      	ands	r3, r2
 8006588:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	3301      	adds	r3, #1
 80065a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f47f ae63 	bne.w	8006280 <HAL_GPIO_Init+0x14>
  }
}
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
 80065be:	3724      	adds	r7, #36	; 0x24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	58000400 	.word	0x58000400

080065cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	807b      	strh	r3, [r7, #2]
 80065d8:	4613      	mov	r3, r2
 80065da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80065dc:	787b      	ldrb	r3, [r7, #1]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065e2:	887a      	ldrh	r2, [r7, #2]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80065e8:	e003      	b.n	80065f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80065ea:	887b      	ldrh	r3, [r7, #2]
 80065ec:	041a      	lsls	r2, r3, #16
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	619a      	str	r2, [r3, #24]
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80065fe:	b480      	push	{r7}
 8006600:	b085      	sub	sp, #20
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006610:	887a      	ldrh	r2, [r7, #2]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4013      	ands	r3, r2
 8006616:	041a      	lsls	r2, r3, #16
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	43d9      	mvns	r1, r3
 800661c:	887b      	ldrh	r3, [r7, #2]
 800661e:	400b      	ands	r3, r1
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	619a      	str	r2, [r3, #24]
}
 8006626:	bf00      	nop
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
	...

08006634 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800663c:	4a08      	ldr	r2, [pc, #32]	; (8006660 <HAL_HSEM_FastTake+0x2c>)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3320      	adds	r3, #32
 8006642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006646:	4a07      	ldr	r2, [pc, #28]	; (8006664 <HAL_HSEM_FastTake+0x30>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d101      	bne.n	8006650 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	e000      	b.n	8006652 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
}
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	58026400 	.word	0x58026400
 8006664:	80000300 	.word	0x80000300

08006668 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006672:	4906      	ldr	r1, [pc, #24]	; (800668c <HAL_HSEM_Release+0x24>)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	58026400 	.word	0x58026400

08006690 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e07f      	b.n	80067a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7fd fb8e 	bl	8003dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2224      	movs	r2, #36	; 0x24
 80066c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0201 	bic.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d107      	bne.n	800670a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689a      	ldr	r2, [r3, #8]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006706:	609a      	str	r2, [r3, #8]
 8006708:	e006      	b.n	8006718 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006716:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d104      	bne.n	800672a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006728:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6859      	ldr	r1, [r3, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	4b1d      	ldr	r3, [pc, #116]	; (80067ac <HAL_I2C_Init+0x11c>)
 8006736:	430b      	orrs	r3, r1
 8006738:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006748:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691a      	ldr	r2, [r3, #16]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	69d9      	ldr	r1, [r3, #28]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1a      	ldr	r2, [r3, #32]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0201 	orr.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	02008000 	.word	0x02008000

080067b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	607a      	str	r2, [r7, #4]
 80067ba:	461a      	mov	r2, r3
 80067bc:	460b      	mov	r3, r1
 80067be:	817b      	strh	r3, [r7, #10]
 80067c0:	4613      	mov	r3, r2
 80067c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	f040 80da 	bne.w	8006986 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d101      	bne.n	80067e0 <HAL_I2C_Master_Transmit+0x30>
 80067dc:	2302      	movs	r3, #2
 80067de:	e0d3      	b.n	8006988 <HAL_I2C_Master_Transmit+0x1d8>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067e8:	f7fd fdca 	bl	8004380 <HAL_GetTick>
 80067ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	2319      	movs	r3, #25
 80067f4:	2201      	movs	r2, #1
 80067f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 fa00 	bl	8006c00 <I2C_WaitOnFlagUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e0be      	b.n	8006988 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2221      	movs	r2, #33	; 0x21
 800680e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2210      	movs	r2, #16
 8006816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	893a      	ldrh	r2, [r7, #8]
 800682a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006836:	b29b      	uxth	r3, r3
 8006838:	2bff      	cmp	r3, #255	; 0xff
 800683a:	d90e      	bls.n	800685a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	22ff      	movs	r2, #255	; 0xff
 8006840:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006846:	b2da      	uxtb	r2, r3
 8006848:	8979      	ldrh	r1, [r7, #10]
 800684a:	4b51      	ldr	r3, [pc, #324]	; (8006990 <HAL_I2C_Master_Transmit+0x1e0>)
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 fbf6 	bl	8007044 <I2C_TransferConfig>
 8006858:	e06c      	b.n	8006934 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685e:	b29a      	uxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006868:	b2da      	uxtb	r2, r3
 800686a:	8979      	ldrh	r1, [r7, #10]
 800686c:	4b48      	ldr	r3, [pc, #288]	; (8006990 <HAL_I2C_Master_Transmit+0x1e0>)
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 fbe5 	bl	8007044 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800687a:	e05b      	b.n	8006934 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	6a39      	ldr	r1, [r7, #32]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f9fd 	bl	8006c80 <I2C_WaitOnTXISFlagUntilTimeout>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e07b      	b.n	8006988 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	781a      	ldrb	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	3b01      	subs	r3, #1
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d034      	beq.n	8006934 <HAL_I2C_Master_Transmit+0x184>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d130      	bne.n	8006934 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	2200      	movs	r2, #0
 80068da:	2180      	movs	r1, #128	; 0x80
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 f98f 	bl	8006c00 <I2C_WaitOnFlagUntilTimeout>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e04d      	b.n	8006988 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2bff      	cmp	r3, #255	; 0xff
 80068f4:	d90e      	bls.n	8006914 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	22ff      	movs	r2, #255	; 0xff
 80068fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006900:	b2da      	uxtb	r2, r3
 8006902:	8979      	ldrh	r1, [r7, #10]
 8006904:	2300      	movs	r3, #0
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 fb99 	bl	8007044 <I2C_TransferConfig>
 8006912:	e00f      	b.n	8006934 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006918:	b29a      	uxth	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006922:	b2da      	uxtb	r2, r3
 8006924:	8979      	ldrh	r1, [r7, #10]
 8006926:	2300      	movs	r3, #0
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 fb88 	bl	8007044 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d19e      	bne.n	800687c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	6a39      	ldr	r1, [r7, #32]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f9dc 	bl	8006d00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e01a      	b.n	8006988 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2220      	movs	r2, #32
 8006958:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6859      	ldr	r1, [r3, #4]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <HAL_I2C_Master_Transmit+0x1e4>)
 8006966:	400b      	ands	r3, r1
 8006968:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2220      	movs	r2, #32
 800696e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	e000      	b.n	8006988 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006986:	2302      	movs	r3, #2
  }
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	80002000 	.word	0x80002000
 8006994:	fe00e800 	.word	0xfe00e800

08006998 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af02      	add	r7, sp, #8
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	607a      	str	r2, [r7, #4]
 80069a2:	461a      	mov	r2, r3
 80069a4:	460b      	mov	r3, r1
 80069a6:	817b      	strh	r3, [r7, #10]
 80069a8:	4613      	mov	r3, r2
 80069aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	f040 80db 	bne.w	8006b70 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d101      	bne.n	80069c8 <HAL_I2C_Master_Receive+0x30>
 80069c4:	2302      	movs	r3, #2
 80069c6:	e0d4      	b.n	8006b72 <HAL_I2C_Master_Receive+0x1da>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80069d0:	f7fd fcd6 	bl	8004380 <HAL_GetTick>
 80069d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	2319      	movs	r3, #25
 80069dc:	2201      	movs	r2, #1
 80069de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 f90c 	bl	8006c00 <I2C_WaitOnFlagUntilTimeout>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e0bf      	b.n	8006b72 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2222      	movs	r2, #34	; 0x22
 80069f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2210      	movs	r2, #16
 80069fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	893a      	ldrh	r2, [r7, #8]
 8006a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	2bff      	cmp	r3, #255	; 0xff
 8006a22:	d90e      	bls.n	8006a42 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	22ff      	movs	r2, #255	; 0xff
 8006a28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	8979      	ldrh	r1, [r7, #10]
 8006a32:	4b52      	ldr	r3, [pc, #328]	; (8006b7c <HAL_I2C_Master_Receive+0x1e4>)
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 fb02 	bl	8007044 <I2C_TransferConfig>
 8006a40:	e06d      	b.n	8006b1e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	8979      	ldrh	r1, [r7, #10]
 8006a54:	4b49      	ldr	r3, [pc, #292]	; (8006b7c <HAL_I2C_Master_Receive+0x1e4>)
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 faf1 	bl	8007044 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006a62:	e05c      	b.n	8006b1e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	6a39      	ldr	r1, [r7, #32]
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f985 	bl	8006d78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e07c      	b.n	8006b72 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d034      	beq.n	8006b1e <HAL_I2C_Master_Receive+0x186>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d130      	bne.n	8006b1e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2180      	movs	r1, #128	; 0x80
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 f89a 	bl	8006c00 <I2C_WaitOnFlagUntilTimeout>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e04d      	b.n	8006b72 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	2bff      	cmp	r3, #255	; 0xff
 8006ade:	d90e      	bls.n	8006afe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	22ff      	movs	r2, #255	; 0xff
 8006ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	8979      	ldrh	r1, [r7, #10]
 8006aee:	2300      	movs	r3, #0
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 faa4 	bl	8007044 <I2C_TransferConfig>
 8006afc:	e00f      	b.n	8006b1e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	8979      	ldrh	r1, [r7, #10]
 8006b10:	2300      	movs	r3, #0
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 fa93 	bl	8007044 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d19d      	bne.n	8006a64 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	6a39      	ldr	r1, [r7, #32]
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 f8e7 	bl	8006d00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e01a      	b.n	8006b72 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2220      	movs	r2, #32
 8006b42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6859      	ldr	r1, [r3, #4]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <HAL_I2C_Master_Receive+0x1e8>)
 8006b50:	400b      	ands	r3, r1
 8006b52:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	e000      	b.n	8006b72 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006b70:	2302      	movs	r3, #2
  }
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	80002400 	.word	0x80002400
 8006b80:	fe00e800 	.word	0xfe00e800

08006b84 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b92:	b2db      	uxtb	r3, r3
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d103      	bne.n	8006bd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d007      	beq.n	8006bf4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 0201 	orr.w	r2, r2, #1
 8006bf2:	619a      	str	r2, [r3, #24]
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	603b      	str	r3, [r7, #0]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c10:	e022      	b.n	8006c58 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c18:	d01e      	beq.n	8006c58 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c1a:	f7fd fbb1 	bl	8004380 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d302      	bcc.n	8006c30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d113      	bne.n	8006c58 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c34:	f043 0220 	orr.w	r2, r3, #32
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e00f      	b.n	8006c78 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699a      	ldr	r2, [r3, #24]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4013      	ands	r3, r2
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	bf0c      	ite	eq
 8006c68:	2301      	moveq	r3, #1
 8006c6a:	2300      	movne	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	461a      	mov	r2, r3
 8006c70:	79fb      	ldrb	r3, [r7, #7]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d0cd      	beq.n	8006c12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c8c:	e02c      	b.n	8006ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 f8ea 	bl	8006e6c <I2C_IsErrorOccurred>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e02a      	b.n	8006cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ca8:	d01e      	beq.n	8006ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006caa:	f7fd fb69 	bl	8004380 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d302      	bcc.n	8006cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d113      	bne.n	8006ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc4:	f043 0220 	orr.w	r2, r3, #32
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e007      	b.n	8006cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d1cb      	bne.n	8006c8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d0c:	e028      	b.n	8006d60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 f8aa 	bl	8006e6c <I2C_IsErrorOccurred>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e026      	b.n	8006d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d22:	f7fd fb2d 	bl	8004380 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d302      	bcc.n	8006d38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d113      	bne.n	8006d60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d3c:	f043 0220 	orr.w	r2, r3, #32
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e007      	b.n	8006d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	f003 0320 	and.w	r3, r3, #32
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	d1cf      	bne.n	8006d0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d84:	e064      	b.n	8006e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f86e 	bl	8006e6c <I2C_IsErrorOccurred>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e062      	b.n	8006e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d138      	bne.n	8006e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	f003 0304 	and.w	r3, r3, #4
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d105      	bne.n	8006dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e04e      	b.n	8006e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	f003 0310 	and.w	r3, r3, #16
 8006dcc:	2b10      	cmp	r3, #16
 8006dce:	d107      	bne.n	8006de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2204      	movs	r2, #4
 8006ddc:	645a      	str	r2, [r3, #68]	; 0x44
 8006dde:	e002      	b.n	8006de6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2220      	movs	r2, #32
 8006dec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6859      	ldr	r1, [r3, #4]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	4b1b      	ldr	r3, [pc, #108]	; (8006e68 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006dfa:	400b      	ands	r3, r1
 8006dfc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e022      	b.n	8006e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e1a:	f7fd fab1 	bl	8004380 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d302      	bcc.n	8006e30 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10f      	bne.n	8006e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e34:	f043 0220 	orr.w	r2, r3, #32
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e007      	b.n	8006e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	f003 0304 	and.w	r3, r3, #4
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	d193      	bne.n	8006d86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	fe00e800 	.word	0xfe00e800

08006e6c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08a      	sub	sp, #40	; 0x28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	f003 0310 	and.w	r3, r3, #16
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d075      	beq.n	8006f84 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2210      	movs	r2, #16
 8006e9e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ea0:	e056      	b.n	8006f50 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea8:	d052      	beq.n	8006f50 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006eaa:	f7fd fa69 	bl	8004380 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d302      	bcc.n	8006ec0 <I2C_IsErrorOccurred+0x54>
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d147      	bne.n	8006f50 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ed2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee2:	d12e      	bne.n	8006f42 <I2C_IsErrorOccurred+0xd6>
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eea:	d02a      	beq.n	8006f42 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006eec:	7cfb      	ldrb	r3, [r7, #19]
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	d027      	beq.n	8006f42 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f00:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006f02:	f7fd fa3d 	bl	8004380 <HAL_GetTick>
 8006f06:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f08:	e01b      	b.n	8006f42 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006f0a:	f7fd fa39 	bl	8004380 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2b19      	cmp	r3, #25
 8006f16:	d914      	bls.n	8006f42 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1c:	f043 0220 	orr.w	r2, r3, #32
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b20      	cmp	r3, #32
 8006f4e:	d1dc      	bne.n	8006f0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d003      	beq.n	8006f66 <I2C_IsErrorOccurred+0xfa>
 8006f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d09d      	beq.n	8006ea2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d103      	bne.n	8006f76 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2220      	movs	r2, #32
 8006f74:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	f043 0304 	orr.w	r3, r3, #4
 8006f7c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00b      	beq.n	8006fae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	f043 0301 	orr.w	r3, r3, #1
 8006f9c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fa6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	f043 0308 	orr.w	r3, r3, #8
 8006fbe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00b      	beq.n	8006ff2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	f043 0302 	orr.w	r3, r3, #2
 8006fe0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006ff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d01c      	beq.n	8007034 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f7ff fddc 	bl	8006bb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6859      	ldr	r1, [r3, #4]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	4b0d      	ldr	r3, [pc, #52]	; (8007040 <I2C_IsErrorOccurred+0x1d4>)
 800700c:	400b      	ands	r3, r1
 800700e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	431a      	orrs	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007038:	4618      	mov	r0, r3
 800703a:	3728      	adds	r7, #40	; 0x28
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	fe00e800 	.word	0xfe00e800

08007044 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	607b      	str	r3, [r7, #4]
 800704e:	460b      	mov	r3, r1
 8007050:	817b      	strh	r3, [r7, #10]
 8007052:	4613      	mov	r3, r2
 8007054:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007056:	897b      	ldrh	r3, [r7, #10]
 8007058:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800705c:	7a7b      	ldrb	r3, [r7, #9]
 800705e:	041b      	lsls	r3, r3, #16
 8007060:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007064:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	4313      	orrs	r3, r2
 800706e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007072:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	0d5b      	lsrs	r3, r3, #21
 800707e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007082:	4b08      	ldr	r3, [pc, #32]	; (80070a4 <I2C_TransferConfig+0x60>)
 8007084:	430b      	orrs	r3, r1
 8007086:	43db      	mvns	r3, r3
 8007088:	ea02 0103 	and.w	r1, r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	430a      	orrs	r2, r1
 8007094:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007096:	bf00      	nop
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	03ff63ff 	.word	0x03ff63ff

080070a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b20      	cmp	r3, #32
 80070bc:	d138      	bne.n	8007130 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d101      	bne.n	80070cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80070c8:	2302      	movs	r3, #2
 80070ca:	e032      	b.n	8007132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2224      	movs	r2, #36	; 0x24
 80070d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0201 	bic.w	r2, r2, #1
 80070ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6819      	ldr	r1, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0201 	orr.w	r2, r2, #1
 800711a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2220      	movs	r2, #32
 8007120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	e000      	b.n	8007132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007130:	2302      	movs	r3, #2
  }
}
 8007132:	4618      	mov	r0, r3
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800713e:	b480      	push	{r7}
 8007140:	b085      	sub	sp, #20
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b20      	cmp	r3, #32
 8007152:	d139      	bne.n	80071c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800715a:	2b01      	cmp	r3, #1
 800715c:	d101      	bne.n	8007162 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800715e:	2302      	movs	r3, #2
 8007160:	e033      	b.n	80071ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2224      	movs	r2, #36	; 0x24
 800716e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0201 	bic.w	r2, r2, #1
 8007180:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007190:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	021b      	lsls	r3, r3, #8
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	e000      	b.n	80071ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80071c8:	2302      	movs	r3, #2
  }
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80071d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071d8:	b08f      	sub	sp, #60	; 0x3c
 80071da:	af0a      	add	r7, sp, #40	; 0x28
 80071dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e116      	b.n	8007416 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fc fe74 	bl	8003ef0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2203      	movs	r2, #3
 800720c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007218:	2b00      	cmp	r3, #0
 800721a:	d102      	bne.n	8007222 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f002 ff22 	bl	800a070 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	603b      	str	r3, [r7, #0]
 8007232:	687e      	ldr	r6, [r7, #4]
 8007234:	466d      	mov	r5, sp
 8007236:	f106 0410 	add.w	r4, r6, #16
 800723a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800723c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800723e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007242:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007246:	e885 0003 	stmia.w	r5, {r0, r1}
 800724a:	1d33      	adds	r3, r6, #4
 800724c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800724e:	6838      	ldr	r0, [r7, #0]
 8007250:	f002 fea0 	bl	8009f94 <USB_CoreInit>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d005      	beq.n	8007266 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e0d7      	b.n	8007416 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2100      	movs	r1, #0
 800726c:	4618      	mov	r0, r3
 800726e:	f002 ff10 	bl	800a092 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007272:	2300      	movs	r3, #0
 8007274:	73fb      	strb	r3, [r7, #15]
 8007276:	e04a      	b.n	800730e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007278:	7bfa      	ldrb	r2, [r7, #15]
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	4613      	mov	r3, r2
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	4413      	add	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	333d      	adds	r3, #61	; 0x3d
 8007288:	2201      	movs	r2, #1
 800728a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800728c:	7bfa      	ldrb	r2, [r7, #15]
 800728e:	6879      	ldr	r1, [r7, #4]
 8007290:	4613      	mov	r3, r2
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	440b      	add	r3, r1
 800729a:	333c      	adds	r3, #60	; 0x3c
 800729c:	7bfa      	ldrb	r2, [r7, #15]
 800729e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80072a0:	7bfa      	ldrb	r2, [r7, #15]
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	b298      	uxth	r0, r3
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	4613      	mov	r3, r2
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	440b      	add	r3, r1
 80072b2:	3344      	adds	r3, #68	; 0x44
 80072b4:	4602      	mov	r2, r0
 80072b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072b8:	7bfa      	ldrb	r2, [r7, #15]
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	4613      	mov	r3, r2
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	440b      	add	r3, r1
 80072c6:	3340      	adds	r3, #64	; 0x40
 80072c8:	2200      	movs	r2, #0
 80072ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80072cc:	7bfa      	ldrb	r2, [r7, #15]
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	4613      	mov	r3, r2
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	4413      	add	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	440b      	add	r3, r1
 80072da:	3348      	adds	r3, #72	; 0x48
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80072e0:	7bfa      	ldrb	r2, [r7, #15]
 80072e2:	6879      	ldr	r1, [r7, #4]
 80072e4:	4613      	mov	r3, r2
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	4413      	add	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	440b      	add	r3, r1
 80072ee:	334c      	adds	r3, #76	; 0x4c
 80072f0:	2200      	movs	r2, #0
 80072f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80072f4:	7bfa      	ldrb	r2, [r7, #15]
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	4613      	mov	r3, r2
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	4413      	add	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	440b      	add	r3, r1
 8007302:	3354      	adds	r3, #84	; 0x54
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	3301      	adds	r3, #1
 800730c:	73fb      	strb	r3, [r7, #15]
 800730e:	7bfa      	ldrb	r2, [r7, #15]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	429a      	cmp	r2, r3
 8007316:	d3af      	bcc.n	8007278 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007318:	2300      	movs	r3, #0
 800731a:	73fb      	strb	r3, [r7, #15]
 800731c:	e044      	b.n	80073a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800731e:	7bfa      	ldrb	r2, [r7, #15]
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	4613      	mov	r3, r2
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	440b      	add	r3, r1
 800732c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007330:	2200      	movs	r2, #0
 8007332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007334:	7bfa      	ldrb	r2, [r7, #15]
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	4613      	mov	r3, r2
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	4413      	add	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	440b      	add	r3, r1
 8007342:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007346:	7bfa      	ldrb	r2, [r7, #15]
 8007348:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800734a:	7bfa      	ldrb	r2, [r7, #15]
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	4613      	mov	r3, r2
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800735c:	2200      	movs	r2, #0
 800735e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007360:	7bfa      	ldrb	r2, [r7, #15]
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	4613      	mov	r3, r2
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007376:	7bfa      	ldrb	r2, [r7, #15]
 8007378:	6879      	ldr	r1, [r7, #4]
 800737a:	4613      	mov	r3, r2
 800737c:	00db      	lsls	r3, r3, #3
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	440b      	add	r3, r1
 8007384:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800738c:	7bfa      	ldrb	r2, [r7, #15]
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	4613      	mov	r3, r2
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	440b      	add	r3, r1
 800739a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
 80073a4:	3301      	adds	r3, #1
 80073a6:	73fb      	strb	r3, [r7, #15]
 80073a8:	7bfa      	ldrb	r2, [r7, #15]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d3b5      	bcc.n	800731e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	687e      	ldr	r6, [r7, #4]
 80073ba:	466d      	mov	r5, sp
 80073bc:	f106 0410 	add.w	r4, r6, #16
 80073c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80073cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80073d0:	1d33      	adds	r3, r6, #4
 80073d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073d4:	6838      	ldr	r0, [r7, #0]
 80073d6:	f002 fea9 	bl	800a12c <USB_DevInit>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e014      	b.n	8007416 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	2b01      	cmp	r3, #1
 8007402:	d102      	bne.n	800740a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f80b 	bl	8007420 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4618      	mov	r0, r3
 8007410:	f003 f867 	bl	800a4e2 <USB_DevDisconnect>

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007420 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800744e:	4b05      	ldr	r3, [pc, #20]	; (8007464 <HAL_PCDEx_ActivateLPM+0x44>)
 8007450:	4313      	orrs	r3, r2
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	10000003 	.word	0x10000003

08007468 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007470:	4b29      	ldr	r3, [pc, #164]	; (8007518 <HAL_PWREx_ConfigSupply+0xb0>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f003 0307 	and.w	r3, r3, #7
 8007478:	2b06      	cmp	r3, #6
 800747a:	d00a      	beq.n	8007492 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800747c:	4b26      	ldr	r3, [pc, #152]	; (8007518 <HAL_PWREx_ConfigSupply+0xb0>)
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	429a      	cmp	r2, r3
 8007488:	d001      	beq.n	800748e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e040      	b.n	8007510 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	e03e      	b.n	8007510 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007492:	4b21      	ldr	r3, [pc, #132]	; (8007518 <HAL_PWREx_ConfigSupply+0xb0>)
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800749a:	491f      	ldr	r1, [pc, #124]	; (8007518 <HAL_PWREx_ConfigSupply+0xb0>)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80074a2:	f7fc ff6d 	bl	8004380 <HAL_GetTick>
 80074a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80074a8:	e009      	b.n	80074be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80074aa:	f7fc ff69 	bl	8004380 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074b8:	d901      	bls.n	80074be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e028      	b.n	8007510 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80074be:	4b16      	ldr	r3, [pc, #88]	; (8007518 <HAL_PWREx_ConfigSupply+0xb0>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ca:	d1ee      	bne.n	80074aa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b1e      	cmp	r3, #30
 80074d0:	d008      	beq.n	80074e4 <HAL_PWREx_ConfigSupply+0x7c>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b2e      	cmp	r3, #46	; 0x2e
 80074d6:	d005      	beq.n	80074e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b1d      	cmp	r3, #29
 80074dc:	d002      	beq.n	80074e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b2d      	cmp	r3, #45	; 0x2d
 80074e2:	d114      	bne.n	800750e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80074e4:	f7fc ff4c 	bl	8004380 <HAL_GetTick>
 80074e8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80074ea:	e009      	b.n	8007500 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80074ec:	f7fc ff48 	bl	8004380 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074fa:	d901      	bls.n	8007500 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e007      	b.n	8007510 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007500:	4b05      	ldr	r3, [pc, #20]	; (8007518 <HAL_PWREx_ConfigSupply+0xb0>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800750c:	d1ee      	bne.n	80074ec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	58024800 	.word	0x58024800

0800751c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800751c:	b480      	push	{r7}
 800751e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007520:	4b05      	ldr	r3, [pc, #20]	; (8007538 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	4a04      	ldr	r2, [pc, #16]	; (8007538 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800752a:	60d3      	str	r3, [r2, #12]
}
 800752c:	bf00      	nop
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	58024800 	.word	0x58024800

0800753c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08c      	sub	sp, #48	; 0x30
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d102      	bne.n	8007550 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f000 bc1d 	b.w	8007d8a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8087 	beq.w	800766c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800755e:	4b99      	ldr	r3, [pc, #612]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007566:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007568:	4b96      	ldr	r3, [pc, #600]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 800756a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	2b10      	cmp	r3, #16
 8007572:	d007      	beq.n	8007584 <HAL_RCC_OscConfig+0x48>
 8007574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007576:	2b18      	cmp	r3, #24
 8007578:	d110      	bne.n	800759c <HAL_RCC_OscConfig+0x60>
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	f003 0303 	and.w	r3, r3, #3
 8007580:	2b02      	cmp	r3, #2
 8007582:	d10b      	bne.n	800759c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007584:	4b8f      	ldr	r3, [pc, #572]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d06c      	beq.n	800766a <HAL_RCC_OscConfig+0x12e>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d168      	bne.n	800766a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e3f6      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075a4:	d106      	bne.n	80075b4 <HAL_RCC_OscConfig+0x78>
 80075a6:	4b87      	ldr	r3, [pc, #540]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a86      	ldr	r2, [pc, #536]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80075ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	e02e      	b.n	8007612 <HAL_RCC_OscConfig+0xd6>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10c      	bne.n	80075d6 <HAL_RCC_OscConfig+0x9a>
 80075bc:	4b81      	ldr	r3, [pc, #516]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a80      	ldr	r2, [pc, #512]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80075c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	4b7e      	ldr	r3, [pc, #504]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a7d      	ldr	r2, [pc, #500]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80075ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	e01d      	b.n	8007612 <HAL_RCC_OscConfig+0xd6>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075de:	d10c      	bne.n	80075fa <HAL_RCC_OscConfig+0xbe>
 80075e0:	4b78      	ldr	r3, [pc, #480]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a77      	ldr	r2, [pc, #476]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80075e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	4b75      	ldr	r3, [pc, #468]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a74      	ldr	r2, [pc, #464]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80075f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	e00b      	b.n	8007612 <HAL_RCC_OscConfig+0xd6>
 80075fa:	4b72      	ldr	r3, [pc, #456]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a71      	ldr	r2, [pc, #452]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 8007600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	4b6f      	ldr	r3, [pc, #444]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a6e      	ldr	r2, [pc, #440]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 800760c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007610:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d013      	beq.n	8007642 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800761a:	f7fc feb1 	bl	8004380 <HAL_GetTick>
 800761e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007620:	e008      	b.n	8007634 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007622:	f7fc fead 	bl	8004380 <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	2b64      	cmp	r3, #100	; 0x64
 800762e:	d901      	bls.n	8007634 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e3aa      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007634:	4b63      	ldr	r3, [pc, #396]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0f0      	beq.n	8007622 <HAL_RCC_OscConfig+0xe6>
 8007640:	e014      	b.n	800766c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007642:	f7fc fe9d 	bl	8004380 <HAL_GetTick>
 8007646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007648:	e008      	b.n	800765c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800764a:	f7fc fe99 	bl	8004380 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b64      	cmp	r3, #100	; 0x64
 8007656:	d901      	bls.n	800765c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e396      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800765c:	4b59      	ldr	r3, [pc, #356]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1f0      	bne.n	800764a <HAL_RCC_OscConfig+0x10e>
 8007668:	e000      	b.n	800766c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800766a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 80cb 	beq.w	8007810 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800767a:	4b52      	ldr	r3, [pc, #328]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007682:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007684:	4b4f      	ldr	r3, [pc, #316]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 8007686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007688:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d007      	beq.n	80076a0 <HAL_RCC_OscConfig+0x164>
 8007690:	6a3b      	ldr	r3, [r7, #32]
 8007692:	2b18      	cmp	r3, #24
 8007694:	d156      	bne.n	8007744 <HAL_RCC_OscConfig+0x208>
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	f003 0303 	and.w	r3, r3, #3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d151      	bne.n	8007744 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076a0:	4b48      	ldr	r3, [pc, #288]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d005      	beq.n	80076b8 <HAL_RCC_OscConfig+0x17c>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e368      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80076b8:	4b42      	ldr	r3, [pc, #264]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f023 0219 	bic.w	r2, r3, #25
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	493f      	ldr	r1, [pc, #252]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80076ca:	f7fc fe59 	bl	8004380 <HAL_GetTick>
 80076ce:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076d0:	e008      	b.n	80076e4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076d2:	f7fc fe55 	bl	8004380 <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d901      	bls.n	80076e4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e352      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076e4:	4b37      	ldr	r3, [pc, #220]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0f0      	beq.n	80076d2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076f0:	f7fc fe76 	bl	80043e0 <HAL_GetREVID>
 80076f4:	4603      	mov	r3, r0
 80076f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d817      	bhi.n	800772e <HAL_RCC_OscConfig+0x1f2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	2b40      	cmp	r3, #64	; 0x40
 8007704:	d108      	bne.n	8007718 <HAL_RCC_OscConfig+0x1dc>
 8007706:	4b2f      	ldr	r3, [pc, #188]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800770e:	4a2d      	ldr	r2, [pc, #180]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 8007710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007714:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007716:	e07b      	b.n	8007810 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007718:	4b2a      	ldr	r3, [pc, #168]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	031b      	lsls	r3, r3, #12
 8007726:	4927      	ldr	r1, [pc, #156]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 8007728:	4313      	orrs	r3, r2
 800772a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800772c:	e070      	b.n	8007810 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800772e:	4b25      	ldr	r3, [pc, #148]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	061b      	lsls	r3, r3, #24
 800773c:	4921      	ldr	r1, [pc, #132]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 800773e:	4313      	orrs	r3, r2
 8007740:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007742:	e065      	b.n	8007810 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d048      	beq.n	80077de <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800774c:	4b1d      	ldr	r3, [pc, #116]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f023 0219 	bic.w	r2, r3, #25
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	491a      	ldr	r1, [pc, #104]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 800775a:	4313      	orrs	r3, r2
 800775c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775e:	f7fc fe0f 	bl	8004380 <HAL_GetTick>
 8007762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007764:	e008      	b.n	8007778 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007766:	f7fc fe0b 	bl	8004380 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d901      	bls.n	8007778 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e308      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007778:	4b12      	ldr	r3, [pc, #72]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b00      	cmp	r3, #0
 8007782:	d0f0      	beq.n	8007766 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007784:	f7fc fe2c 	bl	80043e0 <HAL_GetREVID>
 8007788:	4603      	mov	r3, r0
 800778a:	f241 0203 	movw	r2, #4099	; 0x1003
 800778e:	4293      	cmp	r3, r2
 8007790:	d81a      	bhi.n	80077c8 <HAL_RCC_OscConfig+0x28c>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	2b40      	cmp	r3, #64	; 0x40
 8007798:	d108      	bne.n	80077ac <HAL_RCC_OscConfig+0x270>
 800779a:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80077a2:	4a08      	ldr	r2, [pc, #32]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80077a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077a8:	6053      	str	r3, [r2, #4]
 80077aa:	e031      	b.n	8007810 <HAL_RCC_OscConfig+0x2d4>
 80077ac:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	031b      	lsls	r3, r3, #12
 80077ba:	4902      	ldr	r1, [pc, #8]	; (80077c4 <HAL_RCC_OscConfig+0x288>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	604b      	str	r3, [r1, #4]
 80077c0:	e026      	b.n	8007810 <HAL_RCC_OscConfig+0x2d4>
 80077c2:	bf00      	nop
 80077c4:	58024400 	.word	0x58024400
 80077c8:	4b9a      	ldr	r3, [pc, #616]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	061b      	lsls	r3, r3, #24
 80077d6:	4997      	ldr	r1, [pc, #604]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	604b      	str	r3, [r1, #4]
 80077dc:	e018      	b.n	8007810 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077de:	4b95      	ldr	r3, [pc, #596]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a94      	ldr	r2, [pc, #592]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 80077e4:	f023 0301 	bic.w	r3, r3, #1
 80077e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ea:	f7fc fdc9 	bl	8004380 <HAL_GetTick>
 80077ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077f0:	e008      	b.n	8007804 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077f2:	f7fc fdc5 	bl	8004380 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d901      	bls.n	8007804 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e2c2      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007804:	4b8b      	ldr	r3, [pc, #556]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0304 	and.w	r3, r3, #4
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1f0      	bne.n	80077f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0310 	and.w	r3, r3, #16
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80a9 	beq.w	8007970 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800781e:	4b85      	ldr	r3, [pc, #532]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007826:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007828:	4b82      	ldr	r3, [pc, #520]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	2b08      	cmp	r3, #8
 8007832:	d007      	beq.n	8007844 <HAL_RCC_OscConfig+0x308>
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	2b18      	cmp	r3, #24
 8007838:	d13a      	bne.n	80078b0 <HAL_RCC_OscConfig+0x374>
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f003 0303 	and.w	r3, r3, #3
 8007840:	2b01      	cmp	r3, #1
 8007842:	d135      	bne.n	80078b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007844:	4b7b      	ldr	r3, [pc, #492]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784c:	2b00      	cmp	r3, #0
 800784e:	d005      	beq.n	800785c <HAL_RCC_OscConfig+0x320>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	2b80      	cmp	r3, #128	; 0x80
 8007856:	d001      	beq.n	800785c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e296      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800785c:	f7fc fdc0 	bl	80043e0 <HAL_GetREVID>
 8007860:	4603      	mov	r3, r0
 8007862:	f241 0203 	movw	r2, #4099	; 0x1003
 8007866:	4293      	cmp	r3, r2
 8007868:	d817      	bhi.n	800789a <HAL_RCC_OscConfig+0x35e>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	2b20      	cmp	r3, #32
 8007870:	d108      	bne.n	8007884 <HAL_RCC_OscConfig+0x348>
 8007872:	4b70      	ldr	r3, [pc, #448]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800787a:	4a6e      	ldr	r2, [pc, #440]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 800787c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007880:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007882:	e075      	b.n	8007970 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007884:	4b6b      	ldr	r3, [pc, #428]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	069b      	lsls	r3, r3, #26
 8007892:	4968      	ldr	r1, [pc, #416]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007894:	4313      	orrs	r3, r2
 8007896:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007898:	e06a      	b.n	8007970 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800789a:	4b66      	ldr	r3, [pc, #408]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	061b      	lsls	r3, r3, #24
 80078a8:	4962      	ldr	r1, [pc, #392]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078ae:	e05f      	b.n	8007970 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d042      	beq.n	800793e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80078b8:	4b5e      	ldr	r3, [pc, #376]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a5d      	ldr	r2, [pc, #372]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 80078be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c4:	f7fc fd5c 	bl	8004380 <HAL_GetTick>
 80078c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078ca:	e008      	b.n	80078de <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80078cc:	f7fc fd58 	bl	8004380 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d901      	bls.n	80078de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e255      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078de:	4b55      	ldr	r3, [pc, #340]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d0f0      	beq.n	80078cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078ea:	f7fc fd79 	bl	80043e0 <HAL_GetREVID>
 80078ee:	4603      	mov	r3, r0
 80078f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d817      	bhi.n	8007928 <HAL_RCC_OscConfig+0x3ec>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	d108      	bne.n	8007912 <HAL_RCC_OscConfig+0x3d6>
 8007900:	4b4c      	ldr	r3, [pc, #304]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007908:	4a4a      	ldr	r2, [pc, #296]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 800790a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800790e:	6053      	str	r3, [r2, #4]
 8007910:	e02e      	b.n	8007970 <HAL_RCC_OscConfig+0x434>
 8007912:	4b48      	ldr	r3, [pc, #288]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	069b      	lsls	r3, r3, #26
 8007920:	4944      	ldr	r1, [pc, #272]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007922:	4313      	orrs	r3, r2
 8007924:	604b      	str	r3, [r1, #4]
 8007926:	e023      	b.n	8007970 <HAL_RCC_OscConfig+0x434>
 8007928:	4b42      	ldr	r3, [pc, #264]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	061b      	lsls	r3, r3, #24
 8007936:	493f      	ldr	r1, [pc, #252]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007938:	4313      	orrs	r3, r2
 800793a:	60cb      	str	r3, [r1, #12]
 800793c:	e018      	b.n	8007970 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800793e:	4b3d      	ldr	r3, [pc, #244]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a3c      	ldr	r2, [pc, #240]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800794a:	f7fc fd19 	bl	8004380 <HAL_GetTick>
 800794e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007950:	e008      	b.n	8007964 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007952:	f7fc fd15 	bl	8004380 <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b02      	cmp	r3, #2
 800795e:	d901      	bls.n	8007964 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e212      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007964:	4b33      	ldr	r3, [pc, #204]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1f0      	bne.n	8007952 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0308 	and.w	r3, r3, #8
 8007978:	2b00      	cmp	r3, #0
 800797a:	d036      	beq.n	80079ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	695b      	ldr	r3, [r3, #20]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d019      	beq.n	80079b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007984:	4b2b      	ldr	r3, [pc, #172]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007988:	4a2a      	ldr	r2, [pc, #168]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 800798a:	f043 0301 	orr.w	r3, r3, #1
 800798e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007990:	f7fc fcf6 	bl	8004380 <HAL_GetTick>
 8007994:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007996:	e008      	b.n	80079aa <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007998:	f7fc fcf2 	bl	8004380 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e1ef      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80079aa:	4b22      	ldr	r3, [pc, #136]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 80079ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0f0      	beq.n	8007998 <HAL_RCC_OscConfig+0x45c>
 80079b6:	e018      	b.n	80079ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079b8:	4b1e      	ldr	r3, [pc, #120]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 80079ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079bc:	4a1d      	ldr	r2, [pc, #116]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 80079be:	f023 0301 	bic.w	r3, r3, #1
 80079c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c4:	f7fc fcdc 	bl	8004380 <HAL_GetTick>
 80079c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80079ca:	e008      	b.n	80079de <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079cc:	f7fc fcd8 	bl	8004380 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e1d5      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80079de:	4b15      	ldr	r3, [pc, #84]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 80079e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e2:	f003 0302 	and.w	r3, r3, #2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1f0      	bne.n	80079cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0320 	and.w	r3, r3, #32
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d039      	beq.n	8007a6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d01c      	beq.n	8007a38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80079fe:	4b0d      	ldr	r3, [pc, #52]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a0c      	ldr	r2, [pc, #48]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a0a:	f7fc fcb9 	bl	8004380 <HAL_GetTick>
 8007a0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a10:	e008      	b.n	8007a24 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007a12:	f7fc fcb5 	bl	8004380 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d901      	bls.n	8007a24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e1b2      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a24:	4b03      	ldr	r3, [pc, #12]	; (8007a34 <HAL_RCC_OscConfig+0x4f8>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0f0      	beq.n	8007a12 <HAL_RCC_OscConfig+0x4d6>
 8007a30:	e01b      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
 8007a32:	bf00      	nop
 8007a34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a38:	4b9b      	ldr	r3, [pc, #620]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a9a      	ldr	r2, [pc, #616]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a44:	f7fc fc9c 	bl	8004380 <HAL_GetTick>
 8007a48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a4a:	e008      	b.n	8007a5e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007a4c:	f7fc fc98 	bl	8004380 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d901      	bls.n	8007a5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e195      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a5e:	4b92      	ldr	r3, [pc, #584]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1f0      	bne.n	8007a4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0304 	and.w	r3, r3, #4
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 8081 	beq.w	8007b7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a78:	4b8c      	ldr	r3, [pc, #560]	; (8007cac <HAL_RCC_OscConfig+0x770>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a8b      	ldr	r2, [pc, #556]	; (8007cac <HAL_RCC_OscConfig+0x770>)
 8007a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a84:	f7fc fc7c 	bl	8004380 <HAL_GetTick>
 8007a88:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007a8c:	f7fc fc78 	bl	8004380 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b64      	cmp	r3, #100	; 0x64
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e175      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a9e:	4b83      	ldr	r3, [pc, #524]	; (8007cac <HAL_RCC_OscConfig+0x770>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0f0      	beq.n	8007a8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d106      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x584>
 8007ab2:	4b7d      	ldr	r3, [pc, #500]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab6:	4a7c      	ldr	r2, [pc, #496]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007ab8:	f043 0301 	orr.w	r3, r3, #1
 8007abc:	6713      	str	r3, [r2, #112]	; 0x70
 8007abe:	e02d      	b.n	8007b1c <HAL_RCC_OscConfig+0x5e0>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10c      	bne.n	8007ae2 <HAL_RCC_OscConfig+0x5a6>
 8007ac8:	4b77      	ldr	r3, [pc, #476]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007acc:	4a76      	ldr	r2, [pc, #472]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007ace:	f023 0301 	bic.w	r3, r3, #1
 8007ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad4:	4b74      	ldr	r3, [pc, #464]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad8:	4a73      	ldr	r2, [pc, #460]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007ada:	f023 0304 	bic.w	r3, r3, #4
 8007ade:	6713      	str	r3, [r2, #112]	; 0x70
 8007ae0:	e01c      	b.n	8007b1c <HAL_RCC_OscConfig+0x5e0>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	2b05      	cmp	r3, #5
 8007ae8:	d10c      	bne.n	8007b04 <HAL_RCC_OscConfig+0x5c8>
 8007aea:	4b6f      	ldr	r3, [pc, #444]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aee:	4a6e      	ldr	r2, [pc, #440]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007af0:	f043 0304 	orr.w	r3, r3, #4
 8007af4:	6713      	str	r3, [r2, #112]	; 0x70
 8007af6:	4b6c      	ldr	r3, [pc, #432]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afa:	4a6b      	ldr	r2, [pc, #428]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007afc:	f043 0301 	orr.w	r3, r3, #1
 8007b00:	6713      	str	r3, [r2, #112]	; 0x70
 8007b02:	e00b      	b.n	8007b1c <HAL_RCC_OscConfig+0x5e0>
 8007b04:	4b68      	ldr	r3, [pc, #416]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b08:	4a67      	ldr	r2, [pc, #412]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007b0a:	f023 0301 	bic.w	r3, r3, #1
 8007b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b10:	4b65      	ldr	r3, [pc, #404]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b14:	4a64      	ldr	r2, [pc, #400]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007b16:	f023 0304 	bic.w	r3, r3, #4
 8007b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d015      	beq.n	8007b50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b24:	f7fc fc2c 	bl	8004380 <HAL_GetTick>
 8007b28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b2a:	e00a      	b.n	8007b42 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b2c:	f7fc fc28 	bl	8004380 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e123      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b42:	4b59      	ldr	r3, [pc, #356]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0ee      	beq.n	8007b2c <HAL_RCC_OscConfig+0x5f0>
 8007b4e:	e014      	b.n	8007b7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b50:	f7fc fc16 	bl	8004380 <HAL_GetTick>
 8007b54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b56:	e00a      	b.n	8007b6e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b58:	f7fc fc12 	bl	8004380 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e10d      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b6e:	4b4e      	ldr	r3, [pc, #312]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1ee      	bne.n	8007b58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 8102 	beq.w	8007d88 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007b84:	4b48      	ldr	r3, [pc, #288]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b8c:	2b18      	cmp	r3, #24
 8007b8e:	f000 80bd 	beq.w	8007d0c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	f040 809e 	bne.w	8007cd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b9c:	4b42      	ldr	r3, [pc, #264]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a41      	ldr	r2, [pc, #260]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba8:	f7fc fbea 	bl	8004380 <HAL_GetTick>
 8007bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bae:	e008      	b.n	8007bc2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bb0:	f7fc fbe6 	bl	8004380 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d901      	bls.n	8007bc2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e0e3      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bc2:	4b39      	ldr	r3, [pc, #228]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1f0      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bce:	4b36      	ldr	r3, [pc, #216]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bd2:	4b37      	ldr	r3, [pc, #220]	; (8007cb0 <HAL_RCC_OscConfig+0x774>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007bde:	0112      	lsls	r2, r2, #4
 8007be0:	430a      	orrs	r2, r1
 8007be2:	4931      	ldr	r1, [pc, #196]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	628b      	str	r3, [r1, #40]	; 0x28
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bec:	3b01      	subs	r3, #1
 8007bee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	025b      	lsls	r3, r3, #9
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c02:	3b01      	subs	r3, #1
 8007c04:	041b      	lsls	r3, r3, #16
 8007c06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c10:	3b01      	subs	r3, #1
 8007c12:	061b      	lsls	r3, r3, #24
 8007c14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c18:	4923      	ldr	r1, [pc, #140]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007c1e:	4b22      	ldr	r3, [pc, #136]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	4a21      	ldr	r2, [pc, #132]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c24:	f023 0301 	bic.w	r3, r3, #1
 8007c28:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c2a:	4b1f      	ldr	r3, [pc, #124]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c2e:	4b21      	ldr	r3, [pc, #132]	; (8007cb4 <HAL_RCC_OscConfig+0x778>)
 8007c30:	4013      	ands	r3, r2
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007c36:	00d2      	lsls	r2, r2, #3
 8007c38:	491b      	ldr	r1, [pc, #108]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007c3e:	4b1a      	ldr	r3, [pc, #104]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c42:	f023 020c 	bic.w	r2, r3, #12
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	4917      	ldr	r1, [pc, #92]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007c50:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	f023 0202 	bic.w	r2, r3, #2
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5c:	4912      	ldr	r1, [pc, #72]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c62:	4b11      	ldr	r3, [pc, #68]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c66:	4a10      	ldr	r2, [pc, #64]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c6e:	4b0e      	ldr	r3, [pc, #56]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	4a0d      	ldr	r2, [pc, #52]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007c7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007c86:	4b08      	ldr	r3, [pc, #32]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8a:	4a07      	ldr	r2, [pc, #28]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c8c:	f043 0301 	orr.w	r3, r3, #1
 8007c90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c92:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a04      	ldr	r2, [pc, #16]	; (8007ca8 <HAL_RCC_OscConfig+0x76c>)
 8007c98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c9e:	f7fc fb6f 	bl	8004380 <HAL_GetTick>
 8007ca2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ca4:	e011      	b.n	8007cca <HAL_RCC_OscConfig+0x78e>
 8007ca6:	bf00      	nop
 8007ca8:	58024400 	.word	0x58024400
 8007cac:	58024800 	.word	0x58024800
 8007cb0:	fffffc0c 	.word	0xfffffc0c
 8007cb4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cb8:	f7fc fb62 	bl	8004380 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d901      	bls.n	8007cca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e05f      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cca:	4b32      	ldr	r3, [pc, #200]	; (8007d94 <HAL_RCC_OscConfig+0x858>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0f0      	beq.n	8007cb8 <HAL_RCC_OscConfig+0x77c>
 8007cd6:	e057      	b.n	8007d88 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cd8:	4b2e      	ldr	r3, [pc, #184]	; (8007d94 <HAL_RCC_OscConfig+0x858>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a2d      	ldr	r2, [pc, #180]	; (8007d94 <HAL_RCC_OscConfig+0x858>)
 8007cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce4:	f7fc fb4c 	bl	8004380 <HAL_GetTick>
 8007ce8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cea:	e008      	b.n	8007cfe <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cec:	f7fc fb48 	bl	8004380 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d901      	bls.n	8007cfe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e045      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cfe:	4b25      	ldr	r3, [pc, #148]	; (8007d94 <HAL_RCC_OscConfig+0x858>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f0      	bne.n	8007cec <HAL_RCC_OscConfig+0x7b0>
 8007d0a:	e03d      	b.n	8007d88 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007d0c:	4b21      	ldr	r3, [pc, #132]	; (8007d94 <HAL_RCC_OscConfig+0x858>)
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007d12:	4b20      	ldr	r3, [pc, #128]	; (8007d94 <HAL_RCC_OscConfig+0x858>)
 8007d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d031      	beq.n	8007d84 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f003 0203 	and.w	r2, r3, #3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d12a      	bne.n	8007d84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	091b      	lsrs	r3, r3, #4
 8007d32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d122      	bne.n	8007d84 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d11a      	bne.n	8007d84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	0a5b      	lsrs	r3, r3, #9
 8007d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d111      	bne.n	8007d84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	0c1b      	lsrs	r3, r3, #16
 8007d64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d108      	bne.n	8007d84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	0e1b      	lsrs	r3, r3, #24
 8007d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d001      	beq.n	8007d88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e000      	b.n	8007d8a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3730      	adds	r7, #48	; 0x30
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	58024400 	.word	0x58024400

08007d98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e19c      	b.n	80080e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007dac:	4b8a      	ldr	r3, [pc, #552]	; (8007fd8 <HAL_RCC_ClockConfig+0x240>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 030f 	and.w	r3, r3, #15
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d910      	bls.n	8007ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dba:	4b87      	ldr	r3, [pc, #540]	; (8007fd8 <HAL_RCC_ClockConfig+0x240>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f023 020f 	bic.w	r2, r3, #15
 8007dc2:	4985      	ldr	r1, [pc, #532]	; (8007fd8 <HAL_RCC_ClockConfig+0x240>)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dca:	4b83      	ldr	r3, [pc, #524]	; (8007fd8 <HAL_RCC_ClockConfig+0x240>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 030f 	and.w	r3, r3, #15
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d001      	beq.n	8007ddc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e184      	b.n	80080e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d010      	beq.n	8007e0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691a      	ldr	r2, [r3, #16]
 8007dec:	4b7b      	ldr	r3, [pc, #492]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d908      	bls.n	8007e0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007df8:	4b78      	ldr	r3, [pc, #480]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	4975      	ldr	r1, [pc, #468]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0308 	and.w	r3, r3, #8
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d010      	beq.n	8007e38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	695a      	ldr	r2, [r3, #20]
 8007e1a:	4b70      	ldr	r3, [pc, #448]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d908      	bls.n	8007e38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007e26:	4b6d      	ldr	r3, [pc, #436]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	496a      	ldr	r1, [pc, #424]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d010      	beq.n	8007e66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	699a      	ldr	r2, [r3, #24]
 8007e48:	4b64      	ldr	r3, [pc, #400]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d908      	bls.n	8007e66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e54:	4b61      	ldr	r3, [pc, #388]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	495e      	ldr	r1, [pc, #376]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0320 	and.w	r3, r3, #32
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d010      	beq.n	8007e94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	69da      	ldr	r2, [r3, #28]
 8007e76:	4b59      	ldr	r3, [pc, #356]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d908      	bls.n	8007e94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007e82:	4b56      	ldr	r3, [pc, #344]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	4953      	ldr	r1, [pc, #332]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0302 	and.w	r3, r3, #2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d010      	beq.n	8007ec2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68da      	ldr	r2, [r3, #12]
 8007ea4:	4b4d      	ldr	r3, [pc, #308]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	f003 030f 	and.w	r3, r3, #15
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d908      	bls.n	8007ec2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007eb0:	4b4a      	ldr	r3, [pc, #296]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	f023 020f 	bic.w	r2, r3, #15
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	4947      	ldr	r1, [pc, #284]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d055      	beq.n	8007f7a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007ece:	4b43      	ldr	r3, [pc, #268]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	4940      	ldr	r1, [pc, #256]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d107      	bne.n	8007ef8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ee8:	4b3c      	ldr	r3, [pc, #240]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d121      	bne.n	8007f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e0f6      	b.n	80080e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d107      	bne.n	8007f10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f00:	4b36      	ldr	r3, [pc, #216]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d115      	bne.n	8007f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e0ea      	b.n	80080e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d107      	bne.n	8007f28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f18:	4b30      	ldr	r3, [pc, #192]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d109      	bne.n	8007f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e0de      	b.n	80080e6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f28:	4b2c      	ldr	r3, [pc, #176]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e0d6      	b.n	80080e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f38:	4b28      	ldr	r3, [pc, #160]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	f023 0207 	bic.w	r2, r3, #7
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	4925      	ldr	r1, [pc, #148]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f4a:	f7fc fa19 	bl	8004380 <HAL_GetTick>
 8007f4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f50:	e00a      	b.n	8007f68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f52:	f7fc fa15 	bl	8004380 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d901      	bls.n	8007f68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e0be      	b.n	80080e6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f68:	4b1c      	ldr	r3, [pc, #112]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d1eb      	bne.n	8007f52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d010      	beq.n	8007fa8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	4b14      	ldr	r3, [pc, #80]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	f003 030f 	and.w	r3, r3, #15
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d208      	bcs.n	8007fa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f96:	4b11      	ldr	r3, [pc, #68]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	f023 020f 	bic.w	r2, r3, #15
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	490e      	ldr	r1, [pc, #56]	; (8007fdc <HAL_RCC_ClockConfig+0x244>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fa8:	4b0b      	ldr	r3, [pc, #44]	; (8007fd8 <HAL_RCC_ClockConfig+0x240>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 030f 	and.w	r3, r3, #15
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d214      	bcs.n	8007fe0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fb6:	4b08      	ldr	r3, [pc, #32]	; (8007fd8 <HAL_RCC_ClockConfig+0x240>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f023 020f 	bic.w	r2, r3, #15
 8007fbe:	4906      	ldr	r1, [pc, #24]	; (8007fd8 <HAL_RCC_ClockConfig+0x240>)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fc6:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <HAL_RCC_ClockConfig+0x240>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 030f 	and.w	r3, r3, #15
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d005      	beq.n	8007fe0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e086      	b.n	80080e6 <HAL_RCC_ClockConfig+0x34e>
 8007fd8:	52002000 	.word	0x52002000
 8007fdc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d010      	beq.n	800800e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	691a      	ldr	r2, [r3, #16]
 8007ff0:	4b3f      	ldr	r3, [pc, #252]	; (80080f0 <HAL_RCC_ClockConfig+0x358>)
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d208      	bcs.n	800800e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ffc:	4b3c      	ldr	r3, [pc, #240]	; (80080f0 <HAL_RCC_ClockConfig+0x358>)
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	4939      	ldr	r1, [pc, #228]	; (80080f0 <HAL_RCC_ClockConfig+0x358>)
 800800a:	4313      	orrs	r3, r2
 800800c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0308 	and.w	r3, r3, #8
 8008016:	2b00      	cmp	r3, #0
 8008018:	d010      	beq.n	800803c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	695a      	ldr	r2, [r3, #20]
 800801e:	4b34      	ldr	r3, [pc, #208]	; (80080f0 <HAL_RCC_ClockConfig+0x358>)
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008026:	429a      	cmp	r2, r3
 8008028:	d208      	bcs.n	800803c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800802a:	4b31      	ldr	r3, [pc, #196]	; (80080f0 <HAL_RCC_ClockConfig+0x358>)
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	492e      	ldr	r1, [pc, #184]	; (80080f0 <HAL_RCC_ClockConfig+0x358>)
 8008038:	4313      	orrs	r3, r2
 800803a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0310 	and.w	r3, r3, #16
 8008044:	2b00      	cmp	r3, #0
 8008046:	d010      	beq.n	800806a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	699a      	ldr	r2, [r3, #24]
 800804c:	4b28      	ldr	r3, [pc, #160]	; (80080f0 <HAL_RCC_ClockConfig+0x358>)
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008054:	429a      	cmp	r2, r3
 8008056:	d208      	bcs.n	800806a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008058:	4b25      	ldr	r3, [pc, #148]	; (80080f0 <HAL_RCC_ClockConfig+0x358>)
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	4922      	ldr	r1, [pc, #136]	; (80080f0 <HAL_RCC_ClockConfig+0x358>)
 8008066:	4313      	orrs	r3, r2
 8008068:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	2b00      	cmp	r3, #0
 8008074:	d010      	beq.n	8008098 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	69da      	ldr	r2, [r3, #28]
 800807a:	4b1d      	ldr	r3, [pc, #116]	; (80080f0 <HAL_RCC_ClockConfig+0x358>)
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008082:	429a      	cmp	r2, r3
 8008084:	d208      	bcs.n	8008098 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008086:	4b1a      	ldr	r3, [pc, #104]	; (80080f0 <HAL_RCC_ClockConfig+0x358>)
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	4917      	ldr	r1, [pc, #92]	; (80080f0 <HAL_RCC_ClockConfig+0x358>)
 8008094:	4313      	orrs	r3, r2
 8008096:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008098:	f000 f834 	bl	8008104 <HAL_RCC_GetSysClockFreq>
 800809c:	4602      	mov	r2, r0
 800809e:	4b14      	ldr	r3, [pc, #80]	; (80080f0 <HAL_RCC_ClockConfig+0x358>)
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	0a1b      	lsrs	r3, r3, #8
 80080a4:	f003 030f 	and.w	r3, r3, #15
 80080a8:	4912      	ldr	r1, [pc, #72]	; (80080f4 <HAL_RCC_ClockConfig+0x35c>)
 80080aa:	5ccb      	ldrb	r3, [r1, r3]
 80080ac:	f003 031f 	and.w	r3, r3, #31
 80080b0:	fa22 f303 	lsr.w	r3, r2, r3
 80080b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80080b6:	4b0e      	ldr	r3, [pc, #56]	; (80080f0 <HAL_RCC_ClockConfig+0x358>)
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	f003 030f 	and.w	r3, r3, #15
 80080be:	4a0d      	ldr	r2, [pc, #52]	; (80080f4 <HAL_RCC_ClockConfig+0x35c>)
 80080c0:	5cd3      	ldrb	r3, [r2, r3]
 80080c2:	f003 031f 	and.w	r3, r3, #31
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	fa22 f303 	lsr.w	r3, r2, r3
 80080cc:	4a0a      	ldr	r2, [pc, #40]	; (80080f8 <HAL_RCC_ClockConfig+0x360>)
 80080ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80080d0:	4a0a      	ldr	r2, [pc, #40]	; (80080fc <HAL_RCC_ClockConfig+0x364>)
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80080d6:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <HAL_RCC_ClockConfig+0x368>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fc f906 	bl	80042ec <HAL_InitTick>
 80080e0:	4603      	mov	r3, r0
 80080e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3718      	adds	r7, #24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	58024400 	.word	0x58024400
 80080f4:	0800c670 	.word	0x0800c670
 80080f8:	24000004 	.word	0x24000004
 80080fc:	24000000 	.word	0x24000000
 8008100:	2400002c 	.word	0x2400002c

08008104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008104:	b480      	push	{r7}
 8008106:	b089      	sub	sp, #36	; 0x24
 8008108:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800810a:	4bb3      	ldr	r3, [pc, #716]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008112:	2b18      	cmp	r3, #24
 8008114:	f200 8155 	bhi.w	80083c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008118:	a201      	add	r2, pc, #4	; (adr r2, 8008120 <HAL_RCC_GetSysClockFreq+0x1c>)
 800811a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811e:	bf00      	nop
 8008120:	08008185 	.word	0x08008185
 8008124:	080083c3 	.word	0x080083c3
 8008128:	080083c3 	.word	0x080083c3
 800812c:	080083c3 	.word	0x080083c3
 8008130:	080083c3 	.word	0x080083c3
 8008134:	080083c3 	.word	0x080083c3
 8008138:	080083c3 	.word	0x080083c3
 800813c:	080083c3 	.word	0x080083c3
 8008140:	080081ab 	.word	0x080081ab
 8008144:	080083c3 	.word	0x080083c3
 8008148:	080083c3 	.word	0x080083c3
 800814c:	080083c3 	.word	0x080083c3
 8008150:	080083c3 	.word	0x080083c3
 8008154:	080083c3 	.word	0x080083c3
 8008158:	080083c3 	.word	0x080083c3
 800815c:	080083c3 	.word	0x080083c3
 8008160:	080081b1 	.word	0x080081b1
 8008164:	080083c3 	.word	0x080083c3
 8008168:	080083c3 	.word	0x080083c3
 800816c:	080083c3 	.word	0x080083c3
 8008170:	080083c3 	.word	0x080083c3
 8008174:	080083c3 	.word	0x080083c3
 8008178:	080083c3 	.word	0x080083c3
 800817c:	080083c3 	.word	0x080083c3
 8008180:	080081b7 	.word	0x080081b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008184:	4b94      	ldr	r3, [pc, #592]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d009      	beq.n	80081a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008190:	4b91      	ldr	r3, [pc, #580]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	08db      	lsrs	r3, r3, #3
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	4a90      	ldr	r2, [pc, #576]	; (80083dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800819c:	fa22 f303 	lsr.w	r3, r2, r3
 80081a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80081a2:	e111      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80081a4:	4b8d      	ldr	r3, [pc, #564]	; (80083dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081a6:	61bb      	str	r3, [r7, #24]
    break;
 80081a8:	e10e      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80081aa:	4b8d      	ldr	r3, [pc, #564]	; (80083e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80081ac:	61bb      	str	r3, [r7, #24]
    break;
 80081ae:	e10b      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80081b0:	4b8c      	ldr	r3, [pc, #560]	; (80083e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80081b2:	61bb      	str	r3, [r7, #24]
    break;
 80081b4:	e108      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081b6:	4b88      	ldr	r3, [pc, #544]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80081c0:	4b85      	ldr	r3, [pc, #532]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c4:	091b      	lsrs	r3, r3, #4
 80081c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80081cc:	4b82      	ldr	r3, [pc, #520]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80081d6:	4b80      	ldr	r3, [pc, #512]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081da:	08db      	lsrs	r3, r3, #3
 80081dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	fb02 f303 	mul.w	r3, r2, r3
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 80e1 	beq.w	80083bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	f000 8083 	beq.w	8008308 <HAL_RCC_GetSysClockFreq+0x204>
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	2b02      	cmp	r3, #2
 8008206:	f200 80a1 	bhi.w	800834c <HAL_RCC_GetSysClockFreq+0x248>
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <HAL_RCC_GetSysClockFreq+0x114>
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d056      	beq.n	80082c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008216:	e099      	b.n	800834c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008218:	4b6f      	ldr	r3, [pc, #444]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d02d      	beq.n	8008280 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008224:	4b6c      	ldr	r3, [pc, #432]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	08db      	lsrs	r3, r3, #3
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	4a6b      	ldr	r2, [pc, #428]	; (80083dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008230:	fa22 f303 	lsr.w	r3, r2, r3
 8008234:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	ee07 3a90 	vmov	s15, r3
 800823c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800824e:	4b62      	ldr	r3, [pc, #392]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008256:	ee07 3a90 	vmov	s15, r3
 800825a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800825e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008262:	eddf 5a61 	vldr	s11, [pc, #388]	; 80083e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800826a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800826e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800827a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800827e:	e087      	b.n	8008390 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	ee07 3a90 	vmov	s15, r3
 8008286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80083ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800828e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008292:	4b51      	ldr	r3, [pc, #324]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829a:	ee07 3a90 	vmov	s15, r3
 800829e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80082a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80083e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082c2:	e065      	b.n	8008390 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	ee07 3a90 	vmov	s15, r3
 80082ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80083f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80082d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082d6:	4b40      	ldr	r3, [pc, #256]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082de:	ee07 3a90 	vmov	s15, r3
 80082e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80082ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80083e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008306:	e043      	b.n	8008390 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	ee07 3a90 	vmov	s15, r3
 800830e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008312:	eddf 6a38 	vldr	s13, [pc, #224]	; 80083f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800831a:	4b2f      	ldr	r3, [pc, #188]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800831c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008322:	ee07 3a90 	vmov	s15, r3
 8008326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832a:	ed97 6a02 	vldr	s12, [r7, #8]
 800832e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80083e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800833e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800834a:	e021      	b.n	8008390 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008356:	eddf 6a26 	vldr	s13, [pc, #152]	; 80083f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800835a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800835e:	4b1e      	ldr	r3, [pc, #120]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008366:	ee07 3a90 	vmov	s15, r3
 800836a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800836e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008372:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80083e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800837a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800837e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800838e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008390:	4b11      	ldr	r3, [pc, #68]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008394:	0a5b      	lsrs	r3, r3, #9
 8008396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800839a:	3301      	adds	r3, #1
 800839c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	ee07 3a90 	vmov	s15, r3
 80083a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80083a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80083ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083b4:	ee17 3a90 	vmov	r3, s15
 80083b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80083ba:	e005      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	61bb      	str	r3, [r7, #24]
    break;
 80083c0:	e002      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80083c2:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80083c4:	61bb      	str	r3, [r7, #24]
    break;
 80083c6:	bf00      	nop
  }

  return sysclockfreq;
 80083c8:	69bb      	ldr	r3, [r7, #24]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3724      	adds	r7, #36	; 0x24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	58024400 	.word	0x58024400
 80083dc:	03d09000 	.word	0x03d09000
 80083e0:	003d0900 	.word	0x003d0900
 80083e4:	007a1200 	.word	0x007a1200
 80083e8:	46000000 	.word	0x46000000
 80083ec:	4c742400 	.word	0x4c742400
 80083f0:	4a742400 	.word	0x4a742400
 80083f4:	4af42400 	.word	0x4af42400

080083f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80083fe:	f7ff fe81 	bl	8008104 <HAL_RCC_GetSysClockFreq>
 8008402:	4602      	mov	r2, r0
 8008404:	4b10      	ldr	r3, [pc, #64]	; (8008448 <HAL_RCC_GetHCLKFreq+0x50>)
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	0a1b      	lsrs	r3, r3, #8
 800840a:	f003 030f 	and.w	r3, r3, #15
 800840e:	490f      	ldr	r1, [pc, #60]	; (800844c <HAL_RCC_GetHCLKFreq+0x54>)
 8008410:	5ccb      	ldrb	r3, [r1, r3]
 8008412:	f003 031f 	and.w	r3, r3, #31
 8008416:	fa22 f303 	lsr.w	r3, r2, r3
 800841a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <HAL_RCC_GetHCLKFreq+0x50>)
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	f003 030f 	and.w	r3, r3, #15
 8008424:	4a09      	ldr	r2, [pc, #36]	; (800844c <HAL_RCC_GetHCLKFreq+0x54>)
 8008426:	5cd3      	ldrb	r3, [r2, r3]
 8008428:	f003 031f 	and.w	r3, r3, #31
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	fa22 f303 	lsr.w	r3, r2, r3
 8008432:	4a07      	ldr	r2, [pc, #28]	; (8008450 <HAL_RCC_GetHCLKFreq+0x58>)
 8008434:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008436:	4a07      	ldr	r2, [pc, #28]	; (8008454 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800843c:	4b04      	ldr	r3, [pc, #16]	; (8008450 <HAL_RCC_GetHCLKFreq+0x58>)
 800843e:	681b      	ldr	r3, [r3, #0]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	58024400 	.word	0x58024400
 800844c:	0800c670 	.word	0x0800c670
 8008450:	24000004 	.word	0x24000004
 8008454:	24000000 	.word	0x24000000

08008458 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008460:	2300      	movs	r3, #0
 8008462:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008464:	2300      	movs	r3, #0
 8008466:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d03f      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008478:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800847c:	d02a      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800847e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008482:	d824      	bhi.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008488:	d018      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800848a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800848e:	d81e      	bhi.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008490:	2b00      	cmp	r3, #0
 8008492:	d003      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008494:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008498:	d007      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 800849a:	e018      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800849c:	4ba3      	ldr	r3, [pc, #652]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800849e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a0:	4aa2      	ldr	r2, [pc, #648]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80084a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80084a8:	e015      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	3304      	adds	r3, #4
 80084ae:	2102      	movs	r1, #2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 ff17 	bl	80092e4 <RCCEx_PLL2_Config>
 80084b6:	4603      	mov	r3, r0
 80084b8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80084ba:	e00c      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3324      	adds	r3, #36	; 0x24
 80084c0:	2102      	movs	r1, #2
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 ffc0 	bl	8009448 <RCCEx_PLL3_Config>
 80084c8:	4603      	mov	r3, r0
 80084ca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80084cc:	e003      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	75fb      	strb	r3, [r7, #23]
      break;
 80084d2:	e000      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80084d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d109      	bne.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80084dc:	4b93      	ldr	r3, [pc, #588]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80084de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084e8:	4990      	ldr	r1, [pc, #576]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	650b      	str	r3, [r1, #80]	; 0x50
 80084ee:	e001      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
 80084f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d03d      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008504:	2b04      	cmp	r3, #4
 8008506:	d826      	bhi.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008508:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800850a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850e:	bf00      	nop
 8008510:	08008525 	.word	0x08008525
 8008514:	08008533 	.word	0x08008533
 8008518:	08008545 	.word	0x08008545
 800851c:	0800855d 	.word	0x0800855d
 8008520:	0800855d 	.word	0x0800855d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008524:	4b81      	ldr	r3, [pc, #516]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008528:	4a80      	ldr	r2, [pc, #512]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800852a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800852e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008530:	e015      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3304      	adds	r3, #4
 8008536:	2100      	movs	r1, #0
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fed3 	bl	80092e4 <RCCEx_PLL2_Config>
 800853e:	4603      	mov	r3, r0
 8008540:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008542:	e00c      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3324      	adds	r3, #36	; 0x24
 8008548:	2100      	movs	r1, #0
 800854a:	4618      	mov	r0, r3
 800854c:	f000 ff7c 	bl	8009448 <RCCEx_PLL3_Config>
 8008550:	4603      	mov	r3, r0
 8008552:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008554:	e003      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	75fb      	strb	r3, [r7, #23]
      break;
 800855a:	e000      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800855c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800855e:	7dfb      	ldrb	r3, [r7, #23]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d109      	bne.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008564:	4b71      	ldr	r3, [pc, #452]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008568:	f023 0207 	bic.w	r2, r3, #7
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008570:	496e      	ldr	r1, [pc, #440]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008572:	4313      	orrs	r3, r2
 8008574:	650b      	str	r3, [r1, #80]	; 0x50
 8008576:	e001      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008578:	7dfb      	ldrb	r3, [r7, #23]
 800857a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008584:	2b00      	cmp	r3, #0
 8008586:	d042      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800858c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008590:	d02b      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008596:	d825      	bhi.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008598:	2bc0      	cmp	r3, #192	; 0xc0
 800859a:	d028      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 800859c:	2bc0      	cmp	r3, #192	; 0xc0
 800859e:	d821      	bhi.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80085a0:	2b80      	cmp	r3, #128	; 0x80
 80085a2:	d016      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80085a4:	2b80      	cmp	r3, #128	; 0x80
 80085a6:	d81d      	bhi.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80085ac:	2b40      	cmp	r3, #64	; 0x40
 80085ae:	d007      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80085b0:	e018      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085b2:	4b5e      	ldr	r3, [pc, #376]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80085b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b6:	4a5d      	ldr	r2, [pc, #372]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80085b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80085be:	e017      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	3304      	adds	r3, #4
 80085c4:	2100      	movs	r1, #0
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 fe8c 	bl	80092e4 <RCCEx_PLL2_Config>
 80085cc:	4603      	mov	r3, r0
 80085ce:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80085d0:	e00e      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	3324      	adds	r3, #36	; 0x24
 80085d6:	2100      	movs	r1, #0
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 ff35 	bl	8009448 <RCCEx_PLL3_Config>
 80085de:	4603      	mov	r3, r0
 80085e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80085e2:	e005      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	75fb      	strb	r3, [r7, #23]
      break;
 80085e8:	e002      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80085ea:	bf00      	nop
 80085ec:	e000      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80085ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085f0:	7dfb      	ldrb	r3, [r7, #23]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d109      	bne.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80085f6:	4b4d      	ldr	r3, [pc, #308]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80085f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085fa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008602:	494a      	ldr	r1, [pc, #296]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008604:	4313      	orrs	r3, r2
 8008606:	650b      	str	r3, [r1, #80]	; 0x50
 8008608:	e001      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800860a:	7dfb      	ldrb	r3, [r7, #23]
 800860c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008616:	2b00      	cmp	r3, #0
 8008618:	d049      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008620:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008624:	d030      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008626:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800862a:	d82a      	bhi.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800862c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008630:	d02c      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008632:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008636:	d824      	bhi.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800863c:	d018      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800863e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008642:	d81e      	bhi.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008648:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800864c:	d007      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800864e:	e018      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008650:	4b36      	ldr	r3, [pc, #216]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008654:	4a35      	ldr	r2, [pc, #212]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800865a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800865c:	e017      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	3304      	adds	r3, #4
 8008662:	2100      	movs	r1, #0
 8008664:	4618      	mov	r0, r3
 8008666:	f000 fe3d 	bl	80092e4 <RCCEx_PLL2_Config>
 800866a:	4603      	mov	r3, r0
 800866c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800866e:	e00e      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3324      	adds	r3, #36	; 0x24
 8008674:	2100      	movs	r1, #0
 8008676:	4618      	mov	r0, r3
 8008678:	f000 fee6 	bl	8009448 <RCCEx_PLL3_Config>
 800867c:	4603      	mov	r3, r0
 800867e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008680:	e005      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	75fb      	strb	r3, [r7, #23]
      break;
 8008686:	e002      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008688:	bf00      	nop
 800868a:	e000      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800868c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10a      	bne.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008694:	4b25      	ldr	r3, [pc, #148]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008698:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80086a2:	4922      	ldr	r1, [pc, #136]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	658b      	str	r3, [r1, #88]	; 0x58
 80086a8:	e001      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
 80086ac:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d04b      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80086c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086c4:	d030      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80086c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086ca:	d82a      	bhi.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80086cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80086d0:	d02e      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80086d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80086d6:	d824      	bhi.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80086d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086dc:	d018      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80086de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086e2:	d81e      	bhi.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d003      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80086e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086ec:	d007      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80086ee:	e018      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086f0:	4b0e      	ldr	r3, [pc, #56]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f4:	4a0d      	ldr	r2, [pc, #52]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086fc:	e019      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	3304      	adds	r3, #4
 8008702:	2100      	movs	r1, #0
 8008704:	4618      	mov	r0, r3
 8008706:	f000 fded 	bl	80092e4 <RCCEx_PLL2_Config>
 800870a:	4603      	mov	r3, r0
 800870c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800870e:	e010      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3324      	adds	r3, #36	; 0x24
 8008714:	2100      	movs	r1, #0
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fe96 	bl	8009448 <RCCEx_PLL3_Config>
 800871c:	4603      	mov	r3, r0
 800871e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008720:	e007      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	75fb      	strb	r3, [r7, #23]
      break;
 8008726:	e004      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008728:	bf00      	nop
 800872a:	e002      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800872c:	58024400 	.word	0x58024400
      break;
 8008730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008738:	4b99      	ldr	r3, [pc, #612]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800873a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800873c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008746:	4996      	ldr	r1, [pc, #600]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008748:	4313      	orrs	r3, r2
 800874a:	658b      	str	r3, [r1, #88]	; 0x58
 800874c:	e001      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800874e:	7dfb      	ldrb	r3, [r7, #23]
 8008750:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d032      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008762:	2b30      	cmp	r3, #48	; 0x30
 8008764:	d01c      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008766:	2b30      	cmp	r3, #48	; 0x30
 8008768:	d817      	bhi.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800876a:	2b20      	cmp	r3, #32
 800876c:	d00c      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800876e:	2b20      	cmp	r3, #32
 8008770:	d813      	bhi.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d016      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008776:	2b10      	cmp	r3, #16
 8008778:	d10f      	bne.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800877a:	4b89      	ldr	r3, [pc, #548]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800877c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877e:	4a88      	ldr	r2, [pc, #544]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008784:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008786:	e00e      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	3304      	adds	r3, #4
 800878c:	2102      	movs	r1, #2
 800878e:	4618      	mov	r0, r3
 8008790:	f000 fda8 	bl	80092e4 <RCCEx_PLL2_Config>
 8008794:	4603      	mov	r3, r0
 8008796:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008798:	e005      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	75fb      	strb	r3, [r7, #23]
      break;
 800879e:	e002      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80087a0:	bf00      	nop
 80087a2:	e000      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80087a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d109      	bne.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80087ac:	4b7c      	ldr	r3, [pc, #496]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80087ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087b8:	4979      	ldr	r1, [pc, #484]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80087be:	e001      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d047      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087d8:	d030      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80087da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087de:	d82a      	bhi.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80087e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087e4:	d02c      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80087e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087ea:	d824      	bhi.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80087ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087f0:	d018      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80087f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087f6:	d81e      	bhi.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d003      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80087fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008800:	d007      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008802:	e018      	b.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008804:	4b66      	ldr	r3, [pc, #408]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008808:	4a65      	ldr	r2, [pc, #404]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800880a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800880e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008810:	e017      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	3304      	adds	r3, #4
 8008816:	2100      	movs	r1, #0
 8008818:	4618      	mov	r0, r3
 800881a:	f000 fd63 	bl	80092e4 <RCCEx_PLL2_Config>
 800881e:	4603      	mov	r3, r0
 8008820:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008822:	e00e      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3324      	adds	r3, #36	; 0x24
 8008828:	2100      	movs	r1, #0
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fe0c 	bl	8009448 <RCCEx_PLL3_Config>
 8008830:	4603      	mov	r3, r0
 8008832:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008834:	e005      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	75fb      	strb	r3, [r7, #23]
      break;
 800883a:	e002      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800883c:	bf00      	nop
 800883e:	e000      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008842:	7dfb      	ldrb	r3, [r7, #23]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d109      	bne.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008848:	4b55      	ldr	r3, [pc, #340]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800884a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800884c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008854:	4952      	ldr	r1, [pc, #328]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008856:	4313      	orrs	r3, r2
 8008858:	650b      	str	r3, [r1, #80]	; 0x50
 800885a:	e001      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800885c:	7dfb      	ldrb	r3, [r7, #23]
 800885e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d049      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008874:	d02e      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008876:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800887a:	d828      	bhi.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x476>
 800887c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008880:	d02a      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008882:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008886:	d822      	bhi.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008888:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800888c:	d026      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800888e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008892:	d81c      	bhi.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008898:	d010      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x464>
 800889a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800889e:	d816      	bhi.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x476>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d01d      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80088a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088a8:	d111      	bne.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	3304      	adds	r3, #4
 80088ae:	2101      	movs	r1, #1
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 fd17 	bl	80092e4 <RCCEx_PLL2_Config>
 80088b6:	4603      	mov	r3, r0
 80088b8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80088ba:	e012      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	3324      	adds	r3, #36	; 0x24
 80088c0:	2101      	movs	r1, #1
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fdc0 	bl	8009448 <RCCEx_PLL3_Config>
 80088c8:	4603      	mov	r3, r0
 80088ca:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80088cc:	e009      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	75fb      	strb	r3, [r7, #23]
      break;
 80088d2:	e006      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80088d4:	bf00      	nop
 80088d6:	e004      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80088d8:	bf00      	nop
 80088da:	e002      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80088dc:	bf00      	nop
 80088de:	e000      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80088e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d109      	bne.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80088e8:	4b2d      	ldr	r3, [pc, #180]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80088ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f4:	492a      	ldr	r1, [pc, #168]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80088f6:	4313      	orrs	r3, r2
 80088f8:	650b      	str	r3, [r1, #80]	; 0x50
 80088fa:	e001      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088fc:	7dfb      	ldrb	r3, [r7, #23]
 80088fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d04d      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008912:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008916:	d02e      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800891c:	d828      	bhi.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800891e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008922:	d02a      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008928:	d822      	bhi.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800892a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800892e:	d026      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008930:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008934:	d81c      	bhi.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800893a:	d010      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800893c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008940:	d816      	bhi.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d01d      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800894a:	d111      	bne.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	3304      	adds	r3, #4
 8008950:	2101      	movs	r1, #1
 8008952:	4618      	mov	r0, r3
 8008954:	f000 fcc6 	bl	80092e4 <RCCEx_PLL2_Config>
 8008958:	4603      	mov	r3, r0
 800895a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800895c:	e012      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	3324      	adds	r3, #36	; 0x24
 8008962:	2101      	movs	r1, #1
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fd6f 	bl	8009448 <RCCEx_PLL3_Config>
 800896a:	4603      	mov	r3, r0
 800896c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800896e:	e009      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	75fb      	strb	r3, [r7, #23]
      break;
 8008974:	e006      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008976:	bf00      	nop
 8008978:	e004      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800897a:	bf00      	nop
 800897c:	e002      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800897e:	bf00      	nop
 8008980:	e000      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008982:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008984:	7dfb      	ldrb	r3, [r7, #23]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10c      	bne.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800898a:	4b05      	ldr	r3, [pc, #20]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800898c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800898e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008998:	4901      	ldr	r1, [pc, #4]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800899a:	4313      	orrs	r3, r2
 800899c:	658b      	str	r3, [r1, #88]	; 0x58
 800899e:	e003      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80089a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
 80089a6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d02f      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089bc:	d00e      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x584>
 80089be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089c2:	d814      	bhi.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x596>
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d015      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80089c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089cc:	d10f      	bne.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ce:	4baf      	ldr	r3, [pc, #700]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80089d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d2:	4aae      	ldr	r2, [pc, #696]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80089d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80089da:	e00c      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3304      	adds	r3, #4
 80089e0:	2101      	movs	r1, #1
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 fc7e 	bl	80092e4 <RCCEx_PLL2_Config>
 80089e8:	4603      	mov	r3, r0
 80089ea:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80089ec:	e003      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	75fb      	strb	r3, [r7, #23]
      break;
 80089f2:	e000      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80089f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d109      	bne.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80089fc:	4ba3      	ldr	r3, [pc, #652]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80089fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a08:	49a0      	ldr	r1, [pc, #640]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	650b      	str	r3, [r1, #80]	; 0x50
 8008a0e:	e001      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a10:	7dfb      	ldrb	r3, [r7, #23]
 8008a12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d032      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a24:	2b03      	cmp	r3, #3
 8008a26:	d81b      	bhi.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008a28:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008a67 	.word	0x08008a67
 8008a34:	08008a41 	.word	0x08008a41
 8008a38:	08008a4f 	.word	0x08008a4f
 8008a3c:	08008a67 	.word	0x08008a67
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a40:	4b92      	ldr	r3, [pc, #584]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a44:	4a91      	ldr	r2, [pc, #580]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008a4c:	e00c      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3304      	adds	r3, #4
 8008a52:	2102      	movs	r1, #2
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 fc45 	bl	80092e4 <RCCEx_PLL2_Config>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008a5e:	e003      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	75fb      	strb	r3, [r7, #23]
      break;
 8008a64:	e000      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008a66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d109      	bne.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008a6e:	4b87      	ldr	r3, [pc, #540]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a72:	f023 0203 	bic.w	r2, r3, #3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7a:	4984      	ldr	r1, [pc, #528]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a80:	e001      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f000 8086 	beq.w	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a94:	4b7e      	ldr	r3, [pc, #504]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a7d      	ldr	r2, [pc, #500]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008aa0:	f7fb fc6e 	bl	8004380 <HAL_GetTick>
 8008aa4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008aa6:	e009      	b.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008aa8:	f7fb fc6a 	bl	8004380 <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b64      	cmp	r3, #100	; 0x64
 8008ab4:	d902      	bls.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	75fb      	strb	r3, [r7, #23]
        break;
 8008aba:	e005      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008abc:	4b74      	ldr	r3, [pc, #464]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0ef      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d166      	bne.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008ace:	4b6f      	ldr	r3, [pc, #444]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ad0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ad8:	4053      	eors	r3, r2
 8008ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d013      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ae2:	4b6a      	ldr	r3, [pc, #424]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008aec:	4b67      	ldr	r3, [pc, #412]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af0:	4a66      	ldr	r2, [pc, #408]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008af6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008af8:	4b64      	ldr	r3, [pc, #400]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008afc:	4a63      	ldr	r2, [pc, #396]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b02:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008b04:	4a61      	ldr	r2, [pc, #388]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b14:	d115      	bne.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b16:	f7fb fc33 	bl	8004380 <HAL_GetTick>
 8008b1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b1c:	e00b      	b.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b1e:	f7fb fc2f 	bl	8004380 <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d902      	bls.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	75fb      	strb	r3, [r7, #23]
            break;
 8008b34:	e005      	b.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b36:	4b55      	ldr	r3, [pc, #340]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3a:	f003 0302 	and.w	r3, r3, #2
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0ed      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d126      	bne.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b56:	d10d      	bne.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008b58:	4b4c      	ldr	r3, [pc, #304]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b66:	0919      	lsrs	r1, r3, #4
 8008b68:	4b4a      	ldr	r3, [pc, #296]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008b6a:	400b      	ands	r3, r1
 8008b6c:	4947      	ldr	r1, [pc, #284]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	610b      	str	r3, [r1, #16]
 8008b72:	e005      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008b74:	4b45      	ldr	r3, [pc, #276]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	4a44      	ldr	r2, [pc, #272]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008b7e:	6113      	str	r3, [r2, #16]
 8008b80:	4b42      	ldr	r3, [pc, #264]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b8e:	493f      	ldr	r1, [pc, #252]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	670b      	str	r3, [r1, #112]	; 0x70
 8008b94:	e004      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	75bb      	strb	r3, [r7, #22]
 8008b9a:	e001      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 8085 	beq.w	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bb2:	2b28      	cmp	r3, #40	; 0x28
 8008bb4:	d866      	bhi.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008bb6:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbc:	08008c99 	.word	0x08008c99
 8008bc0:	08008c85 	.word	0x08008c85
 8008bc4:	08008c85 	.word	0x08008c85
 8008bc8:	08008c85 	.word	0x08008c85
 8008bcc:	08008c85 	.word	0x08008c85
 8008bd0:	08008c85 	.word	0x08008c85
 8008bd4:	08008c85 	.word	0x08008c85
 8008bd8:	08008c85 	.word	0x08008c85
 8008bdc:	08008c61 	.word	0x08008c61
 8008be0:	08008c85 	.word	0x08008c85
 8008be4:	08008c85 	.word	0x08008c85
 8008be8:	08008c85 	.word	0x08008c85
 8008bec:	08008c85 	.word	0x08008c85
 8008bf0:	08008c85 	.word	0x08008c85
 8008bf4:	08008c85 	.word	0x08008c85
 8008bf8:	08008c85 	.word	0x08008c85
 8008bfc:	08008c73 	.word	0x08008c73
 8008c00:	08008c85 	.word	0x08008c85
 8008c04:	08008c85 	.word	0x08008c85
 8008c08:	08008c85 	.word	0x08008c85
 8008c0c:	08008c85 	.word	0x08008c85
 8008c10:	08008c85 	.word	0x08008c85
 8008c14:	08008c85 	.word	0x08008c85
 8008c18:	08008c85 	.word	0x08008c85
 8008c1c:	08008c99 	.word	0x08008c99
 8008c20:	08008c85 	.word	0x08008c85
 8008c24:	08008c85 	.word	0x08008c85
 8008c28:	08008c85 	.word	0x08008c85
 8008c2c:	08008c85 	.word	0x08008c85
 8008c30:	08008c85 	.word	0x08008c85
 8008c34:	08008c85 	.word	0x08008c85
 8008c38:	08008c85 	.word	0x08008c85
 8008c3c:	08008c99 	.word	0x08008c99
 8008c40:	08008c85 	.word	0x08008c85
 8008c44:	08008c85 	.word	0x08008c85
 8008c48:	08008c85 	.word	0x08008c85
 8008c4c:	08008c85 	.word	0x08008c85
 8008c50:	08008c85 	.word	0x08008c85
 8008c54:	08008c85 	.word	0x08008c85
 8008c58:	08008c85 	.word	0x08008c85
 8008c5c:	08008c99 	.word	0x08008c99
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3304      	adds	r3, #4
 8008c64:	2101      	movs	r1, #1
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 fb3c 	bl	80092e4 <RCCEx_PLL2_Config>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008c70:	e013      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3324      	adds	r3, #36	; 0x24
 8008c76:	2101      	movs	r1, #1
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 fbe5 	bl	8009448 <RCCEx_PLL3_Config>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008c82:	e00a      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	75fb      	strb	r3, [r7, #23]
      break;
 8008c88:	e007      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008c8a:	bf00      	nop
 8008c8c:	58024400 	.word	0x58024400
 8008c90:	58024800 	.word	0x58024800
 8008c94:	00ffffcf 	.word	0x00ffffcf
      break;
 8008c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d109      	bne.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008ca0:	4b96      	ldr	r3, [pc, #600]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ca4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cac:	4993      	ldr	r1, [pc, #588]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	654b      	str	r3, [r1, #84]	; 0x54
 8008cb2:	e001      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0302 	and.w	r3, r3, #2
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d038      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cc8:	2b05      	cmp	r3, #5
 8008cca:	d821      	bhi.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008ccc:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd2:	bf00      	nop
 8008cd4:	08008d17 	.word	0x08008d17
 8008cd8:	08008ced 	.word	0x08008ced
 8008cdc:	08008cff 	.word	0x08008cff
 8008ce0:	08008d17 	.word	0x08008d17
 8008ce4:	08008d17 	.word	0x08008d17
 8008ce8:	08008d17 	.word	0x08008d17
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3304      	adds	r3, #4
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 faf6 	bl	80092e4 <RCCEx_PLL2_Config>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008cfc:	e00c      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	3324      	adds	r3, #36	; 0x24
 8008d02:	2101      	movs	r1, #1
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 fb9f 	bl	8009448 <RCCEx_PLL3_Config>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008d0e:	e003      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	75fb      	strb	r3, [r7, #23]
      break;
 8008d14:	e000      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8008d16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d109      	bne.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008d1e:	4b77      	ldr	r3, [pc, #476]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d22:	f023 0207 	bic.w	r2, r3, #7
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d2a:	4974      	ldr	r1, [pc, #464]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	654b      	str	r3, [r1, #84]	; 0x54
 8008d30:	e001      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 0304 	and.w	r3, r3, #4
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d03a      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d48:	2b05      	cmp	r3, #5
 8008d4a:	d821      	bhi.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008d4c:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d52:	bf00      	nop
 8008d54:	08008d97 	.word	0x08008d97
 8008d58:	08008d6d 	.word	0x08008d6d
 8008d5c:	08008d7f 	.word	0x08008d7f
 8008d60:	08008d97 	.word	0x08008d97
 8008d64:	08008d97 	.word	0x08008d97
 8008d68:	08008d97 	.word	0x08008d97
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3304      	adds	r3, #4
 8008d70:	2101      	movs	r1, #1
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 fab6 	bl	80092e4 <RCCEx_PLL2_Config>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008d7c:	e00c      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3324      	adds	r3, #36	; 0x24
 8008d82:	2101      	movs	r1, #1
 8008d84:	4618      	mov	r0, r3
 8008d86:	f000 fb5f 	bl	8009448 <RCCEx_PLL3_Config>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008d8e:	e003      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	75fb      	strb	r3, [r7, #23]
      break;
 8008d94:	e000      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10a      	bne.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d9e:	4b57      	ldr	r3, [pc, #348]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da2:	f023 0207 	bic.w	r2, r3, #7
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dac:	4953      	ldr	r1, [pc, #332]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	658b      	str	r3, [r1, #88]	; 0x58
 8008db2:	e001      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
 8008db6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0320 	and.w	r3, r3, #32
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d04b      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dce:	d02e      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dd4:	d828      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dda:	d02a      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de0:	d822      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008de2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008de6:	d026      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008de8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008dec:	d81c      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008df2:	d010      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8008df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008df8:	d816      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d01d      	beq.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e02:	d111      	bne.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3304      	adds	r3, #4
 8008e08:	2100      	movs	r1, #0
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 fa6a 	bl	80092e4 <RCCEx_PLL2_Config>
 8008e10:	4603      	mov	r3, r0
 8008e12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008e14:	e012      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	3324      	adds	r3, #36	; 0x24
 8008e1a:	2102      	movs	r1, #2
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 fb13 	bl	8009448 <RCCEx_PLL3_Config>
 8008e22:	4603      	mov	r3, r0
 8008e24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008e26:	e009      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e2c:	e006      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008e2e:	bf00      	nop
 8008e30:	e004      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008e32:	bf00      	nop
 8008e34:	e002      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008e36:	bf00      	nop
 8008e38:	e000      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10a      	bne.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e42:	4b2e      	ldr	r3, [pc, #184]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e46:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e50:	492a      	ldr	r1, [pc, #168]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	654b      	str	r3, [r1, #84]	; 0x54
 8008e56:	e001      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
 8008e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d04d      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e6e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008e72:	d02e      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008e74:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008e78:	d828      	bhi.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e7e:	d02a      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e84:	d822      	bhi.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008e86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e8a:	d026      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008e8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e90:	d81c      	bhi.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e96:	d010      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e9c:	d816      	bhi.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d01d      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8008ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ea6:	d111      	bne.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	3304      	adds	r3, #4
 8008eac:	2100      	movs	r1, #0
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 fa18 	bl	80092e4 <RCCEx_PLL2_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008eb8:	e012      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	3324      	adds	r3, #36	; 0x24
 8008ebe:	2102      	movs	r1, #2
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fac1 	bl	8009448 <RCCEx_PLL3_Config>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008eca:	e009      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	75fb      	strb	r3, [r7, #23]
      break;
 8008ed0:	e006      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008ed2:	bf00      	nop
 8008ed4:	e004      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008ed6:	bf00      	nop
 8008ed8:	e002      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008eda:	bf00      	nop
 8008edc:	e000      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10c      	bne.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ee6:	4b05      	ldr	r3, [pc, #20]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ef4:	4901      	ldr	r1, [pc, #4]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	658b      	str	r3, [r1, #88]	; 0x58
 8008efa:	e003      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008efc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d04b      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f16:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008f1a:	d02e      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008f1c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008f20:	d828      	bhi.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f26:	d02a      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f2c:	d822      	bhi.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008f2e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008f32:	d026      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008f34:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008f38:	d81c      	bhi.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008f3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f3e:	d010      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f44:	d816      	bhi.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d01d      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f4e:	d111      	bne.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3304      	adds	r3, #4
 8008f54:	2100      	movs	r1, #0
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 f9c4 	bl	80092e4 <RCCEx_PLL2_Config>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008f60:	e012      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	3324      	adds	r3, #36	; 0x24
 8008f66:	2102      	movs	r1, #2
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 fa6d 	bl	8009448 <RCCEx_PLL3_Config>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008f72:	e009      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	75fb      	strb	r3, [r7, #23]
      break;
 8008f78:	e006      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008f7a:	bf00      	nop
 8008f7c:	e004      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008f7e:	bf00      	nop
 8008f80:	e002      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008f82:	bf00      	nop
 8008f84:	e000      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10a      	bne.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008f8e:	4b9d      	ldr	r3, [pc, #628]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f9c:	4999      	ldr	r1, [pc, #612]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	658b      	str	r3, [r1, #88]	; 0x58
 8008fa2:	e001      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fa4:	7dfb      	ldrb	r3, [r7, #23]
 8008fa6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0308 	and.w	r3, r3, #8
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d01a      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fbe:	d10a      	bne.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3324      	adds	r3, #36	; 0x24
 8008fc4:	2102      	movs	r1, #2
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fa3e 	bl	8009448 <RCCEx_PLL3_Config>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d001      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008fd6:	4b8b      	ldr	r3, [pc, #556]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fe4:	4987      	ldr	r1, [pc, #540]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 0310 	and.w	r3, r3, #16
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d01a      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009000:	d10a      	bne.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	3324      	adds	r3, #36	; 0x24
 8009006:	2102      	movs	r1, #2
 8009008:	4618      	mov	r0, r3
 800900a:	f000 fa1d 	bl	8009448 <RCCEx_PLL3_Config>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d001      	beq.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009018:	4b7a      	ldr	r3, [pc, #488]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800901a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800901c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009026:	4977      	ldr	r1, [pc, #476]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009028:	4313      	orrs	r3, r2
 800902a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d034      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800903e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009042:	d01d      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009044:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009048:	d817      	bhi.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800904e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009052:	d009      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009054:	e011      	b.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	3304      	adds	r3, #4
 800905a:	2100      	movs	r1, #0
 800905c:	4618      	mov	r0, r3
 800905e:	f000 f941 	bl	80092e4 <RCCEx_PLL2_Config>
 8009062:	4603      	mov	r3, r0
 8009064:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009066:	e00c      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	3324      	adds	r3, #36	; 0x24
 800906c:	2102      	movs	r1, #2
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f9ea 	bl	8009448 <RCCEx_PLL3_Config>
 8009074:	4603      	mov	r3, r0
 8009076:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009078:	e003      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	75fb      	strb	r3, [r7, #23]
      break;
 800907e:	e000      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009082:	7dfb      	ldrb	r3, [r7, #23]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d10a      	bne.n	800909e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009088:	4b5e      	ldr	r3, [pc, #376]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800908a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800908c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009096:	495b      	ldr	r1, [pc, #364]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009098:	4313      	orrs	r3, r2
 800909a:	658b      	str	r3, [r1, #88]	; 0x58
 800909c:	e001      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800909e:	7dfb      	ldrb	r3, [r7, #23]
 80090a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d033      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090b8:	d01c      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80090ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090be:	d816      	bhi.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80090c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090c4:	d003      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80090c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090ca:	d007      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80090cc:	e00f      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ce:	4b4d      	ldr	r3, [pc, #308]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d2:	4a4c      	ldr	r2, [pc, #304]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80090da:	e00c      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	3324      	adds	r3, #36	; 0x24
 80090e0:	2101      	movs	r1, #1
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 f9b0 	bl	8009448 <RCCEx_PLL3_Config>
 80090e8:	4603      	mov	r3, r0
 80090ea:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80090ec:	e003      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	75fb      	strb	r3, [r7, #23]
      break;
 80090f2:	e000      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80090f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090f6:	7dfb      	ldrb	r3, [r7, #23]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10a      	bne.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090fc:	4b41      	ldr	r3, [pc, #260]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009100:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800910a:	493e      	ldr	r1, [pc, #248]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800910c:	4313      	orrs	r3, r2
 800910e:	654b      	str	r3, [r1, #84]	; 0x54
 8009110:	e001      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009112:	7dfb      	ldrb	r3, [r7, #23]
 8009114:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d029      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009126:	2b00      	cmp	r3, #0
 8009128:	d003      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800912a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800912e:	d007      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009130:	e00f      	b.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009132:	4b34      	ldr	r3, [pc, #208]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009136:	4a33      	ldr	r2, [pc, #204]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800913c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800913e:	e00b      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	3304      	adds	r3, #4
 8009144:	2102      	movs	r1, #2
 8009146:	4618      	mov	r0, r3
 8009148:	f000 f8cc 	bl	80092e4 <RCCEx_PLL2_Config>
 800914c:	4603      	mov	r3, r0
 800914e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009150:	e002      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	75fb      	strb	r3, [r7, #23]
      break;
 8009156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d109      	bne.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800915e:	4b29      	ldr	r3, [pc, #164]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009162:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800916a:	4926      	ldr	r1, [pc, #152]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800916c:	4313      	orrs	r3, r2
 800916e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009170:	e001      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009172:	7dfb      	ldrb	r3, [r7, #23]
 8009174:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00a      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	3324      	adds	r3, #36	; 0x24
 8009186:	2102      	movs	r1, #2
 8009188:	4618      	mov	r0, r3
 800918a:	f000 f95d 	bl	8009448 <RCCEx_PLL3_Config>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d033      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091ac:	d017      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80091ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091b2:	d811      	bhi.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80091b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091b8:	d013      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80091ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091be:	d80b      	bhi.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d010      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80091c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091c8:	d106      	bne.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091ca:	4b0e      	ldr	r3, [pc, #56]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ce:	4a0d      	ldr	r2, [pc, #52]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80091d6:	e007      	b.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	75fb      	strb	r3, [r7, #23]
      break;
 80091dc:	e004      	b.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80091de:	bf00      	nop
 80091e0:	e002      	b.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80091e2:	bf00      	nop
 80091e4:	e000      	b.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80091e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10c      	bne.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80091ee:	4b05      	ldr	r3, [pc, #20]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091fa:	4902      	ldr	r1, [pc, #8]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	654b      	str	r3, [r1, #84]	; 0x54
 8009200:	e004      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009202:	bf00      	nop
 8009204:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d008      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009218:	4b31      	ldr	r3, [pc, #196]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800921a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800921c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009224:	492e      	ldr	r1, [pc, #184]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009226:	4313      	orrs	r3, r2
 8009228:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d009      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009236:	4b2a      	ldr	r3, [pc, #168]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009244:	4926      	ldr	r1, [pc, #152]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009246:	4313      	orrs	r3, r2
 8009248:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d008      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009256:	4b22      	ldr	r3, [pc, #136]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800925a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009262:	491f      	ldr	r1, [pc, #124]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009264:	4313      	orrs	r3, r2
 8009266:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00d      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009274:	4b1a      	ldr	r3, [pc, #104]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	4a19      	ldr	r2, [pc, #100]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800927a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800927e:	6113      	str	r3, [r2, #16]
 8009280:	4b17      	ldr	r3, [pc, #92]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009282:	691a      	ldr	r2, [r3, #16]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800928a:	4915      	ldr	r1, [pc, #84]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800928c:	4313      	orrs	r3, r2
 800928e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	da08      	bge.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009298:	4b11      	ldr	r3, [pc, #68]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800929a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800929c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092a4:	490e      	ldr	r1, [pc, #56]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d009      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80092b6:	4b0a      	ldr	r3, [pc, #40]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80092b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c4:	4906      	ldr	r1, [pc, #24]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80092ca:	7dbb      	ldrb	r3, [r7, #22]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	e000      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	58024400 	.word	0x58024400

080092e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092f2:	4b53      	ldr	r3, [pc, #332]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 80092f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f6:	f003 0303 	and.w	r3, r3, #3
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	d101      	bne.n	8009302 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e099      	b.n	8009436 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009302:	4b4f      	ldr	r3, [pc, #316]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a4e      	ldr	r2, [pc, #312]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 8009308:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800930c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800930e:	f7fb f837 	bl	8004380 <HAL_GetTick>
 8009312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009314:	e008      	b.n	8009328 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009316:	f7fb f833 	bl	8004380 <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d901      	bls.n	8009328 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e086      	b.n	8009436 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009328:	4b45      	ldr	r3, [pc, #276]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1f0      	bne.n	8009316 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009334:	4b42      	ldr	r3, [pc, #264]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 8009336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009338:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	031b      	lsls	r3, r3, #12
 8009342:	493f      	ldr	r1, [pc, #252]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 8009344:	4313      	orrs	r3, r2
 8009346:	628b      	str	r3, [r1, #40]	; 0x28
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	3b01      	subs	r3, #1
 800934e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	3b01      	subs	r3, #1
 8009358:	025b      	lsls	r3, r3, #9
 800935a:	b29b      	uxth	r3, r3
 800935c:	431a      	orrs	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	3b01      	subs	r3, #1
 8009364:	041b      	lsls	r3, r3, #16
 8009366:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800936a:	431a      	orrs	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	3b01      	subs	r3, #1
 8009372:	061b      	lsls	r3, r3, #24
 8009374:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009378:	4931      	ldr	r1, [pc, #196]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 800937a:	4313      	orrs	r3, r2
 800937c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800937e:	4b30      	ldr	r3, [pc, #192]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 8009380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009382:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	492d      	ldr	r1, [pc, #180]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 800938c:	4313      	orrs	r3, r2
 800938e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009390:	4b2b      	ldr	r3, [pc, #172]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 8009392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009394:	f023 0220 	bic.w	r2, r3, #32
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	4928      	ldr	r1, [pc, #160]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80093a2:	4b27      	ldr	r3, [pc, #156]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 80093a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a6:	4a26      	ldr	r2, [pc, #152]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 80093a8:	f023 0310 	bic.w	r3, r3, #16
 80093ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80093ae:	4b24      	ldr	r3, [pc, #144]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 80093b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093b2:	4b24      	ldr	r3, [pc, #144]	; (8009444 <RCCEx_PLL2_Config+0x160>)
 80093b4:	4013      	ands	r3, r2
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	69d2      	ldr	r2, [r2, #28]
 80093ba:	00d2      	lsls	r2, r2, #3
 80093bc:	4920      	ldr	r1, [pc, #128]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80093c2:	4b1f      	ldr	r3, [pc, #124]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 80093c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c6:	4a1e      	ldr	r2, [pc, #120]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 80093c8:	f043 0310 	orr.w	r3, r3, #16
 80093cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d106      	bne.n	80093e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80093d4:	4b1a      	ldr	r3, [pc, #104]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 80093d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d8:	4a19      	ldr	r2, [pc, #100]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 80093da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093e0:	e00f      	b.n	8009402 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d106      	bne.n	80093f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80093e8:	4b15      	ldr	r3, [pc, #84]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 80093ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ec:	4a14      	ldr	r2, [pc, #80]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 80093ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093f4:	e005      	b.n	8009402 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80093f6:	4b12      	ldr	r3, [pc, #72]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 80093f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fa:	4a11      	ldr	r2, [pc, #68]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 80093fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009400:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009402:	4b0f      	ldr	r3, [pc, #60]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a0e      	ldr	r2, [pc, #56]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 8009408:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800940c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800940e:	f7fa ffb7 	bl	8004380 <HAL_GetTick>
 8009412:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009414:	e008      	b.n	8009428 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009416:	f7fa ffb3 	bl	8004380 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	2b02      	cmp	r3, #2
 8009422:	d901      	bls.n	8009428 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e006      	b.n	8009436 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009428:	4b05      	ldr	r3, [pc, #20]	; (8009440 <RCCEx_PLL2_Config+0x15c>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0f0      	beq.n	8009416 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009434:	7bfb      	ldrb	r3, [r7, #15]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	58024400 	.word	0x58024400
 8009444:	ffff0007 	.word	0xffff0007

08009448 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009452:	2300      	movs	r3, #0
 8009454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009456:	4b53      	ldr	r3, [pc, #332]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 8009458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945a:	f003 0303 	and.w	r3, r3, #3
 800945e:	2b03      	cmp	r3, #3
 8009460:	d101      	bne.n	8009466 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e099      	b.n	800959a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009466:	4b4f      	ldr	r3, [pc, #316]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a4e      	ldr	r2, [pc, #312]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 800946c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009472:	f7fa ff85 	bl	8004380 <HAL_GetTick>
 8009476:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009478:	e008      	b.n	800948c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800947a:	f7fa ff81 	bl	8004380 <HAL_GetTick>
 800947e:	4602      	mov	r2, r0
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	2b02      	cmp	r3, #2
 8009486:	d901      	bls.n	800948c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e086      	b.n	800959a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800948c:	4b45      	ldr	r3, [pc, #276]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1f0      	bne.n	800947a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009498:	4b42      	ldr	r3, [pc, #264]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 800949a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	051b      	lsls	r3, r3, #20
 80094a6:	493f      	ldr	r1, [pc, #252]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 80094a8:	4313      	orrs	r3, r2
 80094aa:	628b      	str	r3, [r1, #40]	; 0x28
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	3b01      	subs	r3, #1
 80094b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	3b01      	subs	r3, #1
 80094bc:	025b      	lsls	r3, r3, #9
 80094be:	b29b      	uxth	r3, r3
 80094c0:	431a      	orrs	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	041b      	lsls	r3, r3, #16
 80094ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80094ce:	431a      	orrs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	061b      	lsls	r3, r3, #24
 80094d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094dc:	4931      	ldr	r1, [pc, #196]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 80094de:	4313      	orrs	r3, r2
 80094e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80094e2:	4b30      	ldr	r3, [pc, #192]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 80094e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	492d      	ldr	r1, [pc, #180]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 80094f0:	4313      	orrs	r3, r2
 80094f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80094f4:	4b2b      	ldr	r3, [pc, #172]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	4928      	ldr	r1, [pc, #160]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 8009502:	4313      	orrs	r3, r2
 8009504:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009506:	4b27      	ldr	r3, [pc, #156]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 8009508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950a:	4a26      	ldr	r2, [pc, #152]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 800950c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009512:	4b24      	ldr	r3, [pc, #144]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 8009514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009516:	4b24      	ldr	r3, [pc, #144]	; (80095a8 <RCCEx_PLL3_Config+0x160>)
 8009518:	4013      	ands	r3, r2
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	69d2      	ldr	r2, [r2, #28]
 800951e:	00d2      	lsls	r2, r2, #3
 8009520:	4920      	ldr	r1, [pc, #128]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 8009522:	4313      	orrs	r3, r2
 8009524:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009526:	4b1f      	ldr	r3, [pc, #124]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 8009528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952a:	4a1e      	ldr	r2, [pc, #120]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 800952c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009530:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009538:	4b1a      	ldr	r3, [pc, #104]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 800953a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953c:	4a19      	ldr	r2, [pc, #100]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 800953e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009542:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009544:	e00f      	b.n	8009566 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b01      	cmp	r3, #1
 800954a:	d106      	bne.n	800955a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800954c:	4b15      	ldr	r3, [pc, #84]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	4a14      	ldr	r2, [pc, #80]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 8009552:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009556:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009558:	e005      	b.n	8009566 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800955a:	4b12      	ldr	r3, [pc, #72]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 800955c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955e:	4a11      	ldr	r2, [pc, #68]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 8009560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009564:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009566:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a0e      	ldr	r2, [pc, #56]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 800956c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009572:	f7fa ff05 	bl	8004380 <HAL_GetTick>
 8009576:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009578:	e008      	b.n	800958c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800957a:	f7fa ff01 	bl	8004380 <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	2b02      	cmp	r3, #2
 8009586:	d901      	bls.n	800958c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	e006      	b.n	800959a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800958c:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <RCCEx_PLL3_Config+0x15c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d0f0      	beq.n	800957a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009598:	7bfb      	ldrb	r3, [r7, #15]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	58024400 	.word	0x58024400
 80095a8:	ffff0007 	.word	0xffff0007

080095ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e049      	b.n	8009652 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d106      	bne.n	80095d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7fa fc66 	bl	8003ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2202      	movs	r2, #2
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3304      	adds	r3, #4
 80095e8:	4619      	mov	r1, r3
 80095ea:	4610      	mov	r0, r2
 80095ec:	f000 faee 	bl	8009bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800966a:	b2db      	uxtb	r3, r3
 800966c:	2b01      	cmp	r3, #1
 800966e:	d001      	beq.n	8009674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e054      	b.n	800971e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2202      	movs	r2, #2
 8009678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f042 0201 	orr.w	r2, r2, #1
 800968a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a26      	ldr	r2, [pc, #152]	; (800972c <HAL_TIM_Base_Start_IT+0xd0>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d022      	beq.n	80096dc <HAL_TIM_Base_Start_IT+0x80>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800969e:	d01d      	beq.n	80096dc <HAL_TIM_Base_Start_IT+0x80>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a22      	ldr	r2, [pc, #136]	; (8009730 <HAL_TIM_Base_Start_IT+0xd4>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d018      	beq.n	80096dc <HAL_TIM_Base_Start_IT+0x80>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a21      	ldr	r2, [pc, #132]	; (8009734 <HAL_TIM_Base_Start_IT+0xd8>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d013      	beq.n	80096dc <HAL_TIM_Base_Start_IT+0x80>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a1f      	ldr	r2, [pc, #124]	; (8009738 <HAL_TIM_Base_Start_IT+0xdc>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d00e      	beq.n	80096dc <HAL_TIM_Base_Start_IT+0x80>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a1e      	ldr	r2, [pc, #120]	; (800973c <HAL_TIM_Base_Start_IT+0xe0>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d009      	beq.n	80096dc <HAL_TIM_Base_Start_IT+0x80>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a1c      	ldr	r2, [pc, #112]	; (8009740 <HAL_TIM_Base_Start_IT+0xe4>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d004      	beq.n	80096dc <HAL_TIM_Base_Start_IT+0x80>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a1b      	ldr	r2, [pc, #108]	; (8009744 <HAL_TIM_Base_Start_IT+0xe8>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d115      	bne.n	8009708 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689a      	ldr	r2, [r3, #8]
 80096e2:	4b19      	ldr	r3, [pc, #100]	; (8009748 <HAL_TIM_Base_Start_IT+0xec>)
 80096e4:	4013      	ands	r3, r2
 80096e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2b06      	cmp	r3, #6
 80096ec:	d015      	beq.n	800971a <HAL_TIM_Base_Start_IT+0xbe>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096f4:	d011      	beq.n	800971a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f042 0201 	orr.w	r2, r2, #1
 8009704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009706:	e008      	b.n	800971a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f042 0201 	orr.w	r2, r2, #1
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	e000      	b.n	800971c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800971a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	40010000 	.word	0x40010000
 8009730:	40000400 	.word	0x40000400
 8009734:	40000800 	.word	0x40000800
 8009738:	40000c00 	.word	0x40000c00
 800973c:	40010400 	.word	0x40010400
 8009740:	40001800 	.word	0x40001800
 8009744:	40014000 	.word	0x40014000
 8009748:	00010007 	.word	0x00010007

0800974c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	f003 0302 	and.w	r3, r3, #2
 800975e:	2b02      	cmp	r3, #2
 8009760:	d122      	bne.n	80097a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	f003 0302 	and.w	r3, r3, #2
 800976c:	2b02      	cmp	r3, #2
 800976e:	d11b      	bne.n	80097a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f06f 0202 	mvn.w	r2, #2
 8009778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	f003 0303 	and.w	r3, r3, #3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d003      	beq.n	8009796 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f9fe 	bl	8009b90 <HAL_TIM_IC_CaptureCallback>
 8009794:	e005      	b.n	80097a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f9f0 	bl	8009b7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fa01 	bl	8009ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	f003 0304 	and.w	r3, r3, #4
 80097b2:	2b04      	cmp	r3, #4
 80097b4:	d122      	bne.n	80097fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	f003 0304 	and.w	r3, r3, #4
 80097c0:	2b04      	cmp	r3, #4
 80097c2:	d11b      	bne.n	80097fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f06f 0204 	mvn.w	r2, #4
 80097cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2202      	movs	r2, #2
 80097d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d003      	beq.n	80097ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f9d4 	bl	8009b90 <HAL_TIM_IC_CaptureCallback>
 80097e8:	e005      	b.n	80097f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f9c6 	bl	8009b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f9d7 	bl	8009ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	f003 0308 	and.w	r3, r3, #8
 8009806:	2b08      	cmp	r3, #8
 8009808:	d122      	bne.n	8009850 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	f003 0308 	and.w	r3, r3, #8
 8009814:	2b08      	cmp	r3, #8
 8009816:	d11b      	bne.n	8009850 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f06f 0208 	mvn.w	r2, #8
 8009820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2204      	movs	r2, #4
 8009826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	f003 0303 	and.w	r3, r3, #3
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f9aa 	bl	8009b90 <HAL_TIM_IC_CaptureCallback>
 800983c:	e005      	b.n	800984a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f99c 	bl	8009b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f9ad 	bl	8009ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	f003 0310 	and.w	r3, r3, #16
 800985a:	2b10      	cmp	r3, #16
 800985c:	d122      	bne.n	80098a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	f003 0310 	and.w	r3, r3, #16
 8009868:	2b10      	cmp	r3, #16
 800986a:	d11b      	bne.n	80098a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f06f 0210 	mvn.w	r2, #16
 8009874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2208      	movs	r2, #8
 800987a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f980 	bl	8009b90 <HAL_TIM_IC_CaptureCallback>
 8009890:	e005      	b.n	800989e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f972 	bl	8009b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f983 	bl	8009ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d10e      	bne.n	80098d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	f003 0301 	and.w	r3, r3, #1
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d107      	bne.n	80098d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f06f 0201 	mvn.w	r2, #1
 80098c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f7fa f8a6 	bl	8003a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098da:	2b80      	cmp	r3, #128	; 0x80
 80098dc:	d10e      	bne.n	80098fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e8:	2b80      	cmp	r3, #128	; 0x80
 80098ea:	d107      	bne.n	80098fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fb38 	bl	8009f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800990a:	d10e      	bne.n	800992a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009916:	2b80      	cmp	r3, #128	; 0x80
 8009918:	d107      	bne.n	800992a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fb2b 	bl	8009f80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009934:	2b40      	cmp	r3, #64	; 0x40
 8009936:	d10e      	bne.n	8009956 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009942:	2b40      	cmp	r3, #64	; 0x40
 8009944:	d107      	bne.n	8009956 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800994e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f931 	bl	8009bb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	f003 0320 	and.w	r3, r3, #32
 8009960:	2b20      	cmp	r3, #32
 8009962:	d10e      	bne.n	8009982 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	f003 0320 	and.w	r3, r3, #32
 800996e:	2b20      	cmp	r3, #32
 8009970:	d107      	bne.n	8009982 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f06f 0220 	mvn.w	r2, #32
 800997a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 faeb 	bl	8009f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009982:	bf00      	nop
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
	...

0800998c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d101      	bne.n	80099a8 <HAL_TIM_ConfigClockSource+0x1c>
 80099a4:	2302      	movs	r3, #2
 80099a6:	e0dc      	b.n	8009b62 <HAL_TIM_ConfigClockSource+0x1d6>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2202      	movs	r2, #2
 80099b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	4b6a      	ldr	r3, [pc, #424]	; (8009b6c <HAL_TIM_ConfigClockSource+0x1e0>)
 80099c4:	4013      	ands	r3, r2
 80099c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a64      	ldr	r2, [pc, #400]	; (8009b70 <HAL_TIM_ConfigClockSource+0x1e4>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	f000 80a9 	beq.w	8009b36 <HAL_TIM_ConfigClockSource+0x1aa>
 80099e4:	4a62      	ldr	r2, [pc, #392]	; (8009b70 <HAL_TIM_ConfigClockSource+0x1e4>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	f200 80ae 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x1bc>
 80099ec:	4a61      	ldr	r2, [pc, #388]	; (8009b74 <HAL_TIM_ConfigClockSource+0x1e8>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	f000 80a1 	beq.w	8009b36 <HAL_TIM_ConfigClockSource+0x1aa>
 80099f4:	4a5f      	ldr	r2, [pc, #380]	; (8009b74 <HAL_TIM_ConfigClockSource+0x1e8>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	f200 80a6 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x1bc>
 80099fc:	4a5e      	ldr	r2, [pc, #376]	; (8009b78 <HAL_TIM_ConfigClockSource+0x1ec>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	f000 8099 	beq.w	8009b36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a04:	4a5c      	ldr	r2, [pc, #368]	; (8009b78 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	f200 809e 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009a10:	f000 8091 	beq.w	8009b36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009a18:	f200 8096 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a20:	f000 8089 	beq.w	8009b36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a28:	f200 808e 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a30:	d03e      	beq.n	8009ab0 <HAL_TIM_ConfigClockSource+0x124>
 8009a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a36:	f200 8087 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a3e:	f000 8086 	beq.w	8009b4e <HAL_TIM_ConfigClockSource+0x1c2>
 8009a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a46:	d87f      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a48:	2b70      	cmp	r3, #112	; 0x70
 8009a4a:	d01a      	beq.n	8009a82 <HAL_TIM_ConfigClockSource+0xf6>
 8009a4c:	2b70      	cmp	r3, #112	; 0x70
 8009a4e:	d87b      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a50:	2b60      	cmp	r3, #96	; 0x60
 8009a52:	d050      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x16a>
 8009a54:	2b60      	cmp	r3, #96	; 0x60
 8009a56:	d877      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a58:	2b50      	cmp	r3, #80	; 0x50
 8009a5a:	d03c      	beq.n	8009ad6 <HAL_TIM_ConfigClockSource+0x14a>
 8009a5c:	2b50      	cmp	r3, #80	; 0x50
 8009a5e:	d873      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a60:	2b40      	cmp	r3, #64	; 0x40
 8009a62:	d058      	beq.n	8009b16 <HAL_TIM_ConfigClockSource+0x18a>
 8009a64:	2b40      	cmp	r3, #64	; 0x40
 8009a66:	d86f      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a68:	2b30      	cmp	r3, #48	; 0x30
 8009a6a:	d064      	beq.n	8009b36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a6c:	2b30      	cmp	r3, #48	; 0x30
 8009a6e:	d86b      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a70:	2b20      	cmp	r3, #32
 8009a72:	d060      	beq.n	8009b36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a74:	2b20      	cmp	r3, #32
 8009a76:	d867      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d05c      	beq.n	8009b36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a7c:	2b10      	cmp	r3, #16
 8009a7e:	d05a      	beq.n	8009b36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a80:	e062      	b.n	8009b48 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6818      	ldr	r0, [r3, #0]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	6899      	ldr	r1, [r3, #8]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	f000 f9b3 	bl	8009dfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	609a      	str	r2, [r3, #8]
      break;
 8009aae:	e04f      	b.n	8009b50 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6818      	ldr	r0, [r3, #0]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	6899      	ldr	r1, [r3, #8]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	f000 f99c 	bl	8009dfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689a      	ldr	r2, [r3, #8]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ad2:	609a      	str	r2, [r3, #8]
      break;
 8009ad4:	e03c      	b.n	8009b50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6818      	ldr	r0, [r3, #0]
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	6859      	ldr	r1, [r3, #4]
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f000 f90c 	bl	8009d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2150      	movs	r1, #80	; 0x50
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 f966 	bl	8009dc0 <TIM_ITRx_SetConfig>
      break;
 8009af4:	e02c      	b.n	8009b50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	6859      	ldr	r1, [r3, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	461a      	mov	r2, r3
 8009b04:	f000 f92b 	bl	8009d5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2160      	movs	r1, #96	; 0x60
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 f956 	bl	8009dc0 <TIM_ITRx_SetConfig>
      break;
 8009b14:	e01c      	b.n	8009b50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6818      	ldr	r0, [r3, #0]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	6859      	ldr	r1, [r3, #4]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	461a      	mov	r2, r3
 8009b24:	f000 f8ec 	bl	8009d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2140      	movs	r1, #64	; 0x40
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 f946 	bl	8009dc0 <TIM_ITRx_SetConfig>
      break;
 8009b34:	e00c      	b.n	8009b50 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	4610      	mov	r0, r2
 8009b42:	f000 f93d 	bl	8009dc0 <TIM_ITRx_SetConfig>
      break;
 8009b46:	e003      	b.n	8009b50 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b4c:	e000      	b.n	8009b50 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	ffceff88 	.word	0xffceff88
 8009b70:	00100040 	.word	0x00100040
 8009b74:	00100030 	.word	0x00100030
 8009b78:	00100020 	.word	0x00100020

08009b7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a40      	ldr	r2, [pc, #256]	; (8009ce0 <TIM_Base_SetConfig+0x114>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d013      	beq.n	8009c0c <TIM_Base_SetConfig+0x40>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bea:	d00f      	beq.n	8009c0c <TIM_Base_SetConfig+0x40>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a3d      	ldr	r2, [pc, #244]	; (8009ce4 <TIM_Base_SetConfig+0x118>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d00b      	beq.n	8009c0c <TIM_Base_SetConfig+0x40>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a3c      	ldr	r2, [pc, #240]	; (8009ce8 <TIM_Base_SetConfig+0x11c>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d007      	beq.n	8009c0c <TIM_Base_SetConfig+0x40>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a3b      	ldr	r2, [pc, #236]	; (8009cec <TIM_Base_SetConfig+0x120>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d003      	beq.n	8009c0c <TIM_Base_SetConfig+0x40>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a3a      	ldr	r2, [pc, #232]	; (8009cf0 <TIM_Base_SetConfig+0x124>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d108      	bne.n	8009c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a2f      	ldr	r2, [pc, #188]	; (8009ce0 <TIM_Base_SetConfig+0x114>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d01f      	beq.n	8009c66 <TIM_Base_SetConfig+0x9a>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c2c:	d01b      	beq.n	8009c66 <TIM_Base_SetConfig+0x9a>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a2c      	ldr	r2, [pc, #176]	; (8009ce4 <TIM_Base_SetConfig+0x118>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d017      	beq.n	8009c66 <TIM_Base_SetConfig+0x9a>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a2b      	ldr	r2, [pc, #172]	; (8009ce8 <TIM_Base_SetConfig+0x11c>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d013      	beq.n	8009c66 <TIM_Base_SetConfig+0x9a>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a2a      	ldr	r2, [pc, #168]	; (8009cec <TIM_Base_SetConfig+0x120>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d00f      	beq.n	8009c66 <TIM_Base_SetConfig+0x9a>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a29      	ldr	r2, [pc, #164]	; (8009cf0 <TIM_Base_SetConfig+0x124>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d00b      	beq.n	8009c66 <TIM_Base_SetConfig+0x9a>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a28      	ldr	r2, [pc, #160]	; (8009cf4 <TIM_Base_SetConfig+0x128>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d007      	beq.n	8009c66 <TIM_Base_SetConfig+0x9a>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a27      	ldr	r2, [pc, #156]	; (8009cf8 <TIM_Base_SetConfig+0x12c>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d003      	beq.n	8009c66 <TIM_Base_SetConfig+0x9a>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a26      	ldr	r2, [pc, #152]	; (8009cfc <TIM_Base_SetConfig+0x130>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d108      	bne.n	8009c78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	689a      	ldr	r2, [r3, #8]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a10      	ldr	r2, [pc, #64]	; (8009ce0 <TIM_Base_SetConfig+0x114>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d00f      	beq.n	8009cc4 <TIM_Base_SetConfig+0xf8>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a12      	ldr	r2, [pc, #72]	; (8009cf0 <TIM_Base_SetConfig+0x124>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d00b      	beq.n	8009cc4 <TIM_Base_SetConfig+0xf8>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a11      	ldr	r2, [pc, #68]	; (8009cf4 <TIM_Base_SetConfig+0x128>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d007      	beq.n	8009cc4 <TIM_Base_SetConfig+0xf8>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a10      	ldr	r2, [pc, #64]	; (8009cf8 <TIM_Base_SetConfig+0x12c>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d003      	beq.n	8009cc4 <TIM_Base_SetConfig+0xf8>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a0f      	ldr	r2, [pc, #60]	; (8009cfc <TIM_Base_SetConfig+0x130>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d103      	bne.n	8009ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	691a      	ldr	r2, [r3, #16]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	615a      	str	r2, [r3, #20]
}
 8009cd2:	bf00      	nop
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	40010000 	.word	0x40010000
 8009ce4:	40000400 	.word	0x40000400
 8009ce8:	40000800 	.word	0x40000800
 8009cec:	40000c00 	.word	0x40000c00
 8009cf0:	40010400 	.word	0x40010400
 8009cf4:	40014000 	.word	0x40014000
 8009cf8:	40014400 	.word	0x40014400
 8009cfc:	40014800 	.word	0x40014800

08009d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b087      	sub	sp, #28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6a1b      	ldr	r3, [r3, #32]
 8009d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	f023 0201 	bic.w	r2, r3, #1
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	011b      	lsls	r3, r3, #4
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	f023 030a 	bic.w	r3, r3, #10
 8009d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	621a      	str	r2, [r3, #32]
}
 8009d52:	bf00      	nop
 8009d54:	371c      	adds	r7, #28
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b087      	sub	sp, #28
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	60f8      	str	r0, [r7, #12]
 8009d66:	60b9      	str	r1, [r7, #8]
 8009d68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6a1b      	ldr	r3, [r3, #32]
 8009d6e:	f023 0210 	bic.w	r2, r3, #16
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6a1b      	ldr	r3, [r3, #32]
 8009d80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	031b      	lsls	r3, r3, #12
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	011b      	lsls	r3, r3, #4
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	693a      	ldr	r2, [r7, #16]
 8009db0:	621a      	str	r2, [r3, #32]
}
 8009db2:	bf00      	nop
 8009db4:	371c      	adds	r7, #28
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
	...

08009dc0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	4b09      	ldr	r3, [pc, #36]	; (8009df8 <TIM_ITRx_SetConfig+0x38>)
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	f043 0307 	orr.w	r3, r3, #7
 8009de2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	609a      	str	r2, [r3, #8]
}
 8009dea:	bf00      	nop
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	ffcfff8f 	.word	0xffcfff8f

08009dfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	021a      	lsls	r2, r3, #8
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	431a      	orrs	r2, r3
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	697a      	ldr	r2, [r7, #20]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	609a      	str	r2, [r3, #8]
}
 8009e30:	bf00      	nop
 8009e32:	371c      	adds	r7, #28
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d101      	bne.n	8009e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e50:	2302      	movs	r3, #2
 8009e52:	e06d      	b.n	8009f30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2202      	movs	r2, #2
 8009e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a30      	ldr	r2, [pc, #192]	; (8009f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d004      	beq.n	8009e88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a2f      	ldr	r2, [pc, #188]	; (8009f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d108      	bne.n	8009e9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a20      	ldr	r2, [pc, #128]	; (8009f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d022      	beq.n	8009f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ec6:	d01d      	beq.n	8009f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a1d      	ldr	r2, [pc, #116]	; (8009f44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d018      	beq.n	8009f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a1c      	ldr	r2, [pc, #112]	; (8009f48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d013      	beq.n	8009f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a1a      	ldr	r2, [pc, #104]	; (8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d00e      	beq.n	8009f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a15      	ldr	r2, [pc, #84]	; (8009f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d009      	beq.n	8009f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a16      	ldr	r2, [pc, #88]	; (8009f50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d004      	beq.n	8009f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a15      	ldr	r2, [pc, #84]	; (8009f54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d10c      	bne.n	8009f1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	40010000 	.word	0x40010000
 8009f40:	40010400 	.word	0x40010400
 8009f44:	40000400 	.word	0x40000400
 8009f48:	40000800 	.word	0x40000800
 8009f4c:	40000c00 	.word	0x40000c00
 8009f50:	40001800 	.word	0x40001800
 8009f54:	40014000 	.word	0x40014000

08009f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f74:	bf00      	nop
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f94:	b084      	sub	sp, #16
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	f107 001c 	add.w	r0, r7, #28
 8009fa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d120      	bne.n	8009fee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	68da      	ldr	r2, [r3, #12]
 8009fbc:	4b2a      	ldr	r3, [pc, #168]	; (800a068 <USB_CoreInit+0xd4>)
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d105      	bne.n	8009fe2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 faac 	bl	800a540 <USB_CoreReset>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73fb      	strb	r3, [r7, #15]
 8009fec:	e01a      	b.n	800a024 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 faa0 	bl	800a540 <USB_CoreReset>
 800a000:	4603      	mov	r3, r0
 800a002:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a006:	2b00      	cmp	r3, #0
 800a008:	d106      	bne.n	800a018 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	639a      	str	r2, [r3, #56]	; 0x38
 800a016:	e005      	b.n	800a024 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a026:	2b01      	cmp	r3, #1
 800a028:	d116      	bne.n	800a058 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a02e:	b29a      	uxth	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a038:	4b0c      	ldr	r3, [pc, #48]	; (800a06c <USB_CoreInit+0xd8>)
 800a03a:	4313      	orrs	r3, r2
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	f043 0206 	orr.w	r2, r3, #6
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f043 0220 	orr.w	r2, r3, #32
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a058:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a064:	b004      	add	sp, #16
 800a066:	4770      	bx	lr
 800a068:	ffbdffbf 	.word	0xffbdffbf
 800a06c:	03ee0000 	.word	0x03ee0000

0800a070 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	f023 0201 	bic.w	r2, r3, #1
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	460b      	mov	r3, r1
 800a09c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a0ae:	78fb      	ldrb	r3, [r7, #3]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d115      	bne.n	800a0e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	f7fa f969 	bl	8004398 <HAL_Delay>
      ms++;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fa29 	bl	800a524 <USB_GetMode>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d01e      	beq.n	800a116 <USB_SetCurrentMode+0x84>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b31      	cmp	r3, #49	; 0x31
 800a0dc:	d9f0      	bls.n	800a0c0 <USB_SetCurrentMode+0x2e>
 800a0de:	e01a      	b.n	800a116 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d115      	bne.n	800a112 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a0f2:	2001      	movs	r0, #1
 800a0f4:	f7fa f950 	bl	8004398 <HAL_Delay>
      ms++;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fa10 	bl	800a524 <USB_GetMode>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d005      	beq.n	800a116 <USB_SetCurrentMode+0x84>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2b31      	cmp	r3, #49	; 0x31
 800a10e:	d9f0      	bls.n	800a0f2 <USB_SetCurrentMode+0x60>
 800a110:	e001      	b.n	800a116 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e005      	b.n	800a122 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2b32      	cmp	r3, #50	; 0x32
 800a11a:	d101      	bne.n	800a120 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e000      	b.n	800a122 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
	...

0800a12c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a12c:	b084      	sub	sp, #16
 800a12e:	b580      	push	{r7, lr}
 800a130:	b086      	sub	sp, #24
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a13a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a13e:	2300      	movs	r3, #0
 800a140:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a146:	2300      	movs	r3, #0
 800a148:	613b      	str	r3, [r7, #16]
 800a14a:	e009      	b.n	800a160 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	3340      	adds	r3, #64	; 0x40
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	2200      	movs	r2, #0
 800a158:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	3301      	adds	r3, #1
 800a15e:	613b      	str	r3, [r7, #16]
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	2b0e      	cmp	r3, #14
 800a164:	d9f2      	bls.n	800a14c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d11c      	bne.n	800a1a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a17a:	f043 0302 	orr.w	r3, r3, #2
 800a17e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a184:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	e005      	b.n	800a1b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	680b      	ldr	r3, [r1, #0]
 800a1d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d10c      	bne.n	800a1f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d104      	bne.n	800a1e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a1de:	2100      	movs	r1, #0
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 f965 	bl	800a4b0 <USB_SetDevSpeed>
 800a1e6:	e008      	b.n	800a1fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f960 	bl	800a4b0 <USB_SetDevSpeed>
 800a1f0:	e003      	b.n	800a1fa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a1f2:	2103      	movs	r1, #3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f95b 	bl	800a4b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a1fa:	2110      	movs	r1, #16
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f8f3 	bl	800a3e8 <USB_FlushTxFifo>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 f91f 	bl	800a450 <USB_FlushRxFifo>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a222:	461a      	mov	r2, r3
 800a224:	2300      	movs	r3, #0
 800a226:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a22e:	461a      	mov	r2, r3
 800a230:	2300      	movs	r3, #0
 800a232:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a23a:	461a      	mov	r2, r3
 800a23c:	2300      	movs	r3, #0
 800a23e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a240:	2300      	movs	r3, #0
 800a242:	613b      	str	r3, [r7, #16]
 800a244:	e043      	b.n	800a2ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a25c:	d118      	bne.n	800a290 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10a      	bne.n	800a27a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a270:	461a      	mov	r2, r3
 800a272:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a276:	6013      	str	r3, [r2, #0]
 800a278:	e013      	b.n	800a2a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	015a      	lsls	r2, r3, #5
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	4413      	add	r3, r2
 800a282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a286:	461a      	mov	r2, r3
 800a288:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	e008      	b.n	800a2a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	015a      	lsls	r2, r3, #5
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	4413      	add	r3, r2
 800a298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a29c:	461a      	mov	r2, r3
 800a29e:	2300      	movs	r3, #0
 800a2a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	015a      	lsls	r2, r3, #5
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	015a      	lsls	r2, r3, #5
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a2c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	613b      	str	r3, [r7, #16]
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d3b7      	bcc.n	800a246 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	613b      	str	r3, [r7, #16]
 800a2da:	e043      	b.n	800a364 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2f2:	d118      	bne.n	800a326 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d10a      	bne.n	800a310 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	015a      	lsls	r2, r3, #5
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	4413      	add	r3, r2
 800a302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a306:	461a      	mov	r2, r3
 800a308:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a30c:	6013      	str	r3, [r2, #0]
 800a30e:	e013      	b.n	800a338 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	4413      	add	r3, r2
 800a318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a31c:	461a      	mov	r2, r3
 800a31e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a322:	6013      	str	r3, [r2, #0]
 800a324:	e008      	b.n	800a338 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	015a      	lsls	r2, r3, #5
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	4413      	add	r3, r2
 800a32e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a332:	461a      	mov	r2, r3
 800a334:	2300      	movs	r3, #0
 800a336:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	015a      	lsls	r2, r3, #5
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4413      	add	r3, r2
 800a340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a344:	461a      	mov	r2, r3
 800a346:	2300      	movs	r3, #0
 800a348:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	015a      	lsls	r2, r3, #5
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	4413      	add	r3, r2
 800a352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a356:	461a      	mov	r2, r3
 800a358:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a35c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	3301      	adds	r3, #1
 800a362:	613b      	str	r3, [r7, #16]
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d3b7      	bcc.n	800a2dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a37a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a37e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a38c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a390:	2b00      	cmp	r3, #0
 800a392:	d105      	bne.n	800a3a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	f043 0210 	orr.w	r2, r3, #16
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	699a      	ldr	r2, [r3, #24]
 800a3a4:	4b0e      	ldr	r3, [pc, #56]	; (800a3e0 <USB_DevInit+0x2b4>)
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d005      	beq.n	800a3be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	f043 0208 	orr.w	r2, r3, #8
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a3be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d105      	bne.n	800a3d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	699a      	ldr	r2, [r3, #24]
 800a3c8:	4b06      	ldr	r3, [pc, #24]	; (800a3e4 <USB_DevInit+0x2b8>)
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a3d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3718      	adds	r7, #24
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3dc:	b004      	add	sp, #16
 800a3de:	4770      	bx	lr
 800a3e0:	803c3800 	.word	0x803c3800
 800a3e4:	40000004 	.word	0x40000004

0800a3e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	4a13      	ldr	r2, [pc, #76]	; (800a44c <USB_FlushTxFifo+0x64>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d901      	bls.n	800a408 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a404:	2303      	movs	r3, #3
 800a406:	e01b      	b.n	800a440 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	daf2      	bge.n	800a3f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a410:	2300      	movs	r3, #0
 800a412:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	019b      	lsls	r3, r3, #6
 800a418:	f043 0220 	orr.w	r2, r3, #32
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	3301      	adds	r3, #1
 800a424:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	4a08      	ldr	r2, [pc, #32]	; (800a44c <USB_FlushTxFifo+0x64>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d901      	bls.n	800a432 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e006      	b.n	800a440 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	f003 0320 	and.w	r3, r3, #32
 800a43a:	2b20      	cmp	r3, #32
 800a43c:	d0f0      	beq.n	800a420 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3714      	adds	r7, #20
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	00030d40 	.word	0x00030d40

0800a450 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a458:	2300      	movs	r3, #0
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3301      	adds	r3, #1
 800a460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	4a11      	ldr	r2, [pc, #68]	; (800a4ac <USB_FlushRxFifo+0x5c>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d901      	bls.n	800a46e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a46a:	2303      	movs	r3, #3
 800a46c:	e018      	b.n	800a4a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	2b00      	cmp	r3, #0
 800a474:	daf2      	bge.n	800a45c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a476:	2300      	movs	r3, #0
 800a478:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2210      	movs	r2, #16
 800a47e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3301      	adds	r3, #1
 800a484:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	4a08      	ldr	r2, [pc, #32]	; (800a4ac <USB_FlushRxFifo+0x5c>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d901      	bls.n	800a492 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	e006      	b.n	800a4a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	f003 0310 	and.w	r3, r3, #16
 800a49a:	2b10      	cmp	r3, #16
 800a49c:	d0f0      	beq.n	800a480 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	00030d40 	.word	0x00030d40

0800a4b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	78fb      	ldrb	r3, [r7, #3]
 800a4ca:	68f9      	ldr	r1, [r7, #12]
 800a4cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3714      	adds	r7, #20
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b085      	sub	sp, #20
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a4fc:	f023 0303 	bic.w	r3, r3, #3
 800a500:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a510:	f043 0302 	orr.w	r3, r3, #2
 800a514:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	f003 0301 	and.w	r3, r3, #1
}
 800a534:	4618      	mov	r0, r3
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a548:	2300      	movs	r3, #0
 800a54a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	3301      	adds	r3, #1
 800a550:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	4a13      	ldr	r2, [pc, #76]	; (800a5a4 <USB_CoreReset+0x64>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d901      	bls.n	800a55e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a55a:	2303      	movs	r3, #3
 800a55c:	e01b      	b.n	800a596 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	2b00      	cmp	r3, #0
 800a564:	daf2      	bge.n	800a54c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a566:	2300      	movs	r3, #0
 800a568:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	f043 0201 	orr.w	r2, r3, #1
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	3301      	adds	r3, #1
 800a57a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	4a09      	ldr	r2, [pc, #36]	; (800a5a4 <USB_CoreReset+0x64>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d901      	bls.n	800a588 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a584:	2303      	movs	r3, #3
 800a586:	e006      	b.n	800a596 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	2b01      	cmp	r3, #1
 800a592:	d0f0      	beq.n	800a576 <USB_CoreReset+0x36>

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	00030d40 	.word	0x00030d40

0800a5a8 <cos>:
 800a5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5aa:	eeb0 7b40 	vmov.f64	d7, d0
 800a5ae:	ee17 3a90 	vmov	r3, s15
 800a5b2:	4a21      	ldr	r2, [pc, #132]	; (800a638 <cos+0x90>)
 800a5b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	dc06      	bgt.n	800a5ca <cos+0x22>
 800a5bc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800a630 <cos+0x88>
 800a5c0:	b005      	add	sp, #20
 800a5c2:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5c6:	f000 b9cb 	b.w	800a960 <__kernel_cos>
 800a5ca:	4a1c      	ldr	r2, [pc, #112]	; (800a63c <cos+0x94>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	dd04      	ble.n	800a5da <cos+0x32>
 800a5d0:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a5d4:	b005      	add	sp, #20
 800a5d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5da:	4668      	mov	r0, sp
 800a5dc:	f000 f87c 	bl	800a6d8 <__ieee754_rem_pio2>
 800a5e0:	f000 0003 	and.w	r0, r0, #3
 800a5e4:	2801      	cmp	r0, #1
 800a5e6:	d009      	beq.n	800a5fc <cos+0x54>
 800a5e8:	2802      	cmp	r0, #2
 800a5ea:	d010      	beq.n	800a60e <cos+0x66>
 800a5ec:	b9b0      	cbnz	r0, 800a61c <cos+0x74>
 800a5ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5f2:	ed9d 0b00 	vldr	d0, [sp]
 800a5f6:	f000 f9b3 	bl	800a960 <__kernel_cos>
 800a5fa:	e7eb      	b.n	800a5d4 <cos+0x2c>
 800a5fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a600:	ed9d 0b00 	vldr	d0, [sp]
 800a604:	f000 fcb0 	bl	800af68 <__kernel_sin>
 800a608:	eeb1 0b40 	vneg.f64	d0, d0
 800a60c:	e7e2      	b.n	800a5d4 <cos+0x2c>
 800a60e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a612:	ed9d 0b00 	vldr	d0, [sp]
 800a616:	f000 f9a3 	bl	800a960 <__kernel_cos>
 800a61a:	e7f5      	b.n	800a608 <cos+0x60>
 800a61c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a620:	ed9d 0b00 	vldr	d0, [sp]
 800a624:	2001      	movs	r0, #1
 800a626:	f000 fc9f 	bl	800af68 <__kernel_sin>
 800a62a:	e7d3      	b.n	800a5d4 <cos+0x2c>
 800a62c:	f3af 8000 	nop.w
	...
 800a638:	3fe921fb 	.word	0x3fe921fb
 800a63c:	7fefffff 	.word	0x7fefffff

0800a640 <sin>:
 800a640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a642:	eeb0 7b40 	vmov.f64	d7, d0
 800a646:	ee17 3a90 	vmov	r3, s15
 800a64a:	4a21      	ldr	r2, [pc, #132]	; (800a6d0 <sin+0x90>)
 800a64c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a650:	4293      	cmp	r3, r2
 800a652:	dc07      	bgt.n	800a664 <sin+0x24>
 800a654:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800a6c8 <sin+0x88>
 800a658:	2000      	movs	r0, #0
 800a65a:	b005      	add	sp, #20
 800a65c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a660:	f000 bc82 	b.w	800af68 <__kernel_sin>
 800a664:	4a1b      	ldr	r2, [pc, #108]	; (800a6d4 <sin+0x94>)
 800a666:	4293      	cmp	r3, r2
 800a668:	dd04      	ble.n	800a674 <sin+0x34>
 800a66a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a66e:	b005      	add	sp, #20
 800a670:	f85d fb04 	ldr.w	pc, [sp], #4
 800a674:	4668      	mov	r0, sp
 800a676:	f000 f82f 	bl	800a6d8 <__ieee754_rem_pio2>
 800a67a:	f000 0003 	and.w	r0, r0, #3
 800a67e:	2801      	cmp	r0, #1
 800a680:	d00a      	beq.n	800a698 <sin+0x58>
 800a682:	2802      	cmp	r0, #2
 800a684:	d00f      	beq.n	800a6a6 <sin+0x66>
 800a686:	b9c0      	cbnz	r0, 800a6ba <sin+0x7a>
 800a688:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a68c:	ed9d 0b00 	vldr	d0, [sp]
 800a690:	2001      	movs	r0, #1
 800a692:	f000 fc69 	bl	800af68 <__kernel_sin>
 800a696:	e7ea      	b.n	800a66e <sin+0x2e>
 800a698:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a69c:	ed9d 0b00 	vldr	d0, [sp]
 800a6a0:	f000 f95e 	bl	800a960 <__kernel_cos>
 800a6a4:	e7e3      	b.n	800a66e <sin+0x2e>
 800a6a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6aa:	ed9d 0b00 	vldr	d0, [sp]
 800a6ae:	2001      	movs	r0, #1
 800a6b0:	f000 fc5a 	bl	800af68 <__kernel_sin>
 800a6b4:	eeb1 0b40 	vneg.f64	d0, d0
 800a6b8:	e7d9      	b.n	800a66e <sin+0x2e>
 800a6ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6be:	ed9d 0b00 	vldr	d0, [sp]
 800a6c2:	f000 f94d 	bl	800a960 <__kernel_cos>
 800a6c6:	e7f5      	b.n	800a6b4 <sin+0x74>
	...
 800a6d0:	3fe921fb 	.word	0x3fe921fb
 800a6d4:	7fefffff 	.word	0x7fefffff

0800a6d8 <__ieee754_rem_pio2>:
 800a6d8:	b570      	push	{r4, r5, r6, lr}
 800a6da:	eeb0 7b40 	vmov.f64	d7, d0
 800a6de:	ee17 5a90 	vmov	r5, s15
 800a6e2:	4b99      	ldr	r3, [pc, #612]	; (800a948 <__ieee754_rem_pio2+0x270>)
 800a6e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a6e8:	429e      	cmp	r6, r3
 800a6ea:	b088      	sub	sp, #32
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	dc07      	bgt.n	800a700 <__ieee754_rem_pio2+0x28>
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	ed84 0b00 	vstr	d0, [r4]
 800a6f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	e01b      	b.n	800a738 <__ieee754_rem_pio2+0x60>
 800a700:	4b92      	ldr	r3, [pc, #584]	; (800a94c <__ieee754_rem_pio2+0x274>)
 800a702:	429e      	cmp	r6, r3
 800a704:	dc3b      	bgt.n	800a77e <__ieee754_rem_pio2+0xa6>
 800a706:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800a70a:	2d00      	cmp	r5, #0
 800a70c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800a908 <__ieee754_rem_pio2+0x230>
 800a710:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800a714:	dd19      	ble.n	800a74a <__ieee754_rem_pio2+0x72>
 800a716:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a71a:	429e      	cmp	r6, r3
 800a71c:	d00e      	beq.n	800a73c <__ieee754_rem_pio2+0x64>
 800a71e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800a910 <__ieee754_rem_pio2+0x238>
 800a722:	ee37 5b46 	vsub.f64	d5, d7, d6
 800a726:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a72a:	ed84 5b00 	vstr	d5, [r4]
 800a72e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a732:	ed84 7b02 	vstr	d7, [r4, #8]
 800a736:	2001      	movs	r0, #1
 800a738:	b008      	add	sp, #32
 800a73a:	bd70      	pop	{r4, r5, r6, pc}
 800a73c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800a918 <__ieee754_rem_pio2+0x240>
 800a740:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a744:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800a920 <__ieee754_rem_pio2+0x248>
 800a748:	e7eb      	b.n	800a722 <__ieee754_rem_pio2+0x4a>
 800a74a:	429e      	cmp	r6, r3
 800a74c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800a750:	d00e      	beq.n	800a770 <__ieee754_rem_pio2+0x98>
 800a752:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800a910 <__ieee754_rem_pio2+0x238>
 800a756:	ee37 5b06 	vadd.f64	d5, d7, d6
 800a75a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a75e:	ed84 5b00 	vstr	d5, [r4]
 800a762:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a76a:	ed84 7b02 	vstr	d7, [r4, #8]
 800a76e:	e7e3      	b.n	800a738 <__ieee754_rem_pio2+0x60>
 800a770:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a918 <__ieee754_rem_pio2+0x240>
 800a774:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a778:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a920 <__ieee754_rem_pio2+0x248>
 800a77c:	e7eb      	b.n	800a756 <__ieee754_rem_pio2+0x7e>
 800a77e:	4b74      	ldr	r3, [pc, #464]	; (800a950 <__ieee754_rem_pio2+0x278>)
 800a780:	429e      	cmp	r6, r3
 800a782:	dc70      	bgt.n	800a866 <__ieee754_rem_pio2+0x18e>
 800a784:	f000 fc48 	bl	800b018 <fabs>
 800a788:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a78c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800a928 <__ieee754_rem_pio2+0x250>
 800a790:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a794:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a798:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a79c:	ee17 0a90 	vmov	r0, s15
 800a7a0:	eeb1 4b45 	vneg.f64	d4, d5
 800a7a4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800a908 <__ieee754_rem_pio2+0x230>
 800a7a8:	eea5 0b47 	vfms.f64	d0, d5, d7
 800a7ac:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800a910 <__ieee754_rem_pio2+0x238>
 800a7b0:	281f      	cmp	r0, #31
 800a7b2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a7b6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a7ba:	dc08      	bgt.n	800a7ce <__ieee754_rem_pio2+0xf6>
 800a7bc:	4b65      	ldr	r3, [pc, #404]	; (800a954 <__ieee754_rem_pio2+0x27c>)
 800a7be:	1e42      	subs	r2, r0, #1
 800a7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c4:	42b3      	cmp	r3, r6
 800a7c6:	d002      	beq.n	800a7ce <__ieee754_rem_pio2+0xf6>
 800a7c8:	ed84 6b00 	vstr	d6, [r4]
 800a7cc:	e026      	b.n	800a81c <__ieee754_rem_pio2+0x144>
 800a7ce:	ee16 3a90 	vmov	r3, s13
 800a7d2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a7d6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800a7da:	2b10      	cmp	r3, #16
 800a7dc:	ea4f 5226 	mov.w	r2, r6, asr #20
 800a7e0:	ddf2      	ble.n	800a7c8 <__ieee754_rem_pio2+0xf0>
 800a7e2:	eeb0 6b40 	vmov.f64	d6, d0
 800a7e6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800a918 <__ieee754_rem_pio2+0x240>
 800a7ea:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800a920 <__ieee754_rem_pio2+0x248>
 800a7ee:	eea4 6b07 	vfma.f64	d6, d4, d7
 800a7f2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a7f6:	eea4 0b07 	vfma.f64	d0, d4, d7
 800a7fa:	eeb0 7b40 	vmov.f64	d7, d0
 800a7fe:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800a802:	ee36 3b47 	vsub.f64	d3, d6, d7
 800a806:	ee13 3a90 	vmov	r3, s7
 800a80a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	2b31      	cmp	r3, #49	; 0x31
 800a812:	dc17      	bgt.n	800a844 <__ieee754_rem_pio2+0x16c>
 800a814:	eeb0 0b46 	vmov.f64	d0, d6
 800a818:	ed84 3b00 	vstr	d3, [r4]
 800a81c:	ed94 6b00 	vldr	d6, [r4]
 800a820:	2d00      	cmp	r5, #0
 800a822:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a826:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a82a:	ed84 0b02 	vstr	d0, [r4, #8]
 800a82e:	da83      	bge.n	800a738 <__ieee754_rem_pio2+0x60>
 800a830:	eeb1 6b46 	vneg.f64	d6, d6
 800a834:	eeb1 0b40 	vneg.f64	d0, d0
 800a838:	ed84 6b00 	vstr	d6, [r4]
 800a83c:	ed84 0b02 	vstr	d0, [r4, #8]
 800a840:	4240      	negs	r0, r0
 800a842:	e779      	b.n	800a738 <__ieee754_rem_pio2+0x60>
 800a844:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800a930 <__ieee754_rem_pio2+0x258>
 800a848:	eeb0 0b46 	vmov.f64	d0, d6
 800a84c:	eea4 0b03 	vfma.f64	d0, d4, d3
 800a850:	ee36 7b40 	vsub.f64	d7, d6, d0
 800a854:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800a938 <__ieee754_rem_pio2+0x260>
 800a858:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a85c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800a860:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a864:	e7b0      	b.n	800a7c8 <__ieee754_rem_pio2+0xf0>
 800a866:	4b3c      	ldr	r3, [pc, #240]	; (800a958 <__ieee754_rem_pio2+0x280>)
 800a868:	429e      	cmp	r6, r3
 800a86a:	dd06      	ble.n	800a87a <__ieee754_rem_pio2+0x1a2>
 800a86c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800a870:	ed80 7b02 	vstr	d7, [r0, #8]
 800a874:	ed80 7b00 	vstr	d7, [r0]
 800a878:	e740      	b.n	800a6fc <__ieee754_rem_pio2+0x24>
 800a87a:	1532      	asrs	r2, r6, #20
 800a87c:	ee10 0a10 	vmov	r0, s0
 800a880:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800a884:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800a888:	ec41 0b17 	vmov	d7, r0, r1
 800a88c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a890:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800a940 <__ieee754_rem_pio2+0x268>
 800a894:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a898:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a89c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a8a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a8a4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a8a8:	a902      	add	r1, sp, #8
 800a8aa:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a8ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a8b2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800a8b6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a8ba:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a8be:	2603      	movs	r6, #3
 800a8c0:	4608      	mov	r0, r1
 800a8c2:	ed91 7b04 	vldr	d7, [r1, #16]
 800a8c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ce:	4633      	mov	r3, r6
 800a8d0:	f1a1 0108 	sub.w	r1, r1, #8
 800a8d4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800a8d8:	d0f3      	beq.n	800a8c2 <__ieee754_rem_pio2+0x1ea>
 800a8da:	4920      	ldr	r1, [pc, #128]	; (800a95c <__ieee754_rem_pio2+0x284>)
 800a8dc:	9101      	str	r1, [sp, #4]
 800a8de:	2102      	movs	r1, #2
 800a8e0:	9100      	str	r1, [sp, #0]
 800a8e2:	4621      	mov	r1, r4
 800a8e4:	f000 f8a8 	bl	800aa38 <__kernel_rem_pio2>
 800a8e8:	2d00      	cmp	r5, #0
 800a8ea:	f6bf af25 	bge.w	800a738 <__ieee754_rem_pio2+0x60>
 800a8ee:	ed94 7b00 	vldr	d7, [r4]
 800a8f2:	eeb1 7b47 	vneg.f64	d7, d7
 800a8f6:	ed84 7b00 	vstr	d7, [r4]
 800a8fa:	ed94 7b02 	vldr	d7, [r4, #8]
 800a8fe:	eeb1 7b47 	vneg.f64	d7, d7
 800a902:	ed84 7b02 	vstr	d7, [r4, #8]
 800a906:	e79b      	b.n	800a840 <__ieee754_rem_pio2+0x168>
 800a908:	54400000 	.word	0x54400000
 800a90c:	3ff921fb 	.word	0x3ff921fb
 800a910:	1a626331 	.word	0x1a626331
 800a914:	3dd0b461 	.word	0x3dd0b461
 800a918:	1a600000 	.word	0x1a600000
 800a91c:	3dd0b461 	.word	0x3dd0b461
 800a920:	2e037073 	.word	0x2e037073
 800a924:	3ba3198a 	.word	0x3ba3198a
 800a928:	6dc9c883 	.word	0x6dc9c883
 800a92c:	3fe45f30 	.word	0x3fe45f30
 800a930:	2e000000 	.word	0x2e000000
 800a934:	3ba3198a 	.word	0x3ba3198a
 800a938:	252049c1 	.word	0x252049c1
 800a93c:	397b839a 	.word	0x397b839a
 800a940:	00000000 	.word	0x00000000
 800a944:	41700000 	.word	0x41700000
 800a948:	3fe921fb 	.word	0x3fe921fb
 800a94c:	4002d97b 	.word	0x4002d97b
 800a950:	413921fb 	.word	0x413921fb
 800a954:	0800cfbc 	.word	0x0800cfbc
 800a958:	7fefffff 	.word	0x7fefffff
 800a95c:	0800d03c 	.word	0x0800d03c

0800a960 <__kernel_cos>:
 800a960:	ee10 1a90 	vmov	r1, s1
 800a964:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800a968:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a96c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800a970:	da05      	bge.n	800a97e <__kernel_cos+0x1e>
 800a972:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800a976:	ee17 3a90 	vmov	r3, s15
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d03d      	beq.n	800a9fa <__kernel_cos+0x9a>
 800a97e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800a982:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800aa00 <__kernel_cos+0xa0>
 800a986:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800aa08 <__kernel_cos+0xa8>
 800a98a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800a98e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800aa10 <__kernel_cos+0xb0>
 800a992:	eea6 7b03 	vfma.f64	d7, d6, d3
 800a996:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800aa18 <__kernel_cos+0xb8>
 800a99a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800a99e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800aa20 <__kernel_cos+0xc0>
 800a9a2:	4b23      	ldr	r3, [pc, #140]	; (800aa30 <__kernel_cos+0xd0>)
 800a9a4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800a9a8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800aa28 <__kernel_cos+0xc8>
 800a9ac:	4299      	cmp	r1, r3
 800a9ae:	eea7 6b03 	vfma.f64	d6, d7, d3
 800a9b2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a9b6:	ee26 5b03 	vmul.f64	d5, d6, d3
 800a9ba:	ee23 7b07 	vmul.f64	d7, d3, d7
 800a9be:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800a9c2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a9c6:	dc04      	bgt.n	800a9d2 <__kernel_cos+0x72>
 800a9c8:	ee37 6b46 	vsub.f64	d6, d7, d6
 800a9cc:	ee34 0b46 	vsub.f64	d0, d4, d6
 800a9d0:	4770      	bx	lr
 800a9d2:	4b18      	ldr	r3, [pc, #96]	; (800aa34 <__kernel_cos+0xd4>)
 800a9d4:	4299      	cmp	r1, r3
 800a9d6:	dc0d      	bgt.n	800a9f4 <__kernel_cos+0x94>
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800a9de:	ec43 2b15 	vmov	d5, r2, r3
 800a9e2:	ee34 0b45 	vsub.f64	d0, d4, d5
 800a9e6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a9ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a9ee:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a9f2:	4770      	bx	lr
 800a9f4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800a9f8:	e7f3      	b.n	800a9e2 <__kernel_cos+0x82>
 800a9fa:	eeb0 0b44 	vmov.f64	d0, d4
 800a9fe:	4770      	bx	lr
 800aa00:	be8838d4 	.word	0xbe8838d4
 800aa04:	bda8fae9 	.word	0xbda8fae9
 800aa08:	bdb4b1c4 	.word	0xbdb4b1c4
 800aa0c:	3e21ee9e 	.word	0x3e21ee9e
 800aa10:	809c52ad 	.word	0x809c52ad
 800aa14:	be927e4f 	.word	0xbe927e4f
 800aa18:	19cb1590 	.word	0x19cb1590
 800aa1c:	3efa01a0 	.word	0x3efa01a0
 800aa20:	16c15177 	.word	0x16c15177
 800aa24:	bf56c16c 	.word	0xbf56c16c
 800aa28:	5555554c 	.word	0x5555554c
 800aa2c:	3fa55555 	.word	0x3fa55555
 800aa30:	3fd33332 	.word	0x3fd33332
 800aa34:	3fe90000 	.word	0x3fe90000

0800aa38 <__kernel_rem_pio2>:
 800aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	ed2d 8b06 	vpush	{d8-d10}
 800aa40:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800aa44:	460f      	mov	r7, r1
 800aa46:	9002      	str	r0, [sp, #8]
 800aa48:	49c5      	ldr	r1, [pc, #788]	; (800ad60 <__kernel_rem_pio2+0x328>)
 800aa4a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800aa4c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800aa50:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	f112 0f14 	cmn.w	r2, #20
 800aa5a:	bfa8      	it	ge
 800aa5c:	2018      	movge	r0, #24
 800aa5e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800aa62:	bfb8      	it	lt
 800aa64:	2000      	movlt	r0, #0
 800aa66:	f06f 0417 	mvn.w	r4, #23
 800aa6a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800ad48 <__kernel_rem_pio2+0x310>
 800aa6e:	bfa4      	itt	ge
 800aa70:	f1a2 0a03 	subge.w	sl, r2, #3
 800aa74:	fb9a f0f0 	sdivge	r0, sl, r0
 800aa78:	fb00 4404 	mla	r4, r0, r4, r4
 800aa7c:	1a46      	subs	r6, r0, r1
 800aa7e:	4414      	add	r4, r2
 800aa80:	eb09 0c01 	add.w	ip, r9, r1
 800aa84:	ad1a      	add	r5, sp, #104	; 0x68
 800aa86:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	4562      	cmp	r2, ip
 800aa8e:	dd10      	ble.n	800aab2 <__kernel_rem_pio2+0x7a>
 800aa90:	9a01      	ldr	r2, [sp, #4]
 800aa92:	ab1a      	add	r3, sp, #104	; 0x68
 800aa94:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800aa98:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800aa9c:	f04f 0c00 	mov.w	ip, #0
 800aaa0:	45cc      	cmp	ip, r9
 800aaa2:	dc26      	bgt.n	800aaf2 <__kernel_rem_pio2+0xba>
 800aaa4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800ad48 <__kernel_rem_pio2+0x310>
 800aaa8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800aaac:	4616      	mov	r6, r2
 800aaae:	2500      	movs	r5, #0
 800aab0:	e015      	b.n	800aade <__kernel_rem_pio2+0xa6>
 800aab2:	42d6      	cmn	r6, r2
 800aab4:	d409      	bmi.n	800aaca <__kernel_rem_pio2+0x92>
 800aab6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800aaba:	ee07 3a90 	vmov	s15, r3
 800aabe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aac2:	eca5 7b02 	vstmia	r5!, {d7}
 800aac6:	3201      	adds	r2, #1
 800aac8:	e7e0      	b.n	800aa8c <__kernel_rem_pio2+0x54>
 800aaca:	eeb0 7b46 	vmov.f64	d7, d6
 800aace:	e7f8      	b.n	800aac2 <__kernel_rem_pio2+0x8a>
 800aad0:	ecb8 5b02 	vldmia	r8!, {d5}
 800aad4:	ed96 6b00 	vldr	d6, [r6]
 800aad8:	3501      	adds	r5, #1
 800aada:	eea5 7b06 	vfma.f64	d7, d5, d6
 800aade:	428d      	cmp	r5, r1
 800aae0:	f1a6 0608 	sub.w	r6, r6, #8
 800aae4:	ddf4      	ble.n	800aad0 <__kernel_rem_pio2+0x98>
 800aae6:	ecaa 7b02 	vstmia	sl!, {d7}
 800aaea:	f10c 0c01 	add.w	ip, ip, #1
 800aaee:	3208      	adds	r2, #8
 800aaf0:	e7d6      	b.n	800aaa0 <__kernel_rem_pio2+0x68>
 800aaf2:	ab06      	add	r3, sp, #24
 800aaf4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800ad50 <__kernel_rem_pio2+0x318>
 800aaf8:	ed9f ab97 	vldr	d10, [pc, #604]	; 800ad58 <__kernel_rem_pio2+0x320>
 800aafc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800ab00:	9303      	str	r3, [sp, #12]
 800ab02:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800ab06:	464d      	mov	r5, r9
 800ab08:	00eb      	lsls	r3, r5, #3
 800ab0a:	9304      	str	r3, [sp, #16]
 800ab0c:	ab92      	add	r3, sp, #584	; 0x248
 800ab0e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800ab12:	f10d 0b18 	add.w	fp, sp, #24
 800ab16:	ab6a      	add	r3, sp, #424	; 0x1a8
 800ab18:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800ab1c:	465e      	mov	r6, fp
 800ab1e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800ab22:	4628      	mov	r0, r5
 800ab24:	2800      	cmp	r0, #0
 800ab26:	f1a2 0208 	sub.w	r2, r2, #8
 800ab2a:	dc4c      	bgt.n	800abc6 <__kernel_rem_pio2+0x18e>
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	9105      	str	r1, [sp, #20]
 800ab30:	f000 faf2 	bl	800b118 <scalbn>
 800ab34:	eeb0 8b40 	vmov.f64	d8, d0
 800ab38:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800ab3c:	ee28 0b00 	vmul.f64	d0, d8, d0
 800ab40:	f000 fa76 	bl	800b030 <floor>
 800ab44:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800ab48:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ab4c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ab50:	2c00      	cmp	r4, #0
 800ab52:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800ab56:	ee17 8a90 	vmov	r8, s15
 800ab5a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ab5e:	9905      	ldr	r1, [sp, #20]
 800ab60:	dd43      	ble.n	800abea <__kernel_rem_pio2+0x1b2>
 800ab62:	1e68      	subs	r0, r5, #1
 800ab64:	ab06      	add	r3, sp, #24
 800ab66:	f1c4 0c18 	rsb	ip, r4, #24
 800ab6a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800ab6e:	fa46 f20c 	asr.w	r2, r6, ip
 800ab72:	4490      	add	r8, r2
 800ab74:	fa02 f20c 	lsl.w	r2, r2, ip
 800ab78:	1ab6      	subs	r6, r6, r2
 800ab7a:	f1c4 0217 	rsb	r2, r4, #23
 800ab7e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800ab82:	4116      	asrs	r6, r2
 800ab84:	2e00      	cmp	r6, #0
 800ab86:	dd3f      	ble.n	800ac08 <__kernel_rem_pio2+0x1d0>
 800ab88:	f04f 0c00 	mov.w	ip, #0
 800ab8c:	f108 0801 	add.w	r8, r8, #1
 800ab90:	4660      	mov	r0, ip
 800ab92:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800ab96:	4565      	cmp	r5, ip
 800ab98:	dc6e      	bgt.n	800ac78 <__kernel_rem_pio2+0x240>
 800ab9a:	2c00      	cmp	r4, #0
 800ab9c:	dd04      	ble.n	800aba8 <__kernel_rem_pio2+0x170>
 800ab9e:	2c01      	cmp	r4, #1
 800aba0:	d07f      	beq.n	800aca2 <__kernel_rem_pio2+0x26a>
 800aba2:	2c02      	cmp	r4, #2
 800aba4:	f000 8087 	beq.w	800acb6 <__kernel_rem_pio2+0x27e>
 800aba8:	2e02      	cmp	r6, #2
 800abaa:	d12d      	bne.n	800ac08 <__kernel_rem_pio2+0x1d0>
 800abac:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800abb0:	ee30 8b48 	vsub.f64	d8, d0, d8
 800abb4:	b340      	cbz	r0, 800ac08 <__kernel_rem_pio2+0x1d0>
 800abb6:	4620      	mov	r0, r4
 800abb8:	9105      	str	r1, [sp, #20]
 800abba:	f000 faad 	bl	800b118 <scalbn>
 800abbe:	9905      	ldr	r1, [sp, #20]
 800abc0:	ee38 8b40 	vsub.f64	d8, d8, d0
 800abc4:	e020      	b.n	800ac08 <__kernel_rem_pio2+0x1d0>
 800abc6:	ee20 7b09 	vmul.f64	d7, d0, d9
 800abca:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800abce:	3801      	subs	r0, #1
 800abd0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800abd4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800abd8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800abdc:	eca6 0a01 	vstmia	r6!, {s0}
 800abe0:	ed92 0b00 	vldr	d0, [r2]
 800abe4:	ee37 0b00 	vadd.f64	d0, d7, d0
 800abe8:	e79c      	b.n	800ab24 <__kernel_rem_pio2+0xec>
 800abea:	d105      	bne.n	800abf8 <__kernel_rem_pio2+0x1c0>
 800abec:	1e6a      	subs	r2, r5, #1
 800abee:	ab06      	add	r3, sp, #24
 800abf0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800abf4:	15f6      	asrs	r6, r6, #23
 800abf6:	e7c5      	b.n	800ab84 <__kernel_rem_pio2+0x14c>
 800abf8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800abfc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ac00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac04:	da36      	bge.n	800ac74 <__kernel_rem_pio2+0x23c>
 800ac06:	2600      	movs	r6, #0
 800ac08:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ac0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac10:	f040 80aa 	bne.w	800ad68 <__kernel_rem_pio2+0x330>
 800ac14:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800ac18:	4658      	mov	r0, fp
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	4548      	cmp	r0, r9
 800ac1e:	da52      	bge.n	800acc6 <__kernel_rem_pio2+0x28e>
 800ac20:	2a00      	cmp	r2, #0
 800ac22:	f000 8081 	beq.w	800ad28 <__kernel_rem_pio2+0x2f0>
 800ac26:	ab06      	add	r3, sp, #24
 800ac28:	3c18      	subs	r4, #24
 800ac2a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	f000 8087 	beq.w	800ad42 <__kernel_rem_pio2+0x30a>
 800ac34:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f000 fa6d 	bl	800b118 <scalbn>
 800ac3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ac42:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800ad50 <__kernel_rem_pio2+0x318>
 800ac46:	a96a      	add	r1, sp, #424	; 0x1a8
 800ac48:	f103 0208 	add.w	r2, r3, #8
 800ac4c:	1888      	adds	r0, r1, r2
 800ac4e:	4659      	mov	r1, fp
 800ac50:	2900      	cmp	r1, #0
 800ac52:	f280 80b7 	bge.w	800adc4 <__kernel_rem_pio2+0x38c>
 800ac56:	4659      	mov	r1, fp
 800ac58:	2900      	cmp	r1, #0
 800ac5a:	f2c0 80d5 	blt.w	800ae08 <__kernel_rem_pio2+0x3d0>
 800ac5e:	a86a      	add	r0, sp, #424	; 0x1a8
 800ac60:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800ac64:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800ad48 <__kernel_rem_pio2+0x310>
 800ac68:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800ad64 <__kernel_rem_pio2+0x32c>
 800ac6c:	2400      	movs	r4, #0
 800ac6e:	ebab 0001 	sub.w	r0, fp, r1
 800ac72:	e0be      	b.n	800adf2 <__kernel_rem_pio2+0x3ba>
 800ac74:	2602      	movs	r6, #2
 800ac76:	e787      	b.n	800ab88 <__kernel_rem_pio2+0x150>
 800ac78:	f8db 2000 	ldr.w	r2, [fp]
 800ac7c:	b958      	cbnz	r0, 800ac96 <__kernel_rem_pio2+0x25e>
 800ac7e:	b122      	cbz	r2, 800ac8a <__kernel_rem_pio2+0x252>
 800ac80:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800ac84:	f8cb 2000 	str.w	r2, [fp]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f10c 0c01 	add.w	ip, ip, #1
 800ac8e:	f10b 0b04 	add.w	fp, fp, #4
 800ac92:	4610      	mov	r0, r2
 800ac94:	e77f      	b.n	800ab96 <__kernel_rem_pio2+0x15e>
 800ac96:	ebae 0202 	sub.w	r2, lr, r2
 800ac9a:	f8cb 2000 	str.w	r2, [fp]
 800ac9e:	4602      	mov	r2, r0
 800aca0:	e7f3      	b.n	800ac8a <__kernel_rem_pio2+0x252>
 800aca2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800aca6:	ab06      	add	r3, sp, #24
 800aca8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800acac:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800acb0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800acb4:	e778      	b.n	800aba8 <__kernel_rem_pio2+0x170>
 800acb6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800acba:	ab06      	add	r3, sp, #24
 800acbc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800acc0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800acc4:	e7f4      	b.n	800acb0 <__kernel_rem_pio2+0x278>
 800acc6:	ab06      	add	r3, sp, #24
 800acc8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800accc:	3801      	subs	r0, #1
 800acce:	431a      	orrs	r2, r3
 800acd0:	e7a4      	b.n	800ac1c <__kernel_rem_pio2+0x1e4>
 800acd2:	f10c 0c01 	add.w	ip, ip, #1
 800acd6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800acda:	2800      	cmp	r0, #0
 800acdc:	d0f9      	beq.n	800acd2 <__kernel_rem_pio2+0x29a>
 800acde:	9b04      	ldr	r3, [sp, #16]
 800ace0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ace4:	eb0d 0203 	add.w	r2, sp, r3
 800ace8:	9b01      	ldr	r3, [sp, #4]
 800acea:	18e8      	adds	r0, r5, r3
 800acec:	ab1a      	add	r3, sp, #104	; 0x68
 800acee:	1c6e      	adds	r6, r5, #1
 800acf0:	3a98      	subs	r2, #152	; 0x98
 800acf2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800acf6:	4465      	add	r5, ip
 800acf8:	42b5      	cmp	r5, r6
 800acfa:	f6ff af05 	blt.w	800ab08 <__kernel_rem_pio2+0xd0>
 800acfe:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800ad02:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ad0e:	f04f 0c00 	mov.w	ip, #0
 800ad12:	eca0 7b02 	vstmia	r0!, {d7}
 800ad16:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800ad48 <__kernel_rem_pio2+0x310>
 800ad1a:	4680      	mov	r8, r0
 800ad1c:	458c      	cmp	ip, r1
 800ad1e:	dd07      	ble.n	800ad30 <__kernel_rem_pio2+0x2f8>
 800ad20:	eca2 7b02 	vstmia	r2!, {d7}
 800ad24:	3601      	adds	r6, #1
 800ad26:	e7e7      	b.n	800acf8 <__kernel_rem_pio2+0x2c0>
 800ad28:	9a03      	ldr	r2, [sp, #12]
 800ad2a:	f04f 0c01 	mov.w	ip, #1
 800ad2e:	e7d2      	b.n	800acd6 <__kernel_rem_pio2+0x29e>
 800ad30:	ecbe 5b02 	vldmia	lr!, {d5}
 800ad34:	ed38 6b02 	vldmdb	r8!, {d6}
 800ad38:	f10c 0c01 	add.w	ip, ip, #1
 800ad3c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ad40:	e7ec      	b.n	800ad1c <__kernel_rem_pio2+0x2e4>
 800ad42:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ad46:	e76e      	b.n	800ac26 <__kernel_rem_pio2+0x1ee>
	...
 800ad54:	3e700000 	.word	0x3e700000
 800ad58:	00000000 	.word	0x00000000
 800ad5c:	41700000 	.word	0x41700000
 800ad60:	0800d188 	.word	0x0800d188
 800ad64:	0800d148 	.word	0x0800d148
 800ad68:	4260      	negs	r0, r4
 800ad6a:	eeb0 0b48 	vmov.f64	d0, d8
 800ad6e:	f000 f9d3 	bl	800b118 <scalbn>
 800ad72:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800af50 <__kernel_rem_pio2+0x518>
 800ad76:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ad7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7e:	db18      	blt.n	800adb2 <__kernel_rem_pio2+0x37a>
 800ad80:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800af58 <__kernel_rem_pio2+0x520>
 800ad84:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ad88:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ad8c:	aa06      	add	r2, sp, #24
 800ad8e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800ad92:	eea5 0b46 	vfms.f64	d0, d5, d6
 800ad96:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ad9a:	f105 0b01 	add.w	fp, r5, #1
 800ad9e:	ee10 3a10 	vmov	r3, s0
 800ada2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ada6:	ee17 3a10 	vmov	r3, s14
 800adaa:	3418      	adds	r4, #24
 800adac:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800adb0:	e740      	b.n	800ac34 <__kernel_rem_pio2+0x1fc>
 800adb2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800adb6:	aa06      	add	r2, sp, #24
 800adb8:	ee10 3a10 	vmov	r3, s0
 800adbc:	46ab      	mov	fp, r5
 800adbe:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800adc2:	e737      	b.n	800ac34 <__kernel_rem_pio2+0x1fc>
 800adc4:	ac06      	add	r4, sp, #24
 800adc6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800adca:	9401      	str	r4, [sp, #4]
 800adcc:	ee07 4a90 	vmov	s15, r4
 800add0:	3901      	subs	r1, #1
 800add2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800add6:	ee27 7b00 	vmul.f64	d7, d7, d0
 800adda:	ee20 0b06 	vmul.f64	d0, d0, d6
 800adde:	ed20 7b02 	vstmdb	r0!, {d7}
 800ade2:	e735      	b.n	800ac50 <__kernel_rem_pio2+0x218>
 800ade4:	ecbc 5b02 	vldmia	ip!, {d5}
 800ade8:	ecb5 6b02 	vldmia	r5!, {d6}
 800adec:	3401      	adds	r4, #1
 800adee:	eea5 7b06 	vfma.f64	d7, d5, d6
 800adf2:	454c      	cmp	r4, r9
 800adf4:	dc01      	bgt.n	800adfa <__kernel_rem_pio2+0x3c2>
 800adf6:	4284      	cmp	r4, r0
 800adf8:	ddf4      	ble.n	800ade4 <__kernel_rem_pio2+0x3ac>
 800adfa:	ac42      	add	r4, sp, #264	; 0x108
 800adfc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800ae00:	ed80 7b00 	vstr	d7, [r0]
 800ae04:	3901      	subs	r1, #1
 800ae06:	e727      	b.n	800ac58 <__kernel_rem_pio2+0x220>
 800ae08:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ae0a:	2902      	cmp	r1, #2
 800ae0c:	dc0a      	bgt.n	800ae24 <__kernel_rem_pio2+0x3ec>
 800ae0e:	2900      	cmp	r1, #0
 800ae10:	dc2c      	bgt.n	800ae6c <__kernel_rem_pio2+0x434>
 800ae12:	d045      	beq.n	800aea0 <__kernel_rem_pio2+0x468>
 800ae14:	f008 0007 	and.w	r0, r8, #7
 800ae18:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800ae1c:	ecbd 8b06 	vpop	{d8-d10}
 800ae20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae24:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800ae26:	2a03      	cmp	r2, #3
 800ae28:	d1f4      	bne.n	800ae14 <__kernel_rem_pio2+0x3dc>
 800ae2a:	aa42      	add	r2, sp, #264	; 0x108
 800ae2c:	4413      	add	r3, r2
 800ae2e:	461a      	mov	r2, r3
 800ae30:	4619      	mov	r1, r3
 800ae32:	4658      	mov	r0, fp
 800ae34:	2800      	cmp	r0, #0
 800ae36:	f1a1 0108 	sub.w	r1, r1, #8
 800ae3a:	dc54      	bgt.n	800aee6 <__kernel_rem_pio2+0x4ae>
 800ae3c:	4659      	mov	r1, fp
 800ae3e:	2901      	cmp	r1, #1
 800ae40:	f1a2 0208 	sub.w	r2, r2, #8
 800ae44:	dc5f      	bgt.n	800af06 <__kernel_rem_pio2+0x4ce>
 800ae46:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800af60 <__kernel_rem_pio2+0x528>
 800ae4a:	3308      	adds	r3, #8
 800ae4c:	f1bb 0f01 	cmp.w	fp, #1
 800ae50:	dc69      	bgt.n	800af26 <__kernel_rem_pio2+0x4ee>
 800ae52:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800ae56:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800ae5a:	2e00      	cmp	r6, #0
 800ae5c:	d16a      	bne.n	800af34 <__kernel_rem_pio2+0x4fc>
 800ae5e:	ed87 5b00 	vstr	d5, [r7]
 800ae62:	ed87 6b02 	vstr	d6, [r7, #8]
 800ae66:	ed87 7b04 	vstr	d7, [r7, #16]
 800ae6a:	e7d3      	b.n	800ae14 <__kernel_rem_pio2+0x3dc>
 800ae6c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800af60 <__kernel_rem_pio2+0x528>
 800ae70:	ab42      	add	r3, sp, #264	; 0x108
 800ae72:	441a      	add	r2, r3
 800ae74:	465b      	mov	r3, fp
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	da26      	bge.n	800aec8 <__kernel_rem_pio2+0x490>
 800ae7a:	b35e      	cbz	r6, 800aed4 <__kernel_rem_pio2+0x49c>
 800ae7c:	eeb1 7b46 	vneg.f64	d7, d6
 800ae80:	ed87 7b00 	vstr	d7, [r7]
 800ae84:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800ae88:	aa44      	add	r2, sp, #272	; 0x110
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ae90:	459b      	cmp	fp, r3
 800ae92:	da22      	bge.n	800aeda <__kernel_rem_pio2+0x4a2>
 800ae94:	b10e      	cbz	r6, 800ae9a <__kernel_rem_pio2+0x462>
 800ae96:	eeb1 7b47 	vneg.f64	d7, d7
 800ae9a:	ed87 7b02 	vstr	d7, [r7, #8]
 800ae9e:	e7b9      	b.n	800ae14 <__kernel_rem_pio2+0x3dc>
 800aea0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800af60 <__kernel_rem_pio2+0x528>
 800aea4:	ab42      	add	r3, sp, #264	; 0x108
 800aea6:	441a      	add	r2, r3
 800aea8:	f1bb 0f00 	cmp.w	fp, #0
 800aeac:	da05      	bge.n	800aeba <__kernel_rem_pio2+0x482>
 800aeae:	b10e      	cbz	r6, 800aeb4 <__kernel_rem_pio2+0x47c>
 800aeb0:	eeb1 7b47 	vneg.f64	d7, d7
 800aeb4:	ed87 7b00 	vstr	d7, [r7]
 800aeb8:	e7ac      	b.n	800ae14 <__kernel_rem_pio2+0x3dc>
 800aeba:	ed32 6b02 	vldmdb	r2!, {d6}
 800aebe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800aec2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800aec6:	e7ef      	b.n	800aea8 <__kernel_rem_pio2+0x470>
 800aec8:	ed32 7b02 	vldmdb	r2!, {d7}
 800aecc:	3b01      	subs	r3, #1
 800aece:	ee36 6b07 	vadd.f64	d6, d6, d7
 800aed2:	e7d0      	b.n	800ae76 <__kernel_rem_pio2+0x43e>
 800aed4:	eeb0 7b46 	vmov.f64	d7, d6
 800aed8:	e7d2      	b.n	800ae80 <__kernel_rem_pio2+0x448>
 800aeda:	ecb2 6b02 	vldmia	r2!, {d6}
 800aede:	3301      	adds	r3, #1
 800aee0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800aee4:	e7d4      	b.n	800ae90 <__kernel_rem_pio2+0x458>
 800aee6:	ed91 7b00 	vldr	d7, [r1]
 800aeea:	ed91 5b02 	vldr	d5, [r1, #8]
 800aeee:	3801      	subs	r0, #1
 800aef0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800aef4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aef8:	ed81 6b00 	vstr	d6, [r1]
 800aefc:	ee37 7b05 	vadd.f64	d7, d7, d5
 800af00:	ed81 7b02 	vstr	d7, [r1, #8]
 800af04:	e796      	b.n	800ae34 <__kernel_rem_pio2+0x3fc>
 800af06:	ed92 7b00 	vldr	d7, [r2]
 800af0a:	ed92 5b02 	vldr	d5, [r2, #8]
 800af0e:	3901      	subs	r1, #1
 800af10:	ee37 6b05 	vadd.f64	d6, d7, d5
 800af14:	ee37 7b46 	vsub.f64	d7, d7, d6
 800af18:	ed82 6b00 	vstr	d6, [r2]
 800af1c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800af20:	ed82 7b02 	vstr	d7, [r2, #8]
 800af24:	e78b      	b.n	800ae3e <__kernel_rem_pio2+0x406>
 800af26:	ed33 6b02 	vldmdb	r3!, {d6}
 800af2a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800af2e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800af32:	e78b      	b.n	800ae4c <__kernel_rem_pio2+0x414>
 800af34:	eeb1 5b45 	vneg.f64	d5, d5
 800af38:	eeb1 6b46 	vneg.f64	d6, d6
 800af3c:	ed87 5b00 	vstr	d5, [r7]
 800af40:	eeb1 7b47 	vneg.f64	d7, d7
 800af44:	ed87 6b02 	vstr	d6, [r7, #8]
 800af48:	e78d      	b.n	800ae66 <__kernel_rem_pio2+0x42e>
 800af4a:	bf00      	nop
 800af4c:	f3af 8000 	nop.w
 800af50:	00000000 	.word	0x00000000
 800af54:	41700000 	.word	0x41700000
 800af58:	00000000 	.word	0x00000000
 800af5c:	3e700000 	.word	0x3e700000
	...

0800af68 <__kernel_sin>:
 800af68:	ee10 3a90 	vmov	r3, s1
 800af6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af70:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800af74:	da04      	bge.n	800af80 <__kernel_sin+0x18>
 800af76:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800af7a:	ee17 3a90 	vmov	r3, s15
 800af7e:	b35b      	cbz	r3, 800afd8 <__kernel_sin+0x70>
 800af80:	ee20 6b00 	vmul.f64	d6, d0, d0
 800af84:	ee20 5b06 	vmul.f64	d5, d0, d6
 800af88:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800afe0 <__kernel_sin+0x78>
 800af8c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800afe8 <__kernel_sin+0x80>
 800af90:	eea6 4b07 	vfma.f64	d4, d6, d7
 800af94:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800aff0 <__kernel_sin+0x88>
 800af98:	eea4 7b06 	vfma.f64	d7, d4, d6
 800af9c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800aff8 <__kernel_sin+0x90>
 800afa0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800afa4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800b000 <__kernel_sin+0x98>
 800afa8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800afac:	b930      	cbnz	r0, 800afbc <__kernel_sin+0x54>
 800afae:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b008 <__kernel_sin+0xa0>
 800afb2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800afb6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800afba:	4770      	bx	lr
 800afbc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800afc0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800afc4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800afc8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800afcc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800b010 <__kernel_sin+0xa8>
 800afd0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800afd4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	f3af 8000 	nop.w
 800afe0:	5acfd57c 	.word	0x5acfd57c
 800afe4:	3de5d93a 	.word	0x3de5d93a
 800afe8:	8a2b9ceb 	.word	0x8a2b9ceb
 800afec:	be5ae5e6 	.word	0xbe5ae5e6
 800aff0:	57b1fe7d 	.word	0x57b1fe7d
 800aff4:	3ec71de3 	.word	0x3ec71de3
 800aff8:	19c161d5 	.word	0x19c161d5
 800affc:	bf2a01a0 	.word	0xbf2a01a0
 800b000:	1110f8a6 	.word	0x1110f8a6
 800b004:	3f811111 	.word	0x3f811111
 800b008:	55555549 	.word	0x55555549
 800b00c:	bfc55555 	.word	0xbfc55555
 800b010:	55555549 	.word	0x55555549
 800b014:	3fc55555 	.word	0x3fc55555

0800b018 <fabs>:
 800b018:	ec51 0b10 	vmov	r0, r1, d0
 800b01c:	ee10 2a10 	vmov	r2, s0
 800b020:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b024:	ec43 2b10 	vmov	d0, r2, r3
 800b028:	4770      	bx	lr
 800b02a:	0000      	movs	r0, r0
 800b02c:	0000      	movs	r0, r0
	...

0800b030 <floor>:
 800b030:	ee10 1a90 	vmov	r1, s1
 800b034:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b038:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800b03c:	2b13      	cmp	r3, #19
 800b03e:	b530      	push	{r4, r5, lr}
 800b040:	ee10 0a10 	vmov	r0, s0
 800b044:	ee10 5a10 	vmov	r5, s0
 800b048:	dc31      	bgt.n	800b0ae <floor+0x7e>
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	da15      	bge.n	800b07a <floor+0x4a>
 800b04e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b108 <floor+0xd8>
 800b052:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b056:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b05e:	dd07      	ble.n	800b070 <floor+0x40>
 800b060:	2900      	cmp	r1, #0
 800b062:	da4e      	bge.n	800b102 <floor+0xd2>
 800b064:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b068:	4318      	orrs	r0, r3
 800b06a:	d001      	beq.n	800b070 <floor+0x40>
 800b06c:	4928      	ldr	r1, [pc, #160]	; (800b110 <floor+0xe0>)
 800b06e:	2000      	movs	r0, #0
 800b070:	460b      	mov	r3, r1
 800b072:	4602      	mov	r2, r0
 800b074:	ec43 2b10 	vmov	d0, r2, r3
 800b078:	e020      	b.n	800b0bc <floor+0x8c>
 800b07a:	4a26      	ldr	r2, [pc, #152]	; (800b114 <floor+0xe4>)
 800b07c:	411a      	asrs	r2, r3
 800b07e:	ea01 0402 	and.w	r4, r1, r2
 800b082:	4304      	orrs	r4, r0
 800b084:	d01a      	beq.n	800b0bc <floor+0x8c>
 800b086:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800b108 <floor+0xd8>
 800b08a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b08e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b096:	ddeb      	ble.n	800b070 <floor+0x40>
 800b098:	2900      	cmp	r1, #0
 800b09a:	bfbe      	ittt	lt
 800b09c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800b0a0:	fa40 f303 	asrlt.w	r3, r0, r3
 800b0a4:	18c9      	addlt	r1, r1, r3
 800b0a6:	ea21 0102 	bic.w	r1, r1, r2
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	e7e0      	b.n	800b070 <floor+0x40>
 800b0ae:	2b33      	cmp	r3, #51	; 0x33
 800b0b0:	dd05      	ble.n	800b0be <floor+0x8e>
 800b0b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0b6:	d101      	bne.n	800b0bc <floor+0x8c>
 800b0b8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b0bc:	bd30      	pop	{r4, r5, pc}
 800b0be:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800b0c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0c6:	40e2      	lsrs	r2, r4
 800b0c8:	4202      	tst	r2, r0
 800b0ca:	d0f7      	beq.n	800b0bc <floor+0x8c>
 800b0cc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800b108 <floor+0xd8>
 800b0d0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b0d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0dc:	ddc8      	ble.n	800b070 <floor+0x40>
 800b0de:	2900      	cmp	r1, #0
 800b0e0:	da02      	bge.n	800b0e8 <floor+0xb8>
 800b0e2:	2b14      	cmp	r3, #20
 800b0e4:	d103      	bne.n	800b0ee <floor+0xbe>
 800b0e6:	3101      	adds	r1, #1
 800b0e8:	ea20 0002 	bic.w	r0, r0, r2
 800b0ec:	e7c0      	b.n	800b070 <floor+0x40>
 800b0ee:	2401      	movs	r4, #1
 800b0f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b0f4:	fa04 f303 	lsl.w	r3, r4, r3
 800b0f8:	4418      	add	r0, r3
 800b0fa:	42a8      	cmp	r0, r5
 800b0fc:	bf38      	it	cc
 800b0fe:	1909      	addcc	r1, r1, r4
 800b100:	e7f2      	b.n	800b0e8 <floor+0xb8>
 800b102:	2000      	movs	r0, #0
 800b104:	4601      	mov	r1, r0
 800b106:	e7b3      	b.n	800b070 <floor+0x40>
 800b108:	8800759c 	.word	0x8800759c
 800b10c:	7e37e43c 	.word	0x7e37e43c
 800b110:	bff00000 	.word	0xbff00000
 800b114:	000fffff 	.word	0x000fffff

0800b118 <scalbn>:
 800b118:	ee10 1a90 	vmov	r1, s1
 800b11c:	b510      	push	{r4, lr}
 800b11e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800b122:	b98c      	cbnz	r4, 800b148 <scalbn+0x30>
 800b124:	ee10 3a10 	vmov	r3, s0
 800b128:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b12c:	430b      	orrs	r3, r1
 800b12e:	d011      	beq.n	800b154 <scalbn+0x3c>
 800b130:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800b1f8 <scalbn+0xe0>
 800b134:	4b3c      	ldr	r3, [pc, #240]	; (800b228 <scalbn+0x110>)
 800b136:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b13a:	4298      	cmp	r0, r3
 800b13c:	da0b      	bge.n	800b156 <scalbn+0x3e>
 800b13e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800b200 <scalbn+0xe8>
 800b142:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b146:	e005      	b.n	800b154 <scalbn+0x3c>
 800b148:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b14c:	429c      	cmp	r4, r3
 800b14e:	d107      	bne.n	800b160 <scalbn+0x48>
 800b150:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b154:	bd10      	pop	{r4, pc}
 800b156:	ee10 1a90 	vmov	r1, s1
 800b15a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800b15e:	3c36      	subs	r4, #54	; 0x36
 800b160:	4404      	add	r4, r0
 800b162:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800b166:	429c      	cmp	r4, r3
 800b168:	dd0d      	ble.n	800b186 <scalbn+0x6e>
 800b16a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800b208 <scalbn+0xf0>
 800b16e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800b210 <scalbn+0xf8>
 800b172:	eeb0 6b47 	vmov.f64	d6, d7
 800b176:	ee10 3a90 	vmov	r3, s1
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	fe27 7b05 	vselge.f64	d7, d7, d5
 800b180:	ee27 0b06 	vmul.f64	d0, d7, d6
 800b184:	e7e6      	b.n	800b154 <scalbn+0x3c>
 800b186:	2c00      	cmp	r4, #0
 800b188:	dd0a      	ble.n	800b1a0 <scalbn+0x88>
 800b18a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800b18e:	ec53 2b10 	vmov	r2, r3, d0
 800b192:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800b196:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800b19a:	ec43 2b10 	vmov	d0, r2, r3
 800b19e:	e7d9      	b.n	800b154 <scalbn+0x3c>
 800b1a0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800b1a4:	da19      	bge.n	800b1da <scalbn+0xc2>
 800b1a6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b1aa:	4298      	cmp	r0, r3
 800b1ac:	ee10 3a90 	vmov	r3, s1
 800b1b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1b4:	dd09      	ble.n	800b1ca <scalbn+0xb2>
 800b1b6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800b208 <scalbn+0xf0>
 800b1ba:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800b210 <scalbn+0xf8>
 800b1be:	eeb0 7b40 	vmov.f64	d7, d0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800b1c8:	e7bb      	b.n	800b142 <scalbn+0x2a>
 800b1ca:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800b200 <scalbn+0xe8>
 800b1ce:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800b218 <scalbn+0x100>
 800b1d2:	eeb0 7b40 	vmov.f64	d7, d0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	e7f4      	b.n	800b1c4 <scalbn+0xac>
 800b1da:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800b1de:	ec53 2b10 	vmov	r2, r3, d0
 800b1e2:	3436      	adds	r4, #54	; 0x36
 800b1e4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800b1e8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800b1ec:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800b220 <scalbn+0x108>
 800b1f0:	ec43 2b10 	vmov	d0, r2, r3
 800b1f4:	e7a5      	b.n	800b142 <scalbn+0x2a>
 800b1f6:	bf00      	nop
 800b1f8:	00000000 	.word	0x00000000
 800b1fc:	43500000 	.word	0x43500000
 800b200:	c2f8f359 	.word	0xc2f8f359
 800b204:	01a56e1f 	.word	0x01a56e1f
 800b208:	8800759c 	.word	0x8800759c
 800b20c:	7e37e43c 	.word	0x7e37e43c
 800b210:	8800759c 	.word	0x8800759c
 800b214:	fe37e43c 	.word	0xfe37e43c
 800b218:	c2f8f359 	.word	0xc2f8f359
 800b21c:	81a56e1f 	.word	0x81a56e1f
 800b220:	00000000 	.word	0x00000000
 800b224:	3c900000 	.word	0x3c900000
 800b228:	ffff3cb0 	.word	0xffff3cb0

0800b22c <__assert_func>:
 800b22c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b22e:	4614      	mov	r4, r2
 800b230:	461a      	mov	r2, r3
 800b232:	4b09      	ldr	r3, [pc, #36]	; (800b258 <__assert_func+0x2c>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4605      	mov	r5, r0
 800b238:	68d8      	ldr	r0, [r3, #12]
 800b23a:	b14c      	cbz	r4, 800b250 <__assert_func+0x24>
 800b23c:	4b07      	ldr	r3, [pc, #28]	; (800b25c <__assert_func+0x30>)
 800b23e:	9100      	str	r1, [sp, #0]
 800b240:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b244:	4906      	ldr	r1, [pc, #24]	; (800b260 <__assert_func+0x34>)
 800b246:	462b      	mov	r3, r5
 800b248:	f000 f814 	bl	800b274 <fiprintf>
 800b24c:	f000 fd9a 	bl	800bd84 <abort>
 800b250:	4b04      	ldr	r3, [pc, #16]	; (800b264 <__assert_func+0x38>)
 800b252:	461c      	mov	r4, r3
 800b254:	e7f3      	b.n	800b23e <__assert_func+0x12>
 800b256:	bf00      	nop
 800b258:	24000034 	.word	0x24000034
 800b25c:	0800d198 	.word	0x0800d198
 800b260:	0800d1a5 	.word	0x0800d1a5
 800b264:	0800d1d3 	.word	0x0800d1d3

0800b268 <__errno>:
 800b268:	4b01      	ldr	r3, [pc, #4]	; (800b270 <__errno+0x8>)
 800b26a:	6818      	ldr	r0, [r3, #0]
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	24000034 	.word	0x24000034

0800b274 <fiprintf>:
 800b274:	b40e      	push	{r1, r2, r3}
 800b276:	b503      	push	{r0, r1, lr}
 800b278:	4601      	mov	r1, r0
 800b27a:	ab03      	add	r3, sp, #12
 800b27c:	4805      	ldr	r0, [pc, #20]	; (800b294 <fiprintf+0x20>)
 800b27e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b282:	6800      	ldr	r0, [r0, #0]
 800b284:	9301      	str	r3, [sp, #4]
 800b286:	f000 f95b 	bl	800b540 <_vfiprintf_r>
 800b28a:	b002      	add	sp, #8
 800b28c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b290:	b003      	add	sp, #12
 800b292:	4770      	bx	lr
 800b294:	24000034 	.word	0x24000034

0800b298 <__libc_init_array>:
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	4d0d      	ldr	r5, [pc, #52]	; (800b2d0 <__libc_init_array+0x38>)
 800b29c:	4c0d      	ldr	r4, [pc, #52]	; (800b2d4 <__libc_init_array+0x3c>)
 800b29e:	1b64      	subs	r4, r4, r5
 800b2a0:	10a4      	asrs	r4, r4, #2
 800b2a2:	2600      	movs	r6, #0
 800b2a4:	42a6      	cmp	r6, r4
 800b2a6:	d109      	bne.n	800b2bc <__libc_init_array+0x24>
 800b2a8:	4d0b      	ldr	r5, [pc, #44]	; (800b2d8 <__libc_init_array+0x40>)
 800b2aa:	4c0c      	ldr	r4, [pc, #48]	; (800b2dc <__libc_init_array+0x44>)
 800b2ac:	f001 f88e 	bl	800c3cc <_init>
 800b2b0:	1b64      	subs	r4, r4, r5
 800b2b2:	10a4      	asrs	r4, r4, #2
 800b2b4:	2600      	movs	r6, #0
 800b2b6:	42a6      	cmp	r6, r4
 800b2b8:	d105      	bne.n	800b2c6 <__libc_init_array+0x2e>
 800b2ba:	bd70      	pop	{r4, r5, r6, pc}
 800b2bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2c0:	4798      	blx	r3
 800b2c2:	3601      	adds	r6, #1
 800b2c4:	e7ee      	b.n	800b2a4 <__libc_init_array+0xc>
 800b2c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ca:	4798      	blx	r3
 800b2cc:	3601      	adds	r6, #1
 800b2ce:	e7f2      	b.n	800b2b6 <__libc_init_array+0x1e>
 800b2d0:	0800d26c 	.word	0x0800d26c
 800b2d4:	0800d26c 	.word	0x0800d26c
 800b2d8:	0800d26c 	.word	0x0800d26c
 800b2dc:	0800d270 	.word	0x0800d270

0800b2e0 <malloc>:
 800b2e0:	4b02      	ldr	r3, [pc, #8]	; (800b2ec <malloc+0xc>)
 800b2e2:	4601      	mov	r1, r0
 800b2e4:	6818      	ldr	r0, [r3, #0]
 800b2e6:	f000 b88d 	b.w	800b404 <_malloc_r>
 800b2ea:	bf00      	nop
 800b2ec:	24000034 	.word	0x24000034

0800b2f0 <free>:
 800b2f0:	4b02      	ldr	r3, [pc, #8]	; (800b2fc <free+0xc>)
 800b2f2:	4601      	mov	r1, r0
 800b2f4:	6818      	ldr	r0, [r3, #0]
 800b2f6:	f000 b819 	b.w	800b32c <_free_r>
 800b2fa:	bf00      	nop
 800b2fc:	24000034 	.word	0x24000034

0800b300 <memcpy>:
 800b300:	440a      	add	r2, r1
 800b302:	4291      	cmp	r1, r2
 800b304:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b308:	d100      	bne.n	800b30c <memcpy+0xc>
 800b30a:	4770      	bx	lr
 800b30c:	b510      	push	{r4, lr}
 800b30e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b312:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b316:	4291      	cmp	r1, r2
 800b318:	d1f9      	bne.n	800b30e <memcpy+0xe>
 800b31a:	bd10      	pop	{r4, pc}

0800b31c <memset>:
 800b31c:	4402      	add	r2, r0
 800b31e:	4603      	mov	r3, r0
 800b320:	4293      	cmp	r3, r2
 800b322:	d100      	bne.n	800b326 <memset+0xa>
 800b324:	4770      	bx	lr
 800b326:	f803 1b01 	strb.w	r1, [r3], #1
 800b32a:	e7f9      	b.n	800b320 <memset+0x4>

0800b32c <_free_r>:
 800b32c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b32e:	2900      	cmp	r1, #0
 800b330:	d044      	beq.n	800b3bc <_free_r+0x90>
 800b332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b336:	9001      	str	r0, [sp, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f1a1 0404 	sub.w	r4, r1, #4
 800b33e:	bfb8      	it	lt
 800b340:	18e4      	addlt	r4, r4, r3
 800b342:	f000 ff47 	bl	800c1d4 <__malloc_lock>
 800b346:	4a1e      	ldr	r2, [pc, #120]	; (800b3c0 <_free_r+0x94>)
 800b348:	9801      	ldr	r0, [sp, #4]
 800b34a:	6813      	ldr	r3, [r2, #0]
 800b34c:	b933      	cbnz	r3, 800b35c <_free_r+0x30>
 800b34e:	6063      	str	r3, [r4, #4]
 800b350:	6014      	str	r4, [r2, #0]
 800b352:	b003      	add	sp, #12
 800b354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b358:	f000 bf42 	b.w	800c1e0 <__malloc_unlock>
 800b35c:	42a3      	cmp	r3, r4
 800b35e:	d908      	bls.n	800b372 <_free_r+0x46>
 800b360:	6825      	ldr	r5, [r4, #0]
 800b362:	1961      	adds	r1, r4, r5
 800b364:	428b      	cmp	r3, r1
 800b366:	bf01      	itttt	eq
 800b368:	6819      	ldreq	r1, [r3, #0]
 800b36a:	685b      	ldreq	r3, [r3, #4]
 800b36c:	1949      	addeq	r1, r1, r5
 800b36e:	6021      	streq	r1, [r4, #0]
 800b370:	e7ed      	b.n	800b34e <_free_r+0x22>
 800b372:	461a      	mov	r2, r3
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	b10b      	cbz	r3, 800b37c <_free_r+0x50>
 800b378:	42a3      	cmp	r3, r4
 800b37a:	d9fa      	bls.n	800b372 <_free_r+0x46>
 800b37c:	6811      	ldr	r1, [r2, #0]
 800b37e:	1855      	adds	r5, r2, r1
 800b380:	42a5      	cmp	r5, r4
 800b382:	d10b      	bne.n	800b39c <_free_r+0x70>
 800b384:	6824      	ldr	r4, [r4, #0]
 800b386:	4421      	add	r1, r4
 800b388:	1854      	adds	r4, r2, r1
 800b38a:	42a3      	cmp	r3, r4
 800b38c:	6011      	str	r1, [r2, #0]
 800b38e:	d1e0      	bne.n	800b352 <_free_r+0x26>
 800b390:	681c      	ldr	r4, [r3, #0]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	6053      	str	r3, [r2, #4]
 800b396:	4421      	add	r1, r4
 800b398:	6011      	str	r1, [r2, #0]
 800b39a:	e7da      	b.n	800b352 <_free_r+0x26>
 800b39c:	d902      	bls.n	800b3a4 <_free_r+0x78>
 800b39e:	230c      	movs	r3, #12
 800b3a0:	6003      	str	r3, [r0, #0]
 800b3a2:	e7d6      	b.n	800b352 <_free_r+0x26>
 800b3a4:	6825      	ldr	r5, [r4, #0]
 800b3a6:	1961      	adds	r1, r4, r5
 800b3a8:	428b      	cmp	r3, r1
 800b3aa:	bf04      	itt	eq
 800b3ac:	6819      	ldreq	r1, [r3, #0]
 800b3ae:	685b      	ldreq	r3, [r3, #4]
 800b3b0:	6063      	str	r3, [r4, #4]
 800b3b2:	bf04      	itt	eq
 800b3b4:	1949      	addeq	r1, r1, r5
 800b3b6:	6021      	streq	r1, [r4, #0]
 800b3b8:	6054      	str	r4, [r2, #4]
 800b3ba:	e7ca      	b.n	800b352 <_free_r+0x26>
 800b3bc:	b003      	add	sp, #12
 800b3be:	bd30      	pop	{r4, r5, pc}
 800b3c0:	24000c54 	.word	0x24000c54

0800b3c4 <sbrk_aligned>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	4e0e      	ldr	r6, [pc, #56]	; (800b400 <sbrk_aligned+0x3c>)
 800b3c8:	460c      	mov	r4, r1
 800b3ca:	6831      	ldr	r1, [r6, #0]
 800b3cc:	4605      	mov	r5, r0
 800b3ce:	b911      	cbnz	r1, 800b3d6 <sbrk_aligned+0x12>
 800b3d0:	f000 fc08 	bl	800bbe4 <_sbrk_r>
 800b3d4:	6030      	str	r0, [r6, #0]
 800b3d6:	4621      	mov	r1, r4
 800b3d8:	4628      	mov	r0, r5
 800b3da:	f000 fc03 	bl	800bbe4 <_sbrk_r>
 800b3de:	1c43      	adds	r3, r0, #1
 800b3e0:	d00a      	beq.n	800b3f8 <sbrk_aligned+0x34>
 800b3e2:	1cc4      	adds	r4, r0, #3
 800b3e4:	f024 0403 	bic.w	r4, r4, #3
 800b3e8:	42a0      	cmp	r0, r4
 800b3ea:	d007      	beq.n	800b3fc <sbrk_aligned+0x38>
 800b3ec:	1a21      	subs	r1, r4, r0
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	f000 fbf8 	bl	800bbe4 <_sbrk_r>
 800b3f4:	3001      	adds	r0, #1
 800b3f6:	d101      	bne.n	800b3fc <sbrk_aligned+0x38>
 800b3f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	bd70      	pop	{r4, r5, r6, pc}
 800b400:	24000c58 	.word	0x24000c58

0800b404 <_malloc_r>:
 800b404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b408:	1ccd      	adds	r5, r1, #3
 800b40a:	f025 0503 	bic.w	r5, r5, #3
 800b40e:	3508      	adds	r5, #8
 800b410:	2d0c      	cmp	r5, #12
 800b412:	bf38      	it	cc
 800b414:	250c      	movcc	r5, #12
 800b416:	2d00      	cmp	r5, #0
 800b418:	4607      	mov	r7, r0
 800b41a:	db01      	blt.n	800b420 <_malloc_r+0x1c>
 800b41c:	42a9      	cmp	r1, r5
 800b41e:	d905      	bls.n	800b42c <_malloc_r+0x28>
 800b420:	230c      	movs	r3, #12
 800b422:	603b      	str	r3, [r7, #0]
 800b424:	2600      	movs	r6, #0
 800b426:	4630      	mov	r0, r6
 800b428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b42c:	4e2e      	ldr	r6, [pc, #184]	; (800b4e8 <_malloc_r+0xe4>)
 800b42e:	f000 fed1 	bl	800c1d4 <__malloc_lock>
 800b432:	6833      	ldr	r3, [r6, #0]
 800b434:	461c      	mov	r4, r3
 800b436:	bb34      	cbnz	r4, 800b486 <_malloc_r+0x82>
 800b438:	4629      	mov	r1, r5
 800b43a:	4638      	mov	r0, r7
 800b43c:	f7ff ffc2 	bl	800b3c4 <sbrk_aligned>
 800b440:	1c43      	adds	r3, r0, #1
 800b442:	4604      	mov	r4, r0
 800b444:	d14d      	bne.n	800b4e2 <_malloc_r+0xde>
 800b446:	6834      	ldr	r4, [r6, #0]
 800b448:	4626      	mov	r6, r4
 800b44a:	2e00      	cmp	r6, #0
 800b44c:	d140      	bne.n	800b4d0 <_malloc_r+0xcc>
 800b44e:	6823      	ldr	r3, [r4, #0]
 800b450:	4631      	mov	r1, r6
 800b452:	4638      	mov	r0, r7
 800b454:	eb04 0803 	add.w	r8, r4, r3
 800b458:	f000 fbc4 	bl	800bbe4 <_sbrk_r>
 800b45c:	4580      	cmp	r8, r0
 800b45e:	d13a      	bne.n	800b4d6 <_malloc_r+0xd2>
 800b460:	6821      	ldr	r1, [r4, #0]
 800b462:	3503      	adds	r5, #3
 800b464:	1a6d      	subs	r5, r5, r1
 800b466:	f025 0503 	bic.w	r5, r5, #3
 800b46a:	3508      	adds	r5, #8
 800b46c:	2d0c      	cmp	r5, #12
 800b46e:	bf38      	it	cc
 800b470:	250c      	movcc	r5, #12
 800b472:	4629      	mov	r1, r5
 800b474:	4638      	mov	r0, r7
 800b476:	f7ff ffa5 	bl	800b3c4 <sbrk_aligned>
 800b47a:	3001      	adds	r0, #1
 800b47c:	d02b      	beq.n	800b4d6 <_malloc_r+0xd2>
 800b47e:	6823      	ldr	r3, [r4, #0]
 800b480:	442b      	add	r3, r5
 800b482:	6023      	str	r3, [r4, #0]
 800b484:	e00e      	b.n	800b4a4 <_malloc_r+0xa0>
 800b486:	6822      	ldr	r2, [r4, #0]
 800b488:	1b52      	subs	r2, r2, r5
 800b48a:	d41e      	bmi.n	800b4ca <_malloc_r+0xc6>
 800b48c:	2a0b      	cmp	r2, #11
 800b48e:	d916      	bls.n	800b4be <_malloc_r+0xba>
 800b490:	1961      	adds	r1, r4, r5
 800b492:	42a3      	cmp	r3, r4
 800b494:	6025      	str	r5, [r4, #0]
 800b496:	bf18      	it	ne
 800b498:	6059      	strne	r1, [r3, #4]
 800b49a:	6863      	ldr	r3, [r4, #4]
 800b49c:	bf08      	it	eq
 800b49e:	6031      	streq	r1, [r6, #0]
 800b4a0:	5162      	str	r2, [r4, r5]
 800b4a2:	604b      	str	r3, [r1, #4]
 800b4a4:	4638      	mov	r0, r7
 800b4a6:	f104 060b 	add.w	r6, r4, #11
 800b4aa:	f000 fe99 	bl	800c1e0 <__malloc_unlock>
 800b4ae:	f026 0607 	bic.w	r6, r6, #7
 800b4b2:	1d23      	adds	r3, r4, #4
 800b4b4:	1af2      	subs	r2, r6, r3
 800b4b6:	d0b6      	beq.n	800b426 <_malloc_r+0x22>
 800b4b8:	1b9b      	subs	r3, r3, r6
 800b4ba:	50a3      	str	r3, [r4, r2]
 800b4bc:	e7b3      	b.n	800b426 <_malloc_r+0x22>
 800b4be:	6862      	ldr	r2, [r4, #4]
 800b4c0:	42a3      	cmp	r3, r4
 800b4c2:	bf0c      	ite	eq
 800b4c4:	6032      	streq	r2, [r6, #0]
 800b4c6:	605a      	strne	r2, [r3, #4]
 800b4c8:	e7ec      	b.n	800b4a4 <_malloc_r+0xa0>
 800b4ca:	4623      	mov	r3, r4
 800b4cc:	6864      	ldr	r4, [r4, #4]
 800b4ce:	e7b2      	b.n	800b436 <_malloc_r+0x32>
 800b4d0:	4634      	mov	r4, r6
 800b4d2:	6876      	ldr	r6, [r6, #4]
 800b4d4:	e7b9      	b.n	800b44a <_malloc_r+0x46>
 800b4d6:	230c      	movs	r3, #12
 800b4d8:	603b      	str	r3, [r7, #0]
 800b4da:	4638      	mov	r0, r7
 800b4dc:	f000 fe80 	bl	800c1e0 <__malloc_unlock>
 800b4e0:	e7a1      	b.n	800b426 <_malloc_r+0x22>
 800b4e2:	6025      	str	r5, [r4, #0]
 800b4e4:	e7de      	b.n	800b4a4 <_malloc_r+0xa0>
 800b4e6:	bf00      	nop
 800b4e8:	24000c54 	.word	0x24000c54

0800b4ec <__sfputc_r>:
 800b4ec:	6893      	ldr	r3, [r2, #8]
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	b410      	push	{r4}
 800b4f4:	6093      	str	r3, [r2, #8]
 800b4f6:	da08      	bge.n	800b50a <__sfputc_r+0x1e>
 800b4f8:	6994      	ldr	r4, [r2, #24]
 800b4fa:	42a3      	cmp	r3, r4
 800b4fc:	db01      	blt.n	800b502 <__sfputc_r+0x16>
 800b4fe:	290a      	cmp	r1, #10
 800b500:	d103      	bne.n	800b50a <__sfputc_r+0x1e>
 800b502:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b506:	f000 bb7d 	b.w	800bc04 <__swbuf_r>
 800b50a:	6813      	ldr	r3, [r2, #0]
 800b50c:	1c58      	adds	r0, r3, #1
 800b50e:	6010      	str	r0, [r2, #0]
 800b510:	7019      	strb	r1, [r3, #0]
 800b512:	4608      	mov	r0, r1
 800b514:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b518:	4770      	bx	lr

0800b51a <__sfputs_r>:
 800b51a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51c:	4606      	mov	r6, r0
 800b51e:	460f      	mov	r7, r1
 800b520:	4614      	mov	r4, r2
 800b522:	18d5      	adds	r5, r2, r3
 800b524:	42ac      	cmp	r4, r5
 800b526:	d101      	bne.n	800b52c <__sfputs_r+0x12>
 800b528:	2000      	movs	r0, #0
 800b52a:	e007      	b.n	800b53c <__sfputs_r+0x22>
 800b52c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b530:	463a      	mov	r2, r7
 800b532:	4630      	mov	r0, r6
 800b534:	f7ff ffda 	bl	800b4ec <__sfputc_r>
 800b538:	1c43      	adds	r3, r0, #1
 800b53a:	d1f3      	bne.n	800b524 <__sfputs_r+0xa>
 800b53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b540 <_vfiprintf_r>:
 800b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	460d      	mov	r5, r1
 800b546:	b09d      	sub	sp, #116	; 0x74
 800b548:	4614      	mov	r4, r2
 800b54a:	4698      	mov	r8, r3
 800b54c:	4606      	mov	r6, r0
 800b54e:	b118      	cbz	r0, 800b558 <_vfiprintf_r+0x18>
 800b550:	6983      	ldr	r3, [r0, #24]
 800b552:	b90b      	cbnz	r3, 800b558 <_vfiprintf_r+0x18>
 800b554:	f000 fd38 	bl	800bfc8 <__sinit>
 800b558:	4b89      	ldr	r3, [pc, #548]	; (800b780 <_vfiprintf_r+0x240>)
 800b55a:	429d      	cmp	r5, r3
 800b55c:	d11b      	bne.n	800b596 <_vfiprintf_r+0x56>
 800b55e:	6875      	ldr	r5, [r6, #4]
 800b560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b562:	07d9      	lsls	r1, r3, #31
 800b564:	d405      	bmi.n	800b572 <_vfiprintf_r+0x32>
 800b566:	89ab      	ldrh	r3, [r5, #12]
 800b568:	059a      	lsls	r2, r3, #22
 800b56a:	d402      	bmi.n	800b572 <_vfiprintf_r+0x32>
 800b56c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b56e:	f000 fdc9 	bl	800c104 <__retarget_lock_acquire_recursive>
 800b572:	89ab      	ldrh	r3, [r5, #12]
 800b574:	071b      	lsls	r3, r3, #28
 800b576:	d501      	bpl.n	800b57c <_vfiprintf_r+0x3c>
 800b578:	692b      	ldr	r3, [r5, #16]
 800b57a:	b9eb      	cbnz	r3, 800b5b8 <_vfiprintf_r+0x78>
 800b57c:	4629      	mov	r1, r5
 800b57e:	4630      	mov	r0, r6
 800b580:	f000 fb92 	bl	800bca8 <__swsetup_r>
 800b584:	b1c0      	cbz	r0, 800b5b8 <_vfiprintf_r+0x78>
 800b586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b588:	07dc      	lsls	r4, r3, #31
 800b58a:	d50e      	bpl.n	800b5aa <_vfiprintf_r+0x6a>
 800b58c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b590:	b01d      	add	sp, #116	; 0x74
 800b592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b596:	4b7b      	ldr	r3, [pc, #492]	; (800b784 <_vfiprintf_r+0x244>)
 800b598:	429d      	cmp	r5, r3
 800b59a:	d101      	bne.n	800b5a0 <_vfiprintf_r+0x60>
 800b59c:	68b5      	ldr	r5, [r6, #8]
 800b59e:	e7df      	b.n	800b560 <_vfiprintf_r+0x20>
 800b5a0:	4b79      	ldr	r3, [pc, #484]	; (800b788 <_vfiprintf_r+0x248>)
 800b5a2:	429d      	cmp	r5, r3
 800b5a4:	bf08      	it	eq
 800b5a6:	68f5      	ldreq	r5, [r6, #12]
 800b5a8:	e7da      	b.n	800b560 <_vfiprintf_r+0x20>
 800b5aa:	89ab      	ldrh	r3, [r5, #12]
 800b5ac:	0598      	lsls	r0, r3, #22
 800b5ae:	d4ed      	bmi.n	800b58c <_vfiprintf_r+0x4c>
 800b5b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5b2:	f000 fda8 	bl	800c106 <__retarget_lock_release_recursive>
 800b5b6:	e7e9      	b.n	800b58c <_vfiprintf_r+0x4c>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b5bc:	2320      	movs	r3, #32
 800b5be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5c6:	2330      	movs	r3, #48	; 0x30
 800b5c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b78c <_vfiprintf_r+0x24c>
 800b5cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5d0:	f04f 0901 	mov.w	r9, #1
 800b5d4:	4623      	mov	r3, r4
 800b5d6:	469a      	mov	sl, r3
 800b5d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5dc:	b10a      	cbz	r2, 800b5e2 <_vfiprintf_r+0xa2>
 800b5de:	2a25      	cmp	r2, #37	; 0x25
 800b5e0:	d1f9      	bne.n	800b5d6 <_vfiprintf_r+0x96>
 800b5e2:	ebba 0b04 	subs.w	fp, sl, r4
 800b5e6:	d00b      	beq.n	800b600 <_vfiprintf_r+0xc0>
 800b5e8:	465b      	mov	r3, fp
 800b5ea:	4622      	mov	r2, r4
 800b5ec:	4629      	mov	r1, r5
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	f7ff ff93 	bl	800b51a <__sfputs_r>
 800b5f4:	3001      	adds	r0, #1
 800b5f6:	f000 80aa 	beq.w	800b74e <_vfiprintf_r+0x20e>
 800b5fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5fc:	445a      	add	r2, fp
 800b5fe:	9209      	str	r2, [sp, #36]	; 0x24
 800b600:	f89a 3000 	ldrb.w	r3, [sl]
 800b604:	2b00      	cmp	r3, #0
 800b606:	f000 80a2 	beq.w	800b74e <_vfiprintf_r+0x20e>
 800b60a:	2300      	movs	r3, #0
 800b60c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b614:	f10a 0a01 	add.w	sl, sl, #1
 800b618:	9304      	str	r3, [sp, #16]
 800b61a:	9307      	str	r3, [sp, #28]
 800b61c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b620:	931a      	str	r3, [sp, #104]	; 0x68
 800b622:	4654      	mov	r4, sl
 800b624:	2205      	movs	r2, #5
 800b626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b62a:	4858      	ldr	r0, [pc, #352]	; (800b78c <_vfiprintf_r+0x24c>)
 800b62c:	f7f4 fe58 	bl	80002e0 <memchr>
 800b630:	9a04      	ldr	r2, [sp, #16]
 800b632:	b9d8      	cbnz	r0, 800b66c <_vfiprintf_r+0x12c>
 800b634:	06d1      	lsls	r1, r2, #27
 800b636:	bf44      	itt	mi
 800b638:	2320      	movmi	r3, #32
 800b63a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b63e:	0713      	lsls	r3, r2, #28
 800b640:	bf44      	itt	mi
 800b642:	232b      	movmi	r3, #43	; 0x2b
 800b644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b648:	f89a 3000 	ldrb.w	r3, [sl]
 800b64c:	2b2a      	cmp	r3, #42	; 0x2a
 800b64e:	d015      	beq.n	800b67c <_vfiprintf_r+0x13c>
 800b650:	9a07      	ldr	r2, [sp, #28]
 800b652:	4654      	mov	r4, sl
 800b654:	2000      	movs	r0, #0
 800b656:	f04f 0c0a 	mov.w	ip, #10
 800b65a:	4621      	mov	r1, r4
 800b65c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b660:	3b30      	subs	r3, #48	; 0x30
 800b662:	2b09      	cmp	r3, #9
 800b664:	d94e      	bls.n	800b704 <_vfiprintf_r+0x1c4>
 800b666:	b1b0      	cbz	r0, 800b696 <_vfiprintf_r+0x156>
 800b668:	9207      	str	r2, [sp, #28]
 800b66a:	e014      	b.n	800b696 <_vfiprintf_r+0x156>
 800b66c:	eba0 0308 	sub.w	r3, r0, r8
 800b670:	fa09 f303 	lsl.w	r3, r9, r3
 800b674:	4313      	orrs	r3, r2
 800b676:	9304      	str	r3, [sp, #16]
 800b678:	46a2      	mov	sl, r4
 800b67a:	e7d2      	b.n	800b622 <_vfiprintf_r+0xe2>
 800b67c:	9b03      	ldr	r3, [sp, #12]
 800b67e:	1d19      	adds	r1, r3, #4
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	9103      	str	r1, [sp, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	bfbb      	ittet	lt
 800b688:	425b      	neglt	r3, r3
 800b68a:	f042 0202 	orrlt.w	r2, r2, #2
 800b68e:	9307      	strge	r3, [sp, #28]
 800b690:	9307      	strlt	r3, [sp, #28]
 800b692:	bfb8      	it	lt
 800b694:	9204      	strlt	r2, [sp, #16]
 800b696:	7823      	ldrb	r3, [r4, #0]
 800b698:	2b2e      	cmp	r3, #46	; 0x2e
 800b69a:	d10c      	bne.n	800b6b6 <_vfiprintf_r+0x176>
 800b69c:	7863      	ldrb	r3, [r4, #1]
 800b69e:	2b2a      	cmp	r3, #42	; 0x2a
 800b6a0:	d135      	bne.n	800b70e <_vfiprintf_r+0x1ce>
 800b6a2:	9b03      	ldr	r3, [sp, #12]
 800b6a4:	1d1a      	adds	r2, r3, #4
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	9203      	str	r2, [sp, #12]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	bfb8      	it	lt
 800b6ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b6b2:	3402      	adds	r4, #2
 800b6b4:	9305      	str	r3, [sp, #20]
 800b6b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b79c <_vfiprintf_r+0x25c>
 800b6ba:	7821      	ldrb	r1, [r4, #0]
 800b6bc:	2203      	movs	r2, #3
 800b6be:	4650      	mov	r0, sl
 800b6c0:	f7f4 fe0e 	bl	80002e0 <memchr>
 800b6c4:	b140      	cbz	r0, 800b6d8 <_vfiprintf_r+0x198>
 800b6c6:	2340      	movs	r3, #64	; 0x40
 800b6c8:	eba0 000a 	sub.w	r0, r0, sl
 800b6cc:	fa03 f000 	lsl.w	r0, r3, r0
 800b6d0:	9b04      	ldr	r3, [sp, #16]
 800b6d2:	4303      	orrs	r3, r0
 800b6d4:	3401      	adds	r4, #1
 800b6d6:	9304      	str	r3, [sp, #16]
 800b6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6dc:	482c      	ldr	r0, [pc, #176]	; (800b790 <_vfiprintf_r+0x250>)
 800b6de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6e2:	2206      	movs	r2, #6
 800b6e4:	f7f4 fdfc 	bl	80002e0 <memchr>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d03f      	beq.n	800b76c <_vfiprintf_r+0x22c>
 800b6ec:	4b29      	ldr	r3, [pc, #164]	; (800b794 <_vfiprintf_r+0x254>)
 800b6ee:	bb1b      	cbnz	r3, 800b738 <_vfiprintf_r+0x1f8>
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	3307      	adds	r3, #7
 800b6f4:	f023 0307 	bic.w	r3, r3, #7
 800b6f8:	3308      	adds	r3, #8
 800b6fa:	9303      	str	r3, [sp, #12]
 800b6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6fe:	443b      	add	r3, r7
 800b700:	9309      	str	r3, [sp, #36]	; 0x24
 800b702:	e767      	b.n	800b5d4 <_vfiprintf_r+0x94>
 800b704:	fb0c 3202 	mla	r2, ip, r2, r3
 800b708:	460c      	mov	r4, r1
 800b70a:	2001      	movs	r0, #1
 800b70c:	e7a5      	b.n	800b65a <_vfiprintf_r+0x11a>
 800b70e:	2300      	movs	r3, #0
 800b710:	3401      	adds	r4, #1
 800b712:	9305      	str	r3, [sp, #20]
 800b714:	4619      	mov	r1, r3
 800b716:	f04f 0c0a 	mov.w	ip, #10
 800b71a:	4620      	mov	r0, r4
 800b71c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b720:	3a30      	subs	r2, #48	; 0x30
 800b722:	2a09      	cmp	r2, #9
 800b724:	d903      	bls.n	800b72e <_vfiprintf_r+0x1ee>
 800b726:	2b00      	cmp	r3, #0
 800b728:	d0c5      	beq.n	800b6b6 <_vfiprintf_r+0x176>
 800b72a:	9105      	str	r1, [sp, #20]
 800b72c:	e7c3      	b.n	800b6b6 <_vfiprintf_r+0x176>
 800b72e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b732:	4604      	mov	r4, r0
 800b734:	2301      	movs	r3, #1
 800b736:	e7f0      	b.n	800b71a <_vfiprintf_r+0x1da>
 800b738:	ab03      	add	r3, sp, #12
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	462a      	mov	r2, r5
 800b73e:	4b16      	ldr	r3, [pc, #88]	; (800b798 <_vfiprintf_r+0x258>)
 800b740:	a904      	add	r1, sp, #16
 800b742:	4630      	mov	r0, r6
 800b744:	f3af 8000 	nop.w
 800b748:	4607      	mov	r7, r0
 800b74a:	1c78      	adds	r0, r7, #1
 800b74c:	d1d6      	bne.n	800b6fc <_vfiprintf_r+0x1bc>
 800b74e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b750:	07d9      	lsls	r1, r3, #31
 800b752:	d405      	bmi.n	800b760 <_vfiprintf_r+0x220>
 800b754:	89ab      	ldrh	r3, [r5, #12]
 800b756:	059a      	lsls	r2, r3, #22
 800b758:	d402      	bmi.n	800b760 <_vfiprintf_r+0x220>
 800b75a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b75c:	f000 fcd3 	bl	800c106 <__retarget_lock_release_recursive>
 800b760:	89ab      	ldrh	r3, [r5, #12]
 800b762:	065b      	lsls	r3, r3, #25
 800b764:	f53f af12 	bmi.w	800b58c <_vfiprintf_r+0x4c>
 800b768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b76a:	e711      	b.n	800b590 <_vfiprintf_r+0x50>
 800b76c:	ab03      	add	r3, sp, #12
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	462a      	mov	r2, r5
 800b772:	4b09      	ldr	r3, [pc, #36]	; (800b798 <_vfiprintf_r+0x258>)
 800b774:	a904      	add	r1, sp, #16
 800b776:	4630      	mov	r0, r6
 800b778:	f000 f880 	bl	800b87c <_printf_i>
 800b77c:	e7e4      	b.n	800b748 <_vfiprintf_r+0x208>
 800b77e:	bf00      	nop
 800b780:	0800d22c 	.word	0x0800d22c
 800b784:	0800d24c 	.word	0x0800d24c
 800b788:	0800d20c 	.word	0x0800d20c
 800b78c:	0800d1d8 	.word	0x0800d1d8
 800b790:	0800d1e2 	.word	0x0800d1e2
 800b794:	00000000 	.word	0x00000000
 800b798:	0800b51b 	.word	0x0800b51b
 800b79c:	0800d1de 	.word	0x0800d1de

0800b7a0 <_printf_common>:
 800b7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a4:	4616      	mov	r6, r2
 800b7a6:	4699      	mov	r9, r3
 800b7a8:	688a      	ldr	r2, [r1, #8]
 800b7aa:	690b      	ldr	r3, [r1, #16]
 800b7ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	bfb8      	it	lt
 800b7b4:	4613      	movlt	r3, r2
 800b7b6:	6033      	str	r3, [r6, #0]
 800b7b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7bc:	4607      	mov	r7, r0
 800b7be:	460c      	mov	r4, r1
 800b7c0:	b10a      	cbz	r2, 800b7c6 <_printf_common+0x26>
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	6033      	str	r3, [r6, #0]
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	0699      	lsls	r1, r3, #26
 800b7ca:	bf42      	ittt	mi
 800b7cc:	6833      	ldrmi	r3, [r6, #0]
 800b7ce:	3302      	addmi	r3, #2
 800b7d0:	6033      	strmi	r3, [r6, #0]
 800b7d2:	6825      	ldr	r5, [r4, #0]
 800b7d4:	f015 0506 	ands.w	r5, r5, #6
 800b7d8:	d106      	bne.n	800b7e8 <_printf_common+0x48>
 800b7da:	f104 0a19 	add.w	sl, r4, #25
 800b7de:	68e3      	ldr	r3, [r4, #12]
 800b7e0:	6832      	ldr	r2, [r6, #0]
 800b7e2:	1a9b      	subs	r3, r3, r2
 800b7e4:	42ab      	cmp	r3, r5
 800b7e6:	dc26      	bgt.n	800b836 <_printf_common+0x96>
 800b7e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7ec:	1e13      	subs	r3, r2, #0
 800b7ee:	6822      	ldr	r2, [r4, #0]
 800b7f0:	bf18      	it	ne
 800b7f2:	2301      	movne	r3, #1
 800b7f4:	0692      	lsls	r2, r2, #26
 800b7f6:	d42b      	bmi.n	800b850 <_printf_common+0xb0>
 800b7f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	4638      	mov	r0, r7
 800b800:	47c0      	blx	r8
 800b802:	3001      	adds	r0, #1
 800b804:	d01e      	beq.n	800b844 <_printf_common+0xa4>
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	68e5      	ldr	r5, [r4, #12]
 800b80a:	6832      	ldr	r2, [r6, #0]
 800b80c:	f003 0306 	and.w	r3, r3, #6
 800b810:	2b04      	cmp	r3, #4
 800b812:	bf08      	it	eq
 800b814:	1aad      	subeq	r5, r5, r2
 800b816:	68a3      	ldr	r3, [r4, #8]
 800b818:	6922      	ldr	r2, [r4, #16]
 800b81a:	bf0c      	ite	eq
 800b81c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b820:	2500      	movne	r5, #0
 800b822:	4293      	cmp	r3, r2
 800b824:	bfc4      	itt	gt
 800b826:	1a9b      	subgt	r3, r3, r2
 800b828:	18ed      	addgt	r5, r5, r3
 800b82a:	2600      	movs	r6, #0
 800b82c:	341a      	adds	r4, #26
 800b82e:	42b5      	cmp	r5, r6
 800b830:	d11a      	bne.n	800b868 <_printf_common+0xc8>
 800b832:	2000      	movs	r0, #0
 800b834:	e008      	b.n	800b848 <_printf_common+0xa8>
 800b836:	2301      	movs	r3, #1
 800b838:	4652      	mov	r2, sl
 800b83a:	4649      	mov	r1, r9
 800b83c:	4638      	mov	r0, r7
 800b83e:	47c0      	blx	r8
 800b840:	3001      	adds	r0, #1
 800b842:	d103      	bne.n	800b84c <_printf_common+0xac>
 800b844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b84c:	3501      	adds	r5, #1
 800b84e:	e7c6      	b.n	800b7de <_printf_common+0x3e>
 800b850:	18e1      	adds	r1, r4, r3
 800b852:	1c5a      	adds	r2, r3, #1
 800b854:	2030      	movs	r0, #48	; 0x30
 800b856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b85a:	4422      	add	r2, r4
 800b85c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b864:	3302      	adds	r3, #2
 800b866:	e7c7      	b.n	800b7f8 <_printf_common+0x58>
 800b868:	2301      	movs	r3, #1
 800b86a:	4622      	mov	r2, r4
 800b86c:	4649      	mov	r1, r9
 800b86e:	4638      	mov	r0, r7
 800b870:	47c0      	blx	r8
 800b872:	3001      	adds	r0, #1
 800b874:	d0e6      	beq.n	800b844 <_printf_common+0xa4>
 800b876:	3601      	adds	r6, #1
 800b878:	e7d9      	b.n	800b82e <_printf_common+0x8e>
	...

0800b87c <_printf_i>:
 800b87c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b880:	7e0f      	ldrb	r7, [r1, #24]
 800b882:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b884:	2f78      	cmp	r7, #120	; 0x78
 800b886:	4691      	mov	r9, r2
 800b888:	4680      	mov	r8, r0
 800b88a:	460c      	mov	r4, r1
 800b88c:	469a      	mov	sl, r3
 800b88e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b892:	d807      	bhi.n	800b8a4 <_printf_i+0x28>
 800b894:	2f62      	cmp	r7, #98	; 0x62
 800b896:	d80a      	bhi.n	800b8ae <_printf_i+0x32>
 800b898:	2f00      	cmp	r7, #0
 800b89a:	f000 80d8 	beq.w	800ba4e <_printf_i+0x1d2>
 800b89e:	2f58      	cmp	r7, #88	; 0x58
 800b8a0:	f000 80a3 	beq.w	800b9ea <_printf_i+0x16e>
 800b8a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b8ac:	e03a      	b.n	800b924 <_printf_i+0xa8>
 800b8ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b8b2:	2b15      	cmp	r3, #21
 800b8b4:	d8f6      	bhi.n	800b8a4 <_printf_i+0x28>
 800b8b6:	a101      	add	r1, pc, #4	; (adr r1, 800b8bc <_printf_i+0x40>)
 800b8b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8bc:	0800b915 	.word	0x0800b915
 800b8c0:	0800b929 	.word	0x0800b929
 800b8c4:	0800b8a5 	.word	0x0800b8a5
 800b8c8:	0800b8a5 	.word	0x0800b8a5
 800b8cc:	0800b8a5 	.word	0x0800b8a5
 800b8d0:	0800b8a5 	.word	0x0800b8a5
 800b8d4:	0800b929 	.word	0x0800b929
 800b8d8:	0800b8a5 	.word	0x0800b8a5
 800b8dc:	0800b8a5 	.word	0x0800b8a5
 800b8e0:	0800b8a5 	.word	0x0800b8a5
 800b8e4:	0800b8a5 	.word	0x0800b8a5
 800b8e8:	0800ba35 	.word	0x0800ba35
 800b8ec:	0800b959 	.word	0x0800b959
 800b8f0:	0800ba17 	.word	0x0800ba17
 800b8f4:	0800b8a5 	.word	0x0800b8a5
 800b8f8:	0800b8a5 	.word	0x0800b8a5
 800b8fc:	0800ba57 	.word	0x0800ba57
 800b900:	0800b8a5 	.word	0x0800b8a5
 800b904:	0800b959 	.word	0x0800b959
 800b908:	0800b8a5 	.word	0x0800b8a5
 800b90c:	0800b8a5 	.word	0x0800b8a5
 800b910:	0800ba1f 	.word	0x0800ba1f
 800b914:	682b      	ldr	r3, [r5, #0]
 800b916:	1d1a      	adds	r2, r3, #4
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	602a      	str	r2, [r5, #0]
 800b91c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b924:	2301      	movs	r3, #1
 800b926:	e0a3      	b.n	800ba70 <_printf_i+0x1f4>
 800b928:	6820      	ldr	r0, [r4, #0]
 800b92a:	6829      	ldr	r1, [r5, #0]
 800b92c:	0606      	lsls	r6, r0, #24
 800b92e:	f101 0304 	add.w	r3, r1, #4
 800b932:	d50a      	bpl.n	800b94a <_printf_i+0xce>
 800b934:	680e      	ldr	r6, [r1, #0]
 800b936:	602b      	str	r3, [r5, #0]
 800b938:	2e00      	cmp	r6, #0
 800b93a:	da03      	bge.n	800b944 <_printf_i+0xc8>
 800b93c:	232d      	movs	r3, #45	; 0x2d
 800b93e:	4276      	negs	r6, r6
 800b940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b944:	485e      	ldr	r0, [pc, #376]	; (800bac0 <_printf_i+0x244>)
 800b946:	230a      	movs	r3, #10
 800b948:	e019      	b.n	800b97e <_printf_i+0x102>
 800b94a:	680e      	ldr	r6, [r1, #0]
 800b94c:	602b      	str	r3, [r5, #0]
 800b94e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b952:	bf18      	it	ne
 800b954:	b236      	sxthne	r6, r6
 800b956:	e7ef      	b.n	800b938 <_printf_i+0xbc>
 800b958:	682b      	ldr	r3, [r5, #0]
 800b95a:	6820      	ldr	r0, [r4, #0]
 800b95c:	1d19      	adds	r1, r3, #4
 800b95e:	6029      	str	r1, [r5, #0]
 800b960:	0601      	lsls	r1, r0, #24
 800b962:	d501      	bpl.n	800b968 <_printf_i+0xec>
 800b964:	681e      	ldr	r6, [r3, #0]
 800b966:	e002      	b.n	800b96e <_printf_i+0xf2>
 800b968:	0646      	lsls	r6, r0, #25
 800b96a:	d5fb      	bpl.n	800b964 <_printf_i+0xe8>
 800b96c:	881e      	ldrh	r6, [r3, #0]
 800b96e:	4854      	ldr	r0, [pc, #336]	; (800bac0 <_printf_i+0x244>)
 800b970:	2f6f      	cmp	r7, #111	; 0x6f
 800b972:	bf0c      	ite	eq
 800b974:	2308      	moveq	r3, #8
 800b976:	230a      	movne	r3, #10
 800b978:	2100      	movs	r1, #0
 800b97a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b97e:	6865      	ldr	r5, [r4, #4]
 800b980:	60a5      	str	r5, [r4, #8]
 800b982:	2d00      	cmp	r5, #0
 800b984:	bfa2      	ittt	ge
 800b986:	6821      	ldrge	r1, [r4, #0]
 800b988:	f021 0104 	bicge.w	r1, r1, #4
 800b98c:	6021      	strge	r1, [r4, #0]
 800b98e:	b90e      	cbnz	r6, 800b994 <_printf_i+0x118>
 800b990:	2d00      	cmp	r5, #0
 800b992:	d04d      	beq.n	800ba30 <_printf_i+0x1b4>
 800b994:	4615      	mov	r5, r2
 800b996:	fbb6 f1f3 	udiv	r1, r6, r3
 800b99a:	fb03 6711 	mls	r7, r3, r1, r6
 800b99e:	5dc7      	ldrb	r7, [r0, r7]
 800b9a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b9a4:	4637      	mov	r7, r6
 800b9a6:	42bb      	cmp	r3, r7
 800b9a8:	460e      	mov	r6, r1
 800b9aa:	d9f4      	bls.n	800b996 <_printf_i+0x11a>
 800b9ac:	2b08      	cmp	r3, #8
 800b9ae:	d10b      	bne.n	800b9c8 <_printf_i+0x14c>
 800b9b0:	6823      	ldr	r3, [r4, #0]
 800b9b2:	07de      	lsls	r6, r3, #31
 800b9b4:	d508      	bpl.n	800b9c8 <_printf_i+0x14c>
 800b9b6:	6923      	ldr	r3, [r4, #16]
 800b9b8:	6861      	ldr	r1, [r4, #4]
 800b9ba:	4299      	cmp	r1, r3
 800b9bc:	bfde      	ittt	le
 800b9be:	2330      	movle	r3, #48	; 0x30
 800b9c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b9c8:	1b52      	subs	r2, r2, r5
 800b9ca:	6122      	str	r2, [r4, #16]
 800b9cc:	f8cd a000 	str.w	sl, [sp]
 800b9d0:	464b      	mov	r3, r9
 800b9d2:	aa03      	add	r2, sp, #12
 800b9d4:	4621      	mov	r1, r4
 800b9d6:	4640      	mov	r0, r8
 800b9d8:	f7ff fee2 	bl	800b7a0 <_printf_common>
 800b9dc:	3001      	adds	r0, #1
 800b9de:	d14c      	bne.n	800ba7a <_printf_i+0x1fe>
 800b9e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9e4:	b004      	add	sp, #16
 800b9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ea:	4835      	ldr	r0, [pc, #212]	; (800bac0 <_printf_i+0x244>)
 800b9ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b9f0:	6829      	ldr	r1, [r5, #0]
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b9f8:	6029      	str	r1, [r5, #0]
 800b9fa:	061d      	lsls	r5, r3, #24
 800b9fc:	d514      	bpl.n	800ba28 <_printf_i+0x1ac>
 800b9fe:	07df      	lsls	r7, r3, #31
 800ba00:	bf44      	itt	mi
 800ba02:	f043 0320 	orrmi.w	r3, r3, #32
 800ba06:	6023      	strmi	r3, [r4, #0]
 800ba08:	b91e      	cbnz	r6, 800ba12 <_printf_i+0x196>
 800ba0a:	6823      	ldr	r3, [r4, #0]
 800ba0c:	f023 0320 	bic.w	r3, r3, #32
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	2310      	movs	r3, #16
 800ba14:	e7b0      	b.n	800b978 <_printf_i+0xfc>
 800ba16:	6823      	ldr	r3, [r4, #0]
 800ba18:	f043 0320 	orr.w	r3, r3, #32
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	2378      	movs	r3, #120	; 0x78
 800ba20:	4828      	ldr	r0, [pc, #160]	; (800bac4 <_printf_i+0x248>)
 800ba22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba26:	e7e3      	b.n	800b9f0 <_printf_i+0x174>
 800ba28:	0659      	lsls	r1, r3, #25
 800ba2a:	bf48      	it	mi
 800ba2c:	b2b6      	uxthmi	r6, r6
 800ba2e:	e7e6      	b.n	800b9fe <_printf_i+0x182>
 800ba30:	4615      	mov	r5, r2
 800ba32:	e7bb      	b.n	800b9ac <_printf_i+0x130>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	6826      	ldr	r6, [r4, #0]
 800ba38:	6961      	ldr	r1, [r4, #20]
 800ba3a:	1d18      	adds	r0, r3, #4
 800ba3c:	6028      	str	r0, [r5, #0]
 800ba3e:	0635      	lsls	r5, r6, #24
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	d501      	bpl.n	800ba48 <_printf_i+0x1cc>
 800ba44:	6019      	str	r1, [r3, #0]
 800ba46:	e002      	b.n	800ba4e <_printf_i+0x1d2>
 800ba48:	0670      	lsls	r0, r6, #25
 800ba4a:	d5fb      	bpl.n	800ba44 <_printf_i+0x1c8>
 800ba4c:	8019      	strh	r1, [r3, #0]
 800ba4e:	2300      	movs	r3, #0
 800ba50:	6123      	str	r3, [r4, #16]
 800ba52:	4615      	mov	r5, r2
 800ba54:	e7ba      	b.n	800b9cc <_printf_i+0x150>
 800ba56:	682b      	ldr	r3, [r5, #0]
 800ba58:	1d1a      	adds	r2, r3, #4
 800ba5a:	602a      	str	r2, [r5, #0]
 800ba5c:	681d      	ldr	r5, [r3, #0]
 800ba5e:	6862      	ldr	r2, [r4, #4]
 800ba60:	2100      	movs	r1, #0
 800ba62:	4628      	mov	r0, r5
 800ba64:	f7f4 fc3c 	bl	80002e0 <memchr>
 800ba68:	b108      	cbz	r0, 800ba6e <_printf_i+0x1f2>
 800ba6a:	1b40      	subs	r0, r0, r5
 800ba6c:	6060      	str	r0, [r4, #4]
 800ba6e:	6863      	ldr	r3, [r4, #4]
 800ba70:	6123      	str	r3, [r4, #16]
 800ba72:	2300      	movs	r3, #0
 800ba74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba78:	e7a8      	b.n	800b9cc <_printf_i+0x150>
 800ba7a:	6923      	ldr	r3, [r4, #16]
 800ba7c:	462a      	mov	r2, r5
 800ba7e:	4649      	mov	r1, r9
 800ba80:	4640      	mov	r0, r8
 800ba82:	47d0      	blx	sl
 800ba84:	3001      	adds	r0, #1
 800ba86:	d0ab      	beq.n	800b9e0 <_printf_i+0x164>
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	079b      	lsls	r3, r3, #30
 800ba8c:	d413      	bmi.n	800bab6 <_printf_i+0x23a>
 800ba8e:	68e0      	ldr	r0, [r4, #12]
 800ba90:	9b03      	ldr	r3, [sp, #12]
 800ba92:	4298      	cmp	r0, r3
 800ba94:	bfb8      	it	lt
 800ba96:	4618      	movlt	r0, r3
 800ba98:	e7a4      	b.n	800b9e4 <_printf_i+0x168>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	4632      	mov	r2, r6
 800ba9e:	4649      	mov	r1, r9
 800baa0:	4640      	mov	r0, r8
 800baa2:	47d0      	blx	sl
 800baa4:	3001      	adds	r0, #1
 800baa6:	d09b      	beq.n	800b9e0 <_printf_i+0x164>
 800baa8:	3501      	adds	r5, #1
 800baaa:	68e3      	ldr	r3, [r4, #12]
 800baac:	9903      	ldr	r1, [sp, #12]
 800baae:	1a5b      	subs	r3, r3, r1
 800bab0:	42ab      	cmp	r3, r5
 800bab2:	dcf2      	bgt.n	800ba9a <_printf_i+0x21e>
 800bab4:	e7eb      	b.n	800ba8e <_printf_i+0x212>
 800bab6:	2500      	movs	r5, #0
 800bab8:	f104 0619 	add.w	r6, r4, #25
 800babc:	e7f5      	b.n	800baaa <_printf_i+0x22e>
 800babe:	bf00      	nop
 800bac0:	0800d1e9 	.word	0x0800d1e9
 800bac4:	0800d1fa 	.word	0x0800d1fa

0800bac8 <iprintf>:
 800bac8:	b40f      	push	{r0, r1, r2, r3}
 800baca:	4b0a      	ldr	r3, [pc, #40]	; (800baf4 <iprintf+0x2c>)
 800bacc:	b513      	push	{r0, r1, r4, lr}
 800bace:	681c      	ldr	r4, [r3, #0]
 800bad0:	b124      	cbz	r4, 800badc <iprintf+0x14>
 800bad2:	69a3      	ldr	r3, [r4, #24]
 800bad4:	b913      	cbnz	r3, 800badc <iprintf+0x14>
 800bad6:	4620      	mov	r0, r4
 800bad8:	f000 fa76 	bl	800bfc8 <__sinit>
 800badc:	ab05      	add	r3, sp, #20
 800bade:	9a04      	ldr	r2, [sp, #16]
 800bae0:	68a1      	ldr	r1, [r4, #8]
 800bae2:	9301      	str	r3, [sp, #4]
 800bae4:	4620      	mov	r0, r4
 800bae6:	f7ff fd2b 	bl	800b540 <_vfiprintf_r>
 800baea:	b002      	add	sp, #8
 800baec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baf0:	b004      	add	sp, #16
 800baf2:	4770      	bx	lr
 800baf4:	24000034 	.word	0x24000034

0800baf8 <_puts_r>:
 800baf8:	b570      	push	{r4, r5, r6, lr}
 800bafa:	460e      	mov	r6, r1
 800bafc:	4605      	mov	r5, r0
 800bafe:	b118      	cbz	r0, 800bb08 <_puts_r+0x10>
 800bb00:	6983      	ldr	r3, [r0, #24]
 800bb02:	b90b      	cbnz	r3, 800bb08 <_puts_r+0x10>
 800bb04:	f000 fa60 	bl	800bfc8 <__sinit>
 800bb08:	69ab      	ldr	r3, [r5, #24]
 800bb0a:	68ac      	ldr	r4, [r5, #8]
 800bb0c:	b913      	cbnz	r3, 800bb14 <_puts_r+0x1c>
 800bb0e:	4628      	mov	r0, r5
 800bb10:	f000 fa5a 	bl	800bfc8 <__sinit>
 800bb14:	4b2c      	ldr	r3, [pc, #176]	; (800bbc8 <_puts_r+0xd0>)
 800bb16:	429c      	cmp	r4, r3
 800bb18:	d120      	bne.n	800bb5c <_puts_r+0x64>
 800bb1a:	686c      	ldr	r4, [r5, #4]
 800bb1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb1e:	07db      	lsls	r3, r3, #31
 800bb20:	d405      	bmi.n	800bb2e <_puts_r+0x36>
 800bb22:	89a3      	ldrh	r3, [r4, #12]
 800bb24:	0598      	lsls	r0, r3, #22
 800bb26:	d402      	bmi.n	800bb2e <_puts_r+0x36>
 800bb28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb2a:	f000 faeb 	bl	800c104 <__retarget_lock_acquire_recursive>
 800bb2e:	89a3      	ldrh	r3, [r4, #12]
 800bb30:	0719      	lsls	r1, r3, #28
 800bb32:	d51d      	bpl.n	800bb70 <_puts_r+0x78>
 800bb34:	6923      	ldr	r3, [r4, #16]
 800bb36:	b1db      	cbz	r3, 800bb70 <_puts_r+0x78>
 800bb38:	3e01      	subs	r6, #1
 800bb3a:	68a3      	ldr	r3, [r4, #8]
 800bb3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bb40:	3b01      	subs	r3, #1
 800bb42:	60a3      	str	r3, [r4, #8]
 800bb44:	bb39      	cbnz	r1, 800bb96 <_puts_r+0x9e>
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	da38      	bge.n	800bbbc <_puts_r+0xc4>
 800bb4a:	4622      	mov	r2, r4
 800bb4c:	210a      	movs	r1, #10
 800bb4e:	4628      	mov	r0, r5
 800bb50:	f000 f858 	bl	800bc04 <__swbuf_r>
 800bb54:	3001      	adds	r0, #1
 800bb56:	d011      	beq.n	800bb7c <_puts_r+0x84>
 800bb58:	250a      	movs	r5, #10
 800bb5a:	e011      	b.n	800bb80 <_puts_r+0x88>
 800bb5c:	4b1b      	ldr	r3, [pc, #108]	; (800bbcc <_puts_r+0xd4>)
 800bb5e:	429c      	cmp	r4, r3
 800bb60:	d101      	bne.n	800bb66 <_puts_r+0x6e>
 800bb62:	68ac      	ldr	r4, [r5, #8]
 800bb64:	e7da      	b.n	800bb1c <_puts_r+0x24>
 800bb66:	4b1a      	ldr	r3, [pc, #104]	; (800bbd0 <_puts_r+0xd8>)
 800bb68:	429c      	cmp	r4, r3
 800bb6a:	bf08      	it	eq
 800bb6c:	68ec      	ldreq	r4, [r5, #12]
 800bb6e:	e7d5      	b.n	800bb1c <_puts_r+0x24>
 800bb70:	4621      	mov	r1, r4
 800bb72:	4628      	mov	r0, r5
 800bb74:	f000 f898 	bl	800bca8 <__swsetup_r>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d0dd      	beq.n	800bb38 <_puts_r+0x40>
 800bb7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bb80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb82:	07da      	lsls	r2, r3, #31
 800bb84:	d405      	bmi.n	800bb92 <_puts_r+0x9a>
 800bb86:	89a3      	ldrh	r3, [r4, #12]
 800bb88:	059b      	lsls	r3, r3, #22
 800bb8a:	d402      	bmi.n	800bb92 <_puts_r+0x9a>
 800bb8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb8e:	f000 faba 	bl	800c106 <__retarget_lock_release_recursive>
 800bb92:	4628      	mov	r0, r5
 800bb94:	bd70      	pop	{r4, r5, r6, pc}
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	da04      	bge.n	800bba4 <_puts_r+0xac>
 800bb9a:	69a2      	ldr	r2, [r4, #24]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	dc06      	bgt.n	800bbae <_puts_r+0xb6>
 800bba0:	290a      	cmp	r1, #10
 800bba2:	d004      	beq.n	800bbae <_puts_r+0xb6>
 800bba4:	6823      	ldr	r3, [r4, #0]
 800bba6:	1c5a      	adds	r2, r3, #1
 800bba8:	6022      	str	r2, [r4, #0]
 800bbaa:	7019      	strb	r1, [r3, #0]
 800bbac:	e7c5      	b.n	800bb3a <_puts_r+0x42>
 800bbae:	4622      	mov	r2, r4
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	f000 f827 	bl	800bc04 <__swbuf_r>
 800bbb6:	3001      	adds	r0, #1
 800bbb8:	d1bf      	bne.n	800bb3a <_puts_r+0x42>
 800bbba:	e7df      	b.n	800bb7c <_puts_r+0x84>
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	250a      	movs	r5, #10
 800bbc0:	1c5a      	adds	r2, r3, #1
 800bbc2:	6022      	str	r2, [r4, #0]
 800bbc4:	701d      	strb	r5, [r3, #0]
 800bbc6:	e7db      	b.n	800bb80 <_puts_r+0x88>
 800bbc8:	0800d22c 	.word	0x0800d22c
 800bbcc:	0800d24c 	.word	0x0800d24c
 800bbd0:	0800d20c 	.word	0x0800d20c

0800bbd4 <puts>:
 800bbd4:	4b02      	ldr	r3, [pc, #8]	; (800bbe0 <puts+0xc>)
 800bbd6:	4601      	mov	r1, r0
 800bbd8:	6818      	ldr	r0, [r3, #0]
 800bbda:	f7ff bf8d 	b.w	800baf8 <_puts_r>
 800bbde:	bf00      	nop
 800bbe0:	24000034 	.word	0x24000034

0800bbe4 <_sbrk_r>:
 800bbe4:	b538      	push	{r3, r4, r5, lr}
 800bbe6:	4d06      	ldr	r5, [pc, #24]	; (800bc00 <_sbrk_r+0x1c>)
 800bbe8:	2300      	movs	r3, #0
 800bbea:	4604      	mov	r4, r0
 800bbec:	4608      	mov	r0, r1
 800bbee:	602b      	str	r3, [r5, #0]
 800bbf0:	f7f8 fae0 	bl	80041b4 <_sbrk>
 800bbf4:	1c43      	adds	r3, r0, #1
 800bbf6:	d102      	bne.n	800bbfe <_sbrk_r+0x1a>
 800bbf8:	682b      	ldr	r3, [r5, #0]
 800bbfa:	b103      	cbz	r3, 800bbfe <_sbrk_r+0x1a>
 800bbfc:	6023      	str	r3, [r4, #0]
 800bbfe:	bd38      	pop	{r3, r4, r5, pc}
 800bc00:	24000c60 	.word	0x24000c60

0800bc04 <__swbuf_r>:
 800bc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc06:	460e      	mov	r6, r1
 800bc08:	4614      	mov	r4, r2
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	b118      	cbz	r0, 800bc16 <__swbuf_r+0x12>
 800bc0e:	6983      	ldr	r3, [r0, #24]
 800bc10:	b90b      	cbnz	r3, 800bc16 <__swbuf_r+0x12>
 800bc12:	f000 f9d9 	bl	800bfc8 <__sinit>
 800bc16:	4b21      	ldr	r3, [pc, #132]	; (800bc9c <__swbuf_r+0x98>)
 800bc18:	429c      	cmp	r4, r3
 800bc1a:	d12b      	bne.n	800bc74 <__swbuf_r+0x70>
 800bc1c:	686c      	ldr	r4, [r5, #4]
 800bc1e:	69a3      	ldr	r3, [r4, #24]
 800bc20:	60a3      	str	r3, [r4, #8]
 800bc22:	89a3      	ldrh	r3, [r4, #12]
 800bc24:	071a      	lsls	r2, r3, #28
 800bc26:	d52f      	bpl.n	800bc88 <__swbuf_r+0x84>
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	b36b      	cbz	r3, 800bc88 <__swbuf_r+0x84>
 800bc2c:	6923      	ldr	r3, [r4, #16]
 800bc2e:	6820      	ldr	r0, [r4, #0]
 800bc30:	1ac0      	subs	r0, r0, r3
 800bc32:	6963      	ldr	r3, [r4, #20]
 800bc34:	b2f6      	uxtb	r6, r6
 800bc36:	4283      	cmp	r3, r0
 800bc38:	4637      	mov	r7, r6
 800bc3a:	dc04      	bgt.n	800bc46 <__swbuf_r+0x42>
 800bc3c:	4621      	mov	r1, r4
 800bc3e:	4628      	mov	r0, r5
 800bc40:	f000 f92e 	bl	800bea0 <_fflush_r>
 800bc44:	bb30      	cbnz	r0, 800bc94 <__swbuf_r+0x90>
 800bc46:	68a3      	ldr	r3, [r4, #8]
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	60a3      	str	r3, [r4, #8]
 800bc4c:	6823      	ldr	r3, [r4, #0]
 800bc4e:	1c5a      	adds	r2, r3, #1
 800bc50:	6022      	str	r2, [r4, #0]
 800bc52:	701e      	strb	r6, [r3, #0]
 800bc54:	6963      	ldr	r3, [r4, #20]
 800bc56:	3001      	adds	r0, #1
 800bc58:	4283      	cmp	r3, r0
 800bc5a:	d004      	beq.n	800bc66 <__swbuf_r+0x62>
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	07db      	lsls	r3, r3, #31
 800bc60:	d506      	bpl.n	800bc70 <__swbuf_r+0x6c>
 800bc62:	2e0a      	cmp	r6, #10
 800bc64:	d104      	bne.n	800bc70 <__swbuf_r+0x6c>
 800bc66:	4621      	mov	r1, r4
 800bc68:	4628      	mov	r0, r5
 800bc6a:	f000 f919 	bl	800bea0 <_fflush_r>
 800bc6e:	b988      	cbnz	r0, 800bc94 <__swbuf_r+0x90>
 800bc70:	4638      	mov	r0, r7
 800bc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc74:	4b0a      	ldr	r3, [pc, #40]	; (800bca0 <__swbuf_r+0x9c>)
 800bc76:	429c      	cmp	r4, r3
 800bc78:	d101      	bne.n	800bc7e <__swbuf_r+0x7a>
 800bc7a:	68ac      	ldr	r4, [r5, #8]
 800bc7c:	e7cf      	b.n	800bc1e <__swbuf_r+0x1a>
 800bc7e:	4b09      	ldr	r3, [pc, #36]	; (800bca4 <__swbuf_r+0xa0>)
 800bc80:	429c      	cmp	r4, r3
 800bc82:	bf08      	it	eq
 800bc84:	68ec      	ldreq	r4, [r5, #12]
 800bc86:	e7ca      	b.n	800bc1e <__swbuf_r+0x1a>
 800bc88:	4621      	mov	r1, r4
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f000 f80c 	bl	800bca8 <__swsetup_r>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d0cb      	beq.n	800bc2c <__swbuf_r+0x28>
 800bc94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bc98:	e7ea      	b.n	800bc70 <__swbuf_r+0x6c>
 800bc9a:	bf00      	nop
 800bc9c:	0800d22c 	.word	0x0800d22c
 800bca0:	0800d24c 	.word	0x0800d24c
 800bca4:	0800d20c 	.word	0x0800d20c

0800bca8 <__swsetup_r>:
 800bca8:	4b32      	ldr	r3, [pc, #200]	; (800bd74 <__swsetup_r+0xcc>)
 800bcaa:	b570      	push	{r4, r5, r6, lr}
 800bcac:	681d      	ldr	r5, [r3, #0]
 800bcae:	4606      	mov	r6, r0
 800bcb0:	460c      	mov	r4, r1
 800bcb2:	b125      	cbz	r5, 800bcbe <__swsetup_r+0x16>
 800bcb4:	69ab      	ldr	r3, [r5, #24]
 800bcb6:	b913      	cbnz	r3, 800bcbe <__swsetup_r+0x16>
 800bcb8:	4628      	mov	r0, r5
 800bcba:	f000 f985 	bl	800bfc8 <__sinit>
 800bcbe:	4b2e      	ldr	r3, [pc, #184]	; (800bd78 <__swsetup_r+0xd0>)
 800bcc0:	429c      	cmp	r4, r3
 800bcc2:	d10f      	bne.n	800bce4 <__swsetup_r+0x3c>
 800bcc4:	686c      	ldr	r4, [r5, #4]
 800bcc6:	89a3      	ldrh	r3, [r4, #12]
 800bcc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bccc:	0719      	lsls	r1, r3, #28
 800bcce:	d42c      	bmi.n	800bd2a <__swsetup_r+0x82>
 800bcd0:	06dd      	lsls	r5, r3, #27
 800bcd2:	d411      	bmi.n	800bcf8 <__swsetup_r+0x50>
 800bcd4:	2309      	movs	r3, #9
 800bcd6:	6033      	str	r3, [r6, #0]
 800bcd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bcdc:	81a3      	strh	r3, [r4, #12]
 800bcde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bce2:	e03e      	b.n	800bd62 <__swsetup_r+0xba>
 800bce4:	4b25      	ldr	r3, [pc, #148]	; (800bd7c <__swsetup_r+0xd4>)
 800bce6:	429c      	cmp	r4, r3
 800bce8:	d101      	bne.n	800bcee <__swsetup_r+0x46>
 800bcea:	68ac      	ldr	r4, [r5, #8]
 800bcec:	e7eb      	b.n	800bcc6 <__swsetup_r+0x1e>
 800bcee:	4b24      	ldr	r3, [pc, #144]	; (800bd80 <__swsetup_r+0xd8>)
 800bcf0:	429c      	cmp	r4, r3
 800bcf2:	bf08      	it	eq
 800bcf4:	68ec      	ldreq	r4, [r5, #12]
 800bcf6:	e7e6      	b.n	800bcc6 <__swsetup_r+0x1e>
 800bcf8:	0758      	lsls	r0, r3, #29
 800bcfa:	d512      	bpl.n	800bd22 <__swsetup_r+0x7a>
 800bcfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcfe:	b141      	cbz	r1, 800bd12 <__swsetup_r+0x6a>
 800bd00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd04:	4299      	cmp	r1, r3
 800bd06:	d002      	beq.n	800bd0e <__swsetup_r+0x66>
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f7ff fb0f 	bl	800b32c <_free_r>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	6363      	str	r3, [r4, #52]	; 0x34
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd18:	81a3      	strh	r3, [r4, #12]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	6063      	str	r3, [r4, #4]
 800bd1e:	6923      	ldr	r3, [r4, #16]
 800bd20:	6023      	str	r3, [r4, #0]
 800bd22:	89a3      	ldrh	r3, [r4, #12]
 800bd24:	f043 0308 	orr.w	r3, r3, #8
 800bd28:	81a3      	strh	r3, [r4, #12]
 800bd2a:	6923      	ldr	r3, [r4, #16]
 800bd2c:	b94b      	cbnz	r3, 800bd42 <__swsetup_r+0x9a>
 800bd2e:	89a3      	ldrh	r3, [r4, #12]
 800bd30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd38:	d003      	beq.n	800bd42 <__swsetup_r+0x9a>
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f000 fa09 	bl	800c154 <__smakebuf_r>
 800bd42:	89a0      	ldrh	r0, [r4, #12]
 800bd44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd48:	f010 0301 	ands.w	r3, r0, #1
 800bd4c:	d00a      	beq.n	800bd64 <__swsetup_r+0xbc>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	60a3      	str	r3, [r4, #8]
 800bd52:	6963      	ldr	r3, [r4, #20]
 800bd54:	425b      	negs	r3, r3
 800bd56:	61a3      	str	r3, [r4, #24]
 800bd58:	6923      	ldr	r3, [r4, #16]
 800bd5a:	b943      	cbnz	r3, 800bd6e <__swsetup_r+0xc6>
 800bd5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd60:	d1ba      	bne.n	800bcd8 <__swsetup_r+0x30>
 800bd62:	bd70      	pop	{r4, r5, r6, pc}
 800bd64:	0781      	lsls	r1, r0, #30
 800bd66:	bf58      	it	pl
 800bd68:	6963      	ldrpl	r3, [r4, #20]
 800bd6a:	60a3      	str	r3, [r4, #8]
 800bd6c:	e7f4      	b.n	800bd58 <__swsetup_r+0xb0>
 800bd6e:	2000      	movs	r0, #0
 800bd70:	e7f7      	b.n	800bd62 <__swsetup_r+0xba>
 800bd72:	bf00      	nop
 800bd74:	24000034 	.word	0x24000034
 800bd78:	0800d22c 	.word	0x0800d22c
 800bd7c:	0800d24c 	.word	0x0800d24c
 800bd80:	0800d20c 	.word	0x0800d20c

0800bd84 <abort>:
 800bd84:	b508      	push	{r3, lr}
 800bd86:	2006      	movs	r0, #6
 800bd88:	f000 fa58 	bl	800c23c <raise>
 800bd8c:	2001      	movs	r0, #1
 800bd8e:	f7f8 f999 	bl	80040c4 <_exit>
	...

0800bd94 <__sflush_r>:
 800bd94:	898a      	ldrh	r2, [r1, #12]
 800bd96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd9a:	4605      	mov	r5, r0
 800bd9c:	0710      	lsls	r0, r2, #28
 800bd9e:	460c      	mov	r4, r1
 800bda0:	d458      	bmi.n	800be54 <__sflush_r+0xc0>
 800bda2:	684b      	ldr	r3, [r1, #4]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	dc05      	bgt.n	800bdb4 <__sflush_r+0x20>
 800bda8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	dc02      	bgt.n	800bdb4 <__sflush_r+0x20>
 800bdae:	2000      	movs	r0, #0
 800bdb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdb6:	2e00      	cmp	r6, #0
 800bdb8:	d0f9      	beq.n	800bdae <__sflush_r+0x1a>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bdc0:	682f      	ldr	r7, [r5, #0]
 800bdc2:	602b      	str	r3, [r5, #0]
 800bdc4:	d032      	beq.n	800be2c <__sflush_r+0x98>
 800bdc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdc8:	89a3      	ldrh	r3, [r4, #12]
 800bdca:	075a      	lsls	r2, r3, #29
 800bdcc:	d505      	bpl.n	800bdda <__sflush_r+0x46>
 800bdce:	6863      	ldr	r3, [r4, #4]
 800bdd0:	1ac0      	subs	r0, r0, r3
 800bdd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdd4:	b10b      	cbz	r3, 800bdda <__sflush_r+0x46>
 800bdd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdd8:	1ac0      	subs	r0, r0, r3
 800bdda:	2300      	movs	r3, #0
 800bddc:	4602      	mov	r2, r0
 800bdde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bde0:	6a21      	ldr	r1, [r4, #32]
 800bde2:	4628      	mov	r0, r5
 800bde4:	47b0      	blx	r6
 800bde6:	1c43      	adds	r3, r0, #1
 800bde8:	89a3      	ldrh	r3, [r4, #12]
 800bdea:	d106      	bne.n	800bdfa <__sflush_r+0x66>
 800bdec:	6829      	ldr	r1, [r5, #0]
 800bdee:	291d      	cmp	r1, #29
 800bdf0:	d82c      	bhi.n	800be4c <__sflush_r+0xb8>
 800bdf2:	4a2a      	ldr	r2, [pc, #168]	; (800be9c <__sflush_r+0x108>)
 800bdf4:	40ca      	lsrs	r2, r1
 800bdf6:	07d6      	lsls	r6, r2, #31
 800bdf8:	d528      	bpl.n	800be4c <__sflush_r+0xb8>
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	6062      	str	r2, [r4, #4]
 800bdfe:	04d9      	lsls	r1, r3, #19
 800be00:	6922      	ldr	r2, [r4, #16]
 800be02:	6022      	str	r2, [r4, #0]
 800be04:	d504      	bpl.n	800be10 <__sflush_r+0x7c>
 800be06:	1c42      	adds	r2, r0, #1
 800be08:	d101      	bne.n	800be0e <__sflush_r+0x7a>
 800be0a:	682b      	ldr	r3, [r5, #0]
 800be0c:	b903      	cbnz	r3, 800be10 <__sflush_r+0x7c>
 800be0e:	6560      	str	r0, [r4, #84]	; 0x54
 800be10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be12:	602f      	str	r7, [r5, #0]
 800be14:	2900      	cmp	r1, #0
 800be16:	d0ca      	beq.n	800bdae <__sflush_r+0x1a>
 800be18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be1c:	4299      	cmp	r1, r3
 800be1e:	d002      	beq.n	800be26 <__sflush_r+0x92>
 800be20:	4628      	mov	r0, r5
 800be22:	f7ff fa83 	bl	800b32c <_free_r>
 800be26:	2000      	movs	r0, #0
 800be28:	6360      	str	r0, [r4, #52]	; 0x34
 800be2a:	e7c1      	b.n	800bdb0 <__sflush_r+0x1c>
 800be2c:	6a21      	ldr	r1, [r4, #32]
 800be2e:	2301      	movs	r3, #1
 800be30:	4628      	mov	r0, r5
 800be32:	47b0      	blx	r6
 800be34:	1c41      	adds	r1, r0, #1
 800be36:	d1c7      	bne.n	800bdc8 <__sflush_r+0x34>
 800be38:	682b      	ldr	r3, [r5, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d0c4      	beq.n	800bdc8 <__sflush_r+0x34>
 800be3e:	2b1d      	cmp	r3, #29
 800be40:	d001      	beq.n	800be46 <__sflush_r+0xb2>
 800be42:	2b16      	cmp	r3, #22
 800be44:	d101      	bne.n	800be4a <__sflush_r+0xb6>
 800be46:	602f      	str	r7, [r5, #0]
 800be48:	e7b1      	b.n	800bdae <__sflush_r+0x1a>
 800be4a:	89a3      	ldrh	r3, [r4, #12]
 800be4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be50:	81a3      	strh	r3, [r4, #12]
 800be52:	e7ad      	b.n	800bdb0 <__sflush_r+0x1c>
 800be54:	690f      	ldr	r7, [r1, #16]
 800be56:	2f00      	cmp	r7, #0
 800be58:	d0a9      	beq.n	800bdae <__sflush_r+0x1a>
 800be5a:	0793      	lsls	r3, r2, #30
 800be5c:	680e      	ldr	r6, [r1, #0]
 800be5e:	bf08      	it	eq
 800be60:	694b      	ldreq	r3, [r1, #20]
 800be62:	600f      	str	r7, [r1, #0]
 800be64:	bf18      	it	ne
 800be66:	2300      	movne	r3, #0
 800be68:	eba6 0807 	sub.w	r8, r6, r7
 800be6c:	608b      	str	r3, [r1, #8]
 800be6e:	f1b8 0f00 	cmp.w	r8, #0
 800be72:	dd9c      	ble.n	800bdae <__sflush_r+0x1a>
 800be74:	6a21      	ldr	r1, [r4, #32]
 800be76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be78:	4643      	mov	r3, r8
 800be7a:	463a      	mov	r2, r7
 800be7c:	4628      	mov	r0, r5
 800be7e:	47b0      	blx	r6
 800be80:	2800      	cmp	r0, #0
 800be82:	dc06      	bgt.n	800be92 <__sflush_r+0xfe>
 800be84:	89a3      	ldrh	r3, [r4, #12]
 800be86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be8a:	81a3      	strh	r3, [r4, #12]
 800be8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be90:	e78e      	b.n	800bdb0 <__sflush_r+0x1c>
 800be92:	4407      	add	r7, r0
 800be94:	eba8 0800 	sub.w	r8, r8, r0
 800be98:	e7e9      	b.n	800be6e <__sflush_r+0xda>
 800be9a:	bf00      	nop
 800be9c:	20400001 	.word	0x20400001

0800bea0 <_fflush_r>:
 800bea0:	b538      	push	{r3, r4, r5, lr}
 800bea2:	690b      	ldr	r3, [r1, #16]
 800bea4:	4605      	mov	r5, r0
 800bea6:	460c      	mov	r4, r1
 800bea8:	b913      	cbnz	r3, 800beb0 <_fflush_r+0x10>
 800beaa:	2500      	movs	r5, #0
 800beac:	4628      	mov	r0, r5
 800beae:	bd38      	pop	{r3, r4, r5, pc}
 800beb0:	b118      	cbz	r0, 800beba <_fflush_r+0x1a>
 800beb2:	6983      	ldr	r3, [r0, #24]
 800beb4:	b90b      	cbnz	r3, 800beba <_fflush_r+0x1a>
 800beb6:	f000 f887 	bl	800bfc8 <__sinit>
 800beba:	4b14      	ldr	r3, [pc, #80]	; (800bf0c <_fflush_r+0x6c>)
 800bebc:	429c      	cmp	r4, r3
 800bebe:	d11b      	bne.n	800bef8 <_fflush_r+0x58>
 800bec0:	686c      	ldr	r4, [r5, #4]
 800bec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d0ef      	beq.n	800beaa <_fflush_r+0xa>
 800beca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800becc:	07d0      	lsls	r0, r2, #31
 800bece:	d404      	bmi.n	800beda <_fflush_r+0x3a>
 800bed0:	0599      	lsls	r1, r3, #22
 800bed2:	d402      	bmi.n	800beda <_fflush_r+0x3a>
 800bed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bed6:	f000 f915 	bl	800c104 <__retarget_lock_acquire_recursive>
 800beda:	4628      	mov	r0, r5
 800bedc:	4621      	mov	r1, r4
 800bede:	f7ff ff59 	bl	800bd94 <__sflush_r>
 800bee2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bee4:	07da      	lsls	r2, r3, #31
 800bee6:	4605      	mov	r5, r0
 800bee8:	d4e0      	bmi.n	800beac <_fflush_r+0xc>
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	059b      	lsls	r3, r3, #22
 800beee:	d4dd      	bmi.n	800beac <_fflush_r+0xc>
 800bef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bef2:	f000 f908 	bl	800c106 <__retarget_lock_release_recursive>
 800bef6:	e7d9      	b.n	800beac <_fflush_r+0xc>
 800bef8:	4b05      	ldr	r3, [pc, #20]	; (800bf10 <_fflush_r+0x70>)
 800befa:	429c      	cmp	r4, r3
 800befc:	d101      	bne.n	800bf02 <_fflush_r+0x62>
 800befe:	68ac      	ldr	r4, [r5, #8]
 800bf00:	e7df      	b.n	800bec2 <_fflush_r+0x22>
 800bf02:	4b04      	ldr	r3, [pc, #16]	; (800bf14 <_fflush_r+0x74>)
 800bf04:	429c      	cmp	r4, r3
 800bf06:	bf08      	it	eq
 800bf08:	68ec      	ldreq	r4, [r5, #12]
 800bf0a:	e7da      	b.n	800bec2 <_fflush_r+0x22>
 800bf0c:	0800d22c 	.word	0x0800d22c
 800bf10:	0800d24c 	.word	0x0800d24c
 800bf14:	0800d20c 	.word	0x0800d20c

0800bf18 <std>:
 800bf18:	2300      	movs	r3, #0
 800bf1a:	b510      	push	{r4, lr}
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf26:	6083      	str	r3, [r0, #8]
 800bf28:	8181      	strh	r1, [r0, #12]
 800bf2a:	6643      	str	r3, [r0, #100]	; 0x64
 800bf2c:	81c2      	strh	r2, [r0, #14]
 800bf2e:	6183      	str	r3, [r0, #24]
 800bf30:	4619      	mov	r1, r3
 800bf32:	2208      	movs	r2, #8
 800bf34:	305c      	adds	r0, #92	; 0x5c
 800bf36:	f7ff f9f1 	bl	800b31c <memset>
 800bf3a:	4b05      	ldr	r3, [pc, #20]	; (800bf50 <std+0x38>)
 800bf3c:	6263      	str	r3, [r4, #36]	; 0x24
 800bf3e:	4b05      	ldr	r3, [pc, #20]	; (800bf54 <std+0x3c>)
 800bf40:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf42:	4b05      	ldr	r3, [pc, #20]	; (800bf58 <std+0x40>)
 800bf44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf46:	4b05      	ldr	r3, [pc, #20]	; (800bf5c <std+0x44>)
 800bf48:	6224      	str	r4, [r4, #32]
 800bf4a:	6323      	str	r3, [r4, #48]	; 0x30
 800bf4c:	bd10      	pop	{r4, pc}
 800bf4e:	bf00      	nop
 800bf50:	0800c275 	.word	0x0800c275
 800bf54:	0800c297 	.word	0x0800c297
 800bf58:	0800c2cf 	.word	0x0800c2cf
 800bf5c:	0800c2f3 	.word	0x0800c2f3

0800bf60 <_cleanup_r>:
 800bf60:	4901      	ldr	r1, [pc, #4]	; (800bf68 <_cleanup_r+0x8>)
 800bf62:	f000 b8af 	b.w	800c0c4 <_fwalk_reent>
 800bf66:	bf00      	nop
 800bf68:	0800bea1 	.word	0x0800bea1

0800bf6c <__sfmoreglue>:
 800bf6c:	b570      	push	{r4, r5, r6, lr}
 800bf6e:	2268      	movs	r2, #104	; 0x68
 800bf70:	1e4d      	subs	r5, r1, #1
 800bf72:	4355      	muls	r5, r2
 800bf74:	460e      	mov	r6, r1
 800bf76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf7a:	f7ff fa43 	bl	800b404 <_malloc_r>
 800bf7e:	4604      	mov	r4, r0
 800bf80:	b140      	cbz	r0, 800bf94 <__sfmoreglue+0x28>
 800bf82:	2100      	movs	r1, #0
 800bf84:	e9c0 1600 	strd	r1, r6, [r0]
 800bf88:	300c      	adds	r0, #12
 800bf8a:	60a0      	str	r0, [r4, #8]
 800bf8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf90:	f7ff f9c4 	bl	800b31c <memset>
 800bf94:	4620      	mov	r0, r4
 800bf96:	bd70      	pop	{r4, r5, r6, pc}

0800bf98 <__sfp_lock_acquire>:
 800bf98:	4801      	ldr	r0, [pc, #4]	; (800bfa0 <__sfp_lock_acquire+0x8>)
 800bf9a:	f000 b8b3 	b.w	800c104 <__retarget_lock_acquire_recursive>
 800bf9e:	bf00      	nop
 800bfa0:	24000c5d 	.word	0x24000c5d

0800bfa4 <__sfp_lock_release>:
 800bfa4:	4801      	ldr	r0, [pc, #4]	; (800bfac <__sfp_lock_release+0x8>)
 800bfa6:	f000 b8ae 	b.w	800c106 <__retarget_lock_release_recursive>
 800bfaa:	bf00      	nop
 800bfac:	24000c5d 	.word	0x24000c5d

0800bfb0 <__sinit_lock_acquire>:
 800bfb0:	4801      	ldr	r0, [pc, #4]	; (800bfb8 <__sinit_lock_acquire+0x8>)
 800bfb2:	f000 b8a7 	b.w	800c104 <__retarget_lock_acquire_recursive>
 800bfb6:	bf00      	nop
 800bfb8:	24000c5e 	.word	0x24000c5e

0800bfbc <__sinit_lock_release>:
 800bfbc:	4801      	ldr	r0, [pc, #4]	; (800bfc4 <__sinit_lock_release+0x8>)
 800bfbe:	f000 b8a2 	b.w	800c106 <__retarget_lock_release_recursive>
 800bfc2:	bf00      	nop
 800bfc4:	24000c5e 	.word	0x24000c5e

0800bfc8 <__sinit>:
 800bfc8:	b510      	push	{r4, lr}
 800bfca:	4604      	mov	r4, r0
 800bfcc:	f7ff fff0 	bl	800bfb0 <__sinit_lock_acquire>
 800bfd0:	69a3      	ldr	r3, [r4, #24]
 800bfd2:	b11b      	cbz	r3, 800bfdc <__sinit+0x14>
 800bfd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfd8:	f7ff bff0 	b.w	800bfbc <__sinit_lock_release>
 800bfdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bfe0:	6523      	str	r3, [r4, #80]	; 0x50
 800bfe2:	4b13      	ldr	r3, [pc, #76]	; (800c030 <__sinit+0x68>)
 800bfe4:	4a13      	ldr	r2, [pc, #76]	; (800c034 <__sinit+0x6c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	62a2      	str	r2, [r4, #40]	; 0x28
 800bfea:	42a3      	cmp	r3, r4
 800bfec:	bf04      	itt	eq
 800bfee:	2301      	moveq	r3, #1
 800bff0:	61a3      	streq	r3, [r4, #24]
 800bff2:	4620      	mov	r0, r4
 800bff4:	f000 f820 	bl	800c038 <__sfp>
 800bff8:	6060      	str	r0, [r4, #4]
 800bffa:	4620      	mov	r0, r4
 800bffc:	f000 f81c 	bl	800c038 <__sfp>
 800c000:	60a0      	str	r0, [r4, #8]
 800c002:	4620      	mov	r0, r4
 800c004:	f000 f818 	bl	800c038 <__sfp>
 800c008:	2200      	movs	r2, #0
 800c00a:	60e0      	str	r0, [r4, #12]
 800c00c:	2104      	movs	r1, #4
 800c00e:	6860      	ldr	r0, [r4, #4]
 800c010:	f7ff ff82 	bl	800bf18 <std>
 800c014:	68a0      	ldr	r0, [r4, #8]
 800c016:	2201      	movs	r2, #1
 800c018:	2109      	movs	r1, #9
 800c01a:	f7ff ff7d 	bl	800bf18 <std>
 800c01e:	68e0      	ldr	r0, [r4, #12]
 800c020:	2202      	movs	r2, #2
 800c022:	2112      	movs	r1, #18
 800c024:	f7ff ff78 	bl	800bf18 <std>
 800c028:	2301      	movs	r3, #1
 800c02a:	61a3      	str	r3, [r4, #24]
 800c02c:	e7d2      	b.n	800bfd4 <__sinit+0xc>
 800c02e:	bf00      	nop
 800c030:	0800d1d4 	.word	0x0800d1d4
 800c034:	0800bf61 	.word	0x0800bf61

0800c038 <__sfp>:
 800c038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c03a:	4607      	mov	r7, r0
 800c03c:	f7ff ffac 	bl	800bf98 <__sfp_lock_acquire>
 800c040:	4b1e      	ldr	r3, [pc, #120]	; (800c0bc <__sfp+0x84>)
 800c042:	681e      	ldr	r6, [r3, #0]
 800c044:	69b3      	ldr	r3, [r6, #24]
 800c046:	b913      	cbnz	r3, 800c04e <__sfp+0x16>
 800c048:	4630      	mov	r0, r6
 800c04a:	f7ff ffbd 	bl	800bfc8 <__sinit>
 800c04e:	3648      	adds	r6, #72	; 0x48
 800c050:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c054:	3b01      	subs	r3, #1
 800c056:	d503      	bpl.n	800c060 <__sfp+0x28>
 800c058:	6833      	ldr	r3, [r6, #0]
 800c05a:	b30b      	cbz	r3, 800c0a0 <__sfp+0x68>
 800c05c:	6836      	ldr	r6, [r6, #0]
 800c05e:	e7f7      	b.n	800c050 <__sfp+0x18>
 800c060:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c064:	b9d5      	cbnz	r5, 800c09c <__sfp+0x64>
 800c066:	4b16      	ldr	r3, [pc, #88]	; (800c0c0 <__sfp+0x88>)
 800c068:	60e3      	str	r3, [r4, #12]
 800c06a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c06e:	6665      	str	r5, [r4, #100]	; 0x64
 800c070:	f000 f847 	bl	800c102 <__retarget_lock_init_recursive>
 800c074:	f7ff ff96 	bl	800bfa4 <__sfp_lock_release>
 800c078:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c07c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c080:	6025      	str	r5, [r4, #0]
 800c082:	61a5      	str	r5, [r4, #24]
 800c084:	2208      	movs	r2, #8
 800c086:	4629      	mov	r1, r5
 800c088:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c08c:	f7ff f946 	bl	800b31c <memset>
 800c090:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c094:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c098:	4620      	mov	r0, r4
 800c09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c09c:	3468      	adds	r4, #104	; 0x68
 800c09e:	e7d9      	b.n	800c054 <__sfp+0x1c>
 800c0a0:	2104      	movs	r1, #4
 800c0a2:	4638      	mov	r0, r7
 800c0a4:	f7ff ff62 	bl	800bf6c <__sfmoreglue>
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	6030      	str	r0, [r6, #0]
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d1d5      	bne.n	800c05c <__sfp+0x24>
 800c0b0:	f7ff ff78 	bl	800bfa4 <__sfp_lock_release>
 800c0b4:	230c      	movs	r3, #12
 800c0b6:	603b      	str	r3, [r7, #0]
 800c0b8:	e7ee      	b.n	800c098 <__sfp+0x60>
 800c0ba:	bf00      	nop
 800c0bc:	0800d1d4 	.word	0x0800d1d4
 800c0c0:	ffff0001 	.word	0xffff0001

0800c0c4 <_fwalk_reent>:
 800c0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0c8:	4606      	mov	r6, r0
 800c0ca:	4688      	mov	r8, r1
 800c0cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c0d0:	2700      	movs	r7, #0
 800c0d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0d6:	f1b9 0901 	subs.w	r9, r9, #1
 800c0da:	d505      	bpl.n	800c0e8 <_fwalk_reent+0x24>
 800c0dc:	6824      	ldr	r4, [r4, #0]
 800c0de:	2c00      	cmp	r4, #0
 800c0e0:	d1f7      	bne.n	800c0d2 <_fwalk_reent+0xe>
 800c0e2:	4638      	mov	r0, r7
 800c0e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0e8:	89ab      	ldrh	r3, [r5, #12]
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d907      	bls.n	800c0fe <_fwalk_reent+0x3a>
 800c0ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	d003      	beq.n	800c0fe <_fwalk_reent+0x3a>
 800c0f6:	4629      	mov	r1, r5
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	47c0      	blx	r8
 800c0fc:	4307      	orrs	r7, r0
 800c0fe:	3568      	adds	r5, #104	; 0x68
 800c100:	e7e9      	b.n	800c0d6 <_fwalk_reent+0x12>

0800c102 <__retarget_lock_init_recursive>:
 800c102:	4770      	bx	lr

0800c104 <__retarget_lock_acquire_recursive>:
 800c104:	4770      	bx	lr

0800c106 <__retarget_lock_release_recursive>:
 800c106:	4770      	bx	lr

0800c108 <__swhatbuf_r>:
 800c108:	b570      	push	{r4, r5, r6, lr}
 800c10a:	460e      	mov	r6, r1
 800c10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c110:	2900      	cmp	r1, #0
 800c112:	b096      	sub	sp, #88	; 0x58
 800c114:	4614      	mov	r4, r2
 800c116:	461d      	mov	r5, r3
 800c118:	da08      	bge.n	800c12c <__swhatbuf_r+0x24>
 800c11a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c11e:	2200      	movs	r2, #0
 800c120:	602a      	str	r2, [r5, #0]
 800c122:	061a      	lsls	r2, r3, #24
 800c124:	d410      	bmi.n	800c148 <__swhatbuf_r+0x40>
 800c126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c12a:	e00e      	b.n	800c14a <__swhatbuf_r+0x42>
 800c12c:	466a      	mov	r2, sp
 800c12e:	f000 f907 	bl	800c340 <_fstat_r>
 800c132:	2800      	cmp	r0, #0
 800c134:	dbf1      	blt.n	800c11a <__swhatbuf_r+0x12>
 800c136:	9a01      	ldr	r2, [sp, #4]
 800c138:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c13c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c140:	425a      	negs	r2, r3
 800c142:	415a      	adcs	r2, r3
 800c144:	602a      	str	r2, [r5, #0]
 800c146:	e7ee      	b.n	800c126 <__swhatbuf_r+0x1e>
 800c148:	2340      	movs	r3, #64	; 0x40
 800c14a:	2000      	movs	r0, #0
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	b016      	add	sp, #88	; 0x58
 800c150:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c154 <__smakebuf_r>:
 800c154:	898b      	ldrh	r3, [r1, #12]
 800c156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c158:	079d      	lsls	r5, r3, #30
 800c15a:	4606      	mov	r6, r0
 800c15c:	460c      	mov	r4, r1
 800c15e:	d507      	bpl.n	800c170 <__smakebuf_r+0x1c>
 800c160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c164:	6023      	str	r3, [r4, #0]
 800c166:	6123      	str	r3, [r4, #16]
 800c168:	2301      	movs	r3, #1
 800c16a:	6163      	str	r3, [r4, #20]
 800c16c:	b002      	add	sp, #8
 800c16e:	bd70      	pop	{r4, r5, r6, pc}
 800c170:	ab01      	add	r3, sp, #4
 800c172:	466a      	mov	r2, sp
 800c174:	f7ff ffc8 	bl	800c108 <__swhatbuf_r>
 800c178:	9900      	ldr	r1, [sp, #0]
 800c17a:	4605      	mov	r5, r0
 800c17c:	4630      	mov	r0, r6
 800c17e:	f7ff f941 	bl	800b404 <_malloc_r>
 800c182:	b948      	cbnz	r0, 800c198 <__smakebuf_r+0x44>
 800c184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c188:	059a      	lsls	r2, r3, #22
 800c18a:	d4ef      	bmi.n	800c16c <__smakebuf_r+0x18>
 800c18c:	f023 0303 	bic.w	r3, r3, #3
 800c190:	f043 0302 	orr.w	r3, r3, #2
 800c194:	81a3      	strh	r3, [r4, #12]
 800c196:	e7e3      	b.n	800c160 <__smakebuf_r+0xc>
 800c198:	4b0d      	ldr	r3, [pc, #52]	; (800c1d0 <__smakebuf_r+0x7c>)
 800c19a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	6020      	str	r0, [r4, #0]
 800c1a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1a4:	81a3      	strh	r3, [r4, #12]
 800c1a6:	9b00      	ldr	r3, [sp, #0]
 800c1a8:	6163      	str	r3, [r4, #20]
 800c1aa:	9b01      	ldr	r3, [sp, #4]
 800c1ac:	6120      	str	r0, [r4, #16]
 800c1ae:	b15b      	cbz	r3, 800c1c8 <__smakebuf_r+0x74>
 800c1b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	f000 f8d5 	bl	800c364 <_isatty_r>
 800c1ba:	b128      	cbz	r0, 800c1c8 <__smakebuf_r+0x74>
 800c1bc:	89a3      	ldrh	r3, [r4, #12]
 800c1be:	f023 0303 	bic.w	r3, r3, #3
 800c1c2:	f043 0301 	orr.w	r3, r3, #1
 800c1c6:	81a3      	strh	r3, [r4, #12]
 800c1c8:	89a0      	ldrh	r0, [r4, #12]
 800c1ca:	4305      	orrs	r5, r0
 800c1cc:	81a5      	strh	r5, [r4, #12]
 800c1ce:	e7cd      	b.n	800c16c <__smakebuf_r+0x18>
 800c1d0:	0800bf61 	.word	0x0800bf61

0800c1d4 <__malloc_lock>:
 800c1d4:	4801      	ldr	r0, [pc, #4]	; (800c1dc <__malloc_lock+0x8>)
 800c1d6:	f7ff bf95 	b.w	800c104 <__retarget_lock_acquire_recursive>
 800c1da:	bf00      	nop
 800c1dc:	24000c5c 	.word	0x24000c5c

0800c1e0 <__malloc_unlock>:
 800c1e0:	4801      	ldr	r0, [pc, #4]	; (800c1e8 <__malloc_unlock+0x8>)
 800c1e2:	f7ff bf90 	b.w	800c106 <__retarget_lock_release_recursive>
 800c1e6:	bf00      	nop
 800c1e8:	24000c5c 	.word	0x24000c5c

0800c1ec <_raise_r>:
 800c1ec:	291f      	cmp	r1, #31
 800c1ee:	b538      	push	{r3, r4, r5, lr}
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	460d      	mov	r5, r1
 800c1f4:	d904      	bls.n	800c200 <_raise_r+0x14>
 800c1f6:	2316      	movs	r3, #22
 800c1f8:	6003      	str	r3, [r0, #0]
 800c1fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1fe:	bd38      	pop	{r3, r4, r5, pc}
 800c200:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c202:	b112      	cbz	r2, 800c20a <_raise_r+0x1e>
 800c204:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c208:	b94b      	cbnz	r3, 800c21e <_raise_r+0x32>
 800c20a:	4620      	mov	r0, r4
 800c20c:	f000 f830 	bl	800c270 <_getpid_r>
 800c210:	462a      	mov	r2, r5
 800c212:	4601      	mov	r1, r0
 800c214:	4620      	mov	r0, r4
 800c216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c21a:	f000 b817 	b.w	800c24c <_kill_r>
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d00a      	beq.n	800c238 <_raise_r+0x4c>
 800c222:	1c59      	adds	r1, r3, #1
 800c224:	d103      	bne.n	800c22e <_raise_r+0x42>
 800c226:	2316      	movs	r3, #22
 800c228:	6003      	str	r3, [r0, #0]
 800c22a:	2001      	movs	r0, #1
 800c22c:	e7e7      	b.n	800c1fe <_raise_r+0x12>
 800c22e:	2400      	movs	r4, #0
 800c230:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c234:	4628      	mov	r0, r5
 800c236:	4798      	blx	r3
 800c238:	2000      	movs	r0, #0
 800c23a:	e7e0      	b.n	800c1fe <_raise_r+0x12>

0800c23c <raise>:
 800c23c:	4b02      	ldr	r3, [pc, #8]	; (800c248 <raise+0xc>)
 800c23e:	4601      	mov	r1, r0
 800c240:	6818      	ldr	r0, [r3, #0]
 800c242:	f7ff bfd3 	b.w	800c1ec <_raise_r>
 800c246:	bf00      	nop
 800c248:	24000034 	.word	0x24000034

0800c24c <_kill_r>:
 800c24c:	b538      	push	{r3, r4, r5, lr}
 800c24e:	4d07      	ldr	r5, [pc, #28]	; (800c26c <_kill_r+0x20>)
 800c250:	2300      	movs	r3, #0
 800c252:	4604      	mov	r4, r0
 800c254:	4608      	mov	r0, r1
 800c256:	4611      	mov	r1, r2
 800c258:	602b      	str	r3, [r5, #0]
 800c25a:	f7f7 ff23 	bl	80040a4 <_kill>
 800c25e:	1c43      	adds	r3, r0, #1
 800c260:	d102      	bne.n	800c268 <_kill_r+0x1c>
 800c262:	682b      	ldr	r3, [r5, #0]
 800c264:	b103      	cbz	r3, 800c268 <_kill_r+0x1c>
 800c266:	6023      	str	r3, [r4, #0]
 800c268:	bd38      	pop	{r3, r4, r5, pc}
 800c26a:	bf00      	nop
 800c26c:	24000c60 	.word	0x24000c60

0800c270 <_getpid_r>:
 800c270:	f7f7 bf10 	b.w	8004094 <_getpid>

0800c274 <__sread>:
 800c274:	b510      	push	{r4, lr}
 800c276:	460c      	mov	r4, r1
 800c278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c27c:	f000 f894 	bl	800c3a8 <_read_r>
 800c280:	2800      	cmp	r0, #0
 800c282:	bfab      	itete	ge
 800c284:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c286:	89a3      	ldrhlt	r3, [r4, #12]
 800c288:	181b      	addge	r3, r3, r0
 800c28a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c28e:	bfac      	ite	ge
 800c290:	6563      	strge	r3, [r4, #84]	; 0x54
 800c292:	81a3      	strhlt	r3, [r4, #12]
 800c294:	bd10      	pop	{r4, pc}

0800c296 <__swrite>:
 800c296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c29a:	461f      	mov	r7, r3
 800c29c:	898b      	ldrh	r3, [r1, #12]
 800c29e:	05db      	lsls	r3, r3, #23
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	4616      	mov	r6, r2
 800c2a6:	d505      	bpl.n	800c2b4 <__swrite+0x1e>
 800c2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f000 f868 	bl	800c384 <_lseek_r>
 800c2b4:	89a3      	ldrh	r3, [r4, #12]
 800c2b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2be:	81a3      	strh	r3, [r4, #12]
 800c2c0:	4632      	mov	r2, r6
 800c2c2:	463b      	mov	r3, r7
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ca:	f000 b817 	b.w	800c2fc <_write_r>

0800c2ce <__sseek>:
 800c2ce:	b510      	push	{r4, lr}
 800c2d0:	460c      	mov	r4, r1
 800c2d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2d6:	f000 f855 	bl	800c384 <_lseek_r>
 800c2da:	1c43      	adds	r3, r0, #1
 800c2dc:	89a3      	ldrh	r3, [r4, #12]
 800c2de:	bf15      	itete	ne
 800c2e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2ea:	81a3      	strheq	r3, [r4, #12]
 800c2ec:	bf18      	it	ne
 800c2ee:	81a3      	strhne	r3, [r4, #12]
 800c2f0:	bd10      	pop	{r4, pc}

0800c2f2 <__sclose>:
 800c2f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2f6:	f000 b813 	b.w	800c320 <_close_r>
	...

0800c2fc <_write_r>:
 800c2fc:	b538      	push	{r3, r4, r5, lr}
 800c2fe:	4d07      	ldr	r5, [pc, #28]	; (800c31c <_write_r+0x20>)
 800c300:	4604      	mov	r4, r0
 800c302:	4608      	mov	r0, r1
 800c304:	4611      	mov	r1, r2
 800c306:	2200      	movs	r2, #0
 800c308:	602a      	str	r2, [r5, #0]
 800c30a:	461a      	mov	r2, r3
 800c30c:	f7f7 ff01 	bl	8004112 <_write>
 800c310:	1c43      	adds	r3, r0, #1
 800c312:	d102      	bne.n	800c31a <_write_r+0x1e>
 800c314:	682b      	ldr	r3, [r5, #0]
 800c316:	b103      	cbz	r3, 800c31a <_write_r+0x1e>
 800c318:	6023      	str	r3, [r4, #0]
 800c31a:	bd38      	pop	{r3, r4, r5, pc}
 800c31c:	24000c60 	.word	0x24000c60

0800c320 <_close_r>:
 800c320:	b538      	push	{r3, r4, r5, lr}
 800c322:	4d06      	ldr	r5, [pc, #24]	; (800c33c <_close_r+0x1c>)
 800c324:	2300      	movs	r3, #0
 800c326:	4604      	mov	r4, r0
 800c328:	4608      	mov	r0, r1
 800c32a:	602b      	str	r3, [r5, #0]
 800c32c:	f7f7 ff0d 	bl	800414a <_close>
 800c330:	1c43      	adds	r3, r0, #1
 800c332:	d102      	bne.n	800c33a <_close_r+0x1a>
 800c334:	682b      	ldr	r3, [r5, #0]
 800c336:	b103      	cbz	r3, 800c33a <_close_r+0x1a>
 800c338:	6023      	str	r3, [r4, #0]
 800c33a:	bd38      	pop	{r3, r4, r5, pc}
 800c33c:	24000c60 	.word	0x24000c60

0800c340 <_fstat_r>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	4d07      	ldr	r5, [pc, #28]	; (800c360 <_fstat_r+0x20>)
 800c344:	2300      	movs	r3, #0
 800c346:	4604      	mov	r4, r0
 800c348:	4608      	mov	r0, r1
 800c34a:	4611      	mov	r1, r2
 800c34c:	602b      	str	r3, [r5, #0]
 800c34e:	f7f7 ff08 	bl	8004162 <_fstat>
 800c352:	1c43      	adds	r3, r0, #1
 800c354:	d102      	bne.n	800c35c <_fstat_r+0x1c>
 800c356:	682b      	ldr	r3, [r5, #0]
 800c358:	b103      	cbz	r3, 800c35c <_fstat_r+0x1c>
 800c35a:	6023      	str	r3, [r4, #0]
 800c35c:	bd38      	pop	{r3, r4, r5, pc}
 800c35e:	bf00      	nop
 800c360:	24000c60 	.word	0x24000c60

0800c364 <_isatty_r>:
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	4d06      	ldr	r5, [pc, #24]	; (800c380 <_isatty_r+0x1c>)
 800c368:	2300      	movs	r3, #0
 800c36a:	4604      	mov	r4, r0
 800c36c:	4608      	mov	r0, r1
 800c36e:	602b      	str	r3, [r5, #0]
 800c370:	f7f7 ff07 	bl	8004182 <_isatty>
 800c374:	1c43      	adds	r3, r0, #1
 800c376:	d102      	bne.n	800c37e <_isatty_r+0x1a>
 800c378:	682b      	ldr	r3, [r5, #0]
 800c37a:	b103      	cbz	r3, 800c37e <_isatty_r+0x1a>
 800c37c:	6023      	str	r3, [r4, #0]
 800c37e:	bd38      	pop	{r3, r4, r5, pc}
 800c380:	24000c60 	.word	0x24000c60

0800c384 <_lseek_r>:
 800c384:	b538      	push	{r3, r4, r5, lr}
 800c386:	4d07      	ldr	r5, [pc, #28]	; (800c3a4 <_lseek_r+0x20>)
 800c388:	4604      	mov	r4, r0
 800c38a:	4608      	mov	r0, r1
 800c38c:	4611      	mov	r1, r2
 800c38e:	2200      	movs	r2, #0
 800c390:	602a      	str	r2, [r5, #0]
 800c392:	461a      	mov	r2, r3
 800c394:	f7f7 ff00 	bl	8004198 <_lseek>
 800c398:	1c43      	adds	r3, r0, #1
 800c39a:	d102      	bne.n	800c3a2 <_lseek_r+0x1e>
 800c39c:	682b      	ldr	r3, [r5, #0]
 800c39e:	b103      	cbz	r3, 800c3a2 <_lseek_r+0x1e>
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	bd38      	pop	{r3, r4, r5, pc}
 800c3a4:	24000c60 	.word	0x24000c60

0800c3a8 <_read_r>:
 800c3a8:	b538      	push	{r3, r4, r5, lr}
 800c3aa:	4d07      	ldr	r5, [pc, #28]	; (800c3c8 <_read_r+0x20>)
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	4608      	mov	r0, r1
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	602a      	str	r2, [r5, #0]
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	f7f7 fe8e 	bl	80040d8 <_read>
 800c3bc:	1c43      	adds	r3, r0, #1
 800c3be:	d102      	bne.n	800c3c6 <_read_r+0x1e>
 800c3c0:	682b      	ldr	r3, [r5, #0]
 800c3c2:	b103      	cbz	r3, 800c3c6 <_read_r+0x1e>
 800c3c4:	6023      	str	r3, [r4, #0]
 800c3c6:	bd38      	pop	{r3, r4, r5, pc}
 800c3c8:	24000c60 	.word	0x24000c60

0800c3cc <_init>:
 800c3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ce:	bf00      	nop
 800c3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3d2:	bc08      	pop	{r3}
 800c3d4:	469e      	mov	lr, r3
 800c3d6:	4770      	bx	lr

0800c3d8 <_fini>:
 800c3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3da:	bf00      	nop
 800c3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3de:	bc08      	pop	{r3}
 800c3e0:	469e      	mov	lr, r3
 800c3e2:	4770      	bx	lr
